{
  "env": {
    "tools": {
      "os_checker": {
        "start": 1724335915631,
        "finish": 1724335923071,
        "duration_ms": 7440,
        "git_time": "2024-08-22 21:46:44 +0800",
        "git_sha": "99ee9d23add2b2af73663b83db156d9ba7340e4a"
      }
    },
    "kinds": {
      "order": [
        "Clippy(Error)",
        "Clippy(Warn)",
        "Unformatted"
      ],
      "mapping": {
        "clippy": [
          "Clippy(Error)",
          "Clippy(Warn)"
        ],
        "fmt": [
          "Unformatted"
        ]
      }
    },
    "repos": [
      {
        "user": "repos",
        "repo": "os-checker-test-suite"
      },
      {
        "user": "repos",
        "repo": "e1000-driver"
      }
    ],
    "packages": [
      {
        "name": "os-checker-test-suite",
        "repo": {
          "repo_idx": 0,
          "user": "repos",
          "repo": "os-checker-test-suite"
        }
      },
      {
        "name": "e1000-driver",
        "repo": {
          "repo_idx": 1,
          "user": "repos",
          "repo": "e1000-driver"
        }
      },
      {
        "name": "e1000-driver-test",
        "repo": {
          "repo_idx": 1,
          "user": "repos",
          "repo": "e1000-driver"
        }
      }
    ]
  },
  "cmd": [
    {
      "package_idx": 0,
      "tool": "Fmt",
      "cmd": "cargo fmt -p os-checker-test-suite -- --emit=json",
      "count": 4,
      "duration_ms": 215,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "Clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 2,
      "duration_ms": 294,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "Fmt",
      "cmd": "cargo fmt -p e1000-driver -- --emit=json",
      "count": 25,
      "duration_ms": 203,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "Fmt",
      "cmd": "cargo fmt -p e1000-driver -- --emit=json",
      "count": 25,
      "duration_ms": 315,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "Clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 14,
      "duration_ms": 543,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "Clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 14,
      "duration_ms": 506,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "Fmt",
      "cmd": "cargo fmt -p e1000-driver-test -- --emit=json",
      "count": 18,
      "duration_ms": 187,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "Fmt",
      "cmd": "cargo fmt -p e1000-driver-test -- --emit=json",
      "count": 18,
      "duration_ms": 174,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "Clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 22,
      "duration_ms": 568,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "Clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 13,
      "duration_ms": 1516,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "features": [],
      "flags": []
    }
  ],
  "data": [
    {
      "cmd_idx": 0,
      "file": "examples/need-clippy-fix.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/os-checker-test-suite/examples/need-clippy-fix.rs (original lines from 2 to 2)\n-    _ = (123); \n+    _ = (123);\n"
    },
    {
      "cmd_idx": 0,
      "file": "examples/need-fmt.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/os-checker-test-suite/examples/need-fmt.rs (original lines from 1 to 1)\n-fn main() {    println!(\"from example\");\n+fn main() {\n+    println!(\"from example\");\n"
    },
    {
      "cmd_idx": 0,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/os-checker-test-suite/src/main.rs (original lines from 4 to 5)\n- \n-println!(\"Hello, world!\");\n+    println!(\"Hello, world!\");\n"
    },
    {
      "cmd_idx": 0,
      "file": "tests/need-fmt.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/os-checker-test-suite/tests/need-fmt.rs (original lines from 1 to 2)\n-fn main () {\n-  }\n+fn main() {}\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/main.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unused variable: `a`\n --> src/main.rs:2:9\n  |\n2 |     let a = 3.14;\n  |         ^ help: if this is intentional, prefix it with an underscore: `_a`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/main.rs",
      "kind": "Clippy(Error)",
      "raw": "error: approximate value of `f{32, 64}::consts::PI` found\n --> src/main.rs:2:13\n  |\n2 |     let a = 3.14;\n  |             ^^^^\n  |\n  = help: consider using the constant directly\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\n  = note: `#[deny(clippy::approx_constant)]` on by default\n\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/boot/lang_items.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/lang_items.rs (original lines from 4 to 7)\n-fn panic(info: &PanicInfo) -> !{\n-\tprintln!(\"{}\", info);\n-\tcrate::boot::sbi::shutdown();\n-\tunreachable!()\n+fn panic(info: &PanicInfo) -> ! {\n+    println!(\"{}\", info);\n+    crate::boot::sbi::shutdown();\n+    unreachable!()\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/boot/lang_items.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/lang_items.rs (original lines from 11 to 12)\n-pub extern \"C\" fn abort() -> !{\n-\tpanic!(\"abort!\");\n+pub extern \"C\" fn abort() -> ! {\n+    panic!(\"abort!\");\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/boot/lang_items.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/lang_items.rs (original lines from 14 to 14)\n-\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/boot/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/mod.rs (original lines from 17 to 17)\n-\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 3 to 4)\n-pub fn console_putchar(ch: usize){\n-\tsbi_call(SBI_CONSOLE_PUTCHAR, ch, 0, 0);\n+pub fn console_putchar(ch: usize) {\n+    sbi_call(SBI_CONSOLE_PUTCHAR, ch, 0, 0);\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 8 to 8)\n-\treturn sbi_call(SBI_CONSOLE_GETCHAR, 0, 0, 0);\n+    return sbi_call(SBI_CONSOLE_GETCHAR, 0, 0, 0);\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 11 to 23)\n-pub fn console_putchar_u8(ch: u8){\n-\tlet ret: isize;\n-\t//let arg0: char = ch as char;\n-\tlet arg0: u8 = ch;\n-\tlet arg1: usize = 0;\n-\tlet arg2: usize = 0;\n-\tlet which: usize = 1; //SBI_ECALL_CONSOLE_PUTCHAR\n-\tunsafe{\n-\t\tasm!(\"ecall\",\n-\t\t     lateout(\"x10\") ret,\n-\t\t     in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n-             );\n-\t}\n+pub fn console_putchar_u8(ch: u8) {\n+    let ret: isize;\n+    //let arg0: char = ch as char;\n+    let arg0: u8 = ch;\n+    let arg1: usize = 0;\n+    let arg2: usize = 0;\n+    let which: usize = 1; //SBI_ECALL_CONSOLE_PUTCHAR\n+    unsafe {\n+        asm!(\"ecall\",\n+        lateout(\"x10\") ret,\n+        in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n+        );\n+    }\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 26 to 28)\n-fn sbi_call(which: usize, arg0: usize, arg1: usize, arg2: usize) -> isize{\n-\tlet ret: isize;\n-\tunsafe{\n+fn sbi_call(which: usize, arg0: usize, arg1: usize, arg2: usize) -> isize {\n+    let ret: isize;\n+    unsafe {\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 30 to 34)\n-             lateout(\"x10\") ret,\n-             in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n-            );\n-\t}\n-\tret\n+         lateout(\"x10\") ret,\n+         in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n+        );\n+    }\n+    ret\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 37 to 39)\n-pub fn set_timer(stime_value: u64){\n-\t#[cfg(target_pointer_width = \"32\")]\n-\tsbi_call(SBI_SET_TIMER, stime_value as usize, (stime_value >> 32), 0);\n+pub fn set_timer(stime_value: u64) {\n+    #[cfg(target_pointer_width = \"32\")]\n+    sbi_call(SBI_SET_TIMER, stime_value as usize, (stime_value >> 32), 0);\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 41 to 42)\n-\t#[cfg(target_pointer_width = \"64\")]\n-\tsbi_call(SBI_SET_TIMER, stime_value as usize, 0, 0);\n+    #[cfg(target_pointer_width = \"64\")]\n+    sbi_call(SBI_SET_TIMER, stime_value as usize, 0, 0);\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 44 to 45)\n-pub fn clear_ipi(){\n-\tsbi_call(SBI_CLEAR_IPI, 0, 0, 0);\n+pub fn clear_ipi() {\n+    sbi_call(SBI_CLEAR_IPI, 0, 0, 0);\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 48 to 49)\n-pub fn send_ipi(sipi_value: usize){\n-\tsbi_call(SBI_SEND_IPI, sipi_value, 0, 0);\n+pub fn send_ipi(sipi_value: usize) {\n+    sbi_call(SBI_SEND_IPI, sipi_value, 0, 0);\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 52 to 53)\n-pub fn set_s_insn(entry: usize){\n-\tsbi_call(SBI_SET_SINSN, entry, 0, 0);\n+pub fn set_s_insn(entry: usize) {\n+    sbi_call(SBI_SET_SINSN, entry, 0, 0);\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 56 to 57)\n-pub fn shutdown(){\n-\tsbi_call(SBI_SHUTDOWN, 0, 0, 0);\n+pub fn shutdown() {\n+    sbi_call(SBI_SHUTDOWN, 0, 0, 0);\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/e1000.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/e1000.rs (original lines from 126 to 126)\n+\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/pci_impl.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/pci_impl.rs (original lines from 2 to 2)\n-use pci::{PortOps, CSpaceAccessMethod};\n+use pci::{CSpaceAccessMethod, PortOps};\n"
    },
    {
      "cmd_idx": 2,
      "file": "examples/src/pci_impl.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/pci_impl.rs (original lines from 9 to 9)\n-pub const PCI_COMMAND_INTX_DISABLE:u16 = 0x400;\n+pub const PCI_COMMAND_INTX_DISABLE: u16 = 0x400;\n"
    },
    {
      "cmd_idx": 2,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/src/lib.rs (original lines from 9 to 9)\n-mod utils;\n"
    },
    {
      "cmd_idx": 2,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/src/lib.rs (original lines from 12 to 12)\n+mod utils;\n"
    },
    {
      "cmd_idx": 2,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/src/lib.rs (original lines from 17 to 17)\n-\n"
    },
    {
      "cmd_idx": 2,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/src/lib.rs (original lines from 23 to 25)\n-    fn it_works() {\n-\n-    }\n+    fn it_works() {}\n"
    },
    {
      "cmd_idx": 2,
      "file": "src/pci.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/src/pci.rs (original lines from 3 to 3)\n-use volatile::Volatile;\n"
    },
    {
      "cmd_idx": 2,
      "file": "src/pci.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/src/pci.rs (original lines from 5 to 5)\n+use volatile::Volatile;\n"
    },
    {
      "cmd_idx": 2,
      "file": "src/pci.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/src/pci.rs (original lines from 22 to 22)\n-        let deve_id = unsafe{ (*pci_base).read() };\n+        let deve_id = unsafe { (*pci_base).read() };\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/boot/lang_items.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/lang_items.rs (original lines from 4 to 7)\n-fn panic(info: &PanicInfo) -> !{\n-\tprintln!(\"{}\", info);\n-\tcrate::boot::sbi::shutdown();\n-\tunreachable!()\n+fn panic(info: &PanicInfo) -> ! {\n+    println!(\"{}\", info);\n+    crate::boot::sbi::shutdown();\n+    unreachable!()\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/boot/lang_items.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/lang_items.rs (original lines from 11 to 12)\n-pub extern \"C\" fn abort() -> !{\n-\tpanic!(\"abort!\");\n+pub extern \"C\" fn abort() -> ! {\n+    panic!(\"abort!\");\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/boot/lang_items.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/lang_items.rs (original lines from 14 to 14)\n-\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/boot/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/mod.rs (original lines from 17 to 17)\n-\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 3 to 4)\n-pub fn console_putchar(ch: usize){\n-\tsbi_call(SBI_CONSOLE_PUTCHAR, ch, 0, 0);\n+pub fn console_putchar(ch: usize) {\n+    sbi_call(SBI_CONSOLE_PUTCHAR, ch, 0, 0);\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 8 to 8)\n-\treturn sbi_call(SBI_CONSOLE_GETCHAR, 0, 0, 0);\n+    return sbi_call(SBI_CONSOLE_GETCHAR, 0, 0, 0);\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 11 to 23)\n-pub fn console_putchar_u8(ch: u8){\n-\tlet ret: isize;\n-\t//let arg0: char = ch as char;\n-\tlet arg0: u8 = ch;\n-\tlet arg1: usize = 0;\n-\tlet arg2: usize = 0;\n-\tlet which: usize = 1; //SBI_ECALL_CONSOLE_PUTCHAR\n-\tunsafe{\n-\t\tasm!(\"ecall\",\n-\t\t     lateout(\"x10\") ret,\n-\t\t     in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n-             );\n-\t}\n+pub fn console_putchar_u8(ch: u8) {\n+    let ret: isize;\n+    //let arg0: char = ch as char;\n+    let arg0: u8 = ch;\n+    let arg1: usize = 0;\n+    let arg2: usize = 0;\n+    let which: usize = 1; //SBI_ECALL_CONSOLE_PUTCHAR\n+    unsafe {\n+        asm!(\"ecall\",\n+        lateout(\"x10\") ret,\n+        in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n+        );\n+    }\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 26 to 28)\n-fn sbi_call(which: usize, arg0: usize, arg1: usize, arg2: usize) -> isize{\n-\tlet ret: isize;\n-\tunsafe{\n+fn sbi_call(which: usize, arg0: usize, arg1: usize, arg2: usize) -> isize {\n+    let ret: isize;\n+    unsafe {\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 30 to 34)\n-             lateout(\"x10\") ret,\n-             in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n-            );\n-\t}\n-\tret\n+         lateout(\"x10\") ret,\n+         in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n+        );\n+    }\n+    ret\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 37 to 39)\n-pub fn set_timer(stime_value: u64){\n-\t#[cfg(target_pointer_width = \"32\")]\n-\tsbi_call(SBI_SET_TIMER, stime_value as usize, (stime_value >> 32), 0);\n+pub fn set_timer(stime_value: u64) {\n+    #[cfg(target_pointer_width = \"32\")]\n+    sbi_call(SBI_SET_TIMER, stime_value as usize, (stime_value >> 32), 0);\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 41 to 42)\n-\t#[cfg(target_pointer_width = \"64\")]\n-\tsbi_call(SBI_SET_TIMER, stime_value as usize, 0, 0);\n+    #[cfg(target_pointer_width = \"64\")]\n+    sbi_call(SBI_SET_TIMER, stime_value as usize, 0, 0);\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 44 to 45)\n-pub fn clear_ipi(){\n-\tsbi_call(SBI_CLEAR_IPI, 0, 0, 0);\n+pub fn clear_ipi() {\n+    sbi_call(SBI_CLEAR_IPI, 0, 0, 0);\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 48 to 49)\n-pub fn send_ipi(sipi_value: usize){\n-\tsbi_call(SBI_SEND_IPI, sipi_value, 0, 0);\n+pub fn send_ipi(sipi_value: usize) {\n+    sbi_call(SBI_SEND_IPI, sipi_value, 0, 0);\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 52 to 53)\n-pub fn set_s_insn(entry: usize){\n-\tsbi_call(SBI_SET_SINSN, entry, 0, 0);\n+pub fn set_s_insn(entry: usize) {\n+    sbi_call(SBI_SET_SINSN, entry, 0, 0);\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 56 to 57)\n-pub fn shutdown(){\n-\tsbi_call(SBI_SHUTDOWN, 0, 0, 0);\n+pub fn shutdown() {\n+    sbi_call(SBI_SHUTDOWN, 0, 0, 0);\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/e1000.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/e1000.rs (original lines from 126 to 126)\n+\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/pci_impl.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/pci_impl.rs (original lines from 2 to 2)\n-use pci::{PortOps, CSpaceAccessMethod};\n+use pci::{CSpaceAccessMethod, PortOps};\n"
    },
    {
      "cmd_idx": 3,
      "file": "examples/src/pci_impl.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/pci_impl.rs (original lines from 9 to 9)\n-pub const PCI_COMMAND_INTX_DISABLE:u16 = 0x400;\n+pub const PCI_COMMAND_INTX_DISABLE: u16 = 0x400;\n"
    },
    {
      "cmd_idx": 3,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/src/lib.rs (original lines from 9 to 9)\n-mod utils;\n"
    },
    {
      "cmd_idx": 3,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/src/lib.rs (original lines from 12 to 12)\n+mod utils;\n"
    },
    {
      "cmd_idx": 3,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/src/lib.rs (original lines from 17 to 17)\n-\n"
    },
    {
      "cmd_idx": 3,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/src/lib.rs (original lines from 23 to 25)\n-    fn it_works() {\n-\n-    }\n+    fn it_works() {}\n"
    },
    {
      "cmd_idx": 3,
      "file": "src/pci.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/src/pci.rs (original lines from 3 to 3)\n-use volatile::Volatile;\n"
    },
    {
      "cmd_idx": 3,
      "file": "src/pci.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/src/pci.rs (original lines from 5 to 5)\n+use volatile::Volatile;\n"
    },
    {
      "cmd_idx": 3,
      "file": "src/pci.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/src/pci.rs (original lines from 22 to 22)\n-        let deve_id = unsafe{ (*pci_base).read() };\n+        let deve_id = unsafe { (*pci_base).read() };\n"
    },
    {
      "cmd_idx": 4,
      "file": "src/e1000/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: module has the same name as its containing module\n --> src/e1000/mod.rs:1:1\n  |\n1 | mod e1000;\n  | ^^^^^^^^^^\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\n  = note: `#[warn(clippy::module_inception)]` on by default\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: the loop variable `i` is only used to index `tx_ring`\n   --> src/e1000/e1000.rs:117:18\n    |\n117 |         for i in 0..TX_RING_SIZE {\n    |                  ^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\n    = note: `#[warn(clippy::needless_range_loop)]` on by default\nhelp: consider using an iterator\n    |\n117 |         for <item> in tx_ring.iter_mut().take(TX_RING_SIZE) {\n    |             ~~~~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: the loop variable `i` is only used to index `rx_ring`\n   --> src/e1000/e1000.rs:132:18\n    |\n132 |         for i in 0..RX_RING_SIZE {\n    |                  ^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\nhelp: consider using an iterator\n    |\n132 |         for <item> in rx_ring.iter_mut().take(RX_RING_SIZE) {\n    |             ~~~~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: manual slice size calculation\n   --> src/e1000/e1000.rs:199:12\n    |\n199 |         if (self.tx_ring.len() * size_of::<TxDesc>()) % 128 != 0 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `core::mem::size_of_val(self.tx_ring)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_slice_size_calculation\n    = note: `#[warn(clippy::manual_slice_size_calculation)]` on by default\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: manual slice size calculation\n   --> src/e1000/e1000.rs:215:38\n    |\n215 |         self.regs[E1000_TDLEN].write((self.tx_ring.len() * size_of::<TxDesc>()) as u32);\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `core::mem::size_of_val(self.tx_ring)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_slice_size_calculation\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: manual slice size calculation\n   --> src/e1000/e1000.rs:222:12\n    |\n222 |         if (self.rx_ring.len() * size_of::<RxDesc>()) % 128 != 0 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `core::mem::size_of_val(self.rx_ring)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_slice_size_calculation\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: manual slice size calculation\n   --> src/e1000/e1000.rs:245:38\n    |\n245 |         self.regs[E1000_RDLEN].write((self.rx_ring.len() * size_of::<RxDesc>()) as u32);\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `core::mem::size_of_val(self.rx_ring)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_slice_size_calculation\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: length comparison to zero\n   --> src/e1000/e1000.rs:359:12\n    |\n359 |         if recv_packets.len() > 0 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!recv_packets.is_empty()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n    = note: `#[warn(clippy::len_zero)]` on by default\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "src/e1000/e1000_const.rs",
      "kind": "Clippy(Error)",
      "raw": "error: this operation will always return zero. This is likely not the intended outcome\n --> src/e1000/e1000_const.rs:5:37\n  |\n5 | pub(crate) const E1000_CTL: usize = 0x00000 / 4; /* Device Control Register - RW */\n  |                                     ^^^^^^^^^^^\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#erasing_op\n  = note: `#[deny(clippy::erasing_op)]` on by default\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "src/pci.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this operation has no effect\n  --> src/pci.rs:45:24\n   |\n45 |             pci_config[4 + 0].write(E1000_REGS);\n   |                        ^^^^^ help: consider reducing it to: `4`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#identity_op\n   = note: `#[warn(clippy::identity_op)]` on by default\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: constant `alloc_tx_ring_pages` should have an upper case name\n  --> src/e1000/e1000.rs:14:7\n   |\n14 | const alloc_tx_ring_pages: usize =\n   |       ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `ALLOC_TX_RING_PAGES`\n   |\n   = note: `#[warn(non_upper_case_globals)]` on by default\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: constant `alloc_rx_ring_pages` should have an upper case name\n  --> src/e1000/e1000.rs:16:7\n   |\n16 | const alloc_rx_ring_pages: usize =\n   |       ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `ALLOC_RX_RING_PAGES`\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: constant `alloc_tx_buffer_pages` should have an upper case name\n  --> src/e1000/e1000.rs:19:7\n   |\n19 | const alloc_tx_buffer_pages: usize = ((TX_RING_SIZE * MBUF_SIZE) + (PAGE_SIZE - 1)) / PAGE_SIZE;\n   |       ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `ALLOC_TX_BUFFER_PAGES`\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: constant `alloc_rx_buffer_pages` should have an upper case name\n  --> src/e1000/e1000.rs:20:7\n   |\n20 | const alloc_rx_buffer_pages: usize = ((RX_RING_SIZE * MBUF_SIZE) + (PAGE_SIZE - 1)) / PAGE_SIZE;\n   |       ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `ALLOC_RX_BUFFER_PAGES`\n\n"
    },
    {
      "cmd_idx": 5,
      "file": "src/e1000/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: module has the same name as its containing module\n --> src/e1000/mod.rs:1:1\n  |\n1 | mod e1000;\n  | ^^^^^^^^^^\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\n  = note: `#[warn(clippy::module_inception)]` on by default\n\n"
    },
    {
      "cmd_idx": 5,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: the loop variable `i` is only used to index `tx_ring`\n   --> src/e1000/e1000.rs:117:18\n    |\n117 |         for i in 0..TX_RING_SIZE {\n    |                  ^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\n    = note: `#[warn(clippy::needless_range_loop)]` on by default\nhelp: consider using an iterator\n    |\n117 |         for <item> in tx_ring.iter_mut().take(TX_RING_SIZE) {\n    |             ~~~~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n"
    },
    {
      "cmd_idx": 5,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: the loop variable `i` is only used to index `rx_ring`\n   --> src/e1000/e1000.rs:132:18\n    |\n132 |         for i in 0..RX_RING_SIZE {\n    |                  ^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\nhelp: consider using an iterator\n    |\n132 |         for <item> in rx_ring.iter_mut().take(RX_RING_SIZE) {\n    |             ~~~~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n"
    },
    {
      "cmd_idx": 5,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: manual slice size calculation\n   --> src/e1000/e1000.rs:199:12\n    |\n199 |         if (self.tx_ring.len() * size_of::<TxDesc>()) % 128 != 0 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `core::mem::size_of_val(self.tx_ring)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_slice_size_calculation\n    = note: `#[warn(clippy::manual_slice_size_calculation)]` on by default\n\n"
    },
    {
      "cmd_idx": 5,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: manual slice size calculation\n   --> src/e1000/e1000.rs:215:38\n    |\n215 |         self.regs[E1000_TDLEN].write((self.tx_ring.len() * size_of::<TxDesc>()) as u32);\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `core::mem::size_of_val(self.tx_ring)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_slice_size_calculation\n\n"
    },
    {
      "cmd_idx": 5,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: manual slice size calculation\n   --> src/e1000/e1000.rs:222:12\n    |\n222 |         if (self.rx_ring.len() * size_of::<RxDesc>()) % 128 != 0 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `core::mem::size_of_val(self.rx_ring)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_slice_size_calculation\n\n"
    },
    {
      "cmd_idx": 5,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: manual slice size calculation\n   --> src/e1000/e1000.rs:245:38\n    |\n245 |         self.regs[E1000_RDLEN].write((self.rx_ring.len() * size_of::<RxDesc>()) as u32);\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `core::mem::size_of_val(self.rx_ring)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_slice_size_calculation\n\n"
    },
    {
      "cmd_idx": 5,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: length comparison to zero\n   --> src/e1000/e1000.rs:359:12\n    |\n359 |         if recv_packets.len() > 0 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!recv_packets.is_empty()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n    = note: `#[warn(clippy::len_zero)]` on by default\n\n"
    },
    {
      "cmd_idx": 5,
      "file": "src/e1000/e1000_const.rs",
      "kind": "Clippy(Error)",
      "raw": "error: this operation will always return zero. This is likely not the intended outcome\n --> src/e1000/e1000_const.rs:5:37\n  |\n5 | pub(crate) const E1000_CTL: usize = 0x00000 / 4; /* Device Control Register - RW */\n  |                                     ^^^^^^^^^^^\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#erasing_op\n  = note: `#[deny(clippy::erasing_op)]` on by default\n\n"
    },
    {
      "cmd_idx": 5,
      "file": "src/pci.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this operation has no effect\n  --> src/pci.rs:45:24\n   |\n45 |             pci_config[4 + 0].write(E1000_REGS);\n   |                        ^^^^^ help: consider reducing it to: `4`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#identity_op\n   = note: `#[warn(clippy::identity_op)]` on by default\n\n"
    },
    {
      "cmd_idx": 5,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: constant `alloc_tx_ring_pages` should have an upper case name\n  --> src/e1000/e1000.rs:14:7\n   |\n14 | const alloc_tx_ring_pages: usize =\n   |       ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `ALLOC_TX_RING_PAGES`\n   |\n   = note: `#[warn(non_upper_case_globals)]` on by default\n\n"
    },
    {
      "cmd_idx": 5,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: constant `alloc_rx_ring_pages` should have an upper case name\n  --> src/e1000/e1000.rs:16:7\n   |\n16 | const alloc_rx_ring_pages: usize =\n   |       ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `ALLOC_RX_RING_PAGES`\n\n"
    },
    {
      "cmd_idx": 5,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: constant `alloc_tx_buffer_pages` should have an upper case name\n  --> src/e1000/e1000.rs:19:7\n   |\n19 | const alloc_tx_buffer_pages: usize = ((TX_RING_SIZE * MBUF_SIZE) + (PAGE_SIZE - 1)) / PAGE_SIZE;\n   |       ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `ALLOC_TX_BUFFER_PAGES`\n\n"
    },
    {
      "cmd_idx": 5,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: constant `alloc_rx_buffer_pages` should have an upper case name\n  --> src/e1000/e1000.rs:20:7\n   |\n20 | const alloc_rx_buffer_pages: usize = ((RX_RING_SIZE * MBUF_SIZE) + (PAGE_SIZE - 1)) / PAGE_SIZE;\n   |       ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `ALLOC_RX_BUFFER_PAGES`\n\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/boot/lang_items.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/lang_items.rs (original lines from 4 to 7)\n-fn panic(info: &PanicInfo) -> !{\n-\tprintln!(\"{}\", info);\n-\tcrate::boot::sbi::shutdown();\n-\tunreachable!()\n+fn panic(info: &PanicInfo) -> ! {\n+    println!(\"{}\", info);\n+    crate::boot::sbi::shutdown();\n+    unreachable!()\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/boot/lang_items.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/lang_items.rs (original lines from 11 to 12)\n-pub extern \"C\" fn abort() -> !{\n-\tpanic!(\"abort!\");\n+pub extern \"C\" fn abort() -> ! {\n+    panic!(\"abort!\");\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/boot/lang_items.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/lang_items.rs (original lines from 14 to 14)\n-\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/boot/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/mod.rs (original lines from 17 to 17)\n-\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 3 to 4)\n-pub fn console_putchar(ch: usize){\n-\tsbi_call(SBI_CONSOLE_PUTCHAR, ch, 0, 0);\n+pub fn console_putchar(ch: usize) {\n+    sbi_call(SBI_CONSOLE_PUTCHAR, ch, 0, 0);\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 8 to 8)\n-\treturn sbi_call(SBI_CONSOLE_GETCHAR, 0, 0, 0);\n+    return sbi_call(SBI_CONSOLE_GETCHAR, 0, 0, 0);\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 11 to 23)\n-pub fn console_putchar_u8(ch: u8){\n-\tlet ret: isize;\n-\t//let arg0: char = ch as char;\n-\tlet arg0: u8 = ch;\n-\tlet arg1: usize = 0;\n-\tlet arg2: usize = 0;\n-\tlet which: usize = 1; //SBI_ECALL_CONSOLE_PUTCHAR\n-\tunsafe{\n-\t\tasm!(\"ecall\",\n-\t\t     lateout(\"x10\") ret,\n-\t\t     in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n-             );\n-\t}\n+pub fn console_putchar_u8(ch: u8) {\n+    let ret: isize;\n+    //let arg0: char = ch as char;\n+    let arg0: u8 = ch;\n+    let arg1: usize = 0;\n+    let arg2: usize = 0;\n+    let which: usize = 1; //SBI_ECALL_CONSOLE_PUTCHAR\n+    unsafe {\n+        asm!(\"ecall\",\n+        lateout(\"x10\") ret,\n+        in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n+        );\n+    }\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 26 to 28)\n-fn sbi_call(which: usize, arg0: usize, arg1: usize, arg2: usize) -> isize{\n-\tlet ret: isize;\n-\tunsafe{\n+fn sbi_call(which: usize, arg0: usize, arg1: usize, arg2: usize) -> isize {\n+    let ret: isize;\n+    unsafe {\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 30 to 34)\n-             lateout(\"x10\") ret,\n-             in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n-            );\n-\t}\n-\tret\n+         lateout(\"x10\") ret,\n+         in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n+        );\n+    }\n+    ret\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 37 to 39)\n-pub fn set_timer(stime_value: u64){\n-\t#[cfg(target_pointer_width = \"32\")]\n-\tsbi_call(SBI_SET_TIMER, stime_value as usize, (stime_value >> 32), 0);\n+pub fn set_timer(stime_value: u64) {\n+    #[cfg(target_pointer_width = \"32\")]\n+    sbi_call(SBI_SET_TIMER, stime_value as usize, (stime_value >> 32), 0);\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 41 to 42)\n-\t#[cfg(target_pointer_width = \"64\")]\n-\tsbi_call(SBI_SET_TIMER, stime_value as usize, 0, 0);\n+    #[cfg(target_pointer_width = \"64\")]\n+    sbi_call(SBI_SET_TIMER, stime_value as usize, 0, 0);\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 44 to 45)\n-pub fn clear_ipi(){\n-\tsbi_call(SBI_CLEAR_IPI, 0, 0, 0);\n+pub fn clear_ipi() {\n+    sbi_call(SBI_CLEAR_IPI, 0, 0, 0);\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 48 to 49)\n-pub fn send_ipi(sipi_value: usize){\n-\tsbi_call(SBI_SEND_IPI, sipi_value, 0, 0);\n+pub fn send_ipi(sipi_value: usize) {\n+    sbi_call(SBI_SEND_IPI, sipi_value, 0, 0);\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 52 to 53)\n-pub fn set_s_insn(entry: usize){\n-\tsbi_call(SBI_SET_SINSN, entry, 0, 0);\n+pub fn set_s_insn(entry: usize) {\n+    sbi_call(SBI_SET_SINSN, entry, 0, 0);\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 56 to 57)\n-pub fn shutdown(){\n-\tsbi_call(SBI_SHUTDOWN, 0, 0, 0);\n+pub fn shutdown() {\n+    sbi_call(SBI_SHUTDOWN, 0, 0, 0);\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/e1000.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/e1000.rs (original lines from 126 to 126)\n+\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/pci_impl.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/pci_impl.rs (original lines from 2 to 2)\n-use pci::{PortOps, CSpaceAccessMethod};\n+use pci::{CSpaceAccessMethod, PortOps};\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/pci_impl.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/pci_impl.rs (original lines from 9 to 9)\n-pub const PCI_COMMAND_INTX_DISABLE:u16 = 0x400;\n+pub const PCI_COMMAND_INTX_DISABLE: u16 = 0x400;\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/boot/lang_items.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/lang_items.rs (original lines from 4 to 7)\n-fn panic(info: &PanicInfo) -> !{\n-\tprintln!(\"{}\", info);\n-\tcrate::boot::sbi::shutdown();\n-\tunreachable!()\n+fn panic(info: &PanicInfo) -> ! {\n+    println!(\"{}\", info);\n+    crate::boot::sbi::shutdown();\n+    unreachable!()\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/boot/lang_items.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/lang_items.rs (original lines from 11 to 12)\n-pub extern \"C\" fn abort() -> !{\n-\tpanic!(\"abort!\");\n+pub extern \"C\" fn abort() -> ! {\n+    panic!(\"abort!\");\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/boot/lang_items.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/lang_items.rs (original lines from 14 to 14)\n-\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/boot/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/mod.rs (original lines from 17 to 17)\n-\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 3 to 4)\n-pub fn console_putchar(ch: usize){\n-\tsbi_call(SBI_CONSOLE_PUTCHAR, ch, 0, 0);\n+pub fn console_putchar(ch: usize) {\n+    sbi_call(SBI_CONSOLE_PUTCHAR, ch, 0, 0);\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 8 to 8)\n-\treturn sbi_call(SBI_CONSOLE_GETCHAR, 0, 0, 0);\n+    return sbi_call(SBI_CONSOLE_GETCHAR, 0, 0, 0);\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 11 to 23)\n-pub fn console_putchar_u8(ch: u8){\n-\tlet ret: isize;\n-\t//let arg0: char = ch as char;\n-\tlet arg0: u8 = ch;\n-\tlet arg1: usize = 0;\n-\tlet arg2: usize = 0;\n-\tlet which: usize = 1; //SBI_ECALL_CONSOLE_PUTCHAR\n-\tunsafe{\n-\t\tasm!(\"ecall\",\n-\t\t     lateout(\"x10\") ret,\n-\t\t     in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n-             );\n-\t}\n+pub fn console_putchar_u8(ch: u8) {\n+    let ret: isize;\n+    //let arg0: char = ch as char;\n+    let arg0: u8 = ch;\n+    let arg1: usize = 0;\n+    let arg2: usize = 0;\n+    let which: usize = 1; //SBI_ECALL_CONSOLE_PUTCHAR\n+    unsafe {\n+        asm!(\"ecall\",\n+        lateout(\"x10\") ret,\n+        in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n+        );\n+    }\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 26 to 28)\n-fn sbi_call(which: usize, arg0: usize, arg1: usize, arg2: usize) -> isize{\n-\tlet ret: isize;\n-\tunsafe{\n+fn sbi_call(which: usize, arg0: usize, arg1: usize, arg2: usize) -> isize {\n+    let ret: isize;\n+    unsafe {\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 30 to 34)\n-             lateout(\"x10\") ret,\n-             in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n-            );\n-\t}\n-\tret\n+         lateout(\"x10\") ret,\n+         in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n+        );\n+    }\n+    ret\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 37 to 39)\n-pub fn set_timer(stime_value: u64){\n-\t#[cfg(target_pointer_width = \"32\")]\n-\tsbi_call(SBI_SET_TIMER, stime_value as usize, (stime_value >> 32), 0);\n+pub fn set_timer(stime_value: u64) {\n+    #[cfg(target_pointer_width = \"32\")]\n+    sbi_call(SBI_SET_TIMER, stime_value as usize, (stime_value >> 32), 0);\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 41 to 42)\n-\t#[cfg(target_pointer_width = \"64\")]\n-\tsbi_call(SBI_SET_TIMER, stime_value as usize, 0, 0);\n+    #[cfg(target_pointer_width = \"64\")]\n+    sbi_call(SBI_SET_TIMER, stime_value as usize, 0, 0);\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 44 to 45)\n-pub fn clear_ipi(){\n-\tsbi_call(SBI_CLEAR_IPI, 0, 0, 0);\n+pub fn clear_ipi() {\n+    sbi_call(SBI_CLEAR_IPI, 0, 0, 0);\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 48 to 49)\n-pub fn send_ipi(sipi_value: usize){\n-\tsbi_call(SBI_SEND_IPI, sipi_value, 0, 0);\n+pub fn send_ipi(sipi_value: usize) {\n+    sbi_call(SBI_SEND_IPI, sipi_value, 0, 0);\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 52 to 53)\n-pub fn set_s_insn(entry: usize){\n-\tsbi_call(SBI_SET_SINSN, entry, 0, 0);\n+pub fn set_s_insn(entry: usize) {\n+    sbi_call(SBI_SET_SINSN, entry, 0, 0);\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/boot/sbi.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/boot/sbi.rs (original lines from 56 to 57)\n-pub fn shutdown(){\n-\tsbi_call(SBI_SHUTDOWN, 0, 0, 0);\n+pub fn shutdown() {\n+    sbi_call(SBI_SHUTDOWN, 0, 0, 0);\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/e1000.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/e1000.rs (original lines from 126 to 126)\n+\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/pci_impl.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/pci_impl.rs (original lines from 2 to 2)\n-use pci::{PortOps, CSpaceAccessMethod};\n+use pci::{CSpaceAccessMethod, PortOps};\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/pci_impl.rs",
      "kind": "Unformatted",
      "raw": "file: /rust/my/os-checker/repos/e1000-driver/examples/src/pci_impl.rs (original lines from 9 to 9)\n-pub const PCI_COMMAND_INTX_DISABLE:u16 = 0x400;\n+pub const PCI_COMMAND_INTX_DISABLE: u16 = 0x400;\n"
    },
    {
      "cmd_idx": 8,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: constant `alloc_tx_ring_pages` should have an upper case name\n  --> src/e1000/e1000.rs:14:7\n   |\n14 | const alloc_tx_ring_pages: usize =\n   |       ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `ALLOC_TX_RING_PAGES`\n   |\n   = note: `#[warn(non_upper_case_globals)]` on by default\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: constant `alloc_rx_ring_pages` should have an upper case name\n  --> src/e1000/e1000.rs:16:7\n   |\n16 | const alloc_rx_ring_pages: usize =\n   |       ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `ALLOC_RX_RING_PAGES`\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: constant `alloc_tx_buffer_pages` should have an upper case name\n  --> src/e1000/e1000.rs:19:7\n   |\n19 | const alloc_tx_buffer_pages: usize = ((TX_RING_SIZE * MBUF_SIZE) + (PAGE_SIZE - 1)) / PAGE_SIZE;\n   |       ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `ALLOC_TX_BUFFER_PAGES`\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: constant `alloc_rx_buffer_pages` should have an upper case name\n  --> src/e1000/e1000.rs:20:7\n   |\n20 | const alloc_rx_buffer_pages: usize = ((RX_RING_SIZE * MBUF_SIZE) + (PAGE_SIZE - 1)) / PAGE_SIZE;\n   |       ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `ALLOC_RX_BUFFER_PAGES`\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "examples/src/pci_impl.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0433]: failed to resolve: unresolved import\n  --> examples/src/pci_impl.rs:24:5\n   |\n24 | use x86_64::instructions::port::Port;\n   |     ^^^^^^\n   |     |\n   |     unresolved import\n   |     help: a similar path exists: `core::arch::x86_64`\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "examples/src/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unused import: `vec`\n --> examples/src/e1000.rs:1:25\n  |\n1 | use alloc::{boxed::Box, vec};\n  |                         ^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "examples/src/main.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unused imports: `boxed::Box` and `vec`\n  --> examples/src/main.rs:17:13\n   |\n17 | use alloc::{boxed::Box, format, vec, vec::Vec};\n   |             ^^^^^^^^^^          ^^^\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "examples/src/main.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unused imports: `boxed::Box` and `vec`\n  --> examples/src/main.rs:17:13\n   |\n17 | use alloc::{boxed::Box, format, vec, vec::Vec};\n   |             ^^^^^^^^^^          ^^^\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "unkonwn-but-maybe-important",
      "kind": "Clippy(Error)",
      "raw": "error: unwinding panics are not supported without std\n  |\n  = help: using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding\n  = note: since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Clippy(Error)",
      "raw": "error: invalid register `x10`: unknown register\n  --> examples/src/boot/sbi.rs:20:8\n   |\n20 |              lateout(\"x10\") ret,\n   |              ^^^^^^^^^^^^^^^^^^\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Clippy(Error)",
      "raw": "error: invalid register `x10`: unknown register\n  --> examples/src/boot/sbi.rs:21:8\n   |\n21 |              in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n   |              ^^^^^^^^^^^^^^\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Clippy(Error)",
      "raw": "error: invalid register `x11`: unknown register\n  --> examples/src/boot/sbi.rs:21:24\n   |\n21 |              in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n   |                              ^^^^^^^^^^^^^^\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Clippy(Error)",
      "raw": "error: invalid register `x12`: unknown register\n  --> examples/src/boot/sbi.rs:21:40\n   |\n21 |              in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n   |                                              ^^^^^^^^^^^^^^\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Clippy(Error)",
      "raw": "error: invalid register `x17`: unknown register\n  --> examples/src/boot/sbi.rs:21:56\n   |\n21 |              in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n   |                                                              ^^^^^^^^^^^^^^^\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Clippy(Error)",
      "raw": "error: invalid register `x10`: unknown register\n  --> examples/src/boot/sbi.rs:30:14\n   |\n30 |              lateout(\"x10\") ret,\n   |              ^^^^^^^^^^^^^^^^^^\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Clippy(Error)",
      "raw": "error: invalid register `x10`: unknown register\n  --> examples/src/boot/sbi.rs:31:14\n   |\n31 |              in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n   |              ^^^^^^^^^^^^^^\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Clippy(Error)",
      "raw": "error: invalid register `x11`: unknown register\n  --> examples/src/boot/sbi.rs:31:30\n   |\n31 |              in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n   |                              ^^^^^^^^^^^^^^\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Clippy(Error)",
      "raw": "error: invalid register `x12`: unknown register\n  --> examples/src/boot/sbi.rs:31:46\n   |\n31 |              in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n   |                                              ^^^^^^^^^^^^^^\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Clippy(Error)",
      "raw": "error: invalid register `x17`: unknown register\n  --> examples/src/boot/sbi.rs:31:62\n   |\n31 |              in(\"x10\") arg0, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which\n   |                                                              ^^^^^^^^^^^^^^^\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: value assigned to `ret` is never read\n  --> examples/src/boot/sbi.rs:20:23\n   |\n20 |              lateout(\"x10\") ret,\n   |                             ^^^\n   |\n   = help: maybe it is overwritten before being read?\n   = note: `#[warn(unused_assignments)]` on by default\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "examples/src/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: value assigned to `cycle` is never read\n   --> examples/src/e1000.rs:101:13\n    |\n101 |     let mut cycle: u64 = 0;\n    |             ^^^^^\n    |\n    = help: maybe it is overwritten before being read?\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "examples/src/main.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: variable does not need to be mutable\n   --> examples/src/main.rs:151:21\n    |\n151 |                 let mut e1000_device =\n    |                     ----^^^^^^^^^^^^\n    |                     |\n    |                     help: remove this `mut`\n    |\n    = note: `#[warn(unused_mut)]` on by default\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: constant `alloc_tx_ring_pages` should have an upper case name\n  --> src/e1000/e1000.rs:14:7\n   |\n14 | const alloc_tx_ring_pages: usize =\n   |       ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `ALLOC_TX_RING_PAGES`\n   |\n   = note: `#[warn(non_upper_case_globals)]` on by default\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: constant `alloc_rx_ring_pages` should have an upper case name\n  --> src/e1000/e1000.rs:16:7\n   |\n16 | const alloc_rx_ring_pages: usize =\n   |       ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `ALLOC_RX_RING_PAGES`\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: constant `alloc_tx_buffer_pages` should have an upper case name\n  --> src/e1000/e1000.rs:19:7\n   |\n19 | const alloc_tx_buffer_pages: usize = ((TX_RING_SIZE * MBUF_SIZE) + (PAGE_SIZE - 1)) / PAGE_SIZE;\n   |       ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `ALLOC_TX_BUFFER_PAGES`\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/e1000/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: constant `alloc_rx_buffer_pages` should have an upper case name\n  --> src/e1000/e1000.rs:20:7\n   |\n20 | const alloc_rx_buffer_pages: usize = ((RX_RING_SIZE * MBUF_SIZE) + (PAGE_SIZE - 1)) / PAGE_SIZE;\n   |       ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `ALLOC_RX_BUFFER_PAGES`\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "examples/src/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unused import: `vec`\n --> examples/src/e1000.rs:1:25\n  |\n1 | use alloc::{boxed::Box, vec};\n  |                         ^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "examples/src/main.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unused imports: `boxed::Box` and `vec`\n  --> examples/src/main.rs:17:13\n   |\n17 | use alloc::{boxed::Box, format, vec, vec::Vec};\n   |             ^^^^^^^^^^          ^^^\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "examples/src/main.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unused imports: `boxed::Box` and `vec`\n  --> examples/src/main.rs:17:13\n   |\n17 | use alloc::{boxed::Box, format, vec, vec::Vec};\n   |             ^^^^^^^^^^          ^^^\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: value assigned to `ret` is never read\n  --> examples/src/boot/sbi.rs:20:23\n   |\n20 |              lateout(\"x10\") ret,\n   |                             ^^^\n   |\n   = help: maybe it is overwritten before being read?\n   = note: `#[warn(unused_assignments)]` on by default\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "examples/src/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: value assigned to `cycle` is never read\n   --> examples/src/e1000.rs:101:13\n    |\n101 |     let mut cycle: u64 = 0;\n    |             ^^^^^\n    |\n    = help: maybe it is overwritten before being read?\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "examples/src/main.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: variable does not need to be mutable\n   --> examples/src/main.rs:151:21\n    |\n151 |                 let mut e1000_device =\n    |                     ----^^^^^^^^^^^^\n    |                     |\n    |                     help: remove this `mut`\n    |\n    = note: `#[warn(unused_mut)]` on by default\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "examples/src/boot/sbi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unneeded `return` statement\n --> examples/src/boot/sbi.rs:8:2\n  |\n8 |     return sbi_call(SBI_CONSOLE_GETCHAR, 0, 0, 0);\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n  = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n  |\n8 -     return sbi_call(SBI_CONSOLE_GETCHAR, 0, 0, 0);\n8 +     sbi_call(SBI_CONSOLE_GETCHAR, 0, 0, 0)\n  |\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "examples/src/e1000.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: the loop variable `i` is used to index `buf`\n  --> examples/src/e1000.rs:81:14\n   |\n81 |     for i in 0..len {\n   |              ^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\n   = note: `#[warn(clippy::needless_range_loop)]` on by default\nhelp: consider using an iterator and enumerate()\n   |\n81 |     for (i, <item>) in buf.iter().enumerate().take(len) {\n   |         ~~~~~~~~~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "examples/src/main.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unused `core::result::Result` that must be used\n  --> examples/src/main.rs:31:5\n   |\n31 |     logger::init(\"DEBUG\");\n   |     ^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: this `Result` may be an `Err` variant, which should be handled\n   = note: `#[warn(unused_must_use)]` on by default\nhelp: use `let _ = ...` to ignore the resulting value\n   |\n31 |     let _ = logger::init(\"DEBUG\");\n   |     +++++++\n\n"
    }
  ]
}