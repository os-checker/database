{
  "user": "os-checker",
  "repo": "os-checker",
  "timestamp": {
    "start": 1748222898781,
    "end": 1748827327131
  },
  "pkgs": {
    "os-checker": {
      "version": "0.6.1",
      "dependencies": 34,
      "lib": false,
      "bin": true,
      "testcases": {
        "tests": [
          {
            "id": "os-checker::bin/os-checker",
            "kind": "bin",
            "binary_name": "os-checker",
            "testcases": [
              {
                "name": "config::cmd::tests::custom_cmd",
                "status": "failed",
                "duration_ms": 7,
                "error": "\n\nerror: expect test failed\n   --> src/config/cmd/tests.rs:73:5\n\nYou can update all `expect!` tests by running:\n\n    env UPDATE_EXPECT=1 cargo test\n\nTo update a single test, place the cursor on `expect` token and use `run` feature of rust-analyzer.\n\nExpect:\n----\nResolve {\n    pkg_name: \"nothing\",\n    pkg_dir: \".\",\n    target: \"x86_64-unknown-linux-gnu\",\n    target_overriden: false,\n    checker: Fmt,\n    cmd: \"cargo fmt --target=x86_64-unknown-linux-gnu --check\",\n    expr: Io(\n        Dir(\n            \".\",\n        ),\n        Cmd(\n            [\n                \"cargo\",\n                \"fmt\",\n                \"--target=x86_64-unknown-linux-gnu\",\n                \"--check\",\n            ],\n        ),\n    ),\n}\n\n----\n\nActual:\n----\nResolve {\n    pkg_name: \"nothing\",\n    pkg_dir: \".\",\n    target: \"x86_64-unknown-linux-gnu\",\n    target_overridden: false,\n    features_args: [],\n    env: {},\n    toolchain: Some(\n        0,\n    ),\n    checker: Fmt,\n    cmd: \"cargo fmt --target=x86_64-unknown-linux-gnu --check\",\n    expr: Io(\n        Dir(\n            \".\",\n        ),\n        Cmd(\n            [\n                \"cargo\",\n                \"fmt\",\n                \"--target=x86_64-unknown-linux-gnu\",\n                \"--check\",\n            ],\n        ),\n    ),\n    audit: None,\n}\n\n----\n\nDiff:\n----\nResolve {\n    pkg_name: \"nothing\",\n    pkg_dir: \".\",\n    target: \"x86_64-unknown-linux-gnu\",\n    target_overridden: false,\n    features_args: [],\n    env: {},\n    toolchain: Some(\n        0,\n    ),\n    checker: Fmt,\n    cmd: \"cargo fmt --target=x86_64-unknown-linux-gnu --check\",\n    expr: Io(\n        Dir(\n            \".\",\n        ),\n        Cmd(\n            [\n                \"cargo\",\n                \"fmt\",\n                \"--target=x86_64-unknown-linux-gnu\",\n                \"--check\",\n            ],\n        ),\n    ),\n    audit: None,\n}\n\n----\n\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling serde v1.0.219\n   Compiling libc v0.2.172\n   Compiling memchr v2.7.4\n   Compiling stable_deref_trait v1.2.0\n   Compiling once_cell v1.21.3\n   Compiling allocator-api2 v0.2.21\n   Compiling foldhash v0.1.5\n   Compiling equivalent v1.0.2\n   Compiling hashbrown v0.15.3\n   Compiling icu_locid_transform_data v1.5.1\n   Compiling quote v1.0.40\n   Compiling shlex v1.3.0\n   Compiling syn v2.0.101\n   Compiling litemap v0.7.5\n   Compiling writeable v0.5.5\n   Compiling smallvec v1.15.0\n   Compiling cc v1.2.21\n   Compiling autocfg v1.4.0\n   Compiling eyre v0.6.12\n   Compiling icu_properties_data v1.5.1\n   Compiling icu_normalizer_data v1.5.1\n   Compiling pin-project-lite v0.2.16\n   Compiling cfg-if v1.0.0\n   Compiling tracing-core v0.1.33\n   Compiling lazy_static v1.5.0\n   Compiling sharded-slab v0.1.7\n   Compiling backtrace v0.3.71\n   Compiling thread_local v1.1.8\n   Compiling aho-corasick v1.1.3\n   Compiling regex-syntax v0.8.5\n   Compiling utf16_iter v1.0.5\n   Compiling write16 v1.0.0\n   Compiling thiserror v1.0.69\n   Compiling regex-syntax v0.6.29\n   Compiling utf8_iter v1.0.4\n   Compiling semver v1.0.26\n   Compiling synstructure v0.13.2\n   Compiling regex-automata v0.4.9\n   Compiling tracing v0.1.41\n   Compiling regex-automata v0.1.10\n   Compiling tracing-subscriber v0.3.19\n   Compiling log v0.4.27\n   Compiling itoa v1.0.15\n   Compiling ryu v1.0.20\n   Compiling rustversion v1.0.20\n   Compiling gimli v0.28.1\n   Compiling adler v1.0.2\n   Compiling serde_json v1.0.140\n   Compiling overload v0.1.1\n   Compiling serde_derive v1.0.219\n   Compiling zerofrom-derive v0.1.6\n   Compiling yoke-derive v0.7.5\n   Compiling zerovec-derive v0.10.3\n   Compiling displaydoc v0.2.5\n   Compiling zerofrom v0.1.6\n   Compiling yoke v0.7.5\n   Compiling icu_provider_macros v1.5.0\n   Compiling tracing-attributes v0.1.28\n   Compiling zerovec v0.10.4\n   Compiling thiserror-impl v1.0.69\n   Compiling tinystr v0.7.6\n   Compiling icu_locid v1.5.0\n   Compiling icu_provider v1.5.0\n   Compiling icu_collections v1.5.0\n   Compiling icu_locid_transform v1.5.0\n   Compiling addr2line v0.21.0\n   Compiling object v0.32.2\n   Compiling icu_properties v1.5.1\n   Compiling nu-ansi-term v0.46.0\n   Compiling miniz_oxide v0.7.4\n   Compiling regex v1.11.1\n   Compiling tracing-error v0.2.1\n   Compiling tracing-log v0.2.0\n   Compiling matchers v0.1.0\n   Compiling slab v0.4.9\n   Compiling owo-colors v3.5.0\n   Compiling indexmap v2.9.0\n   Compiling icu_normalizer v1.5.0\n   Compiling toml_datetime v0.6.9\n   Compiling serde_spanned v0.6.8\n   Compiling idna_adapter v1.2.0\n   Compiling indenter v0.3.3\n   Compiling percent-encoding v2.3.1\n   Compiling toml_write v0.1.1\n   Compiling winnow v0.7.8\n   Compiling rustc-demangle v0.1.24\n   Compiling camino v1.1.9\n   Compiling unicode-width v0.1.14\n   Compiling form_urlencoded v1.2.1\n   Compiling idna v1.0.3\n   Compiling color-spantrace v0.2.1\n   Compiling toml_edit v0.22.26\n   Compiling musli-macros v0.0.124\n   Compiling os_pipe v1.2.1\n   Compiling shared_child v1.0.2\n   Compiling fs-err v2.11.0\n   Compiling ref-cast v1.0.24\n   Compiling powerfmt v0.2.0\n   Compiling num-conv v0.1.0\n   Compiling redb v2.5.0\n   Compiling fixedbitset v0.4.2\n   Compiling time-core v0.1.4\n   Compiling time-macros v0.2.22\n   Compiling petgraph v0.6.5\n   Compiling toml v0.8.22\n   Compiling musli-core v0.0.124\n   Compiling deranged v0.4.0\n   Compiling duct v0.13.7\n   Compiling castaway v0.2.3\n   Compiling color-eyre v0.6.3\n   Compiling url v2.5.4\n   Compiling cargo-platform v0.1.9\n   Compiling futures-macro v0.3.31\n   Compiling ref-cast-impl v1.0.24\n   Compiling serde_derive_internals v0.29.1\n   Compiling option-ext v0.2.0\n   Compiling futures-core v0.3.31\n   Compiling pin-utils v0.1.0\n   Compiling futures-task v0.3.31\n   Compiling either v1.15.0\n   Compiling static_assertions v1.1.0\n   Compiling argh_shared v0.1.13\n   Compiling time v0.3.41\n   Compiling argh_derive v0.1.13\n   Compiling schemars_derive v1.0.0-alpha.17\n   Compiling compact_str v0.8.1\n   Compiling itertools v0.13.0\n   Compiling futures-util v0.3.31\n   Compiling dirs-sys v0.4.1\n   Compiling musli v0.0.124\n   Compiling cargo_metadata v0.18.1\n   Compiling os-checker v0.6.1 (/tmp/os-checker-plugin-cargo/os-checker/os-checker)\n   Compiling cargo-lock v10.1.0\n   Compiling getopts v0.2.21\n   Compiling pad v0.1.6\n   Compiling platforms v3.5.0\n   Compiling cvss v2.0.0\n   Compiling vte v0.14.1\n   Compiling dyn-clone v1.0.19\n   Compiling dissimilar v1.0.10\n   Compiling rust-fuzzy-search v0.1.1\n   Compiling same-file v1.0.6\n   Compiling walkdir v2.5.0\n   Compiling argh v0.1.13\n   Compiling expect-test v1.5.1\n   Compiling schemars v1.0.0-alpha.17\n   Compiling strip-ansi-escapes v0.2.1\n   Compiling rustsec v0.30.2\n   Compiling yash-syntax v0.12.1\n   Compiling prettydiff v0.7.0\n   Compiling jsonxf v1.1.1\n   Compiling dirs v5.0.1\n   Compiling basic-toml v0.1.10\n   Compiling glob v0.3.2\n   Compiling os-checker-types v0.6.1 (/tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 30.43s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n",
                "miri_timeout": false
              },
              {
                "name": "config::cmd::tests::custom_target",
                "status": "ok",
                "duration_ms": 6,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "config::cmd::tests::custom_without_target",
                "status": "ok",
                "duration_ms": 6,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "config::de_features",
                "status": "ok",
                "duration_ms": 9,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "config::deserialization::config_options::features::tests::features_arguments",
                "status": "ok",
                "duration_ms": 5,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "config::deserialization::config_options::features::tests::features_arguments_empty",
                "status": "ok",
                "duration_ms": 5,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "config::deserialization::config_options::features::tests::features_complete",
                "status": "ok",
                "duration_ms": 6,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "config::deserialization::config_options::features::tests::features_empty_string",
                "status": "ok",
                "duration_ms": 5,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "config::deserialization::config_options::features::tests::features_hybrid",
                "status": "ok",
                "duration_ms": 6,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "config::deserialization::config_options::features::tests::features_simple",
                "status": "ok",
                "duration_ms": 5,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "config::deserialization::config_options::features::tests::features_target",
                "status": "ok",
                "duration_ms": 6,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "config::deserialization::config_options::target_env",
                "status": "ok",
                "duration_ms": 7,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "config::deserialization::tests::schema",
                "status": "ok",
                "duration_ms": 7,
                "error": null,
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: `open` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1185:36\n     |\n1185 |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode as c_int) })?;\n     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `open` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `config::deseria`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1185:36: 1185:84\n     = note: inside `std::sys::pal::unix::cvt_r::<i32, {closure@std::sys::fs::unix::File::open_c::{closure#0}}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/mod.rs:317:19: 317:22\n     = note: inside `std::sys::fs::unix::File::open_c` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1185:18: 1185:87\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1173:42: 1173:66\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::fs::unix::File::open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1173:9: 1173:67\n     = note: inside `std::fs::OpenOptions::_open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1642:9: 1642:42\n     = note: inside `std::fs::OpenOptions::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1638:9: 1638:34\n     = note: inside `std::fs::File::create::<&camino::Utf8Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:491:9: 491:87\nnote: inside `config::deserialization::gen_schema`\n    --> src/config/deserialization.rs:286:5\n     |\n286  |     std::fs::File::create(path)?.write_all(json.as_bytes())?;\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `config::deserialization::tests::schema`\n    --> src/config/deserialization/tests.rs:5:5\n     |\n5    |     gen_schema(\"assets/schema.json\".into())?;\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/config/deserialization/tests.rs:4:16\n     |\n3    | #[test]\n     | ------- in this procedural macro expansion\n4    | fn schema() -> Result<()> {\n     |                ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'config::deserialization::tests::schema'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "config::tests::bad_check",
                "status": "ok",
                "duration_ms": 461,
                "error": null,
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25\n    |\n137 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `config::tests::`:\n    = note: inside `std::sys::net::connection::socket::unix::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25: 137:92\n    = note: inside `std::sys::process::unix::unix::<impl std::sys::process::unix::common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/unix.rs:76:31: 76:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1045:9: 1045:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.2/src/lib.rs:132:53: 132:68\n    = note: inside `duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::Expression::reader` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:356:20: 356:58\n    = note: inside `duct::Expression::read` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:280:26: 280:39\nnote: inside `output::toolchain::host_rust_toolchain`\n   --> src/output/toolchain.rs:265:19\n    |\n265 |     let channel = cmd!(\"rustup\", \"default\").read()?;\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `output::toolchain::Global::new`\n   --> src/output/toolchain.rs:68:39\n    |\n68  |         let (host_toolchain, rustc) = host_rust_toolchain().unwrap();\n    |                                       ^^^^^^^^^^^^^^^^^^^^^\n    = note: inside `<fn() -> output::toolchain::Global as std::ops::FnOnce<()>>::call_once - shim(fn() -> output::toolchain::Global)` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5: 250:71\n    = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:213:25: 213:28\n    = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/poison/once.rs:155:41: 155:60\n    = note: inside `std::sync::LazyLock::<output::toolchain::Global>::force` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:209:9: 215:11\n    = note: inside `<std::sync::LazyLock<output::toolchain::Global> as std::ops::Deref>::deref` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:312:9: 312:30\nnote: inside `output::toolchain::host_target_triple`\n   --> src/output/toolchain.rs:171:6\n    |\n171 |     &GLOBAL.host.host\n    |      ^^^^^^^^^^^\nnote: inside `layout::Packages::test_new`\n   --> src/layout/mod.rs:429:20\n    |\n429 |         let host = crate::output::host_target_triple().to_owned();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `config::tests::bad_check`\n   --> src/config/tests/mod.rs:109:23\n    |\n109 |             .resolve(&Packages::test_new(&[\"a\"]))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/config/tests/mod.rs:75:15\n    |\n74  | #[test]\n    | ------- in this procedural macro expansion\n75  | fn bad_check() {\n    |               ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'config::tests::bad_check'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "config::tests::batch",
                "status": "failed",
                "duration_ms": 433,
                "error": "\n\nerror: expect test failed\n   --> ./snapshots/large-batch-split-by-half.txt\n\nYou can update all `expect!` tests by running:\n\n    env UPDATE_EXPECT=1 cargo test\n\nTo update a single test, place the cursor on `expect` token and use `run` feature of rust-analyzer.\n\nExpect:\n----\n[\n    Configs(\n        [\n            Config {\n                uri: Github(\n                    \"a/001\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n            Config {\n                uri: Github(\n                    \"a/002\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n            Config {\n                uri: Github(\n                    \"a/003\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n            Config {\n                uri: Github(\n                    \"a/004\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n            Config {\n                uri: Github(\n                    \"a/005\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n        ],\n    ),\n    Configs(\n        [\n            Config {\n                uri: Github(\n                    \"a/006\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n            Config {\n                uri: Github(\n                    \"a/007\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n            Config {\n                uri: Github(\n                    \"a/008\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n            Config {\n                uri: Github(\n                    \"a/009\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n            Config {\n                uri: Github(\n                    \"a/010\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n        ],\n    ),\n]\n\n----\n\nActual:\n----\n[\n    Configs(\n        [\n            Config {\n                uri: Github(\n                    \"a/001\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/002\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/003\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/004\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/005\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n        ],\n    ),\n    Configs(\n        [\n            Config {\n                uri: Github(\n                    \"a/006\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/007\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/008\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/009\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/010\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n        ],\n    ),\n]\n\n----\n\nDiff:\n----\n[\n    Configs(\n        [\n            Config {\n                uri: Github(\n                    \"a/001\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/002\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/003\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/004\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/005\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n        ],\n    ),\n    Configs(\n        [\n            Config {\n                uri: Github(\n                    \"a/006\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/007\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/008\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/009\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/010\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n        ],\n    ),\n]\n\n----\n\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.09s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: `open` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1185:36\n     |\n1185 |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode as c_int) })?;\n     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `open` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `config::tests::`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1185:36: 1185:84\n     = note: inside `std::sys::pal::unix::cvt_r::<i32, {closure@std::sys::fs::unix::File::open_c::{closure#0}}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/mod.rs:317:19: 317:22\n     = note: inside `std::sys::fs::unix::File::open_c` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1185:18: 1185:87\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1173:42: 1173:66\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::fs::unix::File::open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1173:9: 1173:67\n     = note: inside `std::fs::OpenOptions::_open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1642:9: 1642:42\n     = note: inside `std::fs::OpenOptions::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1638:9: 1638:34\n     = note: inside `std::fs::File::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:423:9: 423:58\n     = note: inside `std::fs::read_to_string::inner` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:328:24: 328:40\n     = note: inside `std::fs::read_to_string::<&camino::Utf8Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:335:5: 335:25\nnote: inside `config::Configs::from_json_path`\n    --> src/config/mod.rs:197:20\n     |\n197  |         let json = std::fs::read_to_string(path)\n     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `config::tests::make_batch::<{closure@src/config/tests/mod.rs:37:30: 37:35}>`\n    --> src/config/tests/mod.rs:30:19\n     |\n30   |     let configs = Configs::from_json_path(LARGE_JSON_PATH.into()).unwrap();\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `config::tests::batch`\n    --> src/config/tests/mod.rs:37:19\n     |\n37   |     let batches = make_batch(|len| len / 2);\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/config/tests/mod.rs:36:15\n     |\n35   | #[test]\n     | ------- in this procedural macro expansion\n36   | fn batch() -> Result<()> {\n     |               ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'config::tests::batch'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "config::tests::merge_configs",
                "status": "failed",
                "duration_ms": 15,
                "error": "\n\nerror: expect test failed\n   --> ./snapshots/merge-configs.txt\n\nYou can update all `expect!` tests by running:\n\n    env UPDATE_EXPECT=1 cargo test\n\nTo update a single test, place the cursor on `expect` token and use `run` feature of rust-analyzer.\n\nExpect:\n----\nConfigs(\n    [\n        Config {\n            uri: Github(\n                \"user1/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                cmds: Cmds {\n                    map: {\n                        Fmt: false,\n                    },\n                },\n                packages: {},\n            },\n            db: None,\n        },\n        Config {\n            uri: Github(\n                \"user2/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                cmds: Cmds {\n                    map: {\n                        Clippy: \"cargo clippy\",\n                    },\n                },\n                packages: {},\n            },\n            db: None,\n        },\n        Config {\n            uri: Github(\n                \"user3/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                cmds: Cmds {\n                    map: {},\n                },\n                packages: {\n                    \"a\": RepoConfig {\n                        meta: None,\n                        setup: None,\n                        targets: Some(\n                            Targets(\n                                \"x86_64-unknown-linux-gnu\",\n                            ),\n                        ),\n                        no_install_targets: None,\n                        cmds: Cmds {\n                            map: {},\n                        },\n                        packages: {},\n                    },\n                },\n            },\n            db: None,\n        },\n    ],\n)\n----\n\nActual:\n----\nConfigs(\n    [\n        Config {\n            uri: Github(\n                \"user1/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                features: None,\n                env: None,\n                cmds: Cmds {\n                    map: {\n                        Fmt: false,\n                    },\n                },\n                packages: {},\n            },\n            db: None,\n        },\n        Config {\n            uri: Github(\n                \"user2/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                features: None,\n                env: None,\n                cmds: Cmds {\n                    map: {\n                        Clippy: \"cargo clippy\",\n                    },\n                },\n                packages: {},\n            },\n            db: None,\n        },\n        Config {\n            uri: Github(\n                \"user3/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                features: None,\n                env: None,\n                cmds: Cmds {\n                    map: {},\n                },\n                packages: {\n                    \"a\": RepoConfig {\n                        meta: None,\n                        setup: None,\n                        targets: Some(\n                            Targets(\n                                \"x86_64-unknown-linux-gnu\",\n                            ),\n                        ),\n                        no_install_targets: None,\n                        features: None,\n                        env: None,\n                        cmds: Cmds {\n                            map: {},\n                        },\n                        packages: {},\n                    },\n                },\n            },\n            db: None,\n        },\n    ],\n)\n----\n\nDiff:\n----\nConfigs(\n    [\n        Config {\n            uri: Github(\n                \"user1/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                features: None,\n                env: None,\n                cmds: Cmds {\n                    map: {\n                        Fmt: false,\n                    },\n                },\n                packages: {},\n            },\n            db: None,\n        },\n        Config {\n            uri: Github(\n                \"user2/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                features: None,\n                env: None,\n                cmds: Cmds {\n                    map: {\n                        Clippy: \"cargo clippy\",\n                    },\n                },\n                packages: {},\n            },\n            db: None,\n        },\n        Config {\n            uri: Github(\n                \"user3/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                features: None,\n                env: None,\n                cmds: Cmds {\n                    map: {},\n                },\n                packages: {\n                    \"a\": RepoConfig {\n                        meta: None,\n                        setup: None,\n                        targets: Some(\n                            Targets(\n                                \"x86_64-unknown-linux-gnu\",\n                            ),\n                        ),\n                        no_install_targets: None,\n                        features: None,\n                        env: None,\n                        cmds: Cmds {\n                            map: {},\n                        },\n                        packages: {},\n                    },\n                },\n            },\n            db: None,\n        },\n    ],\n)\n----\n\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n",
                "miri_timeout": false
              },
              {
                "name": "config::tests::parse_and_resolve",
                "status": "failed",
                "duration_ms": 52,
                "error": "\n\nerror: expect test failed\n   --> ./snapshots/parse-a-json.txt\n\nYou can update all `expect!` tests by running:\n\n    env UPDATE_EXPECT=1 cargo test\n\nTo update a single test, place the cursor on `expect` token and use `run` feature of rust-analyzer.\n\nExpect:\n----\n[\n    Config {\n        uri: Github(\n            \"os-checker/os-checker\",\n        ),\n        config: RepoConfig {\n            setup: None,\n            targets: None,\n            cmds: Cmds {\n                map: {\n                    Lockbud: true,\n                    Clippy: \"cargo clippy -F a,b,c\",\n                },\n            },\n            packages: {},\n        },\n    },\n    Config {\n        uri: Github(\n            \"user/repo\",\n        ),\n        config: RepoConfig {\n            setup: None,\n            targets: None,\n            cmds: Cmds {\n                map: {\n                    Lockbud: false,\n                },\n            },\n            packages: {\n                \"crate1\": RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                \"crate2\": RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n        },\n    },\n]\n\n----\n\nActual:\n----\n[\n    Config {\n        uri: Github(\n            \"os-checker/os-checker\",\n        ),\n        config: RepoConfig {\n            meta: None,\n            setup: None,\n            targets: None,\n            no_install_targets: None,\n            features: None,\n            env: None,\n            cmds: Cmds {\n                map: {\n                    Lockbud: true,\n                    Clippy: \"cargo clippy -F a,b,c\",\n                },\n            },\n            packages: {},\n        },\n        db: None,\n    },\n    Config {\n        uri: Github(\n            \"user/repo\",\n        ),\n        config: RepoConfig {\n            meta: None,\n            setup: None,\n            targets: None,\n            no_install_targets: None,\n            features: None,\n            env: None,\n            cmds: Cmds {\n                map: {\n                    Lockbud: false,\n                },\n            },\n            packages: {\n                \"crate1\": RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                \"crate2\": RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n        },\n        db: None,\n    },\n]\n\n----\n\nDiff:\n----\n[\n    Config {\n        uri: Github(\n            \"os-checker/os-checker\",\n        ),\n        config: RepoConfig {\n            meta: None,\n            setup: None,\n            targets: None,\n            no_install_targets: None,\n            features: None,\n            env: None,\n            cmds: Cmds {\n                map: {\n                    Lockbud: true,\n                    Clippy: \"cargo clippy -F a,b,c\",\n                },\n            },\n            packages: {},\n        },\n        db: None,\n    },\n    Config {\n        uri: Github(\n            \"user/repo\",\n        ),\n        config: RepoConfig {\n            meta: None,\n            setup: None,\n            targets: None,\n            no_install_targets: None,\n            features: None,\n            env: None,\n            cmds: Cmds {\n                map: {\n                    Lockbud: false,\n                },\n            },\n            packages: {\n                \"crate1\": RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                \"crate2\": RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    features: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n        },\n        db: None,\n    },\n]\n\n----\n\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: `open` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1185:36\n     |\n1185 |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode as c_int) })?;\n     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `open` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `config::tests::`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1185:36: 1185:84\n     = note: inside `std::sys::pal::unix::cvt_r::<i32, {closure@std::sys::fs::unix::File::open_c::{closure#0}}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/mod.rs:317:19: 317:22\n     = note: inside `std::sys::fs::unix::File::open_c` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1185:18: 1185:87\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1173:42: 1173:66\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::fs::unix::File::open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1173:9: 1173:67\n     = note: inside `std::fs::OpenOptions::_open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1642:9: 1642:42\n     = note: inside `std::fs::OpenOptions::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1638:9: 1638:34\n     = note: inside `std::fs::File::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:423:9: 423:58\n     = note: inside `std::fs::read_to_string::inner` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:328:24: 328:40\n     = note: inside `std::fs::read_to_string::<&camino::Utf8Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:335:5: 335:25\nnote: inside `config::Configs::from_json_path`\n    --> src/config/mod.rs:197:20\n     |\n197  |         let json = std::fs::read_to_string(path)\n     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `config::tests::parse_and_resolve`\n    --> src/config/tests/mod.rs:18:19\n     |\n18   |     let configs = Configs::from_json_path(JSON_PATH.into())?;\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/config/tests/mod.rs:17:27\n     |\n16   | #[test]\n     | ------- in this procedural macro expansion\n17   | fn parse_and_resolve() -> Result<()> {\n     |                           ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'config::tests::parse_and_resolve'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "config::tests::parse_assets",
                "status": "failed",
                "duration_ms": 13,
                "error": "Error: 从 `assets/repos-default.json` 读取仓库列表失败！请输入正确的 json 路径。\n\nCaused by:\n    No such file or directory (os error 2)\n\nLocation:\n    src/config/mod.rs:198:14\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: `open` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1185:36\n     |\n1185 |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode as c_int) })?;\n     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `open` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `config::tests::`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1185:36: 1185:84\n     = note: inside `std::sys::pal::unix::cvt_r::<i32, {closure@std::sys::fs::unix::File::open_c::{closure#0}}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/mod.rs:317:19: 317:22\n     = note: inside `std::sys::fs::unix::File::open_c` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1185:18: 1185:87\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1173:42: 1173:66\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::fs::unix::File::open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1173:9: 1173:67\n     = note: inside `std::fs::OpenOptions::_open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1642:9: 1642:42\n     = note: inside `std::fs::OpenOptions::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1638:9: 1638:34\n     = note: inside `std::fs::File::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:423:9: 423:58\n     = note: inside `std::fs::read_to_string::inner` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:328:24: 328:40\n     = note: inside `std::fs::read_to_string::<&camino::Utf8Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:335:5: 335:25\nnote: inside `config::Configs::from_json_path`\n    --> src/config/mod.rs:197:20\n     |\n197  |         let json = std::fs::read_to_string(path)\n     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `config::tests::parse_assets`\n    --> src/config/tests/mod.rs:11:5\n     |\n11   |     Configs::from_json_path(\"assets/repos-ui.json\".into())?;\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/config/tests/mod.rs:10:22\n     |\n9    | #[test]\n     | ------- in this procedural macro expansion\n10   | fn parse_assets() -> Result<()> {\n     |                      ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'config::tests::parse_assets'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "config::tests::parse_cmds",
                "status": "failed",
                "duration_ms": 16,
                "error": "\n\nerror: expect test failed\n   --> ./snapshots/single-cmd.txt\n\nYou can update all `expect!` tests by running:\n\n    env UPDATE_EXPECT=1 cargo test\n\nTo update a single test, place the cursor on `expect` token and use `run` feature of rust-analyzer.\n\nExpect:\n----\nConfig {\n    uri: Github(\n        \"user/repo\",\n    ),\n    config: RepoConfig {\n        setup: None,\n        targets: None,\n        cmds: Cmds {\n            map: {\n                Clippy: \"cargo clippy\",\n            },\n        },\n        packages: {},\n    },\n}\n\n----\n\nActual:\n----\nConfig {\n    uri: Github(\n        \"user/repo\",\n    ),\n    config: RepoConfig {\n        meta: None,\n        setup: None,\n        targets: None,\n        no_install_targets: None,\n        features: None,\n        env: None,\n        cmds: Cmds {\n            map: {\n                Clippy: \"cargo clippy\",\n            },\n        },\n        packages: {},\n    },\n    db: None,\n}\n\n----\n\nDiff:\n----\nConfig {\n    uri: Github(\n        \"user/repo\",\n    ),\n    config: RepoConfig {\n        meta: None,\n        setup: None,\n        targets: None,\n        no_install_targets: None,\n        features: None,\n        env: None,\n        cmds: Cmds {\n            map: {\n                Clippy: \"cargo clippy\",\n            },\n        },\n        packages: {},\n    },\n    db: None,\n}\n\n----\n\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n",
                "miri_timeout": false
              },
              {
                "name": "config::tests::resolve",
                "status": "failed",
                "duration_ms": 14356,
                "error": "info: component 'rustfmt' for target 'x86_64-unknown-linux-gnu' is up to date\n\n\nerror: expect test failed\n   --> ./snapshots/resolve.txt\n\nYou can update all `expect!` tests by running:\n\n    env UPDATE_EXPECT=1 cargo test\n\nTo update a single test, place the cursor on `expect` token and use `run` feature of rust-analyzer.\n\nExpect:\n----\n[\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo fmt -p crate0 -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"fmt\",\n                    \"-p\",\n                    \"crate0\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-05-21\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-05-21\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo fmt -p crate2 -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"fmt\",\n                    \"-p\",\n                    \"crate2\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target=x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Env(\n                \"RUSTFLAGS\",\n                \"-cfg=abc\",\n            ),\n            Io(\n                Dir(\n                    \"\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"clippy\",\n                        \"--target=x86_64-unknown-linux-gnu\",\n                        \"--no-deps\",\n                        \"--message-format=json\",\n                    ],\n                ),\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-05-21\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo fmt -p crate3 -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"fmt\",\n                    \"-p\",\n                    \"crate3\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-05-21\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo fmt -p crate4 -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"fmt\",\n                    \"-p\",\n                    \"crate4\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-05-21\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n    },\n]\n\n----\n\nActual:\n----\n[\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu fmt\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"fmt\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu  --no-deps\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2025-01-10 mirai --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2025-01-10\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2025-02-01\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"-b\",\n                    \"-l\",\n                    \"regex-automata,parking_lot_core,tokio,tokio_util\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rapx,\n        cmd: \"cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-10-12\",\n                        \"rapx\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                        \"--color=never\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu  --no-deps\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2025-01-10 mirai --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2025-01-10\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2025-02-01\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"-b\",\n                    \"-l\",\n                    \"regex-automata,parking_lot_core,tokio,tokio_util\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rapx,\n        cmd: \"cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-10-12\",\n                        \"rapx\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                        \"--color=never\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu fmt\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"fmt\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target=x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Env(\n                \"RUSTFLAGS\",\n                \"-cfg=abc\",\n            ),\n            Io(\n                Dir(\n                    \"\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"clippy\",\n                        \"--target=x86_64-unknown-linux-gnu\",\n                        \"--no-deps\",\n                        \"--message-format=json\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2025-01-10 mirai --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2025-01-10\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2025-02-01\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"-b\",\n                    \"-l\",\n                    \"regex-automata,parking_lot_core,tokio,tokio_util\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rapx,\n        cmd: \"cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-10-12\",\n                        \"rapx\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                        \"--color=never\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu fmt\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"fmt\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu  --no-deps\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2025-01-10 mirai --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2025-01-10\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2025-02-01\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"-b\",\n                    \"-l\",\n                    \"regex-automata,parking_lot_core,tokio,tokio_util\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rapx,\n        cmd: \"cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-10-12\",\n                        \"rapx\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                        \"--color=never\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu fmt\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"fmt\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2025-01-10 mirai --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2025-01-10\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2025-02-01\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"-b\",\n                    \"-l\",\n                    \"regex-automata,parking_lot_core,tokio,tokio_util\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rapx,\n        cmd: \"cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-10-12\",\n                        \"rapx\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                        \"--color=never\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n]\n\n----\n\nDiff:\n----\n[\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo fmt -p crate0 -- --emit=json+nightly-x86_64-unknown-linux-gnu fmt\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"fmt\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu  --no-deps\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"fmtclippy\",\n                    \"-p-target\",\n                    \"crate0x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--emimessage-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: ClippySemverChecks,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json+nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2025-01-10 mirai --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy+nightly-2025-01-10\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=jsonmessage-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2025-02-01\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"-b\",\n                    \"-l\",\n                    \"regex-automata,parking_lot_core,tokio,tokio_util\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: LockbudRapx,\n        cmd: \"cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n        cmd: \"cargo +nightly-2024-05-21 lockbud -k all --        Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-10-12\",\n                        \"rapx\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                        \"--color=never\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-051-10-21\",\n                    \"lockbud\"rudra\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n            \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnuchecker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu  --no-deps --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-depscolor=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2025-01-10 mirai --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2025-01-10\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-25-02-01 lockbud -k all -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-05-25-02-01\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"-b\",\n                    \"-l\",\n                    \"regex-automata,parking_lot_core,tokio,tokio_util\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate21\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo fmt -p crate2 -- Rapx,\n        cmd: \"cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-10-12\",\n                        \"rapx\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                        \"--color=never\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--emxit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"fmt\",\n                    \"-p\",\n                    \"crate2-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu fmt\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"fmt\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target=x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Env(\n                \"RUSTFLAGS\",\n                \"-cfg=abc\",\n            ),\n            Io(\n                Dir(\n                    \"\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"clippy\",\n                        \"--target=x86_64-unknown-linux-gnu\",\n                        \"--no-deps\",\n                        \"--message-format=json\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-2SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2025-01-10 mirai --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2025-01-10\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-20245-05-22-01\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"-b\",\n                    \"-l\",\n                    \"regex-automata,parking_lot_core,tokio,tokio_util\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate32\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo fmt -p crate3 -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"fmt\",\n                    \"-p\",\n                    \"crate3Rapx,\n        cmd: \"cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-10-12\",\n                        \"rapx\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                        \"--color=never\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu fmt\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"fmt\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu  --no-deps --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-depscolor=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2025-01-10 mirai --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2025-01-10\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n5-02-01 lockbud -k all -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2025-02-01\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"-b\",\n                    \"-l\",\n                    \"regex-automata,parking_lot_core,tokio,tokio_util\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rapx,\n        cmd: \"cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-05-2110-12\",\n                        \"rapx\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                    \"lockbud\",\n                    \"-k    \"--color=never\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu        ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo fmt -p crate4 -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"fmt\",\n                    \"-p\",\n                    \"crate4+nightly-x86_64-unknown-linux-gnu fmt\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"fmt\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2025-01-10 mirai --target x86_64-unknown-linux-gnu \",\n         expr: Io(\n           \"--\",\n                    \"--emi Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2025-01-10\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n5-02-01 lockbud -k all -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2025-02-01\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"-b\",\n                    \"-l\",\n                    \"regex-automata,parking_lot_core,tokio,tokio_util\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rapx,\n        cmd: \"cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                [\n    [\n                        \"cargo\",\n                        \"+nightly-2024-05-2110-12\",\n                        \"rapx\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                    \"lockbud\",\n                    \"-k    \"--color=never\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra --target x86_64-unknown-linux-gnu \",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n        \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu    ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        features_args: [],\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n]\n\n----\n\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25\n    |\n137 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `config::tests::`:\n    = note: inside `std::sys::net::connection::socket::unix::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25: 137:92\n    = note: inside `std::sys::process::unix::unix::<impl std::sys::process::unix::common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/unix.rs:76:31: 76:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1045:9: 1045:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.2/src/lib.rs:132:53: 132:68\n    = note: inside `duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::Expression::reader` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:356:20: 356:58\n    = note: inside `duct::Expression::read` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:280:26: 280:39\nnote: inside `output::toolchain::host_rust_toolchain`\n   --> src/output/toolchain.rs:265:19\n    |\n265 |     let channel = cmd!(\"rustup\", \"default\").read()?;\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `output::toolchain::Global::new`\n   --> src/output/toolchain.rs:68:39\n    |\n68  |         let (host_toolchain, rustc) = host_rust_toolchain().unwrap();\n    |                                       ^^^^^^^^^^^^^^^^^^^^^\n    = note: inside `<fn() -> output::toolchain::Global as std::ops::FnOnce<()>>::call_once - shim(fn() -> output::toolchain::Global)` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5: 250:71\n    = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:213:25: 213:28\n    = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/poison/once.rs:155:41: 155:60\n    = note: inside `std::sync::LazyLock::<output::toolchain::Global>::force` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:209:9: 215:11\n    = note: inside `<std::sync::LazyLock<output::toolchain::Global> as std::ops::Deref>::deref` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:312:9: 312:30\nnote: inside `output::toolchain::host_target_triple`\n   --> src/output/toolchain.rs:171:6\n    |\n171 |     &GLOBAL.host.host\n    |      ^^^^^^^^^^^\nnote: inside `layout::Packages::test_new`\n   --> src/layout/mod.rs:429:20\n    |\n429 |         let host = crate::output::host_target_triple().to_owned();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `config::tests::resolve`\n   --> src/config/tests/mod.rs:66:47\n    |\n66  |       let v = Config::from_json(json)?.resolve(&Packages::test_new(&[\n    |  _______________________________________________^\n67  | |         \"crate0\", \"crate1\", \"crate2\", \"crate3\", \"crate4\",\n68  | |     ]))?;\n    | |______^\nnote: inside closure\n   --> src/config/tests/mod.rs:47:17\n    |\n46  | #[test]\n    | ------- in this procedural macro expansion\n47  | fn resolve() -> Result<()> {\n    |                 ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'config::tests::resolve'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "config::tests::uri",
                "status": "failed",
                "duration_ms": 6,
                "error": "Error: No such file or directory (os error 2)\n\nLocation:\n    src/config/tests/mod.rs:140:19\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.09s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: `realpath` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1931:22\n     |\n1931 |     let r = unsafe { libc::realpath(path.as_ptr(), ptr::null_mut()) };\n     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `realpath` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `config::tests::`:\n     = note: inside `std::sys::fs::unix::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1931:22: 1931:68\n     = note: inside `<for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::path::PathBuf, std::io::Error> {std::sys::fs::unix::canonicalize} as std::ops::Fn<(&std::ffi::CStr,)>>::call - shim(for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::path::PathBuf, std::io::Error> {std::sys::fs::unix::canonicalize})` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:79:5: 79:67\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::fs::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/mod.rs:112:5: 112:47\n     = note: inside `std::fs::canonicalize::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2758:5: 2758:40\n     = note: inside `std::path::Path::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:2961:9: 2961:31\n     = note: inside `camino::Utf8Path::canonicalize` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1197:9: 1197:30\n     = note: inside `camino::Utf8Path::canonicalize_utf8` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1225:9: 1225:28\nnote: inside `config::uri::uri`\n    --> src/config/uri.rs:137:27\n     |\n137  |                 user_repo(path.canonicalize_utf8()?.as_str())?,\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/config/mod.rs:292:30\n     |\n292  |                         uri: uri::uri(repo)?,\n     |                              ^^^^^^^^^^^^^^\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/map.rs:95:28: 95:34\n     = note: inside `<serde_json::map::IntoIter as std::iter::Iterator>::try_fold::<(), {closure@std::iter::adapters::map::map_try_fold<'_, (std::string::String, serde_json::Value), std::result::Result<config::Config, eyre::Report>, (), std::ops::ControlFlow<std::ops::ControlFlow<config::Config>>, {closure@src/config/mod.rs:285:22: 285:44}, {closure@<std::iter::adapters::GenericShunt<'_, std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:285:22: 285:44}>, std::result::Result<std::convert::Infallible, eyre::Report>> as std::iter::Iterator>::try_fold<(), {closure@std::iter::Iterator::try_for_each::call<config::Config, std::ops::ControlFlow<config::Config>, fn(config::Config) -> std::ops::ControlFlow<config::Config> {std::ops::ControlFlow::<config::Config>::Break}>::{closure#0}}, std::ops::ControlFlow<config::Config>>::{closure#0}}>::{closure#0}}, std::ops::ControlFlow<std::ops::ControlFlow<config::Config>>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2400:21: 2400:32\n     = note: inside `<std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:285:22: 285:44}> as std::iter::Iterator>::try_fold::<(), {closure@<std::iter::adapters::GenericShunt<'_, std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:285:22: 285:44}>, std::result::Result<std::convert::Infallible, eyre::Report>> as std::iter::Iterator>::try_fold<(), {closure@std::iter::Iterator::try_for_each::call<config::Config, std::ops::ControlFlow<config::Config>, fn(config::Config) -> std::ops::ControlFlow<config::Config> {std::ops::ControlFlow::<config::Config>::Break}>::{closure#0}}, std::ops::ControlFlow<config::Config>>::{closure#0}}, std::ops::ControlFlow<std::ops::ControlFlow<config::Config>>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/map.rs:121:9: 121:63\n     = note: inside `<std::iter::adapters::GenericShunt<'_, std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:285:22: 285:44}>, std::result::Result<std::convert::Infallible, eyre::Report>> as std::iter::Iterator>::try_fold::<(), {closure@std::iter::Iterator::try_for_each::call<config::Config, std::ops::ControlFlow<config::Config>, fn(config::Config) -> std::ops::ControlFlow<config::Config> {std::ops::ControlFlow::<config::Config>::Break}>::{closure#0}}, std::ops::ControlFlow<config::Config>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/mod.rs:191:9: 198:15\n     = note: inside `<std::iter::adapters::GenericShunt<'_, std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:285:22: 285:44}>, std::result::Result<std::convert::Infallible, eyre::Report>> as std::iter::Iterator>::try_for_each::<fn(config::Config) -> std::ops::ControlFlow<config::Config> {std::ops::ControlFlow::<config::Config>::Break}, std::ops::ControlFlow<config::Config>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2461:9: 2461:35\n     = note: inside `<std::iter::adapters::GenericShunt<'_, std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:285:22: 285:44}>, std::result::Result<std::convert::Infallible, eyre::Report>> as std::iter::Iterator>::next` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/mod.rs:174:9: 174:46\n     = note: inside `<std::iter::adapters::GenericShunt<'_, std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:285:22: 285:44}>, std::result::Result<std::convert::Infallible, eyre::Report>> as std::iter::Iterator>::collect::<std::vec::Vec<config::Config>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2001:9: 2001:38\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:2021:49: 2021:60\n     = note: inside `std::iter::adapters::try_process::<std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:285:22: 285:44}>, config::Config, std::result::Result<std::convert::Infallible, eyre::Report>, {closure@<std::result::Result<std::vec::Vec<config::Config>, eyre::Report> as std::iter::FromIterator<std::result::Result<config::Config, eyre::Report>>>::from_iter<std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:285:22: 285:44}>>::{closure#0}}, std::vec::Vec<config::Config>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/mod.rs:160:17: 160:25\n     = note: inside `<std::result::Result<std::vec::Vec<config::Config>, eyre::Report> as std::iter::FromIterator<std::result::Result<config::Config, eyre::Report>>>::from_iter::<std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:285:22: 285:44}>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:2021:9: 2021:61\n     = note: inside `<std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:285:22: 285:44}> as std::iter::Iterator>::collect::<std::result::Result<std::vec::Vec<config::Config>, eyre::Report>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2001:9: 2001:38\nnote: inside `<config::Configs as std::convert::TryFrom<serde_json::Value>>::try_from`\n    --> src/config/mod.rs:283:25\n     |\n283  |               let mut v = obj\n     |  _________________________^\n284  | |                 .into_iter()\n285  | |                 .map(|(repo, deserializer)| {\n286  | |                     let config =\n...    |\n296  | |                 })\n297  | |                 .collect::<Result<Vec<_>>>()?;\n     | |____________________________________________^\nnote: inside closure\n    --> src/config/mod.rs:184:17\n     |\n184  | #[derive(Debug, Deserialize)]\n     |                 ^^^^^^^^^^^\n     = note: inside `std::result::Result::<serde_json::Value, serde_json::Error>::and_then::<config::Configs, {closure@src/config/mod.rs:184:17: 184:28}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:1381:22: 1381:27\nnote: inside `config::_::<impl config::_::_serde::Deserialize<'_> for config::Configs>::deserialize::<&mut serde_json::Deserializer<serde_json::de::StrRead<'_>>>`\n    --> src/config/mod.rs:184:17\n     |\n184  | #[derive(Debug, Deserialize)]\n     |                 ^^^^^^^^^^^\n     = note: inside `serde_json::de::from_trait::<'_, serde_json::de::StrRead<'_>, config::Configs>` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.140/src/de.rs:2501:22: 2501:59\n     = note: inside `serde_json::from_str::<'_, config::Configs>` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.140/src/de.rs:2701:5: 2701:38\nnote: inside `config::tests::uri`\n    --> src/config/tests/mod.rs:140:19\n     |\n140  |     let configs = serde_json::from_str::<Configs>(json)?;\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/config/tests/mod.rs:129:13\n     |\n128  | #[test]\n     | ------- in this procedural macro expansion\n129  | fn uri() -> Result<()> {\n     |             ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'config::tests::uri'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "db::info::get_default_branch",
                "status": "ok",
                "duration_ms": 1018,
                "error": null,
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25\n    |\n137 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `db::info::get_d`:\n    = note: inside `std::sys::net::connection::socket::unix::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25: 137:92\n    = note: inside `std::sys::process::unix::unix::<impl std::sys::process::unix::common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/unix.rs:76:31: 76:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1045:9: 1045:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.2/src/lib.rs:132:53: 132:68\n    = note: inside `duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::Expression::reader` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:356:20: 356:58\n    = note: inside `duct::Expression::read` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:280:26: 280:39\nnote: inside `db::info::gh_api`\n   --> src/db/info/mod.rs:20:5\n    |\n20  | /     cmd!(\"gh\", \"api\", arg, \"--jq\", jq)\n21  | |         .read()\n    | |_______________^\nnote: inside `db::info::default_branch`\n   --> src/db/info/mod.rs:27:5\n    |\n27  |     gh_api(arg, \".default_branch\".to_owned())\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `db::info::get_default_branch`\n   --> src/db/info/mod.rs:239:10\n    |\n239 |     dbg!(default_branch(user, repo)?, info_repo(user, repo)?);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/db/info/mod.rs:236:28\n    |\n235 | #[test]\n    | ------- in this procedural macro expansion\n236 | fn get_default_branch() -> Result<()> {\n    |                            ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'db::info::get_default_branch'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "db::info::github_date",
                "status": "ok",
                "duration_ms": 7,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "db::info::local::local_info_repo",
                "status": "ok",
                "duration_ms": 13,
                "error": null,
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25\n    |\n137 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `db::info::local`:\n    = note: inside `std::sys::net::connection::socket::unix::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25: 137:92\n    = note: inside `std::sys::process::unix::unix::<impl std::sys::process::unix::common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/unix.rs:76:31: 76:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1045:9: 1045:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.2/src/lib.rs:132:53: 132:68\n    = note: inside `duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::Expression::reader` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:356:20: 356:58\n    = note: inside `duct::Expression::read` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:280:26: 280:39\nnote: inside `db::info::local::current_branch`\n   --> src/db/info/local.rs:16:18\n    |\n16  |     let branch = cmd!(\"git\", \"branch\", \"--show-current\").dir(path).read()?;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `db::info::local::info_repo`\n   --> src/db/info/local.rs:10:18\n    |\n10  |     let branch = current_branch(path)?;\n    |                  ^^^^^^^^^^^^^^^^^^^^\nnote: inside `db::info::local::local_info_repo`\n   --> src/db/info/local.rs:77:28\n    |\n77  |     let (branch, commit) = info_repo(\".\").unwrap();\n    |                            ^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/db/info/local.rs:76:21\n    |\n75  | #[test]\n    | ------- in this procedural macro expansion\n76  | fn local_info_repo() {\n    |                     ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'db::info::local::local_info_repo'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "layout::audit::test_cargo_audit",
                "status": "failed",
                "duration_ms": 20,
                "error": "The application panicked (crashed).\nMessage:  called `Result::unwrap()` on an `Err` value: \n   0: No such file or directory (os error 2)\n\nLocation:\n   src/layout/audit.rs:34\n\n  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ SPANTRACE ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n   0: os_checker::layout::audit::generate_lockfile with workspace_dir=\"src/layout/tests\"\n      at src/layout/audit.rs:32\n   1: os_checker::layout::audit::cargo_audit with lock_file=Err(Os { code: 2, kind: NotFound, message: \"No such file or directory\" })\n      at src/layout/audit.rs:112\n\nBacktrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it.\nRun with RUST_BACKTRACE=full to include source snippets.\nLocation: src/layout/audit.rs:240\n\nBacktrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it.\nRun with RUST_BACKTRACE=full to include source snippets.\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: `realpath` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1931:22\n     |\n1931 |     let r = unsafe { libc::realpath(path.as_ptr(), ptr::null_mut()) };\n     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `realpath` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `layout::audit::`:\n     = note: inside `std::sys::fs::unix::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1931:22: 1931:68\n     = note: inside `<for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::path::PathBuf, std::io::Error> {std::sys::fs::unix::canonicalize} as std::ops::Fn<(&std::ffi::CStr,)>>::call - shim(for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::path::PathBuf, std::io::Error> {std::sys::fs::unix::canonicalize})` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:79:5: 79:67\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::fs::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/mod.rs:112:5: 112:47\n     = note: inside `std::fs::canonicalize::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2758:5: 2758:40\n     = note: inside `std::path::Path::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:2961:9: 2961:31\n     = note: inside `camino::Utf8Path::canonicalize` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1197:9: 1197:30\n     = note: inside `camino::Utf8Path::canonicalize_utf8` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1225:9: 1225:28\nnote: inside `layout::audit::cargo_audit`\n    --> src/layout/audit.rs:112:57\n     |\n112  |     let _span = error_span!(\"cargo_audit\", lock_file = ?lock_file.canonicalize_utf8()).entered();\n     |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `layout::audit::test_cargo_audit`\n    --> src/layout/audit.rs:240:10\n     |\n240  |     dbg!(cargo_audit(&dir).unwrap().problematic_pkgs);\n     |          ^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/layout/audit.rs:228:22\n     |\n227  | #[test]\n     | ------- in this procedural macro expansion\n228  | fn test_cargo_audit() {\n     |                      ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'layout::audit::test_cargo_audit'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "layout::tests::arceos_layout",
                "status": "failed",
                "duration_ms": 17,
                "error": "The application panicked (crashed).\nMessage:  called `Result::unwrap()` on an `Err` value: \n   0: No such file or directory (os error 2)\n\nLocation:\n   src/layout/mod.rs:149\n\nBacktrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it.\nRun with RUST_BACKTRACE=full to include source snippets.\nLocation: src/layout/tests.rs:14\n\nBacktrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it.\nRun with RUST_BACKTRACE=full to include source snippets.\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: `realpath` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1931:22\n     |\n1931 |     let r = unsafe { libc::realpath(path.as_ptr(), ptr::null_mut()) };\n     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `realpath` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `layout::tests::`:\n     = note: inside `std::sys::fs::unix::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1931:22: 1931:68\n     = note: inside `<for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::path::PathBuf, std::io::Error> {std::sys::fs::unix::canonicalize} as std::ops::Fn<(&std::ffi::CStr,)>>::call - shim(for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::path::PathBuf, std::io::Error> {std::sys::fs::unix::canonicalize})` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:79:5: 79:67\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::fs::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/mod.rs:112:5: 112:47\n     = note: inside `std::fs::canonicalize::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2758:5: 2758:40\n     = note: inside `std::path::Path::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:2961:9: 2961:31\n     = note: inside `camino::Utf8Path::canonicalize` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1197:9: 1197:30\n     = note: inside `camino::Utf8Path::canonicalize_utf8` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1225:9: 1225:28\nnote: inside `layout::Layout::parse::<&[&str; 1]>`\n    --> src/layout/mod.rs:149:25\n     |\n149  |         let root_path = Utf8PathBuf::from(repo_root).canonicalize_utf8()?;\n     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `layout::tests::arceos_layout`\n    --> src/layout/tests.rs:12:13\n     |\n12   |     assert!(Layout::parse(\"tmp\", excluded, &[]).is_err());\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/layout/tests.rs:9:19\n     |\n8    | #[test]\n     | ------- in this procedural macro expansion\n9    | fn arceos_layout() {\n     |                   ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'layout::tests::arceos_layout'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "layout::tests::cargo_check_verbose",
                "status": "failed",
                "duration_ms": 18,
                "error": "Error: \n   0: No such file or directory (os error 2)\n\nLocation:\n   src/layout/mod.rs:149\n\nBacktrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it.\nRun with RUST_BACKTRACE=full to include source snippets.\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: `realpath` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1931:22\n     |\n1931 |     let r = unsafe { libc::realpath(path.as_ptr(), ptr::null_mut()) };\n     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `realpath` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `layout::tests::`:\n     = note: inside `std::sys::fs::unix::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1931:22: 1931:68\n     = note: inside `<for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::path::PathBuf, std::io::Error> {std::sys::fs::unix::canonicalize} as std::ops::Fn<(&std::ffi::CStr,)>>::call - shim(for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::path::PathBuf, std::io::Error> {std::sys::fs::unix::canonicalize})` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:79:5: 79:67\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::fs::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/mod.rs:112:5: 112:47\n     = note: inside `std::fs::canonicalize::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2758:5: 2758:40\n     = note: inside `std::path::Path::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:2961:9: 2961:31\n     = note: inside `camino::Utf8Path::canonicalize` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1197:9: 1197:30\n     = note: inside `camino::Utf8Path::canonicalize_utf8` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1225:9: 1225:28\nnote: inside `layout::Layout::parse::<[&str; 0]>`\n    --> src/layout/mod.rs:149:25\n     |\n149  |         let root_path = Utf8PathBuf::from(repo_root).canonicalize_utf8()?;\n     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `layout::tests::cargo_check_verbose`\n    --> src/layout/tests.rs:22:18\n     |\n22   |     let layout = Layout::parse(\"repos/e1000-driver\", crate::utils::empty(), &[])?;\n     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/layout/tests.rs:20:29\n     |\n19   | #[test]\n     | ------- in this procedural macro expansion\n20   | fn cargo_check_verbose() -> Result<()> {\n     |                             ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'layout::tests::cargo_check_verbose'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "layout::tests::cargo_config_toml_deserialize",
                "status": "failed",
                "duration_ms": 5,
                "error": "Error: No such file or directory (os error 2)\n\nLocation:\n    src/layout/tests.rs:35:13\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: `open` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1185:36\n     |\n1185 |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode as c_int) })?;\n     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `open` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `layout::tests::`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1185:36: 1185:84\n     = note: inside `std::sys::pal::unix::cvt_r::<i32, {closure@std::sys::fs::unix::File::open_c::{closure#0}}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/mod.rs:317:19: 317:22\n     = note: inside `std::sys::fs::unix::File::open_c` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1185:18: 1185:87\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1173:42: 1173:66\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::fs::unix::File::open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1173:9: 1173:67\n     = note: inside `std::fs::OpenOptions::_open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1642:9: 1642:42\n     = note: inside `std::fs::OpenOptions::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1638:9: 1638:34\n     = note: inside `std::fs::File::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:423:9: 423:58\n     = note: inside `std::fs::read::inner` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:286:24: 286:40\n     = note: inside `std::fs::read::<&str>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:292:5: 292:25\nnote: inside `layout::tests::cargo_config_toml_deserialize`\n    --> src/layout/tests.rs:35:13\n     |\n35   |     let s = std::fs::read(\"repos/e1000-driver/examples/.cargo/config.toml\")?;\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/layout/tests.rs:28:39\n     |\n27   | #[test]\n     | ------- in this procedural macro expansion\n28   | fn cargo_config_toml_deserialize() -> Result<()> {\n     |                                       ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'layout::tests::cargo_config_toml_deserialize'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "layout::tests::cargo_config_toml_from_child_to_root",
                "status": "failed",
                "duration_ms": 5,
                "error": "Error: No such file or directory (os error 2)\n\nLocation:\n    src/layout/detect_targets.rs:245:17\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: `realpath` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1931:22\n     |\n1931 |     let r = unsafe { libc::realpath(path.as_ptr(), ptr::null_mut()) };\n     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `realpath` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `layout::tests::`:\n     = note: inside `std::sys::fs::unix::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1931:22: 1931:68\n     = note: inside `<for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::path::PathBuf, std::io::Error> {std::sys::fs::unix::canonicalize} as std::ops::Fn<(&std::ffi::CStr,)>>::call - shim(for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::path::PathBuf, std::io::Error> {std::sys::fs::unix::canonicalize})` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:79:5: 79:67\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::fs::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/mod.rs:112:5: 112:47\n     = note: inside `std::fs::canonicalize::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2758:5: 2758:40\n     = note: inside `std::path::Path::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:2961:9: 2961:31\n     = note: inside `camino::Utf8Path::canonicalize` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1197:9: 1197:30\n     = note: inside `camino::Utf8Path::canonicalize_utf8` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1225:9: 1225:28\nnote: inside `layout::detect_targets::search_from_child_to_root::<layout::detect_targets::CargoConfigTomlTarget, {closure@src/layout/detect_targets.rs:223:13: 223:19}>`\n    --> src/layout/detect_targets.rs:245:17\n     |\n245  |     let child = child.canonicalize_utf8()?;\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `layout::detect_targets::CargoConfigTomlTarget::search`\n    --> src/layout/detect_targets.rs:222:9\n     |\n222  | /         search_from_child_to_root(\n223  | |             |path| {\n224  | |                 path.extend([\".cargo\", \"config.toml\"]);\n225  | |                 if let Ok(target) = CargoConfigTomlTarget::new(path) {\n...    |\n235  | |             root,\n236  | |         )\n     | |_________^\nnote: inside `layout::tests::cargo_config_toml_from_child_to_root`\n    --> src/layout/tests.rs:57:18\n     |\n57   |     let target = CargoConfigTomlTarget::search(child, root)?;\n     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/layout/tests.rs:54:46\n     |\n53   | #[test]\n     | ------- in this procedural macro expansion\n54   | fn cargo_config_toml_from_child_to_root() -> Result<()> {\n     |                                              ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'layout::tests::cargo_config_toml_from_child_to_root'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "layout::tests::rust_toolchain",
                "status": "failed",
                "duration_ms": 5,
                "error": "Error: No such file or directory (os error 2)\n\nLocation:\n    src/layout/detect_targets.rs:245:17\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: `realpath` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1931:22\n     |\n1931 |     let r = unsafe { libc::realpath(path.as_ptr(), ptr::null_mut()) };\n     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `realpath` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `layout::tests::`:\n     = note: inside `std::sys::fs::unix::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1931:22: 1931:68\n     = note: inside `<for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::path::PathBuf, std::io::Error> {std::sys::fs::unix::canonicalize} as std::ops::Fn<(&std::ffi::CStr,)>>::call - shim(for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::path::PathBuf, std::io::Error> {std::sys::fs::unix::canonicalize})` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:79:5: 79:67\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::fs::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/mod.rs:112:5: 112:47\n     = note: inside `std::fs::canonicalize::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2758:5: 2758:40\n     = note: inside `std::path::Path::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:2961:9: 2961:31\n     = note: inside `camino::Utf8Path::canonicalize` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1197:9: 1197:30\n     = note: inside `camino::Utf8Path::canonicalize_utf8` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1225:9: 1225:28\nnote: inside `layout::detect_targets::search_from_child_to_root::<layout::detect_targets::RustToolchainToml, {closure@src/layout/detect_targets.rs:351:13: 351:19}>`\n    --> src/layout/detect_targets.rs:245:17\n     |\n245  |     let child = child.canonicalize_utf8()?;\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `layout::detect_targets::RustToolchain::search`\n    --> src/layout/detect_targets.rs:350:44\n     |\n350  |           let Some((toolchain, toml_path)) = search_from_child_to_root(\n     |  ____________________________________________^\n351  | |             |path| {\n352  | |                 path.push(\"rust-toolchain.toml\");\n353  | |                 if let Some(target) = RustToolchainToml::new(path) {\n...    |\n363  | |             repo_root,\n364  | |         )?\n     | |_________^\nnote: inside `layout::tests::rust_toolchain`\n    --> src/layout/tests.rs:79:21\n     |\n79   |     let toolchain = RustToolchain::search(pkg_dir.into(), root_dir.into())?;\n     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/layout/tests.rs:76:24\n     |\n75   | #[test]\n     | ------- in this procedural macro expansion\n76   | fn rust_toolchain() -> Result<()> {\n     |                        ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'layout::tests::rust_toolchain'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "output::toolchain::rustc_verbose",
                "status": "failed",
                "duration_ms": 88,
                "error": "\n\nerror: expect test failed\n   --> src/output/toolchain.rs:223:5\n\nYou can update all `expect!` tests by running:\n\n    env UPDATE_EXPECT=1 cargo test\n\nTo update a single test, place the cursor on `expect` token and use `run` feature of rust-analyzer.\n\nExpect:\n----\nRustc {\n    version: \"1.82.0-nightly (91376f416 2024-08-12)\",\n    commit_hash: \"91376f416222a238227c84a848d168835ede2cc3\",\n    commit_date: \"2024-08-12\",\n    host: \"x86_64-unknown-linux-gnu\",\n    release: \"1.82.0-nightly\",\n    llvm_version: \"19.1.0\",\n}\n\n----\n\nActual:\n----\nRustc {\n    version: \"1.89.0-nightly (5e16c6620 2025-05-24)\",\n    commit_hash: \"5e16c662062fd6dee91f0fe2a1580483488d80cf\",\n    commit_date: \"2025-05-24\",\n    host: \"x86_64-unknown-linux-gnu\",\n    release: \"1.89.0-nightly\",\n    llvm_version: \"20.1.5\",\n}\n\n----\n\nDiff:\n----\nRustc {\n    version: \"1.829.0-nightly (91376f4165e16c6620 20245-08-125-24)\",\n    commit_hash: \"91376f416222a238227c84a848d168835ede2cc35e16c662062fd6dee91f0fe2a1580483488d80cf\",\n    commit_date: \"20245-08-125-24\",\n    host: \"x86_64-unknown-linux-gnu\",\n    release: \"1.829.0-nightly\",\n    llvm_version: \"1920.1.05\",\n}\n\n----\n\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25\n    |\n137 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `output::toolcha`:\n    = note: inside `std::sys::net::connection::socket::unix::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25: 137:92\n    = note: inside `std::sys::process::unix::unix::<impl std::sys::process::unix::common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/unix.rs:76:31: 76:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1045:9: 1045:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.2/src/lib.rs:132:53: 132:68\n    = note: inside `duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::Expression::reader` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:356:20: 356:58\n    = note: inside `duct::Expression::read` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:280:26: 280:39\nnote: inside `output::toolchain::Rustc::new`\n   --> src/output/toolchain.rs:208:20\n    |\n208 |         let src = &cmd!(\"rustc\", \"-vV\").read()?;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `output::toolchain::rustc_verbose`\n   --> src/output/toolchain.rs:233:23\n    |\n233 |     .assert_debug_eq(&Rustc::new()?);\n    |                       ^^^^^^^^^^^^\nnote: inside closure\n   --> src/output/toolchain.rs:222:23\n    |\n220 | #[test]\n    | ------- in this procedural macro expansion\n221 | #[instrument(level = \"trace\")]\n222 | fn rustc_verbose() -> Result<()> {\n    |                       ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'output::toolchain::rustc_verbose'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "output::toolchain::test_host_rust_toolchain",
                "status": "ok",
                "duration_ms": 461,
                "error": null,
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25\n    |\n137 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `output::toolcha`:\n    = note: inside `std::sys::net::connection::socket::unix::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25: 137:92\n    = note: inside `std::sys::process::unix::unix::<impl std::sys::process::unix::common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/unix.rs:76:31: 76:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1045:9: 1045:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.2/src/lib.rs:132:53: 132:68\n    = note: inside `duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::Expression::reader` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:356:20: 356:58\n    = note: inside `duct::Expression::read` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:280:26: 280:39\nnote: inside `output::toolchain::host_rust_toolchain`\n   --> src/output/toolchain.rs:265:19\n    |\n265 |     let channel = cmd!(\"rustup\", \"default\").read()?;\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `output::toolchain::test_host_rust_toolchain`\n   --> src/output/toolchain.rs:293:10\n    |\n293 |     dbg!(host_rust_toolchain()?);\n    |          ^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/output/toolchain.rs:292:34\n    |\n290 | #[test]\n    | ------- in this procedural macro expansion\n291 | #[instrument(level = \"trace\")]\n292 | fn test_host_rust_toolchain() -> Result<()> {\n    |                                  ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'output::toolchain::test_host_rust_toolchain'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "run_checker::lockbud::tests::lockbud_output",
                "status": "failed",
                "duration_ms": 6,
                "error": "Error: No such file or directory (os error 2)\n\nLocation:\n    src/run_checker/lockbud.rs:29:19\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25\n    |\n137 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `run_checker::lo`:\n    = note: inside `std::sys::net::connection::socket::unix::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25: 137:92\n    = note: inside `std::sys::process::unix::unix::<impl std::sys::process::unix::common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/unix.rs:76:31: 76:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1045:9: 1045:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.2/src/lib.rs:132:53: 132:68\n    = note: inside `duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::Expression::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:314:20: 314:41\n    = note: inside `duct::Expression::run` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:254:9: 254:21\nnote: inside `run_checker::lockbud::tests::get_lockbud_result`\n   --> src/run_checker/lockbud.rs:29:19\n    |\n29  |           let out = duct::cmd!(\"cargo\", toolchain, \"lockbud\", \"-k\", \"all\")\n    |  ___________________^\n30  | |             .dir(\"repos/os-checker-test-suite\")\n31  | |             .stderr_capture()\n32  | |             .run()?;\n    | |__________________^\nnote: inside `run_checker::lockbud::tests::lockbud_output`\n   --> src/run_checker/lockbud.rs:38:17\n    |\n38  |         let s = get_lockbud_result()?;\n    |                 ^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/run_checker/lockbud.rs:37:28\n    |\n36  |     #[test]\n    |     ------- in this procedural macro expansion\n37  |     fn lockbud_output() -> Result<()> {\n    |                            ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'run_checker::lockbud::tests::lockbud_output'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "run_checker::rap::get_rap_result",
                "status": "failed",
                "duration_ms": 6,
                "error": "Error: No such file or directory (os error 2)\n\nLocation:\n    src/run_checker/rap.rs:24:15\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25\n    |\n137 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `run_checker::ra`:\n    = note: inside `std::sys::net::connection::socket::unix::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25: 137:92\n    = note: inside `std::sys::process::unix::unix::<impl std::sys::process::unix::common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/unix.rs:76:31: 76:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1045:9: 1045:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.2/src/lib.rs:132:53: 132:68\n    = note: inside `duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1425:32: 1425:59\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::Expression::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:314:20: 314:41\n    = note: inside `duct::Expression::run` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:254:9: 254:21\nnote: inside `run_checker::rap::get_rap_result`\n   --> src/run_checker/rap.rs:24:15\n    |\n24  |       let out = duct::cmd!(\"cargo\", toolchain, \"rapx\", \"-F\")\n    |  _______________^\n25  | |         .dir(\"../os-checker-test-suite/rap-checks-this\")\n26  | |         .stderr_capture()\n27  | |         .stdout_capture()\n28  | |         .unchecked()\n29  | |         .run()?;\n    | |______________^\nnote: inside closure\n   --> src/run_checker/rap.rs:22:28\n    |\n21  | #[test]\n    | ------- in this procedural macro expansion\n22  | pub fn get_rap_result() -> crate::Result<()> {\n    |                            ^^^^^^^^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'run_checker::rap::get_rap_result'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "run_checker::rudra::tests::rudra",
                "status": "ok",
                "duration_ms": 7,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "run_checker::semver_checks::semver_checks_output",
                "status": "failed",
                "duration_ms": 13889,
                "error": "    Building os-checker-types v0.6.1 (current)\n       Built [  11.763s] (current)\n     Parsing os-checker-types v0.6.1 (current)\nerror: unsupported rustdoc format v46 for file: /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/semver-checks/local-os_checker_types-0_6_1-01666ec060466c14/target/doc/os_checker_types.json\nError: command [\"cargo\", \"semver-checks\", \"--color=never\"] exited with code 1\n\nLocation:\n    src/run_checker/semver_checks.rs:19:18\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25\n    |\n137 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `run_checker::se`:\n    = note: inside `std::sys::net::connection::socket::unix::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25: 137:92\n    = note: inside `std::sys::process::unix::unix::<impl std::sys::process::unix::common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/unix.rs:76:31: 76:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1045:9: 1045:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.2/src/lib.rs:132:53: 132:68\n    = note: inside `duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::Expression::reader` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:356:20: 356:58\n    = note: inside `duct::Expression::read` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:280:26: 280:39\nnote: inside `run_checker::semver_checks::semver_checks_output`\n   --> src/run_checker/semver_checks.rs:19:18\n    |\n19  |       let output = duct::cmd!(\"cargo\", \"semver-checks\", \"--color=never\")\n    |  __________________^\n20  | |         .dir(\"os-checker-types\")\n21  | |         .read()?;\n    | |_______________^\nnote: inside closure\n   --> src/run_checker/semver_checks.rs:18:30\n    |\n17  | #[test]\n    | ------- in this procedural macro expansion\n18  | fn semver_checks_output() -> crate::Result<()> {\n    |                              ^^^^^^^^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'run_checker::semver_checks::semver_checks_output'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "utils::exlucded::test_pattern",
                "status": "ok",
                "duration_ms": 5,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "utils::exlucded::test_slice",
                "status": "ok",
                "duration_ms": 5,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "utils::exlucded::test_str",
                "status": "failed",
                "duration_ms": 5,
                "error": "\nthread 'utils::exlucded::test_str' panicked at src/utils/exlucded.rs:63:5:\nassertion failed: \"*.github\".exclude(\".github\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n",
                "miri_timeout": false
              },
              {
                "name": "utils::installation::which_checker",
                "status": "failed",
                "duration_ms": 23,
                "error": " INFO os_checker::utils::installation: checker_bin=\"lockbud\" location=\"/home/runner/.cargo/bin/lockbud\"\n INFO os_checker::utils::installation: checker_bin=\"mirai\" location=\"/home/runner/.cargo/bin/mirai\"\n\nthread 'utils::installation::which_checker' panicked at src/utils/installation.rs:108:40:\ncalled `Result::unwrap()` on an `Err` value: 未找到 mirai2\n\nCaused by:\n    command [\"which\", \"mirai2\"] exited with code 1\n\nLocation:\n    src/utils/installation.rs:79:22\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
                "miri_pass": false,
                "miri_output": "cmd=cargo miri test -p os-checker --bin os-checker -- utils::installation::which_checker\nProcess timed out for 1 minutes.",
                "miri_timeout": true
              },
              {
                "name": "utils::scan_for_targets::targets",
                "status": "ok",
                "duration_ms": 198,
                "error": null,
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25\n    |\n137 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `utils::scan_for`:\n    = note: inside `std::sys::net::connection::socket::unix::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25: 137:92\n    = note: inside `std::sys::process::unix::unix::<impl std::sys::process::unix::common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/unix.rs:76:31: 76:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1045:9: 1045:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.2/src/lib.rs:132:53: 132:68\n    = note: inside `duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::Expression::reader` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:356:20: 356:58\n    = note: inside `duct::Expression::read` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:280:26: 280:39\nnote: inside `utils::scan_for_targets::pattern_target_list`\n   --> src/utils/scan_for_targets.rs:23:23\n    |\n23  |     let target_list = duct::cmd!(\"rustc\", \"--print=target-list\").read().unwrap();\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/utils/scan_for_targets.rs:32:19\n    |\n32  |     let pattern = pattern_target_list();\n    |                   ^^^^^^^^^^^^^^^^^^^^^\n    = note: inside `<{closure@src/utils/scan_for_targets.rs:31:44: 31:46} as std::ops::FnOnce<()>>::call_once - shim` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5: 250:71\n    = note: inside `<fn() -> regex::bytes::Regex as std::ops::FnOnce<()>>::call_once - shim(fn() -> regex::bytes::Regex)` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5: 250:71\n    = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:213:25: 213:28\n    = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/poison/once.rs:155:41: 155:60\n    = note: inside `std::sync::LazyLock::<regex::bytes::Regex>::force` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:209:9: 215:11\n    = note: inside `<std::sync::LazyLock<regex::bytes::Regex> as std::ops::Deref>::deref` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:312:9: 312:30\nnote: inside `utils::scan_for_targets::extract`\n   --> src/utils/scan_for_targets.rs:37:5\n    |\n37  |     RE.captures_iter(src)\n    |     ^^^^^^^^^^^^^^^^^^^^^\nnote: inside `utils::scan_for_targets::targets`\n   --> src/utils/scan_for_targets.rs:46:17\n    |\n46  |     let found = extract(s.as_bytes()).collect_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/utils/scan_for_targets.rs:42:13\n    |\n41  | #[test]\n    | ------- in this procedural macro expansion\n42  | fn targets() {\n    |             ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'utils::scan_for_targets::targets'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "utils::test_glob",
                "status": "ok",
                "duration_ms": 5,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "utils::test_pat",
                "status": "ok",
                "duration_ms": 6,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "utils::test_walk",
                "status": "ok",
                "duration_ms": 5,
                "error": null,
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.09s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: `statx` not available when isolation is enabled\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:160:9\n    |\n160 | /         syscall!(\n161 | |             fn statx(\n162 | |                 fd: c_int,\n163 | |                 pathname: *const c_char,\n...   |\n167 | |             ) -> c_int;\n168 | |         );\n    | |_________^ `statx` not available when isolation is enabled\n    |\n    = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n    = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n    = note: BACKTRACE on thread `utils::test_wal`:\n    = note: inside `std::sys::fs::unix::try_statx::statx` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/weak.rs:182:26: 182:42\n    = note: inside `std::sys::fs::unix::try_statx` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:176:31: 176:69\n    = note: inside `std::sys::fs::unix::lstat` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1915:37: 1920:10\n    = note: inside `<for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::sys::fs::unix::FileAttr, std::io::Error> {std::sys::fs::unix::lstat} as std::ops::Fn<(&std::ffi::CStr,)>>::call - shim(for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::sys::fs::unix::FileAttr, std::io::Error> {std::sys::fs::unix::lstat})` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:79:5: 79:67\n    = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::sys::fs::unix::FileAttr>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n    = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::sys::fs::unix::FileAttr>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n    = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::sys::fs::unix::FileAttr>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n    = note: inside `std::sys::fs::symlink_metadata` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/mod.rs:104:5: 104:40\n    = note: inside `std::fs::symlink_metadata::<&std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2495:5: 2495:44\n    = note: inside `walkdir::DirEntry::from_path` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/walkdir-2.5.0/src/dent.rs:263:13: 263:38\n    = note: inside `<walkdir::IntoIter as std::iter::Iterator>::next` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/walkdir-2.5.0/src/lib.rs:694:30: 694:66\n    = note: inside `<walkdir::FilterEntry<walkdir::IntoIter, {closure@src/utils/mod.rs:70:23: 70:35}> as std::iter::Iterator>::next` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/walkdir-2.5.0/src/lib.rs:1074:30: 1074:44\n    = note: inside `<walkdir::FilterEntry<walkdir::IntoIter, {closure@src/utils/mod.rs:70:23: 70:35}> as std::iter::Iterator>::try_fold::<(), {closure@std::iter::Iterator::find_map::check<std::result::Result<walkdir::DirEntry, walkdir::Error>, camino::Utf8PathBuf, &mut {closure@src/utils/mod.rs:77:21: 77:28}>::{closure#0}}, std::ops::ControlFlow<camino::Utf8PathBuf>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2399:29: 2399:40\n    = note: inside `<walkdir::FilterEntry<walkdir::IntoIter, {closure@src/utils/mod.rs:70:23: 70:35}> as std::iter::Iterator>::find_map::<camino::Utf8PathBuf, &mut {closure@src/utils/mod.rs:77:21: 77:28}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2894:9: 2894:36\n    = note: inside `<std::iter::FilterMap<walkdir::FilterEntry<walkdir::IntoIter, {closure@src/utils/mod.rs:70:23: 70:35}>, {closure@src/utils/mod.rs:77:21: 77:28}> as std::iter::Iterator>::next` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/filter_map.rs:64:9: 64:40\n    = note: inside `<std::iter::FilterMap<walkdir::FilterEntry<walkdir::IntoIter, {closure@src/utils/mod.rs:70:23: 70:35}>, {closure@src/utils/mod.rs:77:21: 77:28}> as std::iter::Iterator>::collect::<std::vec::Vec<camino::Utf8PathBuf>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2001:9: 2001:38\nnote: inside `utils::walk_dir::<camino::Utf8PathBuf, [&str; 0], &str, fn(camino::Utf8PathBuf) -> std::option::Option<camino::Utf8PathBuf> {std::option::Option::<camino::Utf8PathBuf>::Some}>`\n   --> src/utils/mod.rs:67:5\n    |\n67  | /     walkdir::WalkDir::new(dir)\n68  | |         .max_depth(max_depth) // 目录递归上限\n69  | |         .into_iter()\n70  | |         .filter_entry(move |entry| {\n...   |\n97  | |         })\n98  | |         .collect()\n    | |__________________^\nnote: inside `utils::test_walk`\n   --> src/utils/mod.rs:175:17\n    |\n175 |     let files = walk_dir(\".\", 2, empty(), &[], Some);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/utils/mod.rs:173:15\n    |\n172 | #[test]\n    | ------- in this procedural macro expansion\n173 | fn test_walk() {\n    |               ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'utils::test_walk'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "utils::test_walk_dir",
                "status": "ok",
                "duration_ms": 5,
                "error": null,
                "miri_pass": false,
                "miri_output": "warning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-types/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/os-checker-database/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\nwarning: /tmp/os-checker-plugin-cargo/os-checker/os-checker/Cargo.toml: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf)\nerror: unsupported operation: `statx` not available when isolation is enabled\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:160:9\n    |\n160 | /         syscall!(\n161 | |             fn statx(\n162 | |                 fd: c_int,\n163 | |                 pathname: *const c_char,\n...   |\n167 | |             ) -> c_int;\n168 | |         );\n    | |_________^ `statx` not available when isolation is enabled\n    |\n    = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n    = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n    = note: BACKTRACE on thread `utils::test_wal`:\n    = note: inside `std::sys::fs::unix::try_statx::statx` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/weak.rs:182:26: 182:42\n    = note: inside `std::sys::fs::unix::try_statx` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:176:31: 176:69\n    = note: inside `std::sys::fs::unix::lstat` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1915:37: 1920:10\n    = note: inside `<for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::sys::fs::unix::FileAttr, std::io::Error> {std::sys::fs::unix::lstat} as std::ops::Fn<(&std::ffi::CStr,)>>::call - shim(for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::sys::fs::unix::FileAttr, std::io::Error> {std::sys::fs::unix::lstat})` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:79:5: 79:67\n    = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::sys::fs::unix::FileAttr>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n    = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::sys::fs::unix::FileAttr>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n    = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::sys::fs::unix::FileAttr>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n    = note: inside `std::sys::fs::symlink_metadata` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/mod.rs:104:5: 104:40\n    = note: inside `std::fs::symlink_metadata::<&std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2495:5: 2495:44\n    = note: inside `walkdir::DirEntry::from_path` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/walkdir-2.5.0/src/dent.rs:263:13: 263:38\n    = note: inside `<walkdir::IntoIter as std::iter::Iterator>::next` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/walkdir-2.5.0/src/lib.rs:694:30: 694:66\n    = note: inside `<walkdir::FilterEntry<walkdir::IntoIter, {closure@src/utils/mod.rs:70:23: 70:35}> as std::iter::Iterator>::next` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/walkdir-2.5.0/src/lib.rs:1074:30: 1074:44\n    = note: inside `<walkdir::FilterEntry<walkdir::IntoIter, {closure@src/utils/mod.rs:70:23: 70:35}> as std::iter::Iterator>::try_fold::<(), {closure@std::iter::Iterator::find_map::check<std::result::Result<walkdir::DirEntry, walkdir::Error>, camino::Utf8PathBuf, &mut {closure@src/utils/mod.rs:77:21: 77:28}>::{closure#0}}, std::ops::ControlFlow<camino::Utf8PathBuf>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2399:29: 2399:40\n    = note: inside `<walkdir::FilterEntry<walkdir::IntoIter, {closure@src/utils/mod.rs:70:23: 70:35}> as std::iter::Iterator>::find_map::<camino::Utf8PathBuf, &mut {closure@src/utils/mod.rs:77:21: 77:28}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2894:9: 2894:36\n    = note: inside `<std::iter::FilterMap<walkdir::FilterEntry<walkdir::IntoIter, {closure@src/utils/mod.rs:70:23: 70:35}>, {closure@src/utils/mod.rs:77:21: 77:28}> as std::iter::Iterator>::next` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/filter_map.rs:64:9: 64:40\n    = note: inside `<std::iter::FilterMap<walkdir::FilterEntry<walkdir::IntoIter, {closure@src/utils/mod.rs:70:23: 70:35}>, {closure@src/utils/mod.rs:77:21: 77:28}> as std::iter::Iterator>::collect::<std::vec::Vec<camino::Utf8PathBuf>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2001:9: 2001:38\nnote: inside `utils::walk_dir::<camino::Utf8PathBuf, [glob::Pattern; 1], &str, {closure@src/utils/mod.rs:163:60: 163:66}>`\n   --> src/utils/mod.rs:67:5\n    |\n67  | /     walkdir::WalkDir::new(dir)\n68  | |         .max_depth(max_depth) // 目录递归上限\n69  | |         .into_iter()\n70  | |         .filter_entry(move |entry| {\n...   |\n97  | |         })\n98  | |         .collect()\n    | |__________________^\nnote: inside `utils::test_walk_dir`\n   --> src/utils/mod.rs:163:23\n    |\n163 |       let cargo_tomls = walk_dir(\".\", 3, dirs_excluded, &[], |file| {\n    |  _______________________^\n164 | |         (file.file_name() == Some(\"Cargo.toml\")).then_some(file)\n165 | |     });\n    | |______^\nnote: inside closure\n   --> src/utils/mod.rs:158:19\n    |\n157 | #[test]\n    | ------- in this procedural macro expansion\n158 | fn test_walk_dir() {\n    |                   ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-c987965b29d3f8bf 'utils::test_walk_dir'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              }
            ],
            "failed": 20,
            "duration_ms": 31254
          }
        ],
        "failed": 20,
        "duration_ms": 31254,
        "pkg_tests_count": 45,
        "workspace_tests_count": 45
      },
      "tests": 0,
      "examples": 1,
      "benches": 0,
      "authors": [],
      "description": "Run a collection of checkers targeting Rust crates, and report bad checking results and statistics.",
      "documentation": null,
      "readme": "README.md",
      "homepage": null,
      "keywords": [],
      "categories": [],
      "rust_version": "1.80.0",
      "diag_total_count": 3,
      "last_commit_time": "2025-05-25T12:42:52Z",
      "release_count": 10,
      "last_release_size": 109881,
      "last_release_time": "2025-04-22T10:09:15Z"
    },
    "os-checker-database": {
      "version": "0.6.1",
      "dependencies": 18,
      "lib": false,
      "bin": true,
      "testcases": null,
      "tests": 0,
      "examples": 1,
      "benches": 0,
      "authors": [],
      "description": "The output transformer of os-checker CLI, used to generate static data for os-checker WebUI.",
      "documentation": null,
      "readme": null,
      "homepage": null,
      "keywords": [],
      "categories": [],
      "rust_version": "1.80.0",
      "diag_total_count": 4,
      "last_commit_time": "2025-05-25T12:42:52Z",
      "release_count": 5,
      "last_release_size": 19915,
      "last_release_time": "2025-04-22T10:07:32Z"
    },
    "os-checker-types": {
      "version": "0.6.1",
      "dependencies": 11,
      "lib": true,
      "bin": false,
      "testcases": null,
      "tests": 0,
      "examples": 0,
      "benches": 0,
      "authors": [],
      "description": "The output types of os-checker CLI.",
      "documentation": null,
      "readme": null,
      "homepage": null,
      "keywords": [],
      "categories": [],
      "rust_version": "1.80.0",
      "diag_total_count": 5,
      "last_commit_time": "2025-05-25T12:42:52Z",
      "release_count": 6,
      "last_release_size": 15959,
      "last_release_time": "2025-04-22T10:05:53Z"
    }
  }
}