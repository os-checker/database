{
  "user": "os-checker",
  "repo": "os-checker",
  "pkgs": {
    "os-checker": {
      "version": "0.5.0",
      "dependencies": 34,
      "lib": false,
      "bin": true,
      "testcases": {
        "tests": [
          {
            "id": "os-checker::bin/os-checker",
            "kind": "bin",
            "binary_name": "os-checker",
            "testcases": [
              {
                "name": "config::cmd::tests::custom_cmd",
                "status": "failed",
                "duration_ms": 80,
                "error": "\n\nerror: expect test failed\n   --> src/config/cmd/tests.rs:72:5\n\nYou can update all `expect!` tests by running:\n\n    env UPDATE_EXPECT=1 cargo test\n\nTo update a single test, place the cursor on `expect` token and use `run` feature of rust-analyzer.\n\nExpect:\n----\nResolve {\n    pkg_name: \"nothing\",\n    pkg_dir: \".\",\n    target: \"x86_64-unknown-linux-gnu\",\n    target_overriden: false,\n    checker: Fmt,\n    cmd: \"cargo fmt --target=x86_64-unknown-linux-gnu --check\",\n    expr: Io(\n        Dir(\n            \".\",\n        ),\n        Cmd(\n            [\n                \"cargo\",\n                \"fmt\",\n                \"--target=x86_64-unknown-linux-gnu\",\n                \"--check\",\n            ],\n        ),\n    ),\n}\n\n----\n\nActual:\n----\nResolve {\n    pkg_name: \"nothing\",\n    pkg_dir: \".\",\n    target: \"x86_64-unknown-linux-gnu\",\n    target_overridden: false,\n    env: {},\n    toolchain: Some(\n        0,\n    ),\n    checker: Fmt,\n    cmd: \"cargo fmt --target=x86_64-unknown-linux-gnu --check\",\n    expr: Io(\n        Dir(\n            \".\",\n        ),\n        Cmd(\n            [\n                \"cargo\",\n                \"fmt\",\n                \"--target=x86_64-unknown-linux-gnu\",\n                \"--check\",\n            ],\n        ),\n    ),\n    audit: None,\n}\n\n----\n\nDiff:\n----\nResolve {\n    pkg_name: \"nothing\",\n    pkg_dir: \".\",\n    target: \"x86_64-unknown-linux-gnu\",\n    target_overridden: false,\n    env: {},\n    toolchain: Some(\n        0,\n    ),\n    checker: Fmt,\n    cmd: \"cargo fmt --target=x86_64-unknown-linux-gnu --check\",\n    expr: Io(\n        Dir(\n            \".\",\n        ),\n        Cmd(\n            [\n                \"cargo\",\n                \"fmt\",\n                \"--target=x86_64-unknown-linux-gnu\",\n                \"--check\",\n            ],\n        ),\n    ),\n    audit: None,\n}\n\n----\n\n",
                "miri_pass": false,
                "miri_output": "cmd=cargo miri test -p os-checker --bin os-checker -- config::cmd::tests::custom_cmd\nProcess timed out for 1 minutes.",
                "miri_timeout": true
              },
              {
                "name": "config::cmd::tests::custom_target",
                "status": "ok",
                "duration_ms": 48,
                "error": null,
                "miri_pass": false,
                "miri_output": "cmd=cargo miri test -p os-checker --bin os-checker -- config::cmd::tests::custom_target\nProcess timed out for 1 minutes.",
                "miri_timeout": true
              },
              {
                "name": "config::cmd::tests::custom_without_target",
                "status": "ok",
                "duration_ms": 52,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "config::deserialization::config_options::target_env",
                "status": "ok",
                "duration_ms": 40,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "config::deserialization::tests::schema",
                "status": "ok",
                "duration_ms": 56,
                "error": null,
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.47s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: `open` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1179:36\n     |\n1179 |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode as c_int) })?;\n     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `open` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `config::deseria`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1179:36: 1179:84\n     = note: inside `std::sys::pal::unix::cvt_r::<i32, {closure@std::sys::pal::unix::fs::File::open_c::{closure#0}}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/mod.rs:325:19: 325:22\n     = note: inside `std::sys::pal::unix::fs::File::open_c` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1179:18: 1179:87\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1167:42: 1167:66\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::sys::pal::unix::fs::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::sys::pal::unix::fs::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::sys::pal::unix::fs::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::pal::unix::fs::File::open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1167:9: 1167:67\n     = note: inside `std::fs::OpenOptions::_open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1541:9: 1541:42\n     = note: inside `std::fs::OpenOptions::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1537:9: 1537:34\n     = note: inside `std::fs::File::create::<&camino::Utf8Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:451:9: 451:87\nnote: inside `config::deserialization::gen_schema`\n    --> src/config/deserialization.rs:243:5\n     |\n243  |     std::fs::File::create(path)?.write_all(json.as_bytes())?;\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `config::deserialization::tests::schema`\n    --> src/config/deserialization/tests.rs:5:5\n     |\n5    |     gen_schema(\"assets/schema.json\".into())?;\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/config/deserialization/tests.rs:4:16\n     |\n3    | #[test]\n     | ------- in this procedural macro expansion\n4    | fn schema() -> Result<()> {\n     |                ^^^^^^^^^^\n     = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'config::deserialization::tests::schema'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "config::tests::bad_check",
                "status": "ok",
                "duration_ms": 1682,
                "error": null,
                "miri_pass": false,
                "miri_output": "cmd=cargo miri test -p os-checker --bin os-checker -- config::tests::bad_check\nProcess timed out for 1 minutes.",
                "miri_timeout": true
              },
              {
                "name": "config::tests::batch",
                "status": "failed",
                "duration_ms": 1149,
                "error": "\n\nerror: expect test failed\n   --> ./snapshots/large-batch-split-by-half.txt\n\nYou can update all `expect!` tests by running:\n\n    env UPDATE_EXPECT=1 cargo test\n\nTo update a single test, place the cursor on `expect` token and use `run` feature of rust-analyzer.\n\nExpect:\n----\n[\n    Configs(\n        [\n            Config {\n                uri: Github(\n                    \"a/001\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n            Config {\n                uri: Github(\n                    \"a/002\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n            Config {\n                uri: Github(\n                    \"a/003\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n            Config {\n                uri: Github(\n                    \"a/004\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n            Config {\n                uri: Github(\n                    \"a/005\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n        ],\n    ),\n    Configs(\n        [\n            Config {\n                uri: Github(\n                    \"a/006\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n            Config {\n                uri: Github(\n                    \"a/007\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n            Config {\n                uri: Github(\n                    \"a/008\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n            Config {\n                uri: Github(\n                    \"a/009\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n            Config {\n                uri: Github(\n                    \"a/010\",\n                ),\n                config: RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n        ],\n    ),\n]\n\n----\n\nActual:\n----\n[\n    Configs(\n        [\n            Config {\n                uri: Github(\n                    \"a/001\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/002\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/003\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/004\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/005\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n        ],\n    ),\n    Configs(\n        [\n            Config {\n                uri: Github(\n                    \"a/006\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/007\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/008\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/009\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/010\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n        ],\n    ),\n]\n\n----\n\nDiff:\n----\n[\n    Configs(\n        [\n            Config {\n                uri: Github(\n                    \"a/001\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/002\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/003\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/004\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/005\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n        ],\n    ),\n    Configs(\n        [\n            Config {\n                uri: Github(\n                    \"a/006\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/007\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/008\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/009\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n            Config {\n                uri: Github(\n                    \"a/010\",\n                ),\n                config: RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                db: None,\n            },\n        ],\n    ),\n]\n\n----\n\n",
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.50s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: `open` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1179:36\n     |\n1179 |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode as c_int) })?;\n     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `open` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `config::tests::`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1179:36: 1179:84\n     = note: inside `std::sys::pal::unix::cvt_r::<i32, {closure@std::sys::pal::unix::fs::File::open_c::{closure#0}}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/mod.rs:325:19: 325:22\n     = note: inside `std::sys::pal::unix::fs::File::open_c` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1179:18: 1179:87\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1167:42: 1167:66\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::sys::pal::unix::fs::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::sys::pal::unix::fs::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::sys::pal::unix::fs::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::pal::unix::fs::File::open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1167:9: 1167:67\n     = note: inside `std::fs::OpenOptions::_open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1541:9: 1541:42\n     = note: inside `std::fs::OpenOptions::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1537:9: 1537:34\n     = note: inside `std::fs::File::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:383:9: 383:58\n     = note: inside `std::fs::read_to_string::inner` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:312:24: 312:40\n     = note: inside `std::fs::read_to_string::<&camino::Utf8Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:319:5: 319:25\nnote: inside `config::Configs::from_json_path`\n    --> src/config/mod.rs:157:20\n     |\n157  |         let json = std::fs::read_to_string(path)\n     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `config::tests::make_batch::<{closure@src/config/tests/mod.rs:37:30: 37:35}>`\n    --> src/config/tests/mod.rs:30:19\n     |\n30   |     let configs = Configs::from_json_path(LARGE_JSON_PATH.into()).unwrap();\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `config::tests::batch`\n    --> src/config/tests/mod.rs:37:19\n     |\n37   |     let batches = make_batch(|len| len / 2);\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/config/tests/mod.rs:36:15\n     |\n35   | #[test]\n     | ------- in this procedural macro expansion\n36   | fn batch() -> Result<()> {\n     |               ^^^^^^^^^^\n     = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'config::tests::batch'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "config::tests::merge_configs",
                "status": "failed",
                "duration_ms": 69,
                "error": "\n\nerror: expect test failed\n   --> ./snapshots/merge-configs.txt\n\nYou can update all `expect!` tests by running:\n\n    env UPDATE_EXPECT=1 cargo test\n\nTo update a single test, place the cursor on `expect` token and use `run` feature of rust-analyzer.\n\nExpect:\n----\nConfigs(\n    [\n        Config {\n            uri: Github(\n                \"user1/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                cmds: Cmds {\n                    map: {\n                        Fmt: false,\n                    },\n                },\n                packages: {},\n            },\n            db: None,\n        },\n        Config {\n            uri: Github(\n                \"user2/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                cmds: Cmds {\n                    map: {\n                        Clippy: \"cargo clippy\",\n                    },\n                },\n                packages: {},\n            },\n            db: None,\n        },\n        Config {\n            uri: Github(\n                \"user3/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                cmds: Cmds {\n                    map: {},\n                },\n                packages: {\n                    \"a\": RepoConfig {\n                        meta: None,\n                        setup: None,\n                        targets: Some(\n                            Targets(\n                                \"x86_64-unknown-linux-gnu\",\n                            ),\n                        ),\n                        no_install_targets: None,\n                        cmds: Cmds {\n                            map: {},\n                        },\n                        packages: {},\n                    },\n                },\n            },\n            db: None,\n        },\n    ],\n)\n----\n\nActual:\n----\nConfigs(\n    [\n        Config {\n            uri: Github(\n                \"user1/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                env: None,\n                cmds: Cmds {\n                    map: {\n                        Fmt: false,\n                    },\n                },\n                packages: {},\n            },\n            db: None,\n        },\n        Config {\n            uri: Github(\n                \"user2/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                env: None,\n                cmds: Cmds {\n                    map: {\n                        Clippy: \"cargo clippy\",\n                    },\n                },\n                packages: {},\n            },\n            db: None,\n        },\n        Config {\n            uri: Github(\n                \"user3/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                env: None,\n                cmds: Cmds {\n                    map: {},\n                },\n                packages: {\n                    \"a\": RepoConfig {\n                        meta: None,\n                        setup: None,\n                        targets: Some(\n                            Targets(\n                                \"x86_64-unknown-linux-gnu\",\n                            ),\n                        ),\n                        no_install_targets: None,\n                        env: None,\n                        cmds: Cmds {\n                            map: {},\n                        },\n                        packages: {},\n                    },\n                },\n            },\n            db: None,\n        },\n    ],\n)\n----\n\nDiff:\n----\nConfigs(\n    [\n        Config {\n            uri: Github(\n                \"user1/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                env: None,\n                cmds: Cmds {\n                    map: {\n                        Fmt: false,\n                    },\n                },\n                packages: {},\n            },\n            db: None,\n        },\n        Config {\n            uri: Github(\n                \"user2/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                env: None,\n                cmds: Cmds {\n                    map: {\n                        Clippy: \"cargo clippy\",\n                    },\n                },\n                packages: {},\n            },\n            db: None,\n        },\n        Config {\n            uri: Github(\n                \"user3/repo\",\n            ),\n            config: RepoConfig {\n                meta: None,\n                setup: None,\n                targets: None,\n                no_install_targets: None,\n                env: None,\n                cmds: Cmds {\n                    map: {},\n                },\n                packages: {\n                    \"a\": RepoConfig {\n                        meta: None,\n                        setup: None,\n                        targets: Some(\n                            Targets(\n                                \"x86_64-unknown-linux-gnu\",\n                            ),\n                        ),\n                        no_install_targets: None,\n                        env: None,\n                        cmds: Cmds {\n                            map: {},\n                        },\n                        packages: {},\n                    },\n                },\n            },\n            db: None,\n        },\n    ],\n)\n----\n\n",
                "miri_pass": false,
                "miri_output": "cmd=cargo miri test -p os-checker --bin os-checker -- config::tests::merge_configs\nProcess timed out for 1 minutes.",
                "miri_timeout": true
              },
              {
                "name": "config::tests::parse_and_resolve",
                "status": "failed",
                "duration_ms": 130,
                "error": "\n\nerror: expect test failed\n   --> ./snapshots/parse-a-json.txt\n\nYou can update all `expect!` tests by running:\n\n    env UPDATE_EXPECT=1 cargo test\n\nTo update a single test, place the cursor on `expect` token and use `run` feature of rust-analyzer.\n\nExpect:\n----\n[\n    Config {\n        uri: Github(\n            \"os-checker/os-checker\",\n        ),\n        config: RepoConfig {\n            setup: None,\n            targets: None,\n            cmds: Cmds {\n                map: {\n                    Lockbud: true,\n                    Clippy: \"cargo clippy -F a,b,c\",\n                },\n            },\n            packages: {},\n        },\n    },\n    Config {\n        uri: Github(\n            \"user/repo\",\n        ),\n        config: RepoConfig {\n            setup: None,\n            targets: None,\n            cmds: Cmds {\n                map: {\n                    Lockbud: false,\n                },\n            },\n            packages: {\n                \"crate1\": RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                \"crate2\": RepoConfig {\n                    setup: None,\n                    targets: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n        },\n    },\n]\n\n----\n\nActual:\n----\n[\n    Config {\n        uri: Github(\n            \"os-checker/os-checker\",\n        ),\n        config: RepoConfig {\n            meta: None,\n            setup: None,\n            targets: None,\n            no_install_targets: None,\n            env: None,\n            cmds: Cmds {\n                map: {\n                    Lockbud: true,\n                    Clippy: \"cargo clippy -F a,b,c\",\n                },\n            },\n            packages: {},\n        },\n        db: None,\n    },\n    Config {\n        uri: Github(\n            \"user/repo\",\n        ),\n        config: RepoConfig {\n            meta: None,\n            setup: None,\n            targets: None,\n            no_install_targets: None,\n            env: None,\n            cmds: Cmds {\n                map: {\n                    Lockbud: false,\n                },\n            },\n            packages: {\n                \"crate1\": RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                \"crate2\": RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n        },\n        db: None,\n    },\n]\n\n----\n\nDiff:\n----\n[\n    Config {\n        uri: Github(\n            \"os-checker/os-checker\",\n        ),\n        config: RepoConfig {\n            meta: None,\n            setup: None,\n            targets: None,\n            no_install_targets: None,\n            env: None,\n            cmds: Cmds {\n                map: {\n                    Lockbud: true,\n                    Clippy: \"cargo clippy -F a,b,c\",\n                },\n            },\n            packages: {},\n        },\n        db: None,\n    },\n    Config {\n        uri: Github(\n            \"user/repo\",\n        ),\n        config: RepoConfig {\n            meta: None,\n            setup: None,\n            targets: None,\n            no_install_targets: None,\n            env: None,\n            cmds: Cmds {\n                map: {\n                    Lockbud: false,\n                },\n            },\n            packages: {\n                \"crate1\": RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n                \"crate2\": RepoConfig {\n                    meta: None,\n                    setup: None,\n                    targets: None,\n                    no_install_targets: None,\n                    env: None,\n                    cmds: Cmds {\n                        map: {},\n                    },\n                    packages: {},\n                },\n            },\n        },\n        db: None,\n    },\n]\n\n----\n\n",
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.58s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: `open` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1179:36\n     |\n1179 |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode as c_int) })?;\n     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `open` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `config::tests::`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1179:36: 1179:84\n     = note: inside `std::sys::pal::unix::cvt_r::<i32, {closure@std::sys::pal::unix::fs::File::open_c::{closure#0}}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/mod.rs:325:19: 325:22\n     = note: inside `std::sys::pal::unix::fs::File::open_c` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1179:18: 1179:87\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1167:42: 1167:66\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::sys::pal::unix::fs::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::sys::pal::unix::fs::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::sys::pal::unix::fs::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::pal::unix::fs::File::open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1167:9: 1167:67\n     = note: inside `std::fs::OpenOptions::_open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1541:9: 1541:42\n     = note: inside `std::fs::OpenOptions::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1537:9: 1537:34\n     = note: inside `std::fs::File::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:383:9: 383:58\n     = note: inside `std::fs::read_to_string::inner` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:312:24: 312:40\n     = note: inside `std::fs::read_to_string::<&camino::Utf8Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:319:5: 319:25\nnote: inside `config::Configs::from_json_path`\n    --> src/config/mod.rs:157:20\n     |\n157  |         let json = std::fs::read_to_string(path)\n     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `config::tests::parse_and_resolve`\n    --> src/config/tests/mod.rs:18:19\n     |\n18   |     let configs = Configs::from_json_path(JSON_PATH.into())?;\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/config/tests/mod.rs:17:27\n     |\n16   | #[test]\n     | ------- in this procedural macro expansion\n17   | fn parse_and_resolve() -> Result<()> {\n     |                           ^^^^^^^^^^\n     = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'config::tests::parse_and_resolve'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "config::tests::parse_assets",
                "status": "failed",
                "duration_ms": 76,
                "error": "Error: 从 `assets/repos-default.json` 读取仓库列表失败！请输入正确的 json 路径。\n\nCaused by:\n    No such file or directory (os error 2)\n\nLocation:\n    src/config/mod.rs:158:14\n",
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.55s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: `open` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1179:36\n     |\n1179 |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode as c_int) })?;\n     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `open` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `config::tests::`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1179:36: 1179:84\n     = note: inside `std::sys::pal::unix::cvt_r::<i32, {closure@std::sys::pal::unix::fs::File::open_c::{closure#0}}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/mod.rs:325:19: 325:22\n     = note: inside `std::sys::pal::unix::fs::File::open_c` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1179:18: 1179:87\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1167:42: 1167:66\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::sys::pal::unix::fs::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::sys::pal::unix::fs::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::sys::pal::unix::fs::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::pal::unix::fs::File::open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1167:9: 1167:67\n     = note: inside `std::fs::OpenOptions::_open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1541:9: 1541:42\n     = note: inside `std::fs::OpenOptions::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1537:9: 1537:34\n     = note: inside `std::fs::File::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:383:9: 383:58\n     = note: inside `std::fs::read_to_string::inner` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:312:24: 312:40\n     = note: inside `std::fs::read_to_string::<&camino::Utf8Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:319:5: 319:25\nnote: inside `config::Configs::from_json_path`\n    --> src/config/mod.rs:157:20\n     |\n157  |         let json = std::fs::read_to_string(path)\n     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `config::tests::parse_assets`\n    --> src/config/tests/mod.rs:11:5\n     |\n11   |     Configs::from_json_path(\"assets/repos-ui.json\".into())?;\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/config/tests/mod.rs:10:22\n     |\n9    | #[test]\n     | ------- in this procedural macro expansion\n10   | fn parse_assets() -> Result<()> {\n     |                      ^^^^^^^^^^\n     = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'config::tests::parse_assets'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "config::tests::parse_cmds",
                "status": "failed",
                "duration_ms": 52,
                "error": "\n\nerror: expect test failed\n   --> ./snapshots/single-cmd.txt\n\nYou can update all `expect!` tests by running:\n\n    env UPDATE_EXPECT=1 cargo test\n\nTo update a single test, place the cursor on `expect` token and use `run` feature of rust-analyzer.\n\nExpect:\n----\nConfig {\n    uri: Github(\n        \"user/repo\",\n    ),\n    config: RepoConfig {\n        setup: None,\n        targets: None,\n        cmds: Cmds {\n            map: {\n                Clippy: \"cargo clippy\",\n            },\n        },\n        packages: {},\n    },\n}\n\n----\n\nActual:\n----\nConfig {\n    uri: Github(\n        \"user/repo\",\n    ),\n    config: RepoConfig {\n        meta: None,\n        setup: None,\n        targets: None,\n        no_install_targets: None,\n        env: None,\n        cmds: Cmds {\n            map: {\n                Clippy: \"cargo clippy\",\n            },\n        },\n        packages: {},\n    },\n    db: None,\n}\n\n----\n\nDiff:\n----\nConfig {\n    uri: Github(\n        \"user/repo\",\n    ),\n    config: RepoConfig {\n        meta: None,\n        setup: None,\n        targets: None,\n        no_install_targets: None,\n        env: None,\n        cmds: Cmds {\n            map: {\n                Clippy: \"cargo clippy\",\n            },\n        },\n        packages: {},\n    },\n    db: None,\n}\n\n----\n\n",
                "miri_pass": false,
                "miri_output": "cmd=cargo miri test -p os-checker --bin os-checker -- config::tests::parse_cmds\nProcess timed out for 1 minutes.",
                "miri_timeout": true
              },
              {
                "name": "config::tests::resolve",
                "status": "failed",
                "duration_ms": 40223,
                "error": "info: component 'rustfmt' for target 'x86_64-unknown-linux-gnu' is up to date\n\n\nerror: expect test failed\n   --> ./snapshots/resolve.txt\n\nYou can update all `expect!` tests by running:\n\n    env UPDATE_EXPECT=1 cargo test\n\nTo update a single test, place the cursor on `expect` token and use `run` feature of rust-analyzer.\n\nExpect:\n----\n[\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo fmt -p crate0 -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"fmt\",\n                    \"-p\",\n                    \"crate0\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-05-21\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-05-21\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo fmt -p crate2 -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"fmt\",\n                    \"-p\",\n                    \"crate2\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target=x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Env(\n                \"RUSTFLAGS\",\n                \"-cfg=abc\",\n            ),\n            Io(\n                Dir(\n                    \"\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"clippy\",\n                        \"--target=x86_64-unknown-linux-gnu\",\n                        \"--no-deps\",\n                        \"--message-format=json\",\n                    ],\n                ),\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-05-21\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo fmt -p crate3 -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"fmt\",\n                    \"-p\",\n                    \"crate3\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-05-21\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo fmt -p crate4 -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"fmt\",\n                    \"-p\",\n                    \"crate4\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overriden: false,\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-05-21\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n    },\n]\n\n----\n\nActual:\n----\n[\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu fmt -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"fmt\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2024-02-05 mirai --target x86_64-unknown-linux-gnu --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-02-05\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-10-05\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rap,\n        cmd: \"cargo +nightly-2024-10-12 rap -F -M -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-10-12\",\n                        \"rap\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2024-02-05 mirai --target x86_64-unknown-linux-gnu --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-02-05\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-10-05\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rap,\n        cmd: \"cargo +nightly-2024-10-12 rap -F -M -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-10-12\",\n                        \"rap\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu fmt -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"fmt\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target=x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Env(\n                \"RUSTFLAGS\",\n                \"-cfg=abc\",\n            ),\n            Io(\n                Dir(\n                    \"\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"clippy\",\n                        \"--target=x86_64-unknown-linux-gnu\",\n                        \"--no-deps\",\n                        \"--message-format=json\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2024-02-05 mirai --target x86_64-unknown-linux-gnu --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-02-05\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-10-05\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rap,\n        cmd: \"cargo +nightly-2024-10-12 rap -F -M -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-10-12\",\n                        \"rap\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu fmt -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"fmt\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2024-02-05 mirai --target x86_64-unknown-linux-gnu --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-02-05\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-10-05\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rap,\n        cmd: \"cargo +nightly-2024-10-12 rap -F -M -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-10-12\",\n                        \"rap\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu fmt -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"fmt\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2024-02-05 mirai --target x86_64-unknown-linux-gnu --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-02-05\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-10-05\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rap,\n        cmd: \"cargo +nightly-2024-10-12 rap -F -M -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-10-12\",\n                        \"rap\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n]\n\n----\n\nDiff:\n----\n[\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo fmt -p crate0+nightly-x86_64-unknown-linux-gnu fmt -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"fmt\",\n                    \"-p+nightly-x86_64-unknown-linux-gnu\",\n                    \"crate0fmt\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-05-21\",\n                    \"lockbudSemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2024-02-05 mirai --target x86_64-unknown-linux-gnu --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-02-05\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-10-05\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rap,\n        cmd: \"cargo +nightly-2024-10-12 rap -F -M -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-10-12\",\n                        \"rap\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                ],\n        \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu    ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate0\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-21SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2024-02-05 mirai --target x86_64-unknown-linux-gnu --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-02-05\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-05-2110-05\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate21\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo fmt -p crate2 -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"fmt\",\n                    \"-p\",\n                    \"crate2Rap,\n        cmd: \"cargo +nightly-2024-10-12 rap -F -M -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-10-12\",\n                        \"rap\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate1\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu fmt -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"fmt\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target=x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Env(\n                \"RUSTFLAGS\",\n                \"-cfg=abc\",\n            ),\n            Io(\n                Dir(\n                    \"\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"clippy\",\n                        \"--target=x86_64-unknown-linux-gnu\",\n                        \"--no-deps\",\n                        \"--message-format=json\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-21SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2024-02-05 mirai --target x86_64-unknown-linux-gnu --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-02-05\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-05-2110-05\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate32\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo fmt -p crate3 -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"fmt\",\n                    \"-p\",\n                    \"crate3Rap,\n        cmd: \"cargo +nightly-2024-10-12 rap -F -M -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-10-12\",\n                        \"rap\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate2\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu fmt -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"fmt\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Clippy,\n        cmd: \"cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"clippy\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--no-deps\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-21SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2024-02-05 mirai --target x86_64-unknown-linux-gnu --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-02-05\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-05-2110-05\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate43\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo fmt -p crate4 -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"fmt\",\n                    \"-p\",\n                    \"crate4\",\n                    \"--\",\n                    \"--emiRap,\n        cmd: \"cargo +nightly-2024-10-12 rap -F -M -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                    [\n                        \"cargo\",\n                        \"+nightly-2024-10-12\",\n                        \"rap\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate3\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Fmt,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu fmt -- --emit=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"fmt\",\n                    \"--\",\n                    \"--emit=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: SemverChecks,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"semver-checks\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Mirai,\n        cmd: \"cargo +nightly-2024-02-05 mirai --target x86_64-unknown-linux-gnu --message-format=json\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-02-05\",\n                    \"mirai\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                    \"--message-format=json\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Lockbud,\n        cmd: \"cargo +nightly-2024-05-21 lockbud -k all10-05 lockbud -k all -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2024-10-05\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rap,\n        cmd: \"cargo +nightly-2024-10-12 rap -F -M -- --target x86_64-unknown-linux-gnu\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Io(\n                Env(\n                    \"RAP_LOG\",\n                    \"WARN\",\n                ),\n                Cmd(\n                [\n    [\n                        \"cargo\",\n                        \"+nightly-2024-05-2110-12\",\n                    \"lockbud\",\n                    \"-k\",\n                    \"all\",\n                    \"--\",\n                    \"--target\",\n                    \"x86_64-unknown-linux-gnu    \"rap\",\n                        \"-F\",\n                        \"-M\",\n                        \"--\",\n                        \"--target\",\n                        \"x86_64-unknown-linux-gnu\",\n                    ],\n                ),\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Rudra,\n        cmd: \"cargo +nightly-2021-10-21 rudra\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-2021-10-21\",\n                    \"rudra\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Outdated,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu outdated -R --exit-code=2\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"outdated\",\n                    \"-R\",\n                    \"--exit-code=2\",\n                    \"--color=never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n    Resolve {\n        pkg_name: \"crate4\",\n        pkg_dir: \"\",\n        target: \"x86_64-unknown-linux-gnu\",\n        target_overridden: false,\n        env: {},\n        toolchain: Some(\n            0,\n        ),\n        checker: Geiger,\n        cmd: \"cargo +nightly-x86_64-unknown-linux-gnu geiger --output-format Ascii\",\n        expr: Io(\n            Dir(\n                \"\",\n            ),\n            Cmd(\n                [\n                    \"cargo\",\n                    \"+nightly-x86_64-unknown-linux-gnu\",\n                    \"geiger\",\n                    \"--output-format\",\n                    \"Ascii\",\n                    \"--color\",\n                    \"never\",\n                ],\n            ),\n        ),\n        audit: None,\n    },\n]\n\n----\n\n",
                "miri_pass": false,
                "miri_output": "cmd=cargo miri test -p os-checker --bin os-checker -- config::tests::resolve\nProcess timed out for 1 minutes.",
                "miri_timeout": true
              },
              {
                "name": "config::tests::uri",
                "status": "failed",
                "duration_ms": 52,
                "error": "Error: No such file or directory (os error 2)\n\nLocation:\n    src/config/tests/mod.rs:140:19\n",
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.48s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: `realpath` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1914:12\n     |\n1914 |         Ok(libc::realpath(path.as_ptr(), ptr::null_mut()))\n     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `realpath` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `config::tests::`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1914:12: 1914:58\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::pal::unix::fs::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1913:13: 1915:7\n     = note: inside `std::fs::canonicalize::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2655:5: 2655:40\n     = note: inside `std::path::Path::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:2962:9: 2962:31\n     = note: inside `camino::Utf8Path::canonicalize` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1197:9: 1197:30\n     = note: inside `camino::Utf8Path::canonicalize_utf8` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1225:9: 1225:28\nnote: inside `config::uri::uri`\n    --> src/config/uri.rs:122:27\n     |\n122  |                 user_repo(path.canonicalize_utf8()?.as_str())?,\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/config/mod.rs:252:30\n     |\n252  |                         uri: uri::uri(repo)?,\n     |                              ^^^^^^^^^^^^^^\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/map.rs:95:28: 95:34\n     = note: inside `<serde_json::map::IntoIter as std::iter::Iterator>::try_fold::<(), {closure@std::iter::adapters::map::map_try_fold<'_, (std::string::String, serde_json::Value), std::result::Result<config::Config, eyre::Report>, (), std::ops::ControlFlow<std::ops::ControlFlow<config::Config>>, {closure@src/config/mod.rs:245:22: 245:44}, {closure@<std::iter::adapters::GenericShunt<'_, std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:245:22: 245:44}>, std::result::Result<std::convert::Infallible, eyre::Report>> as std::iter::Iterator>::try_fold<(), {closure@std::iter::Iterator::try_for_each::call<config::Config, std::ops::ControlFlow<config::Config>, fn(config::Config) -> std::ops::ControlFlow<config::Config> {std::ops::ControlFlow::<config::Config>::Break}>::{closure#0}}, std::ops::ControlFlow<config::Config>>::{closure#0}}>::{closure#0}}, std::ops::ControlFlow<std::ops::ControlFlow<config::Config>>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2370:21: 2370:32\n     = note: inside `<std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:245:22: 245:44}> as std::iter::Iterator>::try_fold::<(), {closure@<std::iter::adapters::GenericShunt<'_, std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:245:22: 245:44}>, std::result::Result<std::convert::Infallible, eyre::Report>> as std::iter::Iterator>::try_fold<(), {closure@std::iter::Iterator::try_for_each::call<config::Config, std::ops::ControlFlow<config::Config>, fn(config::Config) -> std::ops::ControlFlow<config::Config> {std::ops::ControlFlow::<config::Config>::Break}>::{closure#0}}, std::ops::ControlFlow<config::Config>>::{closure#0}}, std::ops::ControlFlow<std::ops::ControlFlow<config::Config>>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/map.rs:121:9: 121:63\n     = note: inside `<std::iter::adapters::GenericShunt<'_, std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:245:22: 245:44}>, std::result::Result<std::convert::Infallible, eyre::Report>> as std::iter::Iterator>::try_fold::<(), {closure@std::iter::Iterator::try_for_each::call<config::Config, std::ops::ControlFlow<config::Config>, fn(config::Config) -> std::ops::ControlFlow<config::Config> {std::ops::ControlFlow::<config::Config>::Break}>::{closure#0}}, std::ops::ControlFlow<config::Config>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/mod.rs:191:9: 198:15\n     = note: inside `<std::iter::adapters::GenericShunt<'_, std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:245:22: 245:44}>, std::result::Result<std::convert::Infallible, eyre::Report>> as std::iter::Iterator>::try_for_each::<fn(config::Config) -> std::ops::ControlFlow<config::Config> {std::ops::ControlFlow::<config::Config>::Break}, std::ops::ControlFlow<config::Config>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2431:9: 2431:35\n     = note: inside `<std::iter::adapters::GenericShunt<'_, std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:245:22: 245:44}>, std::result::Result<std::convert::Infallible, eyre::Report>> as std::iter::Iterator>::next` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/mod.rs:174:9: 174:46\n     = note: inside `<std::iter::adapters::GenericShunt<'_, std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:245:22: 245:44}>, std::result::Result<std::convert::Infallible, eyre::Report>> as std::iter::Iterator>::collect::<std::vec::Vec<config::Config>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:1971:9: 1971:38\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:1985:49: 1985:60\n     = note: inside `std::iter::adapters::try_process::<std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:245:22: 245:44}>, config::Config, std::result::Result<std::convert::Infallible, eyre::Report>, {closure@<std::result::Result<std::vec::Vec<config::Config>, eyre::Report> as std::iter::FromIterator<std::result::Result<config::Config, eyre::Report>>>::from_iter<std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:245:22: 245:44}>>::{closure#0}}, std::vec::Vec<config::Config>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/mod.rs:160:17: 160:25\n     = note: inside `<std::result::Result<std::vec::Vec<config::Config>, eyre::Report> as std::iter::FromIterator<std::result::Result<config::Config, eyre::Report>>>::from_iter::<std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:245:22: 245:44}>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:1985:9: 1985:61\n     = note: inside `<std::iter::Map<serde_json::map::IntoIter, {closure@src/config/mod.rs:245:22: 245:44}> as std::iter::Iterator>::collect::<std::result::Result<std::vec::Vec<config::Config>, eyre::Report>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:1971:9: 1971:38\nnote: inside `<config::Configs as std::convert::TryFrom<serde_json::Value>>::try_from`\n    --> src/config/mod.rs:243:25\n     |\n243  |               let mut v = obj\n     |  _________________________^\n244  | |                 .into_iter()\n245  | |                 .map(|(repo, deserializer)| {\n246  | |                     let config =\n...    |\n256  | |                 })\n257  | |                 .collect::<Result<Vec<_>>>()?;\n     | |____________________________________________^\nnote: inside closure\n    --> src/config/mod.rs:144:17\n     |\n144  | #[derive(Debug, Deserialize)]\n     |                 ^^^^^^^^^^^\n     = note: inside `std::result::Result::<serde_json::Value, serde_json::Error>::and_then::<config::Configs, {closure@src/config/mod.rs:144:17: 144:28}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:1353:22: 1353:27\nnote: inside `config::_::<impl config::_::_serde::Deserialize<'_> for config::Configs>::deserialize::<&mut serde_json::Deserializer<serde_json::de::StrRead<'_>>>`\n    --> src/config/mod.rs:144:17\n     |\n144  | #[derive(Debug, Deserialize)]\n     |                 ^^^^^^^^^^^\n     = note: inside `serde_json::de::from_trait::<'_, serde_json::de::StrRead<'_>, config::Configs>` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.132/src/de.rs:2495:22: 2495:59\n     = note: inside `serde_json::from_str::<'_, config::Configs>` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.132/src/de.rs:2696:5: 2696:38\nnote: inside `config::tests::uri`\n    --> src/config/tests/mod.rs:140:19\n     |\n140  |     let configs = serde_json::from_str::<Configs>(json)?;\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/config/tests/mod.rs:129:13\n     |\n128  | #[test]\n     | ------- in this procedural macro expansion\n129  | fn uri() -> Result<()> {\n     |             ^^^^^^^^^^\n     = note: this error originates in the derive macro `Deserialize` which comes from the expansion of the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'config::tests::uri'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "db::info::get_default_branch",
                "status": "ok",
                "duration_ms": 1839,
                "error": null,
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.55s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/net.rs:133:25\n    |\n133 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `db::info::get_d`:\n    = note: inside `std::sys::pal::unix::net::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/net.rs:133:25: 133:92\n    = note: inside `std::sys::pal::unix::process::process_inner::<impl std::sys::pal::unix::process::process_common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/process/process_unix.rs:77:31: 77:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1045:9: 1045:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.1/src/lib.rs:91:21: 91:36\n    = note: inside `duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::Expression::reader` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:356:20: 356:58\n    = note: inside `duct::Expression::read` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:280:26: 280:39\nnote: inside `db::info::gh_api`\n   --> src/db/info/mod.rs:15:5\n    |\n15  | /     cmd!(\"gh\", \"api\", arg, \"--jq\", jq)\n16  | |         .read()\n    | |_______________^\nnote: inside `db::info::default_branch`\n   --> src/db/info/mod.rs:22:5\n    |\n22  |     gh_api(arg, \".default_branch\".to_owned())\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `db::info::get_default_branch`\n   --> src/db/info/mod.rs:215:10\n    |\n215 |     dbg!(default_branch(user, repo)?, info_repo(user, repo)?);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/db/info/mod.rs:212:28\n    |\n211 | #[test]\n    | ------- in this procedural macro expansion\n212 | fn get_default_branch() -> Result<()> {\n    |                            ^^^^^^^^^^\n    = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'db::info::get_default_branch'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "db::info::github_date",
                "status": "ok",
                "duration_ms": 56,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "layout::audit::test_cargo_audit",
                "status": "failed",
                "duration_ms": 91,
                "error": "The application panicked (crashed).\nMessage:  called `Result::unwrap()` on an `Err` value: \n   0: No such file or directory (os error 2)\n\nLocation:\n   src/layout/audit.rs:34\n\n  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ SPANTRACE ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n   0: os_checker::layout::audit::generate_lockfile with workspace_dir=\"src/layout/tests\"\n      at src/layout/audit.rs:32\n   1: os_checker::layout::audit::cargo_audit with lock_file=Err(Os { code: 2, kind: NotFound, message: \"No such file or directory\" })\n      at src/layout/audit.rs:114\n\nBacktrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it.\nRun with RUST_BACKTRACE=full to include source snippets.\nLocation: src/layout/audit.rs:235\n\nBacktrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it.\nRun with RUST_BACKTRACE=full to include source snippets.\n",
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.52s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: `realpath` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1914:12\n     |\n1914 |         Ok(libc::realpath(path.as_ptr(), ptr::null_mut()))\n     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `realpath` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `layout::audit::`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1914:12: 1914:58\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::pal::unix::fs::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1913:13: 1915:7\n     = note: inside `std::fs::canonicalize::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2655:5: 2655:40\n     = note: inside `std::path::Path::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:2962:9: 2962:31\n     = note: inside `camino::Utf8Path::canonicalize` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1197:9: 1197:30\n     = note: inside `camino::Utf8Path::canonicalize_utf8` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1225:9: 1225:28\nnote: inside `layout::audit::cargo_audit`\n    --> src/layout/audit.rs:114:57\n     |\n114  |     let _span = error_span!(\"cargo_audit\", lock_file = ?lock_file.canonicalize_utf8()).entered();\n     |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `layout::audit::test_cargo_audit`\n    --> src/layout/audit.rs:235:10\n     |\n235  |     dbg!(cargo_audit(&dir).unwrap().problematic_pkgs);\n     |          ^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/layout/audit.rs:223:22\n     |\n222  | #[test]\n     | ------- in this procedural macro expansion\n223  | fn test_cargo_audit() {\n     |                      ^\n     = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'layout::audit::test_cargo_audit'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "layout::tests::arceos_layout",
                "status": "failed",
                "duration_ms": 114,
                "error": "The application panicked (crashed).\nMessage:  called `Result::unwrap()` on an `Err` value: \n   0: No such file or directory (os error 2)\n\nLocation:\n   src/layout/mod.rs:133\n\nBacktrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it.\nRun with RUST_BACKTRACE=full to include source snippets.\nLocation: src/layout/tests.rs:14\n\nBacktrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it.\nRun with RUST_BACKTRACE=full to include source snippets.\n",
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.51s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: `realpath` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1914:12\n     |\n1914 |         Ok(libc::realpath(path.as_ptr(), ptr::null_mut()))\n     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `realpath` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `layout::tests::`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1914:12: 1914:58\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::pal::unix::fs::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1913:13: 1915:7\n     = note: inside `std::fs::canonicalize::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2655:5: 2655:40\n     = note: inside `std::path::Path::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:2962:9: 2962:31\n     = note: inside `camino::Utf8Path::canonicalize` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1197:9: 1197:30\n     = note: inside `camino::Utf8Path::canonicalize_utf8` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1225:9: 1225:28\nnote: inside `layout::Layout::parse`\n    --> src/layout/mod.rs:133:25\n     |\n133  |         let root_path = Utf8PathBuf::from(repo_root).canonicalize_utf8()?;\n     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `layout::tests::arceos_layout`\n    --> src/layout/tests.rs:12:13\n     |\n12   |     assert!(Layout::parse(\"tmp\", excluded).is_err());\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/layout/tests.rs:9:19\n     |\n8    | #[test]\n     | ------- in this procedural macro expansion\n9    | fn arceos_layout() {\n     |                   ^\n     = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'layout::tests::arceos_layout'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "layout::tests::cargo_check_verbose",
                "status": "failed",
                "duration_ms": 96,
                "error": "Error: \n   0: No such file or directory (os error 2)\n\nLocation:\n   src/layout/mod.rs:133\n\nBacktrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it.\nRun with RUST_BACKTRACE=full to include source snippets.\n",
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.46s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: `realpath` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1914:12\n     |\n1914 |         Ok(libc::realpath(path.as_ptr(), ptr::null_mut()))\n     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `realpath` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `layout::tests::`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1914:12: 1914:58\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::pal::unix::fs::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1913:13: 1915:7\n     = note: inside `std::fs::canonicalize::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2655:5: 2655:40\n     = note: inside `std::path::Path::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:2962:9: 2962:31\n     = note: inside `camino::Utf8Path::canonicalize` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1197:9: 1197:30\n     = note: inside `camino::Utf8Path::canonicalize_utf8` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1225:9: 1225:28\nnote: inside `layout::Layout::parse`\n    --> src/layout/mod.rs:133:25\n     |\n133  |         let root_path = Utf8PathBuf::from(repo_root).canonicalize_utf8()?;\n     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `layout::tests::cargo_check_verbose`\n    --> src/layout/tests.rs:22:18\n     |\n22   |     let layout = Layout::parse(\"repos/e1000-driver\", &[])?;\n     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/layout/tests.rs:20:29\n     |\n19   | #[test]\n     | ------- in this procedural macro expansion\n20   | fn cargo_check_verbose() -> Result<()> {\n     |                             ^^^^^^^^^^\n     = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'layout::tests::cargo_check_verbose'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "layout::tests::cargo_config_toml_deserialize",
                "status": "failed",
                "duration_ms": 31,
                "error": "Error: No such file or directory (os error 2)\n\nLocation:\n    src/layout/tests.rs:35:13\n",
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.50s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: `open` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1179:36\n     |\n1179 |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode as c_int) })?;\n     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `open` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `layout::tests::`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1179:36: 1179:84\n     = note: inside `std::sys::pal::unix::cvt_r::<i32, {closure@std::sys::pal::unix::fs::File::open_c::{closure#0}}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/mod.rs:325:19: 325:22\n     = note: inside `std::sys::pal::unix::fs::File::open_c` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1179:18: 1179:87\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1167:42: 1167:66\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::sys::pal::unix::fs::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::sys::pal::unix::fs::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::sys::pal::unix::fs::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::pal::unix::fs::File::open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1167:9: 1167:67\n     = note: inside `std::fs::OpenOptions::_open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1541:9: 1541:42\n     = note: inside `std::fs::OpenOptions::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1537:9: 1537:34\n     = note: inside `std::fs::File::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:383:9: 383:58\n     = note: inside `std::fs::read::inner` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:269:24: 269:40\n     = note: inside `std::fs::read::<&str>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:276:5: 276:25\nnote: inside `layout::tests::cargo_config_toml_deserialize`\n    --> src/layout/tests.rs:35:13\n     |\n35   |     let s = std::fs::read(\"repos/e1000-driver/examples/.cargo/config.toml\")?;\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/layout/tests.rs:28:39\n     |\n27   | #[test]\n     | ------- in this procedural macro expansion\n28   | fn cargo_config_toml_deserialize() -> Result<()> {\n     |                                       ^^^^^^^^^^\n     = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'layout::tests::cargo_config_toml_deserialize'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "layout::tests::cargo_config_toml_from_child_to_root",
                "status": "failed",
                "duration_ms": 41,
                "error": "Error: No such file or directory (os error 2)\n\nLocation:\n    src/layout/detect_targets.rs:247:17\n",
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.43s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: `realpath` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1914:12\n     |\n1914 |         Ok(libc::realpath(path.as_ptr(), ptr::null_mut()))\n     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `realpath` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `layout::tests::`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1914:12: 1914:58\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::pal::unix::fs::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1913:13: 1915:7\n     = note: inside `std::fs::canonicalize::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2655:5: 2655:40\n     = note: inside `std::path::Path::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:2962:9: 2962:31\n     = note: inside `camino::Utf8Path::canonicalize` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1197:9: 1197:30\n     = note: inside `camino::Utf8Path::canonicalize_utf8` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1225:9: 1225:28\nnote: inside `layout::detect_targets::search_from_child_to_root::<layout::detect_targets::CargoConfigTomlTarget, {closure@src/layout/detect_targets.rs:225:13: 225:19}>`\n    --> src/layout/detect_targets.rs:247:17\n     |\n247  |     let child = child.canonicalize_utf8()?;\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `layout::detect_targets::CargoConfigTomlTarget::search`\n    --> src/layout/detect_targets.rs:224:9\n     |\n224  | /         search_from_child_to_root(\n225  | |             |path| {\n226  | |                 path.extend([\".cargo\", \"config.toml\"]);\n227  | |                 if let Ok(target) = CargoConfigTomlTarget::new(path) {\n...    |\n237  | |             root,\n238  | |         )\n     | |_________^\nnote: inside `layout::tests::cargo_config_toml_from_child_to_root`\n    --> src/layout/tests.rs:57:18\n     |\n57   |     let target = CargoConfigTomlTarget::search(child, root)?;\n     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/layout/tests.rs:54:46\n     |\n53   | #[test]\n     | ------- in this procedural macro expansion\n54   | fn cargo_config_toml_from_child_to_root() -> Result<()> {\n     |                                              ^^^^^^^^^^\n     = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'layout::tests::cargo_config_toml_from_child_to_root'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "layout::tests::rust_toolchain",
                "status": "failed",
                "duration_ms": 40,
                "error": "Error: No such file or directory (os error 2)\n\nLocation:\n    src/layout/detect_targets.rs:247:17\n",
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.46s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: `realpath` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1914:12\n     |\n1914 |         Ok(libc::realpath(path.as_ptr(), ptr::null_mut()))\n     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `realpath` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `layout::tests::`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1914:12: 1914:58\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<*mut i8>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::pal::unix::fs::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs:1913:13: 1915:7\n     = note: inside `std::fs::canonicalize::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2655:5: 2655:40\n     = note: inside `std::path::Path::canonicalize` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs:2962:9: 2962:31\n     = note: inside `camino::Utf8Path::canonicalize` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1197:9: 1197:30\n     = note: inside `camino::Utf8Path::canonicalize_utf8` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/camino-1.1.9/src/lib.rs:1225:9: 1225:28\nnote: inside `layout::detect_targets::search_from_child_to_root::<layout::detect_targets::RustToolchainToml, {closure@src/layout/detect_targets.rs:353:13: 353:19}>`\n    --> src/layout/detect_targets.rs:247:17\n     |\n247  |     let child = child.canonicalize_utf8()?;\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `layout::detect_targets::RustToolchain::search`\n    --> src/layout/detect_targets.rs:352:44\n     |\n352  |           let Some((toolchain, toml_path)) = search_from_child_to_root(\n     |  ____________________________________________^\n353  | |             |path| {\n354  | |                 path.push(\"rust-toolchain.toml\");\n355  | |                 if let Some(target) = RustToolchainToml::new(path) {\n...    |\n365  | |             repo_root,\n366  | |         )?\n     | |_________^\nnote: inside `layout::tests::rust_toolchain`\n    --> src/layout/tests.rs:79:21\n     |\n79   |     let toolchain = RustToolchain::search(pkg_dir.into(), root_dir.into())?;\n     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/layout/tests.rs:76:24\n     |\n75   | #[test]\n     | ------- in this procedural macro expansion\n76   | fn rust_toolchain() -> Result<()> {\n     |                        ^^^^^^^^^^\n     = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'layout::tests::rust_toolchain'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "output::toolchain::rustc_verbose",
                "status": "failed",
                "duration_ms": 295,
                "error": "\n\nerror: expect test failed\n   --> src/output/toolchain.rs:223:5\n\nYou can update all `expect!` tests by running:\n\n    env UPDATE_EXPECT=1 cargo test\n\nTo update a single test, place the cursor on `expect` token and use `run` feature of rust-analyzer.\n\nExpect:\n----\nRustc {\n    version: \"1.82.0-nightly (91376f416 2024-08-12)\",\n    commit_hash: \"91376f416222a238227c84a848d168835ede2cc3\",\n    commit_date: \"2024-08-12\",\n    host: \"x86_64-unknown-linux-gnu\",\n    release: \"1.82.0-nightly\",\n    llvm_version: \"19.1.0\",\n}\n\n----\n\nActual:\n----\nRustc {\n    version: \"1.86.0-nightly (a580b5c37 2025-01-08)\",\n    commit_hash: \"a580b5c379b4fca50dfe5afc0fc0ce00921e4e00\",\n    commit_date: \"2025-01-08\",\n    host: \"x86_64-unknown-linux-gnu\",\n    release: \"1.86.0-nightly\",\n    llvm_version: \"19.1.6\",\n}\n\n----\n\nDiff:\n----\nRustc {\n    version: \"1.826.0-nightly (91376f416a580b5c37 20245-08-121-08)\",\n    commit_hash: \"91376f416222a238227c84a848d168835ede2cc3a580b5c379b4fca50dfe5afc0fc0ce00921e4e00\",\n    commit_date: \"20245-08-121-08\",\n    host: \"x86_64-unknown-linux-gnu\",\n    release: \"1.826.0-nightly\",\n    llvm_version: \"19.1.06\",\n}\n\n----\n\n",
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.47s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/net.rs:133:25\n    |\n133 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `output::toolcha`:\n    = note: inside `std::sys::pal::unix::net::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/net.rs:133:25: 133:92\n    = note: inside `std::sys::pal::unix::process::process_inner::<impl std::sys::pal::unix::process::process_common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/process/process_unix.rs:77:31: 77:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1045:9: 1045:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.1/src/lib.rs:91:21: 91:36\n    = note: inside `duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::Expression::reader` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:356:20: 356:58\n    = note: inside `duct::Expression::read` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:280:26: 280:39\nnote: inside `output::toolchain::Rustc::new`\n   --> src/output/toolchain.rs:208:20\n    |\n208 |         let src = &cmd!(\"rustc\", \"-vV\").read()?;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `output::toolchain::rustc_verbose`\n   --> src/output/toolchain.rs:233:23\n    |\n233 |     .assert_debug_eq(&Rustc::new()?);\n    |                       ^^^^^^^^^^^^\nnote: inside closure\n   --> src/output/toolchain.rs:222:23\n    |\n220 | #[test]\n    | ------- in this procedural macro expansion\n221 | #[instrument(level = \"trace\")]\n222 | fn rustc_verbose() -> Result<()> {\n    |                       ^^^^^^^^^^\n    = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'output::toolchain::rustc_verbose'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "output::toolchain::test_host_rust_toolchain",
                "status": "ok",
                "duration_ms": 1960,
                "error": null,
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.50s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/net.rs:133:25\n    |\n133 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `output::toolcha`:\n    = note: inside `std::sys::pal::unix::net::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/net.rs:133:25: 133:92\n    = note: inside `std::sys::pal::unix::process::process_inner::<impl std::sys::pal::unix::process::process_common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/process/process_unix.rs:77:31: 77:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1045:9: 1045:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.1/src/lib.rs:91:21: 91:36\n    = note: inside `duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::Expression::reader` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:356:20: 356:58\n    = note: inside `duct::Expression::read` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:280:26: 280:39\nnote: inside `output::toolchain::host_rust_toolchain`\n   --> src/output/toolchain.rs:265:19\n    |\n265 |     let channel = cmd!(\"rustup\", \"default\").read()?;\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `output::toolchain::test_host_rust_toolchain`\n   --> src/output/toolchain.rs:293:10\n    |\n293 |     dbg!(host_rust_toolchain()?);\n    |          ^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/output/toolchain.rs:292:34\n    |\n290 | #[test]\n    | ------- in this procedural macro expansion\n291 | #[instrument(level = \"trace\")]\n292 | fn test_host_rust_toolchain() -> Result<()> {\n    |                                  ^^^^^^^^^^\n    = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'output::toolchain::test_host_rust_toolchain'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "run_checker::lockbud::tests::lockbud_output",
                "status": "failed",
                "duration_ms": 71,
                "error": "Error: No such file or directory (os error 2)\n\nLocation:\n    src/run_checker/lockbud.rs:29:19\n",
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.55s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/net.rs:133:25\n    |\n133 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `run_checker::lo`:\n    = note: inside `std::sys::pal::unix::net::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/net.rs:133:25: 133:92\n    = note: inside `std::sys::pal::unix::process::process_inner::<impl std::sys::pal::unix::process::process_common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/process/process_unix.rs:77:31: 77:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1045:9: 1045:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.1/src/lib.rs:91:21: 91:36\n    = note: inside `duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::Expression::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:314:20: 314:41\n    = note: inside `duct::Expression::run` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:254:9: 254:21\nnote: inside `run_checker::lockbud::tests::get_lockbud_result`\n   --> src/run_checker/lockbud.rs:29:19\n    |\n29  |           let out = duct::cmd!(\"cargo\", toolchain, \"lockbud\", \"-k\", \"all\")\n    |  ___________________^\n30  | |             .dir(\"repos/os-checker-test-suite\")\n31  | |             .stderr_capture()\n32  | |             .run()?;\n    | |__________________^\nnote: inside `run_checker::lockbud::tests::lockbud_output`\n   --> src/run_checker/lockbud.rs:38:17\n    |\n38  |         let s = get_lockbud_result()?;\n    |                 ^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/run_checker/lockbud.rs:37:28\n    |\n36  |     #[test]\n    |     ------- in this procedural macro expansion\n37  |     fn lockbud_output() -> Result<()> {\n    |                            ^^^^^^^^^^\n    = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'run_checker::lockbud::tests::lockbud_output'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "run_checker::rap::get_rap_result",
                "status": "failed",
                "duration_ms": 66,
                "error": "Error: No such file or directory (os error 2)\n\nLocation:\n    src/run_checker/rap.rs:30:15\n",
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.46s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/net.rs:133:25\n    |\n133 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `run_checker::ra`:\n    = note: inside `std::sys::pal::unix::net::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/net.rs:133:25: 133:92\n    = note: inside `std::sys::pal::unix::process::process_inner::<impl std::sys::pal::unix::process::process_common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/process/process_unix.rs:77:31: 77:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1045:9: 1045:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.1/src/lib.rs:91:21: 91:36\n    = note: inside `duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1425:32: 1425:59\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::Expression::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:314:20: 314:41\n    = note: inside `duct::Expression::run` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:254:9: 254:21\nnote: inside `run_checker::rap::get_rap_result`\n   --> src/run_checker/rap.rs:30:15\n    |\n30  |       let out = duct::cmd!(\"cargo\", toolchain, \"rap\", \"-F\")\n    |  _______________^\n31  | |         .dir(\"../os-checker-test-suite/rap-checks-this\")\n32  | |         .stderr_capture()\n33  | |         .unchecked()\n34  | |         .run()?;\n    | |______________^\nnote: inside closure\n   --> src/run_checker/rap.rs:28:28\n    |\n27  | #[test]\n    | ------- in this procedural macro expansion\n28  | pub fn get_rap_result() -> crate::Result<()> {\n    |                            ^^^^^^^^^^^^^^^^^\n    = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'run_checker::rap::get_rap_result'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "run_checker::rudra::tests::rudra",
                "status": "ok",
                "duration_ms": 45,
                "error": null,
                "miri_pass": false,
                "miri_output": "cmd=cargo miri test -p os-checker --bin os-checker -- run_checker::rudra::tests::rudra\nProcess timed out for 1 minutes.",
                "miri_timeout": true
              },
              {
                "name": "run_checker::semver_checks::semver_checks_output",
                "status": "failed",
                "duration_ms": 356,
                "error": "error: no such command: `semver-checks`\n\nView all installed commands with `cargo --list`\nFind a package to install `semver-checks` with `cargo search cargo-semver-checks`\nError: command [\"cargo\", \"semver-checks\", \"--color=never\"] exited with code 101\n\nLocation:\n    src/run_checker/semver_checks.rs:19:18\n",
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.46s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/net.rs:133:25\n    |\n133 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `run_checker::se`:\n    = note: inside `std::sys::pal::unix::net::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/net.rs:133:25: 133:92\n    = note: inside `std::sys::pal::unix::process::process_inner::<impl std::sys::pal::unix::process::process_common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/process/process_unix.rs:77:31: 77:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1045:9: 1045:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.1/src/lib.rs:91:21: 91:36\n    = note: inside `duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::Expression::reader` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:356:20: 356:58\n    = note: inside `duct::Expression::read` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:280:26: 280:39\nnote: inside `run_checker::semver_checks::semver_checks_output`\n   --> src/run_checker/semver_checks.rs:19:18\n    |\n19  |       let output = duct::cmd!(\"cargo\", \"semver-checks\", \"--color=never\")\n    |  __________________^\n20  | |         .dir(\"os-checker-types\")\n21  | |         .read()?;\n    | |_______________^\nnote: inside closure\n   --> src/run_checker/semver_checks.rs:18:30\n    |\n17  | #[test]\n    | ------- in this procedural macro expansion\n18  | fn semver_checks_output() -> crate::Result<()> {\n    |                              ^^^^^^^^^^^^^^^^^\n    = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'run_checker::semver_checks::semver_checks_output'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "utils::installation::which_checker",
                "status": "failed",
                "duration_ms": 131,
                "error": "\nthread 'utils::installation::which_checker' panicked at src/utils/installation.rs:106:41:\ncalled `Result::unwrap()` on an `Err` value: 未找到 lockbud\n\nCaused by:\n    command [\"which\", \"lockbud\"] exited with code 1\n\nLocation:\n    src/utils/installation.rs:79:22\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
                "miri_pass": false,
                "miri_output": "cmd=cargo miri test -p os-checker --bin os-checker -- utils::installation::which_checker\nProcess timed out for 1 minutes.",
                "miri_timeout": true
              },
              {
                "name": "utils::scan_for_targets::targets",
                "status": "ok",
                "duration_ms": 1042,
                "error": null,
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.51s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/net.rs:133:25\n    |\n133 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `utils::scan_for`:\n    = note: inside `std::sys::pal::unix::net::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/net.rs:133:25: 133:92\n    = note: inside `std::sys::pal::unix::process::process_inner::<impl std::sys::pal::unix::process::process_common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/process/process_unix.rs:77:31: 77:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1045:9: 1045:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.1/src/lib.rs:91:21: 91:36\n    = note: inside `duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `duct::Expression::reader` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:356:20: 356:58\n    = note: inside `duct::Expression::read` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:280:26: 280:39\nnote: inside `utils::scan_for_targets::pattern_target_list`\n   --> src/utils/scan_for_targets.rs:23:23\n    |\n23  |     let target_list = duct::cmd!(\"rustc\", \"--print=target-list\").read().unwrap();\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/utils/scan_for_targets.rs:32:19\n    |\n32  |     let pattern = pattern_target_list();\n    |                   ^^^^^^^^^^^^^^^^^^^^^\n    = note: inside `<{closure@src/utils/scan_for_targets.rs:31:44: 31:46} as std::ops::FnOnce<()>>::call_once - shim` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5: 250:71\n    = note: inside `<fn() -> regex::bytes::Regex as std::ops::FnOnce<()>>::call_once - shim(fn() -> regex::bytes::Regex)` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5: 250:71\n    = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:213:25: 213:28\n    = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/poison/once.rs:158:41: 158:60\n    = note: inside `std::sync::LazyLock::<regex::bytes::Regex>::force` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:209:9: 215:11\n    = note: inside `<std::sync::LazyLock<regex::bytes::Regex> as std::ops::Deref>::deref` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:312:9: 312:30\nnote: inside `utils::scan_for_targets::extract`\n   --> src/utils/scan_for_targets.rs:41:5\n    |\n41  |     RE.captures_iter(src)\n    |     ^^^^^^^^^^^^^^^^^^^^^\nnote: inside `utils::scan_for_targets::targets`\n   --> src/utils/scan_for_targets.rs:50:17\n    |\n50  |     let found = extract(s.as_bytes()).collect_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/utils/scan_for_targets.rs:46:13\n    |\n45  | #[test]\n    | ------- in this procedural macro expansion\n46  | fn targets() {\n    |             ^\n    = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker --bin os-checker`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/os-checker/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker-ef6d567a6fb1b342 'utils::scan_for_targets::targets'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              }
            ],
            "failed": 19,
            "duration_ms": 49983
          }
        ],
        "failed": 19,
        "duration_ms": 49983,
        "pkg_tests_count": 29,
        "workspace_tests_count": 29
      },
      "tests": 0,
      "examples": 1,
      "benches": 0,
      "authors": [],
      "description": "Run a collection of checkers targeting Rust crates, and report bad checking results and statistics.",
      "documentation": null,
      "readme": "README.md",
      "homepage": null,
      "keywords": [],
      "categories": [],
      "rust_version": "1.80.0",
      "diag_total_count": 4,
      "last_commit_time": "2025-01-05T12:56:40Z",
      "release_count": 8,
      "last_release_size": 93164,
      "last_release_time": "2024-12-29T09:10:36Z"
    },
    "os-checker-database": {
      "version": "0.5.0",
      "dependencies": 15,
      "lib": false,
      "bin": true,
      "testcases": null,
      "tests": 0,
      "examples": 0,
      "benches": 0,
      "authors": [],
      "description": "The output transformer of os-checker CLI, used to generate static data for os-checker WebUI.",
      "documentation": null,
      "readme": null,
      "homepage": null,
      "keywords": [],
      "categories": [],
      "rust_version": "1.80.0",
      "diag_total_count": 1,
      "last_commit_time": "2025-01-05T12:56:40Z",
      "release_count": 3,
      "last_release_size": 18815,
      "last_release_time": "2024-12-29T09:12:20Z"
    },
    "os-checker-types": {
      "version": "0.5.0",
      "dependencies": 11,
      "lib": true,
      "bin": false,
      "testcases": null,
      "tests": 0,
      "examples": 0,
      "benches": 0,
      "authors": [],
      "description": "The output types of os-checker CLI.",
      "documentation": null,
      "readme": null,
      "homepage": null,
      "keywords": [],
      "categories": [],
      "rust_version": "1.80.0",
      "diag_total_count": 1,
      "last_commit_time": "2025-01-05T12:56:40Z",
      "release_count": 4,
      "last_release_size": 15129,
      "last_release_time": "2024-12-29T09:09:23Z"
    }
  }
}