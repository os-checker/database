{
  "user": "os-checker",
  "repo": "plugin-cargo",
  "timestamp": {
    "start": 1745371440212,
    "end": 1748395184118
  },
  "pkgs": {
    "os-checker-plugin-cargo": {
      "version": "0.1.6",
      "dependencies": 10,
      "lib": true,
      "bin": true,
      "testcases": {
        "tests": [
          {
            "id": "os-checker-plugin-cargo",
            "kind": "lib",
            "binary_name": "os_checker_plugin_cargo",
            "testcases": [
              {
                "name": "crates_io::release_count::test_get_release_count",
                "status": "ok",
                "duration_ms": 99,
                "error": null,
                "miri_pass": false,
                "miri_output": "warning: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n   Compiling os-checker-plugin-cargo v0.1.6 (/tmp/os-checker-plugin-cargo/os-checker/plugin-cargo)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running unittests src/lib.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252)\nerror: unsupported operation: `open` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1184:36\n     |\n1184 |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode as c_int) })?;\n     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `open` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `crates_io::rele`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1184:36: 1184:84\n     = note: inside `std::sys::pal::unix::cvt_r::<i32, {closure@std::sys::fs::unix::File::open_c::{closure#0}}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/mod.rs:317:19: 317:22\n     = note: inside `std::sys::fs::unix::File::open_c` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1184:18: 1184:87\n     = note: inside `std::sys::process::unix::common::Stdio::to_child_stdio` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/common.rs:476:26: 476:55\n     = note: inside `std::sys::process::unix::common::Command::setup_io` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/common.rs:381:42: 381:70\n     = note: inside `std::sys::process::unix::unix::<impl std::sys::process::unix::common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/unix.rs:69:30: 69:65\n     = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1047:9: 1047:52\n     = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.1/src/lib.rs:91:21: 91:36\n     = note: inside `os_checker_plugin::prelude::duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n     = note: inside `os_checker_plugin::prelude::duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n     = note: inside `os_checker_plugin::prelude::duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n     = note: inside `os_checker_plugin::prelude::duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n     = note: inside `os_checker_plugin::prelude::duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n     = note: inside `os_checker_plugin::prelude::duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n     = note: inside `os_checker_plugin::prelude::duct::Expression::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:314:20: 314:41\n     = note: inside `os_checker_plugin::prelude::duct::Expression::run` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:254:9: 254:21\nnote: inside `crates_io::release_count::IndexFile::new`\n    --> src/crates_io/release_count.rs:55:22\n     |\n55   |           let output = duct::cmd!(\"wget\", &url, \"-O\", \"-\")\n     |  ______________________^\n56   | |             .stdout_capture()\n57   | |             .stderr_null()\n58   | |             .run()?;\n     | |__________________^\nnote: inside `crates_io::release_count::test_get_release_count`\n    --> src/crates_io/release_count.rs:83:10\n     |\n83   |     dbg!(IndexFile::new(\"os-checker\").unwrap().release_count());\n     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/crates_io/release_count.rs:82:28\n     |\n81   | #[test]\n     | ------- in this procedural macro expansion\n82   | fn test_get_release_count() {\n     |                            ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker-plugin-cargo --lib`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/plugin-cargo/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252 os_checker_plugin_cargo 'crates_io::release_count::test_get_release_count'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "crates_io::release_tarball::test_tarball_info",
                "status": "ok",
                "duration_ms": 157,
                "error": null,
                "miri_pass": false,
                "miri_output": "warning: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.05s\n     Running unittests src/lib.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252)\nerror: unsupported operation: `mkdir` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1576:49\n     |\n1576 |         run_path_with_cstr(p, &|p| cvt(unsafe { libc::mkdir(p.as_ptr(), self.mode) }).map(|_| ()))\n     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `mkdir` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `crates_io::rele`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1576:49: 1576:83\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<()>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<()>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<()>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::fs::unix::DirBuilder::mkdir` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1576:9: 1576:99\n     = note: inside `std::fs::DirBuilder::create_dir_all` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:3078:15: 3078:37\n     = note: inside `std::fs::DirBuilder::_create` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:3070:29: 3070:54\n     = note: inside `std::fs::DirBuilder::create::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:3066:9: 3066:36\n     = note: inside `std::fs::create_dir_all::<&os_checker_types::Utf8PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2798:5: 2798:60\nnote: inside closure\n    --> src/repo/mod.rs:174:27\n     |\n174  |         if let Err(err) = std::fs::create_dir_all(&path) {\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     = note: inside `<{closure@src/repo/mod.rs:172:65: 172:67} as std::ops::FnOnce<()>>::call_once - shim` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5: 250:71\n     = note: inside `<fn() -> os_checker_types::Utf8PathBuf as std::ops::FnOnce<()>>::call_once - shim(fn() -> os_checker_types::Utf8PathBuf)` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5: 250:71\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:213:25: 213:28\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/poison/once.rs:155:41: 155:60\n     = note: inside `std::sync::LazyLock::<os_checker_types::Utf8PathBuf>::force` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:209:9: 215:11\n     = note: inside `<std::sync::LazyLock<os_checker_types::Utf8PathBuf> as std::ops::Deref>::deref` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:312:9: 312:30\nnote: inside `repo::local_base_dir`\n    --> src/repo/mod.rs:180:5\n     |\n180  |     &GIT_CLONE_DIR\n     |     ^^^^^^^^^^^^^^\nnote: inside `crates_io::release_tarball::download_tarball`\n    --> src/crates_io/release_tarball.rs:30:15\n     |\n30   |     let dir = local_base_dir();\n     |               ^^^^^^^^^^^^^^^^\nnote: inside `crates_io::release_tarball::get_last_release_info`\n    --> src/crates_io/release_tarball.rs:50:19\n     |\n50   |     let tarball = download_tarball(pkg, version)?;\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `crates_io::release_tarball::test_tarball_info`\n    --> src/crates_io/release_tarball.rs:74:10\n     |\n74   |     dbg!(get_last_release_info(\"os-checker\", &Version::new(0, 4, 1))?);\n     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/crates_io/release_tarball.rs:70:27\n     |\n69   | #[test]\n     | ------- in this procedural macro expansion\n70   | fn test_tarball_info() -> Result<()> {\n     |                           ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker-plugin-cargo --lib`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/plugin-cargo/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252 os_checker_plugin_cargo 'crates_io::release_tarball::test_tarball_info'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "database::test_diagnostics_count",
                "status": "ok",
                "duration_ms": 95,
                "error": null,
                "miri_pass": false,
                "miri_output": "warning: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.05s\n     Running unittests src/lib.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25\n    |\n137 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `database::test_`:\n    = note: inside `std::sys::net::connection::socket::unix::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25: 137:92\n    = note: inside `std::sys::process::unix::unix::<impl std::sys::process::unix::common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/unix.rs:76:31: 76:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1047:9: 1047:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.1/src/lib.rs:91:21: 91:36\n    = note: inside `os_checker_plugin::prelude::duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `os_checker_plugin::prelude::duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `os_checker_plugin::prelude::duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `os_checker_plugin::prelude::duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `os_checker_plugin::prelude::duct::Expression::reader` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:356:20: 356:58\n    = note: inside `os_checker_plugin::prelude::duct::Expression::read` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:280:26: 280:39\nnote: inside `database::DiagnosticsCount::new`\n   --> src/database.rs:35:20\n    |\n35  |         let json = duct::cmd!(\"wget\", URL, \"-O\", \"-\").read()?;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/database.rs:82:22\n    |\n82  |     LazyLock::new(|| DiagnosticsCount::new().unwrap());\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: inside `<{closure@src/database.rs:82:19: 82:21} as std::ops::FnOnce<()>>::call_once - shim` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5: 250:71\n    = note: inside `<fn() -> database::DiagnosticsCount as std::ops::FnOnce<()>>::call_once - shim(fn() -> database::DiagnosticsCount)` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5: 250:71\n    = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:213:25: 213:28\n    = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/poison/once.rs:155:41: 155:60\n    = note: inside `std::sync::LazyLock::<database::DiagnosticsCount>::force` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:209:9: 215:11\n    = note: inside `<std::sync::LazyLock<database::DiagnosticsCount> as std::ops::Deref>::deref` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:312:9: 312:30\nnote: inside `database::test_diagnostics_count`\n   --> src/database.rs:86:11\n    |\n86  |     dbg!(&*DIAGNOSTICS_COUNT);\n    |           ^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/database.rs:85:28\n    |\n84  | #[test]\n    | ------- in this procedural macro expansion\n85  | fn test_diagnostics_count() {\n    |                            ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker-plugin-cargo --lib`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/plugin-cargo/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252 os_checker_plugin_cargo 'database::test_diagnostics_count'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "nextest::parse_stream",
                "status": "ok",
                "duration_ms": 20,
                "error": null,
                "miri_pass": false,
                "miri_output": "warning: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.05s\n     Running unittests src/lib.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252)\nerror: unsupported operation: `open` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1184:36\n     |\n1184 |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode as c_int) })?;\n     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `open` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `nextest::parse_`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1184:36: 1184:84\n     = note: inside `std::sys::pal::unix::cvt_r::<i32, {closure@std::sys::fs::unix::File::open_c::{closure#0}}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/mod.rs:317:19: 317:22\n     = note: inside `std::sys::fs::unix::File::open_c` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1184:18: 1184:87\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1172:42: 1172:66\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::fs::unix::File::open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1172:9: 1172:67\n     = note: inside `std::fs::OpenOptions::_open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1594:9: 1594:42\n     = note: inside `std::fs::OpenOptions::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1590:9: 1590:34\n     = note: inside `std::fs::File::open::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:384:9: 384:58\n     = note: inside `std::fs::read_to_string::inner` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:313:24: 313:40\n     = note: inside `std::fs::read_to_string::<&str>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:320:5: 320:25\nnote: inside `nextest::parse_stream`\n    --> src/nextest/mod.rs:118:16\n     |\n118  |     let text = std::fs::read_to_string(\"tests/nextest.stdout\").unwrap();\n     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/nextest/mod.rs:117:18\n     |\n116  | #[test]\n     | ------- in this procedural macro expansion\n117  | fn parse_stream() {\n     |                  ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker-plugin-cargo --lib`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/plugin-cargo/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252 os_checker_plugin_cargo 'nextest::parse_stream'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "nextest::parse_test_event",
                "status": "ok",
                "duration_ms": 13,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "nextest::run_and_parse",
                "status": "ignored",
                "duration_ms": null,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "nextest::string_to_name",
                "status": "ok",
                "duration_ms": 14,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "repo::git_info::git_info",
                "status": "ok",
                "duration_ms": 17,
                "error": null,
                "miri_pass": false,
                "miri_output": "warning: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.05s\n     Running unittests src/lib.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25\n    |\n137 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `repo::git_info:`:\n    = note: inside `std::sys::net::connection::socket::unix::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25: 137:92\n    = note: inside `std::sys::process::unix::unix::<impl std::sys::process::unix::common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/unix.rs:76:31: 76:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1047:9: 1047:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.1/src/lib.rs:91:21: 91:36\n    = note: inside `os_checker_plugin::prelude::duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `os_checker_plugin::prelude::duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `os_checker_plugin::prelude::duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `os_checker_plugin::prelude::duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `os_checker_plugin::prelude::duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `os_checker_plugin::prelude::duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `os_checker_plugin::prelude::duct::Expression::reader` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:356:20: 356:58\n    = note: inside `os_checker_plugin::prelude::duct::Expression::read` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:280:26: 280:39\nnote: inside `repo::git_info::run`\n   --> src/repo/git_info.rs:25:8\n    |\n25  |     Ok(expr.dir(root).read()?.trim().to_owned())\n    |        ^^^^^^^^^^^^^^^^^^^^^\nnote: inside `repo::git_info::last_commit_time`\n   --> src/repo/git_info.rs:31:26\n    |\n31  |     let unix_timestamp = run(cmd, root)?.parse()?;\n    |                          ^^^^^^^^^^^^^^\nnote: inside `repo::git_info::GitInfo::new`\n   --> src/repo/git_info.rs:13:27\n    |\n13  |         let last_commit = last_commit_time(root)?;\n    |                           ^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `repo::git_info::git_info`\n   --> src/repo/git_info.rs:48:10\n    |\n48  |     dbg!(GitInfo::new(root)?);\n    |          ^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/repo/git_info.rs:46:18\n    |\n45  | #[test]\n    | ------- in this procedural macro expansion\n46  | fn git_info() -> Result<()> {\n    |                  ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker-plugin-cargo --lib`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/plugin-cargo/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252 os_checker_plugin_cargo 'repo::git_info::git_info'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "repo::miri::miri_output",
                "status": "ok",
                "duration_ms": 23968,
                "error": null,
                "miri_pass": false,
                "miri_output": "warning: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.05s\n     Running unittests src/lib.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252)\nerror: unsupported operation: extern static `pidfd_spawnp` is not supported by Miri\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/unix.rs:461:17\n    |\n461 | /                 weak!(\n462 | |                     fn pidfd_spawnp(\n463 | |                         pidfd: *mut libc::c_int,\n464 | |                         path: *const libc::c_char,\n...   |\n469 | |                     ) -> libc::c_int;\n470 | |                 );\n    | |_________________^ extern static `pidfd_spawnp` is not supported by Miri\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `repo::miri::mir`:\n    = note: inside `std::sys::process::unix::unix::<impl std::sys::process::unix::common::Command>::posix_spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/weak.rs:40:38: 40:43\n    = note: inside `std::sys::process::unix::unix::<impl std::sys::process::unix::common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/unix.rs:71:28: 71:68\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1047:9: 1047:52\nnote: inside `repo::miri::cargo_miri`\n   --> src/repo/miri.rs:19:25\n    |\n19  |       let Ok(mut child) = Command::new(\"cargo\")\n    |  _________________________^\n20  | |         .args([\"miri\", \"test\", \"-p\", pkg, &kind, bin, \"--\", name])\n21  | |         .stderr(Stdio::piped())\n22  | |         .current_dir(workspace_root)\n23  | |         .spawn()\n    | |________________^\nnote: inside `repo::miri::miri_output`\n   --> src/repo/miri.rs:72:18\n    |\n72  |       let stderr = cargo_miri(\n    |  __________________^\n73  | |         \"os-checker-plugin-cargo\",\n74  | |         \"test\",\n75  | |         \"t1\",\n76  | |         \"miri_should_err\",\n77  | |         \".\".into(),\n78  | |     )\n    | |_____^\nnote: inside closure\n   --> src/repo/miri.rs:71:17\n    |\n70  | #[test]\n    | ------- in this procedural macro expansion\n71  | fn miri_output() {\n    |                 ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker-plugin-cargo --lib`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/plugin-cargo/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252 os_checker_plugin_cargo 'repo::miri::miri_output'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "repo::os_checker::test_sel4",
                "status": "failed",
                "duration_ms": 8,
                "error": "Error: Error: \n   0: 从 `repos-default.json` 读取仓库列表失败！请输入正确的 json 路径。\n   1: No such file or directory (os error 2)\n\nLocation:\n   src/config/mod.rs:158\n\nBacktrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it.\nRun with RUST_BACKTRACE=full to include source snippets.\n\n\nLocation:\n    src/repo/os_checker.rs:27:5\n",
                "miri_pass": false,
                "miri_output": "warning: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.05s\n     Running unittests src/lib.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252)\nerror: unsupported operation: `mkdir` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1576:49\n     |\n1576 |         run_path_with_cstr(p, &|p| cvt(unsafe { libc::mkdir(p.as_ptr(), self.mode) }).map(|_| ()))\n     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `mkdir` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `repo::os_checke`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1576:49: 1576:83\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<()>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<()>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<()>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::fs::unix::DirBuilder::mkdir` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1576:9: 1576:99\n     = note: inside `std::fs::DirBuilder::create_dir_all` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:3078:15: 3078:37\n     = note: inside `std::fs::DirBuilder::_create` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:3070:29: 3070:54\n     = note: inside `std::fs::DirBuilder::create::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:3066:9: 3066:36\n     = note: inside `std::fs::create_dir_all::<&os_checker_types::Utf8PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2798:5: 2798:60\nnote: inside closure\n    --> src/repo/mod.rs:174:27\n     |\n174  |         if let Err(err) = std::fs::create_dir_all(&path) {\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     = note: inside `<{closure@src/repo/mod.rs:172:65: 172:67} as std::ops::FnOnce<()>>::call_once - shim` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5: 250:71\n     = note: inside `<fn() -> os_checker_types::Utf8PathBuf as std::ops::FnOnce<()>>::call_once - shim(fn() -> os_checker_types::Utf8PathBuf)` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5: 250:71\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:213:25: 213:28\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/poison/once.rs:155:41: 155:60\n     = note: inside `std::sync::LazyLock::<os_checker_types::Utf8PathBuf>::force` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:209:9: 215:11\n     = note: inside `<std::sync::LazyLock<os_checker_types::Utf8PathBuf> as std::ops::Deref>::deref` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:312:9: 312:30\nnote: inside `repo::local_base_dir`\n    --> src/repo/mod.rs:180:5\n     |\n180  |     &GIT_CLONE_DIR\n     |     ^^^^^^^^^^^^^^\nnote: inside `repo::os_checker::run`\n    --> src/repo/os_checker.rs:9:15\n     |\n9    |     let dir = local_base_dir();\n     |               ^^^^^^^^^^^^^^^^\nnote: inside `repo::os_checker::test_sel4`\n    --> src/repo/os_checker.rs:47:10\n     |\n47   |     dbg!(run(repo)?);\n     |          ^^^^^^^^^\nnote: inside closure\n    --> src/repo/os_checker.rs:45:19\n     |\n44   | #[test]\n     | ------- in this procedural macro expansion\n45   | fn test_sel4() -> Result<()> {\n     |                   ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker-plugin-cargo --lib`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/plugin-cargo/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252 os_checker_plugin_cargo 'repo::os_checker::test_sel4'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "repo::test_cargo_tomls",
                "status": "ok",
                "duration_ms": 10,
                "error": null,
                "miri_pass": false,
                "miri_output": "warning: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.05s\n     Running unittests src/lib.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252)\nerror: unsupported operation: `statx` not available when isolation is enabled\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:159:9\n    |\n159 | /         syscall!(\n160 | |             fn statx(\n161 | |                 fd: c_int,\n162 | |                 pathname: *const c_char,\n...   |\n166 | |             ) -> c_int;\n167 | |         );\n    | |_________^ `statx` not available when isolation is enabled\n    |\n    = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n    = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n    = note: BACKTRACE on thread `repo::test_carg`:\n    = note: inside `std::sys::fs::unix::try_statx::statx` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/weak.rs:182:26: 182:42\n    = note: inside `std::sys::fs::unix::try_statx` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:175:31: 175:69\n    = note: inside `std::sys::fs::unix::lstat` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1905:37: 1910:10\n    = note: inside `<for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::sys::fs::unix::FileAttr, std::io::Error> {std::sys::fs::unix::lstat} as std::ops::Fn<(&std::ffi::CStr,)>>::call - shim(for<'a> fn(&'a std::ffi::CStr) -> std::result::Result<std::sys::fs::unix::FileAttr, std::io::Error> {std::sys::fs::unix::lstat})` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:79:5: 79:67\n    = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::sys::fs::unix::FileAttr>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n    = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::sys::fs::unix::FileAttr>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n    = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::sys::fs::unix::FileAttr>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n    = note: inside `std::sys::fs::symlink_metadata` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/mod.rs:104:5: 104:40\n    = note: inside `std::fs::symlink_metadata::<&std::path::PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2447:5: 2447:44\n    = note: inside `walkdir::DirEntry::from_path` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/walkdir-2.5.0/src/dent.rs:263:13: 263:38\n    = note: inside `<walkdir::IntoIter as std::iter::Iterator>::next` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/walkdir-2.5.0/src/lib.rs:694:30: 694:66\n    = note: inside `<walkdir::IntoIter as std::iter::Iterator>::try_fold::<(), {closure@std::iter::Iterator::find_map::check<std::result::Result<walkdir::DirEntry, walkdir::Error>, os_checker_types::Utf8PathBuf, &mut {closure@src/repo/mod.rs:193:21: 193:28}>::{closure#0}}, std::ops::ControlFlow<os_checker_types::Utf8PathBuf>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2383:29: 2383:40\n    = note: inside `<walkdir::IntoIter as std::iter::Iterator>::find_map::<os_checker_types::Utf8PathBuf, &mut {closure@src/repo/mod.rs:193:21: 193:28}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2879:9: 2879:36\n    = note: inside `<std::iter::FilterMap<walkdir::IntoIter, {closure@src/repo/mod.rs:193:21: 193:28}> as std::iter::Iterator>::next` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/adapters/filter_map.rs:64:9: 64:40\n    = note: inside `<std::iter::FilterMap<walkdir::IntoIter, {closure@src/repo/mod.rs:193:21: 193:28}> as std::iter::Iterator>::collect::<std::vec::Vec<os_checker_types::Utf8PathBuf>>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:1985:9: 1985:38\nnote: inside `repo::get_cargo_tomls_recursively`\n   --> src/repo/mod.rs:191:5\n    |\n191 | /     walkdir::WalkDir::new(dir)\n192 | |         .into_iter()\n193 | |         .filter_map(|entry| {\n194 | |             if let Ok(e) = entry {\n...   |\n203 | |         })\n204 | |         .collect()\n    | |__________________^\nnote: inside `repo::test_cargo_tomls`\n   --> src/repo/mod.rs:234:10\n    |\n234 |     dbg!(get_cargo_tomls_recursively(Utf8Path::new(\".\")));\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/repo/mod.rs:233:22\n    |\n232 | #[test]\n    | ------- in this procedural macro expansion\n233 | fn test_cargo_tomls() {\n    |                      ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker-plugin-cargo --lib`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/plugin-cargo/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252 os_checker_plugin_cargo 'repo::test_cargo_tomls'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "repo::test_pkg_targets",
                "status": "failed",
                "duration_ms": 9,
                "error": "Error: Error: \n   0: 从 `repos-default.json` 读取仓库列表失败！请输入正确的 json 路径。\n   1: No such file or directory (os error 2)\n\nLocation:\n   src/config/mod.rs:158\n\nBacktrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it.\nRun with RUST_BACKTRACE=full to include source snippets.\n\n\nLocation:\n    src/repo/os_checker.rs:27:5\n",
                "miri_pass": false,
                "miri_output": "warning: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.05s\n     Running unittests src/lib.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252)\nerror: unsupported operation: `mkdir` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1576:49\n     |\n1576 |         run_path_with_cstr(p, &|p| cvt(unsafe { libc::mkdir(p.as_ptr(), self.mode) }).map(|_| ()))\n     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `mkdir` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `repo::test_pkg_`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1576:49: 1576:83\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<()>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<()>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<()>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::fs::unix::DirBuilder::mkdir` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1576:9: 1576:99\n     = note: inside `std::fs::DirBuilder::create_dir_all` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:3078:15: 3078:37\n     = note: inside `std::fs::DirBuilder::_create` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:3070:29: 3070:54\n     = note: inside `std::fs::DirBuilder::create::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:3066:9: 3066:36\n     = note: inside `std::fs::create_dir_all::<&os_checker_types::Utf8PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2798:5: 2798:60\nnote: inside closure\n    --> src/repo/mod.rs:174:27\n     |\n174  |         if let Err(err) = std::fs::create_dir_all(&path) {\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     = note: inside `<{closure@src/repo/mod.rs:172:65: 172:67} as std::ops::FnOnce<()>>::call_once - shim` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5: 250:71\n     = note: inside `<fn() -> os_checker_types::Utf8PathBuf as std::ops::FnOnce<()>>::call_once - shim(fn() -> os_checker_types::Utf8PathBuf)` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5: 250:71\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:213:25: 213:28\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/poison/once.rs:155:41: 155:60\n     = note: inside `std::sync::LazyLock::<os_checker_types::Utf8PathBuf>::force` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:209:9: 215:11\n     = note: inside `<std::sync::LazyLock<os_checker_types::Utf8PathBuf> as std::ops::Deref>::deref` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:312:9: 312:30\nnote: inside `repo::local_base_dir`\n    --> src/repo/mod.rs:180:5\n     |\n180  |     &GIT_CLONE_DIR\n     |     ^^^^^^^^^^^^^^\nnote: inside `repo::os_checker::run`\n    --> src/repo/os_checker.rs:9:15\n     |\n9    |     let dir = local_base_dir();\n     |               ^^^^^^^^^^^^^^^^\nnote: inside `repo::Repo::new`\n    --> src/repo/mod.rs:45:27\n     |\n45   |         let pkg_targets = os_checker::run(user_repo)?;\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `repo::test_pkg_targets`\n    --> src/repo/mod.rs:239:16\n     |\n239  |     let repo = Repo::new(\"seL4/rust-sel4\")?;\n     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/repo/mod.rs:238:26\n     |\n237  | #[test]\n     | ------- in this procedural macro expansion\n238  | fn test_pkg_targets() -> Result<()> {\n     |                          ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker-plugin-cargo --lib`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/plugin-cargo/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-85c74c85d8a26252 os_checker_plugin_cargo 'repo::test_pkg_targets'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "repo::testcases::test_get_testcases",
                "status": "ignored",
                "duration_ms": null,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              }
            ],
            "failed": 2,
            "duration_ms": 24410
          },
          {
            "id": "os-checker-plugin-cargo::t1",
            "kind": "test",
            "binary_name": "t1",
            "testcases": [
              {
                "name": "from_t1",
                "status": "ok",
                "duration_ms": 5,
                "error": null,
                "miri_pass": true,
                "miri_output": null,
                "miri_timeout": false
              },
              {
                "name": "miri_should_err",
                "status": "failed",
                "duration_ms": 138,
                "error": "\nthread 'miri_should_err' panicked at tests/t1.rs:7:14:\nnull pointer dereference occurred\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nthread caused non-unwinding panic. aborting.\n",
                "miri_pass": false,
                "miri_output": "warning: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.05s\n     Running tests/t1.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/t1-007ad0542b81f9c9)\nerror: Undefined Behavior: memory access failed: expected a pointer to 1 byte of memory, but got a null pointer\n --> tests/t1.rs:7:14\n  |\n7 |     unsafe { *ptr = 1 };\n  |              ^^^^^^^^ memory access failed: expected a pointer to 1 byte of memory, but got a null pointer\n  |\n  = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n  = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n  = note: BACKTRACE on thread `miri_should_err`:\n  = note: inside `miri_should_err` at tests/t1.rs:7:14: 7:22\nnote: inside closure\n --> tests/t1.rs:5:21\n  |\n4 | #[test]\n  | ------- in this procedural macro expansion\n5 | fn miri_should_err() {\n  |                     ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker-plugin-cargo --test t1`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/plugin-cargo/target/miri/x86_64-unknown-linux-gnu/debug/deps/t1-007ad0542b81f9c9 miri_should_err` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              }
            ],
            "failed": 1,
            "duration_ms": 143
          },
          {
            "id": "os-checker-plugin-cargo::bin/os-checker-plugin-cargo",
            "kind": "bin",
            "binary_name": "os-checker-plugin-cargo",
            "testcases": [
              {
                "name": "cache::db::test_db_list_table",
                "status": "failed",
                "duration_ms": 320,
                "error": "Error: Table 'plugin-cargo' does not exist\n\nLocation:\n    src/cache/db.rs:89:17\n",
                "miri_pass": false,
                "miri_output": "warning: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n   Compiling os-checker-plugin-cargo v0.1.6 (/tmp/os-checker-plugin-cargo/os-checker/plugin-cargo)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.07s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-8d057c566540b1f8)\nerror: unsupported operation: `open` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1184:36\n     |\n1184 |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode as c_int) })?;\n     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `open` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `cache::db::test`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1184:36: 1184:84\n     = note: inside `std::sys::pal::unix::cvt_r::<i32, {closure@std::sys::fs::unix::File::open_c::{closure#0}}>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/unix/mod.rs:317:19: 317:22\n     = note: inside `std::sys::fs::unix::File::open_c` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1184:18: 1184:87\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1172:42: 1172:66\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<std::sys::fs::unix::File>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::fs::unix::File::open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1172:9: 1172:67\n     = note: inside `std::fs::OpenOptions::_open` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1594:9: 1594:42\n     = note: inside `std::fs::OpenOptions::open::<&str>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:1590:9: 1590:34\n     = note: inside `redb::Builder::create::<&str>` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/redb-2.5.0/src/db.rs:1026:20: 1031:24\n     = note: inside `redb::Database::create::<&str>` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/redb-2.5.0/src/db.rs:338:9: 338:37\nnote: inside `cache::db::test_db_list_table`\n    --> src/cache/db.rs:86:14\n     |\n86   |     let db = Database::create(FILE)?;\n     |              ^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/cache/db.rs:85:28\n     |\n84   | #[test]\n     | ------- in this procedural macro expansion\n85   | fn test_db_list_table() -> Result<()> {\n     |                            ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker-plugin-cargo --bin os-checker-plugin-cargo`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/plugin-cargo/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-8d057c566540b1f8 'cache::db::test_db_list_table'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "cache::db::test_os_checker_test_suite",
                "status": "failed",
                "duration_ms": 40,
                "error": "Error: Error: \n   0: 从 `repos-default.json` 读取仓库列表失败！请输入正确的 json 路径。\n   1: No such file or directory (os error 2)\n\nLocation:\n   src/config/mod.rs:158\n\nBacktrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it.\nRun with RUST_BACKTRACE=full to include source snippets.\n\n\nLocation:\n    src/repo/os_checker.rs:27:5\n",
                "miri_pass": false,
                "miri_output": "warning: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.05s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-8d057c566540b1f8)\nerror: unsupported operation: `mkdir` not available when isolation is enabled\n    --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1576:49\n     |\n1576 |         run_path_with_cstr(p, &|p| cvt(unsafe { libc::mkdir(p.as_ptr(), self.mode) }).map(|_| ()))\n     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `mkdir` not available when isolation is enabled\n     |\n     = help: set `MIRIFLAGS=-Zmiri-disable-isolation` to disable isolation;\n     = help: or set `MIRIFLAGS=-Zmiri-isolation-error=warn` to make Miri return an error code from isolated operations (if supported for that operation) and continue with a warning\n     = note: BACKTRACE on thread `cache::db::test`:\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1576:49: 1576:83\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr_stack::<()>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:48:18: 48:22\n     = note: inside `std::sys::pal::common::small_c_string::run_with_cstr::<()>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:28:18: 28:47\n     = note: inside `std::sys::pal::common::small_c_string::run_path_with_cstr::<()>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/pal/common/small_c_string.rs:18:5: 18:58\n     = note: inside `std::sys::fs::unix::DirBuilder::mkdir` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/fs/unix.rs:1576:9: 1576:99\n     = note: inside `std::fs::DirBuilder::create_dir_all` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:3078:15: 3078:37\n     = note: inside `std::fs::DirBuilder::_create` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:3070:29: 3070:54\n     = note: inside `std::fs::DirBuilder::create::<&std::path::Path>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:3066:9: 3066:36\n     = note: inside `std::fs::create_dir_all::<&os_checker_types::Utf8PathBuf>` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs:2798:5: 2798:60\nnote: inside closure\n    --> /tmp/os-checker-plugin-cargo/os-checker/plugin-cargo/src/repo/mod.rs:174:27\n     |\n174  |         if let Err(err) = std::fs::create_dir_all(&path) {\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     = note: inside `<{closure@os_checker_plugin_cargo::repo::local_base_dir::GIT_CLONE_DIR::{closure#0}} as std::ops::FnOnce<()>>::call_once - shim` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5: 250:71\n     = note: inside `<fn() -> os_checker_types::Utf8PathBuf as std::ops::FnOnce<()>>::call_once - shim(fn() -> os_checker_types::Utf8PathBuf)` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5: 250:71\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:213:25: 213:28\n     = note: inside closure at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/poison/once.rs:155:41: 155:60\n     = note: inside `std::sync::LazyLock::<os_checker_types::Utf8PathBuf>::force` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:209:9: 215:11\n     = note: inside `<std::sync::LazyLock<os_checker_types::Utf8PathBuf> as std::ops::Deref>::deref` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sync/lazy_lock.rs:312:9: 312:30\nnote: inside `os_checker_plugin_cargo::repo::local_base_dir`\n    --> /tmp/os-checker-plugin-cargo/os-checker/plugin-cargo/src/repo/mod.rs:180:5\n     |\n180  |     &GIT_CLONE_DIR\n     |     ^^^^^^^^^^^^^^\nnote: inside `os_checker_plugin_cargo::repo::os_checker::run`\n    --> /tmp/os-checker-plugin-cargo/os-checker/plugin-cargo/src/repo/os_checker.rs:9:15\n     |\n9    |     let dir = local_base_dir();\n     |               ^^^^^^^^^^^^^^^^\nnote: inside `os_checker_plugin_cargo::repo::Repo::new`\n    --> /tmp/os-checker-plugin-cargo/os-checker/plugin-cargo/src/repo/mod.rs:45:27\n     |\n45   |         let pkg_targets = os_checker::run(user_repo)?;\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside `cache::gen_cache`\n    --> src/cache/mod.rs:28:16\n     |\n28   |     let repo = Repo::new(user_repo)?;\n     |                ^^^^^^^^^^^^^^^^^^^^\nnote: inside `cache::db::test_os_checker_test_suite`\n    --> src/cache/db.rs:63:22\n     |\n63   |     let (key, val) = super::gen_cache(\"os-checker/os-checker-test-suite\")?;\n     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n    --> src/cache/db.rs:60:36\n     |\n59   | #[test]\n     | ------- in this procedural macro expansion\n60   | fn test_os_checker_test_suite() -> Result<()> {\n     |                                    ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker-plugin-cargo --bin os-checker-plugin-cargo`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/plugin-cargo/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-8d057c566540b1f8 'cache::db::test_os_checker_test_suite'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "cache::gh::test_github_graphql_api",
                "status": "ok",
                "duration_ms": 470,
                "error": null,
                "miri_pass": false,
                "miri_output": "warning: only one of `license` or `license-file` is necessary\n`license` should be used if the package license can be expressed with a standard SPDX expression.\n`license-file` should be used if the package uses a non-standard license.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#the-license-and-license-file-fields for more information.\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.05s\n     Running unittests src/main.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-8d057c566540b1f8)\nerror: unsupported operation: socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n   --> /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25\n    |\n137 |                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ socketpair: type 0x5 is unsupported, only SOCK_STREAM, SOCK_CLOEXEC and SOCK_NONBLOCK are allowed\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that Miri does not support\n    = note: BACKTRACE on thread `cache::gh::test`:\n    = note: inside `std::sys::net::connection::socket::unix::Socket::new_pair` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/net/connection/socket/unix.rs:137:25: 137:92\n    = note: inside `std::sys::process::unix::unix::<impl std::sys::process::unix::common::Command>::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/process/unix/unix.rs:76:31: 76:94\n    = note: inside `std::process::Command::spawn` at /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/process.rs:1047:9: 1047:52\n    = note: inside `shared_child::SharedChild::spawn` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.0.1/src/lib.rs:91:21: 91:36\n    = note: inside `os_checker_plugin::prelude::duct::start_argv` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1223:24: 1223:56\n    = note: inside `os_checker_plugin::prelude::duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1144:45: 1144:70\n    = note: inside `os_checker_plugin::prelude::duct::PipeHandle::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1275:27: 1275:53\n    = note: inside `os_checker_plugin::prelude::duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1146:44: 1146:83\n    = note: inside `os_checker_plugin::prelude::duct::start_io` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1432:5: 1432:32\n    = note: inside `os_checker_plugin::prelude::duct::ExpressionInner::start` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:1148:35: 1148:68\n    = note: inside `os_checker_plugin::prelude::duct::Expression::reader` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:356:20: 356:58\n    = note: inside `os_checker_plugin::prelude::duct::Expression::read` at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-0.13.7/src/lib.rs:280:26: 280:39\nnote: inside `cache::gh::graphql_api`\n   --> src/cache/gh.rs:42:16\n    |\n42  |     let json = expr.read()?;\n    |                ^^^^^^^^^^^\nnote: inside `cache::gh::test_github_graphql_api`\n   --> src/cache/gh.rs:49:10\n    |\n49  |     dbg!(graphql_api(\"os-checker/os-checker-test-suite\")?);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> src/cache/gh.rs:48:33\n    |\n47  | #[test]\n    | ------- in this procedural macro expansion\n48  | fn test_github_graphql_api() -> Result<()> {\n    |                                 ^^^^^^^^^^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error\n\nerror: test failed, to rerun pass `-p os-checker-plugin-cargo --bin os-checker-plugin-cargo`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/os-checker/plugin-cargo/target/miri/x86_64-unknown-linux-gnu/debug/deps/os_checker_plugin_cargo-8d057c566540b1f8 'cache::gh::test_github_graphql_api'` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              }
            ],
            "failed": 2,
            "duration_ms": 830
          }
        ],
        "failed": 5,
        "duration_ms": 25383,
        "pkg_tests_count": 18,
        "workspace_tests_count": 18
      },
      "tests": 1,
      "examples": 0,
      "benches": 0,
      "authors": [],
      "description": "A plugin to os-checker to collect basic information from cargo and git.\n",
      "documentation": null,
      "readme": "README.md",
      "homepage": null,
      "keywords": [],
      "categories": [],
      "rust_version": null,
      "diag_total_count": 3,
      "last_commit_time": "2025-04-22T09:17:40Z",
      "release_count": 7,
      "last_release_size": 34971,
      "last_release_time": "2025-04-22T08:51:27Z"
    }
  }
}