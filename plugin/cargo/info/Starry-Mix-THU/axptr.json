{
  "user": "Starry-Mix-THU",
  "repo": "axptr",
  "timestamp": {
    "start": 1753235204911,
    "end": 1753235204940
  },
  "pkgs": {
    "starry-vm": {
      "version": "0.1.0",
      "dependencies": 3,
      "lib": true,
      "bin": false,
      "testcases": {
        "tests": [
          {
            "id": "starry-vm::test",
            "kind": "test",
            "binary_name": "test",
            "testcases": [
              {
                "name": "test_load",
                "status": "ok",
                "duration_ms": 4,
                "error": null,
                "miri_pass": false,
                "miri_output": "   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling quote v1.0.40\n   Compiling syn v2.0.104\n   Compiling bytemuck_derive v1.10.0\n   Compiling extern-trait v0.1.1\n   Compiling bytemuck v1.23.1\n   Compiling starry-vm v0.1.0 (/tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 4.02s\n     Running tests/test.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/test-1919d12d0738f1b8)\nwarning: integer-to-pointer cast\n   --> tests/test.rs:112:15\n    |\n112 |     let ptr = 0x3000 as *mut u8;\n    |               ^^^^^^^^^^^^^^^^^ integer-to-pointer cast\n    |\n    = help: this program is using integer-to-pointer casts or (equivalently) `ptr::with_exposed_provenance`, which means that Miri might miss pointer bugs in this program\n    = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.with_exposed_provenance.html for more details on that operation\n    = help: to ensure that Miri does not miss bugs in your program, use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead\n    = help: you can then set `MIRIFLAGS=-Zmiri-strict-provenance` to ensure you are not relying on `with_exposed_provenance` semantics\n    = help: alternatively, `MIRIFLAGS=-Zmiri-permissive-provenance` disables this warning\n    = note: BACKTRACE on thread `test_load`:\n    = note: inside `test_load` at tests/test.rs:112:15: 112:32\nnote: inside closure\n   --> tests/test.rs:107:15\n    |\n105 | #[test]\n    | ------- in this procedural macro expansion\n106 | #[cfg(feature = \"alloc\")]\n107 | fn test_load() {\n    |               ^\n\nerror: Undefined Behavior: calling a function with return type Vm passing return place of type starry_vm::VmImpl\n   --> /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/src/lib.rs:29:1\n    |\n29  | #[extern_trait(VmImpl)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^ Undefined Behavior occurred here\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = help: this means these two types are not *guaranteed* to be ABI-compatible across all targets\n    = help: if you think this code should be accepted anyway, please report an issue with Miri\n    = note: BACKTRACE on thread `test_load`:\n    = note: inside `<starry_vm::VmImpl as starry_vm::VmIo>::new` at /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/src/lib.rs:29:1: 29:24\nnote: inside `starry_vm::vm_write_slice::<u8>`\n   --> /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/src/lib.rs:61:5\n    |\n61  |     VmImpl::new().write(ptr.addr(), bytes)\n    |     ^^^^^^^^^^^^^\nnote: inside `test_load`\n   --> tests/test.rs:113:5\n    |\n113 |     vm_write_slice(ptr, MAGIC).unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> tests/test.rs:107:15\n    |\n105 | #[test]\n    | ------- in this procedural macro expansion\n106 | #[cfg(feature = \"alloc\")]\n107 | fn test_load() {\n    |               ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error; 1 warning emitted\n\nerror: test failed, to rerun pass `-p starry-vm --test test`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/target/miri/x86_64-unknown-linux-gnu/debug/deps/test-1919d12d0738f1b8 test_load` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "test_load_until_nul",
                "status": "ok",
                "duration_ms": 5,
                "error": null,
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.01s\n     Running tests/test.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/test-1919d12d0738f1b8)\nwarning: integer-to-pointer cast\n   --> tests/test.rs:123:15\n    |\n123 |     let ptr = 0x4000 as *mut u8;\n    |               ^^^^^^^^^^^^^^^^^ integer-to-pointer cast\n    |\n    = help: this program is using integer-to-pointer casts or (equivalently) `ptr::with_exposed_provenance`, which means that Miri might miss pointer bugs in this program\n    = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.with_exposed_provenance.html for more details on that operation\n    = help: to ensure that Miri does not miss bugs in your program, use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead\n    = help: you can then set `MIRIFLAGS=-Zmiri-strict-provenance` to ensure you are not relying on `with_exposed_provenance` semantics\n    = help: alternatively, `MIRIFLAGS=-Zmiri-permissive-provenance` disables this warning\n    = note: BACKTRACE on thread `test_load_until`:\n    = note: inside `test_load_until_nul` at tests/test.rs:123:15: 123:32\nnote: inside closure\n   --> tests/test.rs:120:25\n    |\n118 | #[test]\n    | ------- in this procedural macro expansion\n119 | #[cfg(feature = \"alloc\")]\n120 | fn test_load_until_nul() {\n    |                         ^\n\nerror: Undefined Behavior: calling a function with return type Vm passing return place of type starry_vm::VmImpl\n   --> /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/src/lib.rs:29:1\n    |\n29  | #[extern_trait(VmImpl)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^ Undefined Behavior occurred here\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = help: this means these two types are not *guaranteed* to be ABI-compatible across all targets\n    = help: if you think this code should be accepted anyway, please report an issue with Miri\n    = note: BACKTRACE on thread `test_load_until`:\n    = note: inside `<starry_vm::VmImpl as starry_vm::VmIo>::new` at /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/src/lib.rs:29:1: 29:24\nnote: inside `starry_vm::vm_load_until_nul::<u8>`\n   --> /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/src/vec.rs:43:18\n    |\n43  |     let mut vm = VmImpl::new();\n    |                  ^^^^^^^^^^^^^\nnote: inside `test_load_until_nul`\n   --> tests/test.rs:125:16\n    |\n125 |     assert_eq!(vm_load_until_nul(ptr).unwrap(), []);\n    |                ^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n   --> tests/test.rs:120:25\n    |\n118 | #[test]\n    | ------- in this procedural macro expansion\n119 | #[cfg(feature = \"alloc\")]\n120 | fn test_load_until_nul() {\n    |                         ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error; 1 warning emitted\n\nerror: test failed, to rerun pass `-p starry-vm --test test`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/target/miri/x86_64-unknown-linux-gnu/debug/deps/test-1919d12d0738f1b8 test_load_until_nul` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "test_perm",
                "status": "ok",
                "duration_ms": 4,
                "error": null,
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.01s\n     Running tests/test.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/test-1919d12d0738f1b8)\nwarning: integer-to-pointer cast\n  --> tests/test.rs:66:24\n   |\n66 |         vm_write_slice(0x100 as *mut (), &[]),\n   |                        ^^^^^^^^^^^^^^^^ integer-to-pointer cast\n   |\n   = help: this program is using integer-to-pointer casts or (equivalently) `ptr::with_exposed_provenance`, which means that Miri might miss pointer bugs in this program\n   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.with_exposed_provenance.html for more details on that operation\n   = help: to ensure that Miri does not miss bugs in your program, use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead\n   = help: you can then set `MIRIFLAGS=-Zmiri-strict-provenance` to ensure you are not relying on `with_exposed_provenance` semantics\n   = help: alternatively, `MIRIFLAGS=-Zmiri-permissive-provenance` disables this warning\n   = note: BACKTRACE on thread `test_perm`:\n   = note: inside `test_perm` at tests/test.rs:66:24: 66:40\nnote: inside closure\n  --> tests/test.rs:64:15\n   |\n63 | #[test]\n   | ------- in this procedural macro expansion\n64 | fn test_perm() {\n   |               ^\n\nerror: Undefined Behavior: calling a function with return type Vm passing return place of type starry_vm::VmImpl\n  --> /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/src/lib.rs:29:1\n   |\n29 | #[extern_trait(VmImpl)]\n   | ^^^^^^^^^^^^^^^^^^^^^^^ Undefined Behavior occurred here\n   |\n   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n   = help: this means these two types are not *guaranteed* to be ABI-compatible across all targets\n   = help: if you think this code should be accepted anyway, please report an issue with Miri\n   = note: BACKTRACE on thread `test_perm`:\n   = note: inside `<starry_vm::VmImpl as starry_vm::VmIo>::new` at /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/src/lib.rs:29:1: 29:24\nnote: inside `starry_vm::vm_write_slice::<()>`\n  --> /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/src/lib.rs:61:5\n   |\n61 |     VmImpl::new().write(ptr.addr(), bytes)\n   |     ^^^^^^^^^^^^^\nnote: inside `test_perm`\n  --> tests/test.rs:66:9\n   |\n66 |         vm_write_slice(0x100 as *mut (), &[]),\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n  --> tests/test.rs:64:15\n   |\n63 | #[test]\n   | ------- in this procedural macro expansion\n64 | fn test_perm() {\n   |               ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error; 1 warning emitted\n\nerror: test failed, to rerun pass `-p starry-vm --test test`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/target/miri/x86_64-unknown-linux-gnu/debug/deps/test-1919d12d0738f1b8 test_perm` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "test_ptr",
                "status": "ok",
                "duration_ms": 5,
                "error": null,
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.01s\n     Running tests/test.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/test-1919d12d0738f1b8)\nwarning: integer-to-pointer cast\n  --> tests/test.rs:93:15\n   |\n93 |     let ptr = 0x2000 as *mut Foo;\n   |               ^^^^^^^^^^^^^^^^^^ integer-to-pointer cast\n   |\n   = help: this program is using integer-to-pointer casts or (equivalently) `ptr::with_exposed_provenance`, which means that Miri might miss pointer bugs in this program\n   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.with_exposed_provenance.html for more details on that operation\n   = help: to ensure that Miri does not miss bugs in your program, use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead\n   = help: you can then set `MIRIFLAGS=-Zmiri-strict-provenance` to ensure you are not relying on `with_exposed_provenance` semantics\n   = help: alternatively, `MIRIFLAGS=-Zmiri-permissive-provenance` disables this warning\n   = note: BACKTRACE on thread `test_ptr`:\n   = note: inside `test_ptr` at tests/test.rs:93:15: 93:33\nnote: inside closure\n  --> tests/test.rs:73:14\n   |\n72 | #[test]\n   | ------- in this procedural macro expansion\n73 | fn test_ptr() {\n   |              ^\n\nerror: Undefined Behavior: calling a function with return type Vm passing return place of type starry_vm::VmImpl\n  --> /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/src/lib.rs:29:1\n   |\n29 | #[extern_trait(VmImpl)]\n   | ^^^^^^^^^^^^^^^^^^^^^^^ Undefined Behavior occurred here\n   |\n   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n   = help: this means these two types are not *guaranteed* to be ABI-compatible across all targets\n   = help: if you think this code should be accepted anyway, please report an issue with Miri\n   = note: BACKTRACE on thread `test_ptr`:\n   = note: inside `<starry_vm::VmImpl as starry_vm::VmIo>::new` at /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/src/lib.rs:29:1: 29:24\nnote: inside `starry_vm::vm_write_slice::<test_ptr::Foo>`\n  --> /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/src/lib.rs:61:5\n   |\n61 |     VmImpl::new().write(ptr.addr(), bytes)\n   |     ^^^^^^^^^^^^^\nnote: inside `test_ptr`\n  --> tests/test.rs:94:5\n   |\n94 |     vm_write_slice(ptr, &[A, B, C]).unwrap();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n  --> tests/test.rs:73:14\n   |\n72 | #[test]\n   | ------- in this procedural macro expansion\n73 | fn test_ptr() {\n   |              ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error; 1 warning emitted\n\nerror: test failed, to rerun pass `-p starry-vm --test test`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/target/miri/x86_64-unknown-linux-gnu/debug/deps/test-1919d12d0738f1b8 test_ptr` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              },
              {
                "name": "test_slice",
                "status": "ok",
                "duration_ms": 3,
                "error": null,
                "miri_pass": false,
                "miri_output": "    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.01s\n     Running tests/test.rs (target/miri/x86_64-unknown-linux-gnu/debug/deps/test-1919d12d0738f1b8)\nwarning: integer-to-pointer cast\n  --> tests/test.rs:54:15\n   |\n54 |     let ptr = 0x1000 as *mut u8;\n   |               ^^^^^^^^^^^^^^^^^ integer-to-pointer cast\n   |\n   = help: this program is using integer-to-pointer casts or (equivalently) `ptr::with_exposed_provenance`, which means that Miri might miss pointer bugs in this program\n   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.with_exposed_provenance.html for more details on that operation\n   = help: to ensure that Miri does not miss bugs in your program, use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead\n   = help: you can then set `MIRIFLAGS=-Zmiri-strict-provenance` to ensure you are not relying on `with_exposed_provenance` semantics\n   = help: alternatively, `MIRIFLAGS=-Zmiri-permissive-provenance` disables this warning\n   = note: BACKTRACE on thread `test_slice`:\n   = note: inside `test_slice` at tests/test.rs:54:15: 54:32\nnote: inside closure\n  --> tests/test.rs:51:16\n   |\n50 | #[test]\n   | ------- in this procedural macro expansion\n51 | fn test_slice() {\n   |                ^\n\nerror: Undefined Behavior: calling a function with return type Vm passing return place of type starry_vm::VmImpl\n  --> /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/src/lib.rs:29:1\n   |\n29 | #[extern_trait(VmImpl)]\n   | ^^^^^^^^^^^^^^^^^^^^^^^ Undefined Behavior occurred here\n   |\n   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n   = help: this means these two types are not *guaranteed* to be ABI-compatible across all targets\n   = help: if you think this code should be accepted anyway, please report an issue with Miri\n   = note: BACKTRACE on thread `test_slice`:\n   = note: inside `<starry_vm::VmImpl as starry_vm::VmIo>::new` at /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/src/lib.rs:29:1: 29:24\nnote: inside `starry_vm::vm_write_slice::<u8>`\n  --> /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/src/lib.rs:61:5\n   |\n61 |     VmImpl::new().write(ptr.addr(), bytes)\n   |     ^^^^^^^^^^^^^\nnote: inside `test_slice`\n  --> tests/test.rs:55:5\n   |\n55 |     vm_write_slice(ptr, DATA).unwrap();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: inside closure\n  --> tests/test.rs:51:16\n   |\n50 | #[test]\n   | ------- in this procedural macro expansion\n51 | fn test_slice() {\n   |                ^\n\nnote: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n\nerror: aborting due to 1 previous error; 1 warning emitted\n\nerror: test failed, to rerun pass `-p starry-vm --test test`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo-miri runner /tmp/os-checker-plugin-cargo/Starry-Mix-THU/axptr/target/miri/x86_64-unknown-linux-gnu/debug/deps/test-1919d12d0738f1b8 test_slice` (exit status: 1)\nnote: test exited abnormally; to see the full output pass --nocapture to the harness.\n",
                "miri_timeout": false
              }
            ],
            "failed": 0,
            "duration_ms": 21
          }
        ],
        "failed": 0,
        "duration_ms": 21,
        "pkg_tests_count": 5,
        "workspace_tests_count": 5
      },
      "tests": 1,
      "examples": 0,
      "benches": 0,
      "authors": [
        "Mivik <mivikq@gmail.com>",
        "Asakura Mizu <asakuramizu111@gmail.com>"
      ],
      "description": "",
      "documentation": null,
      "readme": null,
      "homepage": null,
      "keywords": [],
      "categories": [],
      "rust_version": null,
      "diag_total_count": 9,
      "last_commit_time": "2025-07-22T17:22:42Z",
      "release_count": null,
      "last_release_size": null,
      "last_release_time": null
    }
  }
}