{"data":[{"user":"kern-crates","repo":"sel4_task","pkg":"sel4_task","count":119,"raw_reports":[{"file":"src/scheduler.rs","count":55,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 1 to 1)\n+#[cfg(feature = \"ENABLE_SMP\")]\n+use crate::deps::{doMaskReschedule, kernel_stack_alloc, ksIdleThreadTCB};\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 3 to 5)\n-use sel4_common::{BIT, MASK};\n-use sel4_common::registers::{FaultIP, NextIP, sp, SSTATUS, SSTATUS_SPIE, SSTATUS_SPP};\n-use sel4_common::sel4_config::{CONFIG_KERNEL_STACK_BITS, CONFIG_MAX_NUM_NODES, CONFIG_NUM_DOMAINS, CONFIG_NUM_PRIORITIES, CONFIG_TIME_SLICE, L2_BITMAP_SIZE, NUM_READY_QUEUES, seL4_TCBBits, TCB_OFFSET, wordBits, wordRadix};\n+use sel4_common::registers::{sp, FaultIP, NextIP, SSTATUS, SSTATUS_SPIE, SSTATUS_SPP};\n+use sel4_common::sel4_config::{\n+    seL4_TCBBits, wordBits, wordRadix, CONFIG_KERNEL_STACK_BITS, CONFIG_MAX_NUM_NODES,\n+    CONFIG_NUM_DOMAINS, CONFIG_NUM_PRIORITIES, CONFIG_TIME_SLICE, L2_BITMAP_SIZE, NUM_READY_QUEUES,\n+    TCB_OFFSET,\n+};\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 7 to 8)\n-#[cfg(feature = \"ENABLE_SMP\")]\n-use crate::deps::{doMaskReschedule, ksIdleThreadTCB, kernel_stack_alloc};\n+use sel4_common::{BIT, MASK};\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 10 to 11)\n-#[cfg(feature = \"ENABLE_SMP\")]\n-use sel4_common::utils::cpu_id;\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 15 to 15)\n+#[cfg(feature = \"ENABLE_SMP\")]\n+use sel4_common::utils::cpu_id;\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 16 to 16)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 29 to 29)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 36 to 36)\n-    ksReadyQueues: [tcb_queue_t {head: 0, tail: 0}; CONFIG_NUM_DOMAINS * CONFIG_NUM_PRIORITIES],\n+    ksReadyQueues: [tcb_queue_t { head: 0, tail: 0 }; CONFIG_NUM_DOMAINS * CONFIG_NUM_PRIORITIES],\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 45 to 45)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 57 to 57)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 77 to 80)\n-pub static mut ksReadyQueues: [tcb_queue_t; NUM_READY_QUEUES] = [tcb_queue_t {\n-    head: 0,\n-    tail: 0,\n-}; NUM_READY_QUEUES];\n+pub static mut ksReadyQueues: [tcb_queue_t; NUM_READY_QUEUES] =\n+    [tcb_queue_t { head: 0, tail: 0 }; NUM_READY_QUEUES];\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 101 to 101)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 105 to 105)\n-        #[cfg(feature = \"ENABLE_SMP\")] {\n+        #[cfg(feature = \"ENABLE_SMP\")]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 108 to 108)\n-        #[cfg(not(feature = \"ENABLE_SMP\"))] {\n+        #[cfg(not(feature = \"ENABLE_SMP\"))]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 117 to 117)\n-        #[cfg(feature = \"ENABLE_SMP\")] {\n+        #[cfg(feature = \"ENABLE_SMP\")]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 120 to 120)\n-        #[cfg(not(feature = \"ENABLE_SMP\"))] {\n+        #[cfg(not(feature = \"ENABLE_SMP\"))]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 132 to 132)\n-        #[cfg(feature = \"ENABLE_SMP\")] {\n+        #[cfg(feature = \"ENABLE_SMP\")]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 135 to 135)\n-        #[cfg(not(feature = \"ENABLE_SMP\"))] {\n+        #[cfg(not(feature = \"ENABLE_SMP\"))]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 144 to 144)\n-        #[cfg(feature = \"ENABLE_SMP\")] {\n+        #[cfg(feature = \"ENABLE_SMP\")]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 147 to 147)\n-        #[cfg(not(feature = \"ENABLE_SMP\"))] {\n+        #[cfg(not(feature = \"ENABLE_SMP\"))]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 156 to 156)\n-        #[cfg(feature = \"ENABLE_SMP\")] {\n+        #[cfg(feature = \"ENABLE_SMP\")]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 159 to 159)\n-        #[cfg(not(feature = \"ENABLE_SMP\"))] {\n+        #[cfg(not(feature = \"ENABLE_SMP\"))]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 168 to 168)\n-        #[cfg(feature = \"ENABLE_SMP\")] {\n+        #[cfg(feature = \"ENABLE_SMP\")]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 171 to 171)\n-        #[cfg(not(feature = \"ENABLE_SMP\"))] {\n+        #[cfg(not(feature = \"ENABLE_SMP\"))]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 177 to 177)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 181 to 181)\n-        #[cfg(feature = \"ENABLE_SMP\")] {\n+        #[cfg(feature = \"ENABLE_SMP\")]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 184 to 184)\n-        #[cfg(not(feature = \"ENABLE_SMP\"))] {\n+        #[cfg(not(feature = \"ENABLE_SMP\"))]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 190 to 190)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 233 to 233)\n-        let l1index = wordBits - 1 - ksSMP[cpu_id()].ksReadyQueuesL1Bitmap[dom].leading_zeros() as usize;\n+        let l1index =\n+            wordBits - 1 - ksSMP[cpu_id()].ksReadyQueuesL1Bitmap[dom].leading_zeros() as usize;\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 235 to 236)\n-        let l2index =\n-            wordBits - 1 - (ksSMP[cpu_id()].ksReadyQueuesL2Bitmap[dom])[l1index_inverted].leading_zeros() as usize;\n+        let l2index = wordBits\n+            - 1\n+            - (ksSMP[cpu_id()].ksReadyQueuesL2Bitmap[dom])[l1index_inverted].leading_zeros()\n+                as usize;\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 243 to 243)\n-    #[cfg(feature = \"ENABLE_SMP\")] {\n+    #[cfg(feature = \"ENABLE_SMP\")]\n+    {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 246 to 246)\n-    #[cfg(not(feature = \"ENABLE_SMP\"))] {\n+    #[cfg(not(feature = \"ENABLE_SMP\"))]\n+    {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 256 to 258)\n-        #[cfg(feature = \"ENABLE_SMP\")] {\n-            ksSMP[_cpu].ksReadyQueuesL1Bitmap[dom]|= BIT!(l1index);\n-            ksSMP[_cpu].ksReadyQueuesL2Bitmap[dom][l1index_inverted] |= BIT!(prio & MASK!(wordRadix));\n+        #[cfg(feature = \"ENABLE_SMP\")]\n+        {\n+            ksSMP[_cpu].ksReadyQueuesL1Bitmap[dom] |= BIT!(l1index);\n+            ksSMP[_cpu].ksReadyQueuesL2Bitmap[dom][l1index_inverted] |=\n+                BIT!(prio & MASK!(wordRadix));\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 260 to 260)\n-        #[cfg(not(feature = \"ENABLE_SMP\"))] {\n+        #[cfg(not(feature = \"ENABLE_SMP\"))]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 272 to 273)\n-        #[cfg(feature = \"ENABLE_SMP\")] {\n-            ksSMP[_cpu].ksReadyQueuesL2Bitmap[dom][l1index_inverted] &= !BIT!(prio & MASK!(wordRadix));\n+        #[cfg(feature = \"ENABLE_SMP\")]\n+        {\n+            ksSMP[_cpu].ksReadyQueuesL2Bitmap[dom][l1index_inverted] &=\n+                !BIT!(prio & MASK!(wordRadix));\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 278 to 278)\n-        #[cfg(not(feature = \"ENABLE_SMP\"))] {\n+        #[cfg(not(feature = \"ENABLE_SMP\"))]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 301 to 301)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 319 to 319)\n-            #[cfg(feature = \"ENABLE_SMP\")] {\n+            #[cfg(feature = \"ENABLE_SMP\")]\n+            {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 322 to 322)\n-            #[cfg(not(feature = \"ENABLE_SMP\"))] {\n+            #[cfg(not(feature = \"ENABLE_SMP\"))]\n+            {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 329 to 329)\n-                #[cfg(feature = \"ENABLE_SMP\")] {\n+                #[cfg(feature = \"ENABLE_SMP\")]\n+                {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 332 to 332)\n-                #[cfg(not(feature = \"ENABLE_SMP\"))] {\n+                #[cfg(not(feature = \"ENABLE_SMP\"))]\n+                {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 335 to 335)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 380 to 382)\n-            } else if was_runnable\n-                && candidate.tcbPriority == get_currenct_thread().tcbPriority\n-            {\n+            } else if was_runnable && candidate.tcbPriority == get_currenct_thread().tcbPriority {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 393 to 393)\n-        #[cfg(feature = \"ENABLE_SMP\")] {\n+        #[cfg(feature = \"ENABLE_SMP\")]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 397 to 397)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 462 to 462)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 465 to 465)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 479 to 481)\n-        ThreadState::ThreadStateIdleThreadState => return {\n-\n-        },\n+        ThreadState::ThreadStateIdleThreadState => return {},\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 489 to 489)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 496 to 496)\n-    use crate::deps::{ksIdleThreadTCB, kernel_stack_alloc};\n+    use crate::deps::{kernel_stack_alloc, ksIdleThreadTCB};\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 505 to 505)\n-        tcb.set_register(sp, kernel_stack_alloc as usize + BIT!(CONFIG_KERNEL_STACK_BITS));\n+        tcb.set_register(\n+            sp,\n+            kernel_stack_alloc as usize + BIT!(CONFIG_KERNEL_STACK_BITS),\n+        );\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 515 to 515)\n-            let pptr = (ksIdleThreadTCB as usize + i * BIT!(seL4_TCBBits))as *mut usize;\n+            let pptr = (ksIdleThreadTCB as usize + i * BIT!(seL4_TCBBits)) as *mut usize;\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 521 to 521)\n-            tcb.set_register(sp, kernel_stack_alloc as usize + (i + 1) * BIT!(CONFIG_KERNEL_STACK_BITS));\n+            tcb.set_register(\n+                sp,\n+                kernel_stack_alloc as usize + (i + 1) * BIT!(CONFIG_KERNEL_STACK_BITS),\n+            );\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 527 to 528)\n-\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/scheduler.rs (original lines from 538 to 538)\n+\n"]}},{"file":"src/tcb.rs","count":44,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 4 to 4)\n-use sel4_common::{BIT, MASK};\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 6 to 9)\n-use sel4_common::registers::{fault_messages, FaultIP, msgInfoRegister, msgRegister, n_contextRegisters, n_exceptionMessage, n_msgRegisters, n_syscallMessage, NextIP, SSTATUS};\n-use sel4_common::utils::{pageBitsForSize, convert_to_mut_type_ref};\n-use sel4_cspace::interface::{cte_t, resolve_address_bits, CapTag, cap_t, mdb_node_t, cte_insert};\n-use sel4_vspace::{set_vm_root, pptr_t, VMReadWrite, VMReadOnly};\n+use sel4_common::registers::{\n+    fault_messages, msgInfoRegister, msgRegister, n_contextRegisters, n_exceptionMessage,\n+    n_msgRegisters, n_syscallMessage, FaultIP, NextIP, SSTATUS,\n+};\n+use sel4_common::utils::{convert_to_mut_type_ref, pageBitsForSize};\n+use sel4_common::{BIT, MASK};\n+use sel4_cspace::interface::{cap_t, cte_insert, cte_t, mdb_node_t, resolve_address_bits, CapTag};\n+use sel4_vspace::{pptr_t, set_vm_root, VMReadOnly, VMReadWrite};\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 11 to 12)\n-use sel4_common::sel4_config::*;\n-use sel4_common::structures::{seL4_IPCBuffer, exception_t};\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 14 to 14)\n+use sel4_common::sel4_config::*;\n+use sel4_common::structures::{exception_t, seL4_IPCBuffer};\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 15 to 16)\n-\n-use super::scheduler::{addToBitmap, get_currenct_thread, possible_switch_to, ready_queues_index, removeFromBitmap, rescheduleRequired, schedule_tcb, set_current_thread};\n+use super::scheduler::{\n+    addToBitmap, get_currenct_thread, possible_switch_to, ready_queues_index, removeFromBitmap,\n+    rescheduleRequired, schedule_tcb, set_current_thread,\n+};\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 21 to 21)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 32 to 32)\n-        Self {registers }\n+        Self { registers }\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 88 to 89)\n-            ThreadState::ThreadStateInactive | ThreadState::ThreadStateBlockedOnNotification | ThreadState::ThreadStateBlockedOnReceive\n-            | ThreadState::ThreadStateBlockedOnReply | ThreadState::ThreadStateBlockedOnSend => true,\n+            ThreadState::ThreadStateInactive\n+            | ThreadState::ThreadStateBlockedOnNotification\n+            | ThreadState::ThreadStateBlockedOnReceive\n+            | ThreadState::ThreadStateBlockedOnReply\n+            | ThreadState::ThreadStateBlockedOnSend => true,\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 91 to 91)\n-            _ => false\n+            _ => false,\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 98 to 99)\n-            ThreadState::ThreadStateRunning | ThreadState::ThreadStateRestart   => true,\n-            _                                                                   => false,\n+            ThreadState::ThreadStateRunning | ThreadState::ThreadStateRestart => true,\n+            _ => false,\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 183 to 183)\n-    pub fn get_sched_queue(&mut self, index: usize) ->  &'static mut tcb_queue_t {\n+    pub fn get_sched_queue(&mut self, index: usize) -> &'static mut tcb_queue_t {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 185 to 185)\n-            #[cfg(feature = \"ENABLE_SMP\")] {\n+            #[cfg(feature = \"ENABLE_SMP\")]\n+            {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 189 to 189)\n-            #[cfg(not(feature = \"ENABLE_SMP\"))] {\n+            #[cfg(not(feature = \"ENABLE_SMP\"))]\n+            {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 198 to 198)\n-        #[cfg(feature = \"ENABLE_SMP\")] {\n+        #[cfg(feature = \"ENABLE_SMP\")]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 201 to 201)\n-        #[cfg(not(feature = \"ENABLE_SMP\"))] {\n+        #[cfg(not(feature = \"ENABLE_SMP\"))]\n+        {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 213 to 213)\n-                convert_to_mut_type_ref::<tcb_t>(self.tcbSchedPrev).tcbSchedNext = self.tcbSchedNext;\n+                convert_to_mut_type_ref::<tcb_t>(self.tcbSchedPrev).tcbSchedNext =\n+                    self.tcbSchedNext;\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 221 to 221)\n-                convert_to_mut_type_ref::<tcb_t>(self.tcbSchedNext).tcbSchedPrev = self.tcbSchedPrev;\n+                convert_to_mut_type_ref::<tcb_t>(self.tcbSchedNext).tcbSchedPrev =\n+                    self.tcbSchedPrev;\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 260 to 261)\n-        use super::scheduler::{ksSMP, ksCurDomain};\n-        use sel4_common::utils::{cpu_id, convert_to_type_ref};\n+        use super::scheduler::{ksCurDomain, ksSMP};\n+        use sel4_common::utils::{convert_to_type_ref, cpu_id};\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 264 to 265)\n-                let target_current = convert_to_type_ref::<tcb_t>(ksSMP[self.tcbAffinity].ksCurThread);\n-                if ksSMP[self.tcbAffinity].ksIdleThread == ksSMP[self.tcbAffinity].ksCurThread || self.tcbPriority > target_current.tcbPriority {\n+                let target_current =\n+                    convert_to_type_ref::<tcb_t>(ksSMP[self.tcbAffinity].ksCurThread);\n+                if ksSMP[self.tcbAffinity].ksIdleThread == ksSMP[self.tcbAffinity].ksCurThread\n+                    || self.tcbPriority > target_current.tcbPriority\n+                {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 272 to 272)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 298 to 298)\n-        lookupSlot_raw_ret_t { status: res_ret.status, slot: res_ret.slot }\n+        lookupSlot_raw_ret_t {\n+            status: res_ret.status,\n+            slot: res_ret.slot,\n+        }\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 344 to 345)\n-        cte_insert(&cap_t::new_reply_cap(can_grant as usize, 0, sender.get_ptr()),\n-                   reply_slot, caller_slot);\n+        cte_insert(\n+            &cap_t::new_reply_cap(can_grant as usize, 0, sender.get_ptr()),\n+            reply_slot,\n+            caller_slot,\n+        );\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 369 to 369)\n-            return Some(convert_to_mut_type_ref::<seL4_IPCBuffer>(base_ptr + (w_buffer_ptr & MASK!(page_bits))));\n+            return Some(convert_to_mut_type_ref::<seL4_IPCBuffer>(\n+                base_ptr + (w_buffer_ptr & MASK!(page_bits)),\n+            ));\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 374 to 374)\n-    pub fn lookup_extra_caps(&self, res: &mut [pptr_t; seL4_MsgMaxExtraCaps]) -> Result<(), seL4_Fault_t>{\n+    pub fn lookup_extra_caps(\n+        &self,\n+        res: &mut [pptr_t; seL4_MsgMaxExtraCaps],\n+    ) -> Result<(), seL4_Fault_t> {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 382 to 382)\n-                if unlikely(lu_ret.status != exception_t::EXCEPTION_NONE)  {\n+                if unlikely(lu_ret.status != exception_t::EXCEPTION_NONE) {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 395 to 395)\n-    pub fn lookup_extra_caps_with_buf(&self, res: &mut [pptr_t; seL4_MsgMaxExtraCaps], buf: Option<&seL4_IPCBuffer>) -> Result<(), seL4_Fault_t>{\n+    pub fn lookup_extra_caps_with_buf(\n+        &self,\n+        res: &mut [pptr_t; seL4_MsgMaxExtraCaps],\n+        buf: Option<&seL4_IPCBuffer>,\n+    ) -> Result<(), seL4_Fault_t> {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 403 to 403)\n-                if unlikely(lu_ret.status != exception_t::EXCEPTION_NONE)  {\n+                if unlikely(lu_ret.status != exception_t::EXCEPTION_NONE) {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 416 to 416)\n-    pub fn lookup_mut_ipc_buffer(&mut self, is_receiver: bool) -> Option<&'static mut seL4_IPCBuffer> {\n+    pub fn lookup_mut_ipc_buffer(\n+        &mut self,\n+        is_receiver: bool,\n+    ) -> Option<&'static mut seL4_IPCBuffer> {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 427 to 427)\n-            return Some(convert_to_mut_type_ref::<seL4_IPCBuffer>(base_ptr + (w_buffer_ptr & MASK!(page_bits))));\n+            return Some(convert_to_mut_type_ref::<seL4_IPCBuffer>(\n+                base_ptr + (w_buffer_ptr & MASK!(page_bits)),\n+            ));\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 447 to 447)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 463 to 463)\n-            },\n+            }\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 467 to 467)\n-            },\n+            }\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 478 to 478)\n-            let cptr= buffer.receiveCNode;\n+            let cptr = buffer.receiveCNode;\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 485 to 485)\n-            if unlikely(lus_ret.status != exception_t::EXCEPTION_NONE || lus_ret.bitsRemaining != 0) {\n+            if unlikely(lus_ret.status != exception_t::EXCEPTION_NONE || lus_ret.bitsRemaining != 0)\n+            {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 488 to 488)\n-            return Some(convert_to_mut_type_ref::<cte_t>(lus_ret.slot as usize))\n+            return Some(convert_to_mut_type_ref::<cte_t>(lus_ret.slot as usize));\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 490 to 490)\n-        return None\n+        return None;\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 500 to 500)\n-        if let (Some(send_buffer), Some(recv_buffer)) = (self.lookup_ipc_buffer(false), receiver.lookup_mut_ipc_buffer(true)) {\n+        if let (Some(send_buffer), Some(recv_buffer)) = (\n+            self.lookup_ipc_buffer(false),\n+            receiver.lookup_mut_ipc_buffer(true),\n+        ) {\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 569 to 571)\n-                receiver.set_mr(seL4_CapFault_InRecvPhase, self.tcbFault.cap_fault_get_in_receive_phase());\n-                receiver.set_lookup_fault_mrs(seL4_CapFault_LookupFailureType, &self.tcbLookupFailure)\n-            },\n+                receiver.set_mr(\n+                    seL4_CapFault_InRecvPhase,\n+                    self.tcbFault.cap_fault_get_in_receive_phase(),\n+                );\n+                receiver\n+                    .set_lookup_fault_mrs(seL4_CapFault_LookupFailureType, &self.tcbLookupFailure)\n+            }\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 574 to 575)\n-                receiver.set_mr(n_syscallMessage, self.tcbFault.unknown_syscall_get_syscall_number())\n-            },\n+                receiver.set_mr(\n+                    n_syscallMessage,\n+                    self.tcbFault.unknown_syscall_get_syscall_number(),\n+                )\n+            }\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 578 to 580)\n-                receiver.set_mr(n_exceptionMessage, self.tcbFault.user_exeception_get_number());\n-                receiver.set_mr(n_exceptionMessage + 1, self.tcbFault.user_exeception_get_code())\n-            },\n+                receiver.set_mr(\n+                    n_exceptionMessage,\n+                    self.tcbFault.user_exeception_get_number(),\n+                );\n+                receiver.set_mr(\n+                    n_exceptionMessage + 1,\n+                    self.tcbFault.user_exeception_get_code(),\n+                )\n+            }\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 584 to 584)\n-                receiver.set_mr(seL4_VMFault_PrefetchFault, self.tcbFault.vm_fault_get_instruction_fault());\n+                receiver.set_mr(\n+                    seL4_VMFault_PrefetchFault,\n+                    self.tcbFault.vm_fault_get_instruction_fault(),\n+                );\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 586 to 586)\n-            },\n+            }\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 592 to 592)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb.rs (original lines from 600 to 600)\n+\n"]}},{"file":"src/lib.rs","count":5,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/sel4_task/src/lib.rs (original lines from 7 to 11)\n-mod thread_state;\n-mod tcb_queue;\n-pub mod tcb;\n-mod structures;\n-mod scheduler;\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/lib.rs (original lines from 13 to 13)\n+mod scheduler;\n+mod structures;\n+pub mod tcb;\n+mod tcb_queue;\n+mod thread_state;\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/lib.rs (original lines from 14 to 14)\n-pub use tcb::*;\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/lib.rs (original lines from 16 to 17)\n-pub use thread_state::*;\n-pub use tcb_queue::*;\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/lib.rs (original lines from 19 to 19)\n+pub use tcb::*;\n+pub use tcb_queue::*;\n+pub use thread_state::*;\n+\n"]}},{"file":"/home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs","count":4,"kinds":{"Clippy(Error)":["error: invalid register `x10`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:18:9\n   |\n18 |         inlateout(\"x10\") arg0 => ret,\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","error: invalid register `x11`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:19:9\n   |\n19 |         in(\"x11\") arg1,\n   |         ^^^^^^^^^^^^^^\n\n","error: invalid register `x12`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:20:9\n   |\n20 |         in(\"x12\") arg2,\n   |         ^^^^^^^^^^^^^^\n\n","error: invalid register `x17`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:21:9\n   |\n21 |         in(\"x17\") which,\n   |         ^^^^^^^^^^^^^^^\n\n"]}},{"file":"src/deps.rs","count":2,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/sel4_task/src/deps.rs (original lines from 1 to 1)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/deps.rs (original lines from 7 to 7)\n+\n"]}},{"file":"src/tcb_queue.rs","count":2,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb_queue.rs (original lines from 5 to 5)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/tcb_queue.rs (original lines from 42 to 42)\n-        return self.head == 0\n+        return self.head == 0;\n"]}},{"file":"src/thread_state.rs","count":2,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/sel4_task/src/thread_state.rs (original lines from 32 to 34)\n-        unsafe {\n-            core::mem::transmute::<u8, ThreadState>(self.get_ts_type() as u8)\n-        }\n+        unsafe { core::mem::transmute::<u8, ThreadState>(self.get_ts_type() as u8) }\n","file: /home/runner/check/batch_9/kern-crates/sel4_task/src/thread_state.rs (original lines from 37 to 37)\n+\n"]}},{"file":"(virtual) clippy","count":1,"kinds":{"Cargo":["// pkg_name=sel4_task, checker=Clippy\n// toolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_9/kern-crates/sel4_task\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n   Compiling memchr v2.7.4\n   Compiling regex-syntax v0.8.5\n   Compiling semver-parser v0.7.0\n   Compiling lazy_static v1.5.0\n   Compiling autocfg v1.4.0\n   Compiling semver v0.9.0\n   Compiling aho-corasick v1.1.3\n   Compiling rustc_version v0.2.3\n   Compiling bare-metal v0.2.5\n   Compiling lock_api v0.4.12\n    Checking log v0.4.22\n    Checking bit_field v0.10.2\n    Checking scopeguard v1.2.0\n    Checking bitflags v1.3.2\n    Checking serial-frame v0.1.0 (https://github.com/rel4team/serial-frame.git?branch=mi_dev#84501a76)\n    Checking tock-registers v0.9.0\n    Checking serial-impl-pl011 v0.1.0 (https://github.com/rel4team/serial-impl-pl011.git?branch=mi_dev#83e073e1)\n    Checking spin v0.9.8\n    Checking serial-impl-sbi v0.1.0 (https://github.com/rel4team/serial-impl-sbi.git?branch=mi_dev#4face963)\nerror: could not compile `serial-impl-sbi` (lib) due to 4 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"]}},{"file":"(virtual) lockbud","count":1,"kinds":{"Cargo":["// pkg_name=sel4_task, checker=Lockbud\n// toolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_9/kern-crates/sel4_task\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n   Compiling memchr v2.7.4\n   Compiling regex-syntax v0.8.5\n   Compiling semver-parser v0.7.0\n   Compiling lazy_static v1.5.0\n   Compiling autocfg v1.4.0\n   Compiling semver v0.9.0\n   Compiling aho-corasick v1.1.3\n   Compiling rustc_version v0.2.3\n   Compiling bare-metal v0.2.5\n   Compiling lock_api v0.4.12\n   Compiling log v0.4.22\n   Compiling bitflags v1.3.2\n   Compiling serial-frame v0.1.0 (https://github.com/rel4team/serial-frame.git?branch=mi_dev#84501a76)\n   Compiling bit_field v0.10.2\n[2024-10-29T02:10:27Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-29T02:10:27Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling scopeguard v1.2.0\n   Compiling tock-registers v0.9.0\n   Compiling serial-impl-pl011 v0.1.0 (https://github.com/rel4team/serial-impl-pl011.git?branch=mi_dev#83e073e1)\n   Compiling serial-impl-sbi v0.1.0 (https://github.com/rel4team/serial-impl-sbi.git?branch=mi_dev#4face963)\nerror: invalid register `x10`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:18:9\n   |\n18 |         inlateout(\"x10\") arg0 => ret,\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: invalid register `x11`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:19:9\n   |\n19 |         in(\"x11\") arg1,\n   |         ^^^^^^^^^^^^^^\n\nerror: invalid register `x12`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:20:9\n   |\n20 |         in(\"x12\") arg2,\n   |         ^^^^^^^^^^^^^^\n\nerror: invalid register `x17`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:21:9\n   |\n21 |         in(\"x17\") which,\n   |         ^^^^^^^^^^^^^^^\n\nerror: could not compile `serial-impl-sbi` (lib) due to 4 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"]}},{"file":"(virtual) rap","count":1,"kinds":{"Cargo":["// pkg_name=sel4_task, checker=Rap\n// toolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_9/kern-crates/sel4_task\n// cmd=cargo +nightly-2024-06-30 rap -F -M\n   Compiling memchr v2.7.4\n   Compiling regex-syntax v0.8.5\n   Compiling lazy_static v1.5.0\n   Compiling semver-parser v0.7.0\n   Compiling autocfg v1.4.0\n   Compiling semver v0.9.0\n   Compiling aho-corasick v1.1.3\n   Compiling rustc_version v0.2.3\n   Compiling lock_api v0.4.12\n   Compiling bare-metal v0.2.5\n    Checking bit_field v0.10.2\n    Checking log v0.4.22\n    Checking scopeguard v1.2.0\n    Checking serial-frame v0.1.0 (https://github.com/rel4team/serial-frame.git?branch=mi_dev#84501a76)\n    Checking bitflags v1.3.2\n    Checking tock-registers v0.9.0\n    Checking serial-impl-pl011 v0.1.0 (https://github.com/rel4team/serial-impl-pl011.git?branch=mi_dev#83e073e1)\n    Checking spin v0.9.8\n    Checking serial-impl-sbi v0.1.0 (https://github.com/rel4team/serial-impl-sbi.git?branch=mi_dev#4face963)\nerror: invalid register `x10`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:18:9\n   |\n18 |         inlateout(\"x10\") arg0 => ret,\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: invalid register `x11`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:19:9\n   |\n19 |         in(\"x11\") arg1,\n   |         ^^^^^^^^^^^^^^\n\nerror: invalid register `x12`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:20:9\n   |\n20 |         in(\"x12\") arg2,\n   |         ^^^^^^^^^^^^^^\n\nerror: invalid register `x17`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:21:9\n   |\n21 |         in(\"x17\") which,\n   |         ^^^^^^^^^^^^^^^\n\nerror: could not compile `serial-impl-sbi` (lib) due to 4 previous errors\nwarning: build failed, waiting for other jobs to finish...\n02:10:31|RAP|ERROR|: Finished with non-zero exit code.\n"]}},{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-10-29T02:10:27Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-29T02:10:27Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}},{"file":"src/structures.rs","count":1,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/sel4_task/src/structures.rs (original lines from 36 to 36)\n+\n"]}}]},{"user":"kern-crates","repo":"sel4_vspace","pkg":"sel4_vspace","count":58,"raw_reports":[{"file":"src/interface.rs","count":14,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/interface.rs (original lines from 2 to 2)\n-use sel4_cspace::interface::{cap_t, CapTag};\n+use super::pte::pte_t;\n+use super::utils::{\n+    kpptr_to_paddr, RISCV_GET_LVL_PGSIZE, RISCV_GET_LVL_PGSIZE_BITS, RISCV_GET_PT_INDEX,\n+};\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/interface.rs (original lines from 4 to 4)\n-use sel4_common::{BIT, ROUND_DOWN};\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/interface.rs (original lines from 6 to 6)\n-use sel4_common::sel4_config::{KERNEL_ELF_BASE, KERNEL_ELF_PADDR_BASE, PADDR_BASE, PPTR_BASE, PPTR_BASE_OFFSET, PPTR_TOP, PT_INDEX_BITS, seL4_PageBits};\n+use sel4_common::sel4_config::{\n+    seL4_PageBits, KERNEL_ELF_BASE, KERNEL_ELF_PADDR_BASE, PADDR_BASE, PPTR_BASE, PPTR_BASE_OFFSET,\n+    PPTR_TOP, PT_INDEX_BITS,\n+};\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/interface.rs (original lines from 9 to 10)\n-use super::pte::pte_t;\n-use super::utils::{RISCV_GET_PT_INDEX, RISCV_GET_LVL_PGSIZE, RISCV_GET_LVL_PGSIZE_BITS, kpptr_to_paddr};\n+use sel4_common::{BIT, ROUND_DOWN};\n+use sel4_cspace::interface::{cap_t, CapTag};\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/interface.rs (original lines from 12 to 12)\n-use super::{satp::{setVSpaceRoot, sfence}, asid::{find_vspace_for_asid, asid_t}, utils::pptr_to_paddr, structures::{vptr_t, pptr_t}};\n+use super::{\n+    asid::{asid_t, find_vspace_for_asid},\n+    satp::{setVSpaceRoot, sfence},\n+    structures::{pptr_t, vptr_t},\n+    utils::pptr_to_paddr,\n+};\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/interface.rs (original lines from 24 to 24)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/interface.rs (original lines from 81 to 81)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/interface.rs (original lines from 94 to 94)\n-        find_ret.status != exception_t::EXCEPTION_NONE || find_ret.vspace_root.is_none() || find_ret.vspace_root.unwrap() != lvl1pt,\n+        find_ret.status != exception_t::EXCEPTION_NONE\n+            || find_ret.vspace_root.is_none()\n+            || find_ret.vspace_root.unwrap() != lvl1pt,\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/interface.rs (original lines from 107 to 107)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/interface.rs (original lines from 109 to 109)\n-pub fn unmapPage(page_size: usize, asid: asid_t, vptr: vptr_t, pptr: pptr_t) -> Result<(), lookup_fault_t> {\n+pub fn unmapPage(\n+    page_size: usize,\n+    asid: asid_t,\n+    vptr: vptr_t,\n+    pptr: pptr_t,\n+) -> Result<(), lookup_fault_t> {\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/interface.rs (original lines from 115 to 115)\n-    let lu_ret = unsafe {(*find_ret.vspace_root.unwrap()).lookup_pt_slot(vptr)};\n+    let lu_ret = unsafe { (*find_ret.vspace_root.unwrap()).lookup_pt_slot(vptr) };\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/interface.rs (original lines from 121 to 121)\n-    let slot = unsafe {&(*lu_ret.ptSlot)};\n+    let slot = unsafe { &(*lu_ret.ptSlot) };\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/interface.rs (original lines from 123 to 123)\n-    if slot.get_vaild() == 0 || slot.is_pte_table() || slot.get_ppn() << seL4_PageBits != pptr_to_paddr(pptr) {\n+    if slot.get_vaild() == 0\n+        || slot.is_pte_table()\n+        || slot.get_ppn() << seL4_PageBits != pptr_to_paddr(pptr)\n+    {\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/interface.rs (original lines from 134 to 134)\n+\n"]}},{"file":"src/pte.rs","count":9,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/pte.rs (original lines from 2 to 3)\n-use sel4_common::MASK;\n-use sel4_common::sel4_config::{CONFIG_PT_LEVELS, PT_INDEX_BITS, seL4_PageBits, seL4_PageTableBits};\n+use sel4_common::sel4_config::{\n+    seL4_PageBits, seL4_PageTableBits, CONFIG_PT_LEVELS, PT_INDEX_BITS,\n+};\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/pte.rs (original lines from 6 to 6)\n+use sel4_common::MASK;\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/pte.rs (original lines from 7 to 9)\n-\n-use super::{structures::vptr_t, satp::sfence};\n-use super::utils::{paddr_to_pptr, RISCV_GET_PT_INDEX};\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/pte.rs (original lines from 11 to 11)\n-use super::vm_rights::{RISCVGetWriteFromVMRights, RISCVGetReadFromVMRights};\n+use super::utils::{paddr_to_pptr, RISCV_GET_PT_INDEX};\n+use super::vm_rights::{RISCVGetReadFromVMRights, RISCVGetWriteFromVMRights};\n+use super::{satp::sfence, structures::vptr_t};\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/pte.rs (original lines from 33 to 35)\n-    pub fn new(ppn: usize, sw: usize, dirty: usize, accessed: usize, global: usize, user: usize, execute: usize, write: usize,\n-               read: usize, valid: usize) -> Self {\n-\n+    pub fn new(\n+        ppn: usize,\n+        sw: usize,\n+        dirty: usize,\n+        accessed: usize,\n+        global: usize,\n+        user: usize,\n+        execute: usize,\n+        write: usize,\n+        read: usize,\n+        valid: usize,\n+    ) -> Self {\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/pte.rs (original lines from 80 to 81)\n-            ppn, 0, is_leaf as usize, is_leaf as usize, 1,\n-            0, exec as usize, write as usize,read as usize, 1\n+            ppn,\n+            0,\n+            is_leaf as usize,\n+            is_leaf as usize,\n+            1,\n+            0,\n+            exec as usize,\n+            write as usize,\n+            read as usize,\n+            1,\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/pte.rs (original lines from 124 to 124)\n-        self.get_vaild() != 0 && !(self.get_read() != 0 ||self.get_write() != 0 || self.get_execute() != 0)\n+        self.get_vaild() != 0\n+            && !(self.get_read() != 0 || self.get_write() != 0 || self.get_execute() != 0)\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/pte.rs (original lines from 147 to 147)\n-        while unsafe {(*ret.ptSlot).is_pte_table()} && level > 0 {\n+        while unsafe { (*ret.ptSlot).is_pte_table() } && level > 0 {\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/pte.rs (original lines from 150 to 150)\n-            pt = unsafe {(*ret.ptSlot).get_pte_from_ppn_mut() as *mut pte_t};\n+            pt = unsafe { (*ret.ptSlot).get_pte_from_ppn_mut() as *mut pte_t };\n"]}},{"file":"src/asid.rs","count":8,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/asid.rs (original lines from 4 to 5)\n-use sel4_common::{structures::exception_t, sel4_config::*, utils::convert_to_option_mut_type_ref, fault::*, BIT, MASK};\n-use sel4_cspace::interface::cap_t;\n+use super::{interface::set_vm_root, pte::pte_t};\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/asid.rs (original lines from 7 to 7)\n-use super::{pte::pte_t, interface::set_vm_root};\n+use sel4_common::{\n+    fault::*, sel4_config::*, structures::exception_t, utils::convert_to_option_mut_type_ref, BIT,\n+    MASK,\n+};\n+use sel4_cspace::interface::cap_t;\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/asid.rs (original lines from 52 to 52)\n-        return convert_to_option_mut_type_ref::<asid_pool_t>(riscvKSASIDTable[index] as usize)\n+        return convert_to_option_mut_type_ref::<asid_pool_t>(riscvKSASIDTable[index] as usize);\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/asid.rs (original lines from 71 to 73)\n-    let poolPtr =  unsafe {\n-        riscvKSASIDTable[asid >> asidLowBits]\n-    };\n+    let poolPtr = unsafe { riscvKSASIDTable[asid >> asidLowBits] };\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/asid.rs (original lines from 80 to 82)\n-    let vspace_root = unsafe {\n-        (*poolPtr).array[asid & MASK!(asidLowBits)]\n-    };\n+    let vspace_root = unsafe { (*poolPtr).array[asid & MASK!(asidLowBits)] };\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/asid.rs (original lines from 107 to 107)\n-pub fn delete_asid_pool(asid_base: asid_t, pool: *mut asid_pool_t, default_vspace_cap: &cap_t) -> Result<(), lookup_fault_t> {\n+pub fn delete_asid_pool(\n+    asid_base: asid_t,\n+    pool: *mut asid_pool_t,\n+    default_vspace_cap: &cap_t,\n+) -> Result<(), lookup_fault_t> {\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/asid.rs (original lines from 118 to 118)\n-pub fn delete_asid(asid: asid_t, vspace: *mut pte_t, default_vspace_cap: &cap_t) -> Result<(), lookup_fault_t> {\n+pub fn delete_asid(\n+    asid: asid_t,\n+    vspace: *mut pte_t,\n+    default_vspace_cap: &cap_t,\n+) -> Result<(), lookup_fault_t> {\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/asid.rs (original lines from 130 to 130)\n-\n"]}},{"file":"src/lib.rs","count":6,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/lib.rs (original lines from 7 to 11)\n-mod structures;\n-mod vm_rights;\n-mod satp;\n-mod utils;\n-mod pte;\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/lib.rs (original lines from 14 to 14)\n+mod pte;\n+mod satp;\n+mod structures;\n+mod utils;\n+mod vm_rights;\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/lib.rs (original lines from 15 to 17)\n-pub use structures::*;\n-pub use interface::{activate_kernel_vspace, rust_map_kernel_window, copyGlobalMappings, set_vm_root, unmapPage};\n-pub use vm_rights::{VMReadWrite, VMReadOnly, maskVMRights};\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/lib.rs (original lines from 19 to 20)\n-    asid_t, asid_pool_t, riscvKSASIDTable, delete_asid_pool, delete_asid,\n-    find_vspace_for_asid, get_asid_pool_by_index, set_asid_pool_by_index\n+    asid_pool_t, asid_t, delete_asid, delete_asid_pool, find_vspace_for_asid,\n+    get_asid_pool_by_index, riscvKSASIDTable, set_asid_pool_by_index,\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/lib.rs (original lines from 22 to 22)\n-pub use utils::{pptr_to_paddr, paddr_to_pptr, kpptr_to_paddr, RISCV_GET_LVL_PGSIZE_BITS, RISCV_GET_LVL_PGSIZE, checkVPAlignment};\n+pub use interface::{\n+    activate_kernel_vspace, copyGlobalMappings, rust_map_kernel_window, set_vm_root, unmapPage,\n+};\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/lib.rs (original lines from 24 to 24)\n-pub use satp::{sfence, setVSpaceRoot};\n+pub use satp::{setVSpaceRoot, sfence};\n+pub use structures::*;\n+pub use utils::{\n+    checkVPAlignment, kpptr_to_paddr, paddr_to_pptr, pptr_to_paddr, RISCV_GET_LVL_PGSIZE,\n+    RISCV_GET_LVL_PGSIZE_BITS,\n+};\n+pub use vm_rights::{maskVMRights, VMReadOnly, VMReadWrite};\n+\n"]}},{"file":"/home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs","count":4,"kinds":{"Clippy(Error)":["error: invalid register `x10`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:18:9\n   |\n18 |         inlateout(\"x10\") arg0 => ret,\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","error: invalid register `x11`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:19:9\n   |\n19 |         in(\"x11\") arg1,\n   |         ^^^^^^^^^^^^^^\n\n","error: invalid register `x12`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:20:9\n   |\n20 |         in(\"x12\") arg2,\n   |         ^^^^^^^^^^^^^^\n\n","error: invalid register `x17`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:21:9\n   |\n21 |         in(\"x17\") which,\n   |         ^^^^^^^^^^^^^^^\n\n"]}},{"file":"src/satp.rs","count":4,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/satp.rs (original lines from 1 to 1)\n+use super::structures::paddr_t;\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/satp.rs (original lines from 3 to 3)\n-use super::structures::paddr_t;\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/satp.rs (original lines from 50 to 50)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/satp.rs (original lines from 62 to 62)\n+\n"]}},{"file":"src/structures.rs","count":3,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/structures.rs (original lines from 11 to 11)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/structures.rs (original lines from 20 to 22)\n-        Self {\n-            words: [w]\n-        }\n+        Self { words: [w] }\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/structures.rs (original lines from 34 to 34)\n+\n"]}},{"file":"src/utils.rs","count":3,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/utils.rs (original lines from 1 to 3)\n-use sel4_common::{BIT, MASK};\n-use sel4_common::sel4_config::{CONFIG_PT_LEVELS, KERNEL_ELF_BASE_OFFSET, PPTR_BASE_OFFSET, PT_INDEX_BITS, seL4_PageBits};\n-use sel4_common::utils::pageBitsForSize;\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/utils.rs (original lines from 5 to 5)\n-\n+use sel4_common::sel4_config::{\n+    seL4_PageBits, CONFIG_PT_LEVELS, KERNEL_ELF_BASE_OFFSET, PPTR_BASE_OFFSET, PT_INDEX_BITS,\n+};\n+use sel4_common::utils::pageBitsForSize;\n+use sel4_common::{BIT, MASK};\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/utils.rs (original lines from 43 to 43)\n+\n"]}},{"file":"src/vm_rights.rs","count":3,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/vm_rights.rs (original lines from 7 to 7)\n-\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/vm_rights.rs (original lines from 26 to 26)\n-        }\n+        };\n","file: /home/runner/check/batch_9/kern-crates/sel4_vspace/src/vm_rights.rs (original lines from 30 to 30)\n+\n"]}},{"file":"(virtual) clippy","count":1,"kinds":{"Cargo":["// pkg_name=sel4_vspace, checker=Clippy\n// toolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_9/kern-crates/sel4_vspace\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n   Compiling memchr v2.7.4\n   Compiling regex-syntax v0.8.5\n   Compiling lazy_static v1.5.0\n   Compiling semver-parser v0.7.0\n   Compiling autocfg v1.4.0\n   Compiling semver v0.9.0\n   Compiling aho-corasick v1.1.3\n   Compiling rustc_version v0.2.3\n   Compiling bare-metal v0.2.5\n   Compiling lock_api v0.4.12\n    Checking serial-frame v0.1.0 (https://github.com/rel4team/serial-frame.git?branch=mi_dev#84501a76)\n    Checking bitflags v1.3.2\n    Checking bit_field v0.10.2\n    Checking scopeguard v1.2.0\n    Checking log v0.4.22\n    Checking tock-registers v0.9.0\n    Checking serial-impl-pl011 v0.1.0 (https://github.com/rel4team/serial-impl-pl011.git?branch=mi_dev#83e073e1)\n    Checking spin v0.9.8\n    Checking serial-impl-sbi v0.1.0 (https://github.com/rel4team/serial-impl-sbi.git?branch=mi_dev#4face963)\nerror: could not compile `serial-impl-sbi` (lib) due to 4 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"]}},{"file":"(virtual) lockbud","count":1,"kinds":{"Cargo":["// pkg_name=sel4_vspace, checker=Lockbud\n// toolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_9/kern-crates/sel4_vspace\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n   Compiling memchr v2.7.4\n   Compiling regex-syntax v0.8.5\n   Compiling semver-parser v0.7.0\n   Compiling lazy_static v1.5.0\n   Compiling autocfg v1.4.0\n   Compiling semver v0.9.0\n   Compiling aho-corasick v1.1.3\n   Compiling rustc_version v0.2.3\n   Compiling bare-metal v0.2.5\n   Compiling lock_api v0.4.12\n   Compiling bitflags v1.3.2\n   Compiling scopeguard v1.2.0\n   Compiling log v0.4.22\n   Compiling bit_field v0.10.2\n[2024-10-29T02:10:42Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-29T02:10:42Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling serial-frame v0.1.0 (https://github.com/rel4team/serial-frame.git?branch=mi_dev#84501a76)\n   Compiling tock-registers v0.9.0\n   Compiling serial-impl-pl011 v0.1.0 (https://github.com/rel4team/serial-impl-pl011.git?branch=mi_dev#83e073e1)\n   Compiling spin v0.9.8\n   Compiling serial-impl-sbi v0.1.0 (https://github.com/rel4team/serial-impl-sbi.git?branch=mi_dev#4face963)\nerror: invalid register `x10`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:18:9\n   |\n18 |         inlateout(\"x10\") arg0 => ret,\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: invalid register `x11`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:19:9\n   |\n19 |         in(\"x11\") arg1,\n   |         ^^^^^^^^^^^^^^\n\nerror: invalid register `x12`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:20:9\n   |\n20 |         in(\"x12\") arg2,\n   |         ^^^^^^^^^^^^^^\n\nerror: invalid register `x17`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:21:9\n   |\n21 |         in(\"x17\") which,\n   |         ^^^^^^^^^^^^^^^\n\nerror: could not compile `serial-impl-sbi` (lib) due to 4 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"]}},{"file":"(virtual) rap","count":1,"kinds":{"Cargo":["// pkg_name=sel4_vspace, checker=Rap\n// toolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_9/kern-crates/sel4_vspace\n// cmd=cargo +nightly-2024-06-30 rap -F -M\n   Compiling memchr v2.7.4\n   Compiling regex-syntax v0.8.5\n   Compiling semver-parser v0.7.0\n   Compiling lazy_static v1.5.0\n   Compiling autocfg v1.4.0\n   Compiling semver v0.9.0\n   Compiling aho-corasick v1.1.3\n   Compiling rustc_version v0.2.3\n   Compiling lock_api v0.4.12\n   Compiling bare-metal v0.2.5\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n    Checking log v0.4.22\n    Checking scopeguard v1.2.0\n    Checking serial-frame v0.1.0 (https://github.com/rel4team/serial-frame.git?branch=mi_dev#84501a76)\n    Checking tock-registers v0.9.0\n    Checking serial-impl-pl011 v0.1.0 (https://github.com/rel4team/serial-impl-pl011.git?branch=mi_dev#83e073e1)\n    Checking spin v0.9.8\n    Checking serial-impl-sbi v0.1.0 (https://github.com/rel4team/serial-impl-sbi.git?branch=mi_dev#4face963)\nerror: invalid register `x10`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:18:9\n   |\n18 |         inlateout(\"x10\") arg0 => ret,\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: invalid register `x11`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:19:9\n   |\n19 |         in(\"x11\") arg1,\n   |         ^^^^^^^^^^^^^^\n\nerror: invalid register `x12`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:20:9\n   |\n20 |         in(\"x12\") arg2,\n   |         ^^^^^^^^^^^^^^\n\nerror: invalid register `x17`: unknown register\n  --> /home/runner/.cargo/git/checkouts/serial-impl-sbi-b9661affcfb6f7f6/4face96/src/lib.rs:21:9\n   |\n21 |         in(\"x17\") which,\n   |         ^^^^^^^^^^^^^^^\n\nerror: could not compile `serial-impl-sbi` (lib) due to 4 previous errors\nwarning: build failed, waiting for other jobs to finish...\n02:10:46|RAP|ERROR|: Finished with non-zero exit code.\n"]}},{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-10-29T02:10:42Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-29T02:10:42Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}}]},{"user":"kern-crates","repo":"syscall-table","pkg":"syscall-table","count":15,"raw_reports":[{"file":"src/lib.rs","count":10,"kinds":{"Clippy(Warn)":["warning: unexpected `cfg` condition value: `test`\n  --> src/lib.rs:39:17\n   |\n39 | #![cfg_attr(not(feature = \"test\"), no_std)]\n   |                 ^^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `test` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n   = note: `#[warn(unexpected_cfgs)]` on by default\n\n","warning: `crate` references the macro call's crate\n   --> src/lib.rs:421:13\n    |\n421 |             crate::paste!{\n    |             ^^^^^ help: to reference the macro definition's crate, use: `$crate`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#crate_in_macro_def\n    = note: `#[warn(clippy::crate_in_macro_def)]` on by default\n\n","warning: `crate` references the macro call's crate\n   --> src/lib.rs:448:17\n    |\n448 |             use crate::{iter,ServiceWrapper,ToUsize};\n    |                 ^^^^^ help: to reference the macro definition's crate, use: `$crate`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#crate_in_macro_def\n\n","warning: length comparison to one\n   --> src/lib.rs:227:12\n    |\n227 |         if args.len() >= 1 {\n    |            ^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!args.is_empty()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n    = note: `#[warn(clippy::len_zero)]` on by default\n\n","warning: length comparison to one\n   --> src/lib.rs:238:12\n    |\n238 |         if args.len() >= 1 {\n    |            ^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!args.is_empty()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n\n","warning: very complex type used. Consider factoring parts into `type` definitions\n   --> src/lib.rs:299:14\n    |\n299 |     service: Box<dyn Fn(&[usize]) -> isize>,\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity\n    = note: `#[warn(clippy::type_complexity)]` on by default\n\n","warning: you should consider adding a `Default` implementation for `Table`\n   --> src/lib.rs:337:5\n    |\n337 | /     pub const fn new() -> Self {\n338 | |         Self {\n339 | |             map: BTreeMap::new(),\n340 | |         }\n341 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n335 + impl Default for Table {\n336 +     fn default() -> Self {\n337 +         Self::new()\n338 +     }\n339 + }\n    |\n\n","warning: returning the result of a `let` binding from a block\n   --> src/lib.rs:398:5\n    |\n397 |     let handler = SysCallHandler::new(func);\n    |     ---------------------------------------- unnecessary `let` binding\n398 |     handler\n    |     ^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n    = note: `#[warn(clippy::let_and_return)]` on by default\nhelp: return the expression directly\n    |\n397 ~     \n398 ~     SysCallHandler::new(func)\n    |\n\n"],"Unformatted":["file: /home/runner/check/batch_9/kern-crates/syscall-table/src/lib.rs (original lines from 133 to 133)\n-impl ToIsize for (){\n+impl ToIsize for () {\n","file: /home/runner/check/batch_9/kern-crates/syscall-table/src/lib.rs (original lines from 149 to 149)\n-impl<T:ToIsize, E: ToIsize> ToIsize for Result<T, E> {\n+impl<T: ToIsize, E: ToIsize> ToIsize for Result<T, E> {\n"]}},{"file":"examples/test.rs","count":4,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/syscall-table/examples/test.rs (original lines from 71 to 71)\n-\n","file: /home/runner/check/batch_9/kern-crates/syscall-table/examples/test.rs (original lines from 85 to 85)\n-\n","file: /home/runner/check/batch_9/kern-crates/syscall-table/examples/test.rs (original lines from 100 to 100)\n-    assert_eq!(r,3);\n+    assert_eq!(r, 3);\n","file: /home/runner/check/batch_9/kern-crates/syscall-table/examples/test.rs (original lines from 108 to 108)\n-    assert_eq!(res,1)\n+    assert_eq!(res, 1)\n"]}},{"file":"(virtual) rap","count":1,"kinds":{"Cargo":["// pkg_name=syscall-table, checker=Rap\n// toolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_9/kern-crates/syscall-table\n// cmd=cargo +nightly-2024-06-30 rap -F -M\n   Compiling proc-macro2 v1.0.89\n   Compiling unicode-ident v1.0.13\n   Compiling paste v1.0.15\n    Checking inventory v0.3.12 (https://github.com/os-module/inventory#b043290d)\n   Compiling quote v1.0.37\n   Compiling syn v2.0.85\n   Compiling systable-macro-derive v0.1.0 (/home/runner/check/batch_9/kern-crates/syscall-table/systable-macro-derive)\nerror: linking with `cc` failed: exit status: 1\n  |\n  = note: LC_ALL=\"C\" PATH=\"/home/runner/.rustup/toolchains/nightly-2024-06-30-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin:/home/runner/.rustup/toolchains/nightly-2024-06-30-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin/self-contained:/home/runner/.rustup/toolchains/nightly-2024-06-30-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin:/home/runner/.rustup/toolchains/nightly-2024-06-30-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin/self-contained:/home/runner/.rustup/toolchains/nightly-2024-06-30-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin:/home/runner/.rustup/toolchains/nightly-2024-06-30-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin/self-contained:/snap/bin:/home/runner/.local/bin:/opt/pipx_bin:/home/runner/.cargo/bin:/home/runner/.config/composer/vendor/bin:/usr/local/.ghcup/bin:/home/runner/.dotnet/tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\" VSLANG=\"1033\" \"cc\" \"-Wl,--version-script=/tmp/rustctlgVsN/list\" \"-Wl,--no-undefined-version\" \"-m64\" \"/tmp/rustctlgVsN/symbols.o\" \"/home/runner/check/batch_9/kern-crates/syscall-table/target/debug/deps/systable_macro_derive-c6f8735850e75a09.systable_macro_derive.d231543ee01c02cf-cgu.0.rcgu.o\" \"/home/runner/check/batch_9/kern-crates/syscall-table/target/debug/deps/systable_macro_derive-c6f8735850e75a09.d4huh1kwffg54rhzl27e3spj6.rcgu.rmeta\" \"/home/runner/check/batch_9/kern-crates/syscall-table/target/debug/deps/systable_macro_derive-c6f8735850e75a09.bi5c5i4eew6pvb9ylvlni5cpx.rcgu.o\" \"-Wl,--as-needed\" \"-L\" \"/home/runner/check/batch_9/kern-crates/syscall-table/target/debug/deps\" \"-L\" \"/home/runner/.rustup/toolchains/nightly-2024-06-30-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-Wl,-Bstatic\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"-Wl,-Bdynamic\" \"-lgcc_s\" \"-lutil\" \"-lrt\" \"-lpthread\" \"-lm\" \"-ldl\" \"-lc\" \"-B/home/runner/.rustup/toolchains/nightly-2024-06-30-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin/gcc-ld\" \"-B/home/runner/.rustup/toolchains/nightly-2024-06-30-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin/gcc-ld\" \"-B/home/runner/.rustup/toolchains/nightly-2024-06-30-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin/gcc-ld\" \"-fuse-ld=lld\" \"-Wl,--eh-frame-hdr\" \"-Wl,-z,noexecstack\" \"-L\" \"/home/runner/.rustup/toolchains/nightly-2024-06-30-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-L\" \"/home/runner/.rustup/toolchains/nightly-2024-06-30-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/self-contained\" \"-o\" \"/home/runner/check/batch_9/kern-crates/syscall-table/target/debug/deps/libsystable_macro_derive-c6f8735850e75a09.so\" \"-Wl,--gc-sections\" \"-shared\" \"-Wl,-z,relro,-z,now\" \"-nodefaultlibs\"\n  = note: rust-lld: error: undefined hidden symbol: __rdl_dealloc\n          >>> referenced by bi5c5i4eew6pvb9ylvlni5cpx\n          >>>               /home/runner/check/batch_9/kern-crates/syscall-table/target/debug/deps/systable_macro_derive-c6f8735850e75a09.bi5c5i4eew6pvb9ylvlni5cpx.rcgu.o:(__rust_dealloc)\n          collect2: error: ld returned 1 exit status\n          \n\nerror: could not compile `systable-macro-derive` (lib) due to 1 previous error\n02:11:24|RAP|ERROR|: Finished with non-zero exit code.\n"]}}]},{"user":"kern-crates","repo":"tracer","pkg":"tracer","count":9,"raw_reports":[{"file":"src/dwarf/unwinder.rs","count":4,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/tracer/src/dwarf/unwinder.rs (original lines from 2 to 2)\n+use crate::utils::read_value;\n","file: /home/runner/check/batch_9/kern-crates/tracer/src/dwarf/unwinder.rs (original lines from 13 to 13)\n-use crate::utils::read_value;\n"],"Clippy(Warn)":["warning: field `0` is never read\n  --> src/dwarf/unwinder.rs:99:24\n   |\n99 |     UnexpectedRegister(Register),\n   |     ------------------ ^^^^^^^^\n   |     |\n   |     field in this variant\n   |\n   = note: `UnwinderError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n   = note: `#[warn(dead_code)]` on by default\nhelp: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\n   |\n99 |     UnexpectedRegister(()),\n   |                        ~~\n\n","warning: field `0` is never read\n   --> src/dwarf/unwinder.rs:101:28\n    |\n101 |     CfaRuleUnknownRegister(Register),\n    |     ---------------------- ^^^^^^^^\n    |     |\n    |     field in this variant\n    |\n    = note: `UnwinderError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\nhelp: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\n    |\n101 |     CfaRuleUnknownRegister(()),\n    |                            ~~\n\n"]}},{"file":"src/compiler.rs","count":2,"kinds":{"Clippy(Warn)":["warning: unneeded `return` statement\n   --> src/compiler.rs:97:5\n    |\n97  | /     return match opcode {\n98  | |         0b0100011 => {\n99  | |             // 四字节的sd指令\n100 | |             let func = ins.get_bits(12..=14);\n...   |\n138 | |         }\n139 | |     };\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n    = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n    |\n97  ~     match opcode {\n98  +         0b0100011 => {\n99  ~             // 四字节的sd指令\n100 +             let func = ins.get_bits(12..=14);\n101 +             if func != 0b011 {\n102 +                 return None;\n103 +             }\n104 +             let rd = ins.get_bits(15..=19); // sp\n105 +             let rt = ins.get_bits(20..=24); // ra\n106 +             if rd != 2 || rt != 1 {\n107 +                 return None;\n108 +             }\n109 +             let mut imm = 0u32;\n110 +             imm.set_bits(0..=4, ins.get_bits(7..=11));\n111 +             imm.set_bits(5..=11, ins.get_bits(25..=31));\n112 +             for i in 12..32 {\n113 +                 imm.set_bit(i, imm.get_bit(11));\n114 +             }\n115 +             let imm = imm as isize;\n116 +             if imm > 0 {\n117 +                 Some(imm as u32)\n118 +             } else {\n119 +                 None\n120 +             }\n121 +         }\n122 +         _ => {\n123 ~             // 2字节的sd指令\n124 +             // c.sdsp\n125 +             // 111 [uimm5:3 8:6] rt 10\n126 +             let short_ins = ins.get_bits(0..16);\n127 +             let high = short_ins.get_bits(13..16);\n128 +             let low = short_ins.get_bits(0..2);\n129 +             match (high, low) {\n130 +                 (0b111, 0b10) => {\n131 +                     let mut imm = 0u32;\n132 +                     imm.set_bits(3..6, short_ins.get_bits(10..13));\n133 +                     imm.set_bits(6..9, short_ins.get_bits(7..10));\n134 +                     Some(imm)\n135 +                 }\n136 +                 (_, _) => None,\n137 +             }\n138 +         }\n139 ~     }\n    |\n\n","warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> src/compiler.rs:253:17\n    |\n253 | /                 match ins {\n254 | |                     InstructionSp::Addi(x) => {\n255 | |                         stack_size += x;\n256 | |                     }\n257 | |                     _ => {}\n258 | |                 }\n    | |_________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match\n    = note: `#[warn(clippy::single_match)]` on by default\nhelp: try\n    |\n253 ~                 if let InstructionSp::Addi(x) = ins {\n254 +                     stack_size += x;\n255 +                 }\n    |\n\n"]}},{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-10-29T02:11:39Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-29T02:11:39Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}},{"file":"[rap] Not supported to display yet.","count":1,"kinds":{"Rap":["pkg=tracer, checker=Rap\ntoolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\npkg_dir=/home/runner/check/batch_9/kern-crates/tracer\ncmd=cargo +nightly-2024-06-30 rap -F -M\n\n02:11:42|RAP|WARN|: RCanary: Leak Function: Unsat DefId(0:119 ~ tracer[06ae]::dwarf::unwinder::{impl#3}::new) src/dwarf/unwinder.rs:118:5: 148:6 (#0)\n02:11:42|RAP|WARN|: RCanary: LeakItem Candidates: _115 = alloc::boxed::Box::<gimli::ParsedEhFrameHdr<gimli::EndianSlice<'_, gimli::LittleEndian>>>::leak::<'_>(move _116) -> [return: bb49, unwind: bb55], src/dwarf/unwinder.rs:128:19: 136:11 (#0)\n"]}},{"file":"src/lib.rs","count":1,"kinds":{"Clippy(Warn)":["warning: the feature `return_position_impl_trait_in_trait` has been stable since 1.75.0 and no longer requires an attribute to enable\n --> src/lib.rs:1:12\n  |\n1 | #![feature(return_position_impl_trait_in_trait)]\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\n"]}}]},{"user":"kern-crates","repo":"spinlock","pkg":"spinlock","count":6,"raw_reports":[{"file":"/home/runner/.cargo/git/checkouts/axconfig-a375f0c4fb0314cc/ecfc417/build.rs","count":1,"kinds":{"Clippy(Error)":["error: environment variable `AX_WORK_DIR` not defined at compile time\n --> /home/runner/.cargo/git/checkouts/axconfig-a375f0c4fb0314cc/ecfc417/build.rs:6:34\n  |\n6 |     let root_dir = PathBuf::from(std::env!(\"AX_WORK_DIR\"));\n  |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: use `std::env::var(\"AX_WORK_DIR\")` to read the variable at run time\n  = note: this error originates in the macro `std::env` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"]}},{"file":"(virtual) clippy","count":1,"kinds":{"Cargo":["// pkg_name=spinlock, checker=Clippy\n// toolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_9/kern-crates/spinlock\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n   Compiling hashbrown v0.15.0\n   Compiling serde v1.0.214\n   Compiling equivalent v1.0.1\n   Compiling toml_datetime v0.6.8\n   Compiling winnow v0.6.20\n   Compiling x86 v0.52.0\n    Checking bitflags v1.3.2\n    Checking raw-cpuid v10.7.0\n   Compiling indexmap v2.6.0\n   Compiling taskctx v0.1.0 (https://github.com/Starry-OS/taskctx.git#3c3ad2fb)\n    Checking bit_field v0.10.2\n    Checking memory_addr v0.1.0 (https://github.com/Starry-OS/memory_addr.git#a5be547a)\n    Checking cfg-if v1.0.0\n    Checking log v0.4.22\n    Checking numeric-enum-macro v0.2.0 (https://github.com/mexus/numeric-enum-macro#20aef288)\n    Checking static_assertions v1.1.0\n   Compiling toml_edit v0.22.22\n   Compiling axconfig v0.1.0 (https://github.com/Starry-OS/axconfig.git#ecfc4170)\nerror: could not compile `axconfig` (build script) due to 1 previous error\n"]}},{"file":"(virtual) lockbud","count":1,"kinds":{"Cargo":["// pkg_name=spinlock, checker=Lockbud\n// toolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_9/kern-crates/spinlock\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n   Compiling equivalent v1.0.1\n   Compiling serde v1.0.214\n   Compiling hashbrown v0.15.0\n   Compiling toml_datetime v0.6.8\n   Compiling winnow v0.6.20\n   Compiling bitflags v1.3.2\n   Compiling x86 v0.52.0\n   Compiling raw-cpuid v10.7.0\n   Compiling indexmap v2.6.0\n   Compiling bit_field v0.10.2\n   Compiling taskctx v0.1.0 (https://github.com/Starry-OS/taskctx.git#3c3ad2fb)\n   Compiling log v0.4.22\n[2024-10-29T02:10:55Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-29T02:10:55Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling toml_edit v0.22.22\n   Compiling cfg-if v1.0.0\n   Compiling static_assertions v1.1.0\n   Compiling numeric-enum-macro v0.2.0 (https://github.com/mexus/numeric-enum-macro#20aef288)\n   Compiling memory_addr v0.1.0 (https://github.com/Starry-OS/memory_addr.git#a5be547a)\n   Compiling axconfig v0.1.0 (https://github.com/Starry-OS/axconfig.git#ecfc4170)\nerror: environment variable `AX_WORK_DIR` not defined at compile time\n --> /home/runner/.cargo/git/checkouts/axconfig-a375f0c4fb0314cc/ecfc417/build.rs:6:34\n  |\n6 |     let root_dir = PathBuf::from(std::env!(\"AX_WORK_DIR\"));\n  |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: use `std::env::var(\"AX_WORK_DIR\")` to read the variable at run time\n  = note: this error originates in the macro `std::env` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: could not compile `axconfig` (build script) due to 1 previous error\n"]}},{"file":"(virtual) rap","count":1,"kinds":{"Cargo":["// pkg_name=spinlock, checker=Rap\n// toolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_9/kern-crates/spinlock\n// cmd=cargo +nightly-2024-06-30 rap -F -M\n   Compiling serde v1.0.214\n   Compiling hashbrown v0.15.0\n   Compiling equivalent v1.0.1\n   Compiling winnow v0.6.20\n   Compiling toml_datetime v0.6.8\n    Checking bitflags v1.3.2\n   Compiling x86 v0.52.0\n    Checking raw-cpuid v10.7.0\n   Compiling indexmap v2.6.0\n   Compiling taskctx v0.1.0 (https://github.com/Starry-OS/taskctx.git#3c3ad2fb)\n    Checking bit_field v0.10.2\n    Checking numeric-enum-macro v0.2.0 (https://github.com/mexus/numeric-enum-macro#20aef288)\n    Checking cfg-if v1.0.0\n    Checking static_assertions v1.1.0\n   Compiling toml_edit v0.22.22\n    Checking memory_addr v0.1.0 (https://github.com/Starry-OS/memory_addr.git#a5be547a)\n    Checking log v0.4.22\n   Compiling axconfig v0.1.0 (https://github.com/Starry-OS/axconfig.git#ecfc4170)\nerror: environment variable `AX_WORK_DIR` not defined at compile time\n --> /home/runner/.cargo/git/checkouts/axconfig-a375f0c4fb0314cc/ecfc417/build.rs:6:34\n  |\n6 |     let root_dir = PathBuf::from(std::env!(\"AX_WORK_DIR\"));\n  |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: use `std::env::var(\"AX_WORK_DIR\")` to read the variable at run time\n  = note: this error originates in the macro `std::env` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: could not compile `axconfig` (build script) due to 1 previous error\n02:11:01|RAP|ERROR|: Finished with non-zero exit code.\n"]}},{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-10-29T02:10:55Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-29T02:10:55Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}},{"file":"src/lib.rs","count":1,"kinds":{"Unformatted":["file: /home/runner/check/batch_9/kern-crates/spinlock/src/lib.rs (original lines from 15 to 15)\n-use kernel_guard::{NoOp, NoPreempt, NoPreemptIrqSave, IrqSave};\n+use kernel_guard::{IrqSave, NoOp, NoPreempt, NoPreemptIrqSave};\n"]}}]},{"user":"kern-crates","repo":"starry-next","pkg":"","count":1,"raw_reports":[{"file":"batch_9/kern-crates/starry-next","count":1,"kinds":{"Cargo":["\n   0: 无法解析 `batch_9/kern-crates/starry-next` 内的 Rust 项目布局\n   1: 无法读取 cargo metadata 的结果：`cargo metadata` exited with an error:     Updating git repository `https://github.com/arceos-org/arceos.git`\n          Updating crates.io index\n      error: failed to select a version for `axhal`.\n          ... required by package `starry v0.1.0 (/home/runner/check/batch_9/kern-crates/starry-next)`\n      versions that meet the requirements `*` are: 0.1.0\n\n      the package `starry` depends on `axhal`, with features: `uspace` but `axhal` does not have these features.\n\n\n      failed to select a version for `axhal` which could resolve this conflict\n   1: \n\nLocation:\n   src/layout/mod.rs:59\n\n  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ SPANTRACE ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n   0: os_checker::run_checker::try_new with user=\"kern-crates\" repo=\"starry-next\"\n      at src/run_checker/mod.rs:193\n\nBacktrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it.\nRun with RUST_BACKTRACE=full to include source snippets."]}}]},{"user":"kern-crates","repo":"test-test-repo","pkg":"","count":1,"raw_reports":[{"file":"batch_9/kern-crates/test-test-repo","count":1,"kinds":{"Cargo":["\n   0: 无法解析 `batch_9/kern-crates/test-test-repo` 内的 Rust 项目布局\n   1: repo_root `batch_9/kern-crates/test-test-repo` (规范路径为 `/home/runner/check/batch_9/kern-crates/test-test-repo`) 不是 Rust 项目，因为不包含任何 Cargo.toml\n\nLocation:\n   src/layout/mod.rs:136\n\n  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ SPANTRACE ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n   0: os_checker::run_checker::try_new with user=\"kern-crates\" repo=\"test-test-repo\"\n      at src/run_checker/mod.rs:193\n\nBacktrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it.\nRun with RUST_BACKTRACE=full to include source snippets."]}}]},{"user":"kern-crates","repo":"syscall-table","pkg":"systable-macro-derive","count":1,"raw_reports":[{"file":"src/lib.rs","count":1,"kinds":{"Clippy(Warn)":["warning: returning the result of a `let` binding from a block\n  --> src/lib.rs:53:5\n   |\n52 |     let stream = TokenStream::from(expanded);\n   |     ----------------------------------------- unnecessary `let` binding\n53 |     stream\n   |     ^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n   = note: `#[warn(clippy::let_and_return)]` on by default\nhelp: return the expression directly\n   |\n52 ~     \n53 ~     TokenStream::from(expanded)\n   |\n\n"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Audit","Mirai","Rap","Lockbud(Probably)","Lockbud(Possibly)","Outdated","Geiger","Unformatted"]}