{
  "data": [
    {
      "user": "drivercraft",
      "repo": "pcie",
      "pkg": "pcie",
      "count": 11,
      "raw_reports": [
        {
          "file": "src/types/bar.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning: variables can be used directly in the `format!` string\n  --> src/types/bar.rs:18:37\n   |\n18 |             Self::Memory32(arg0) => write!(f, \"{:?}\", arg0),\n   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n18 -             Self::Memory32(arg0) => write!(f, \"{:?}\", arg0),\n18 +             Self::Memory32(arg0) => write!(f, \"{arg0:?}\"),\n   |\n\n",
              "warning: variables can be used directly in the `format!` string\n  --> src/types/bar.rs:19:37\n   |\n19 |             Self::Memory64(arg0) => write!(f, \"{:?}\", arg0),\n   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n19 -             Self::Memory64(arg0) => write!(f, \"{:?}\", arg0),\n19 +             Self::Memory64(arg0) => write!(f, \"{arg0:?}\"),\n   |\n\n",
              "warning: variables can be used directly in the `format!` string\n  --> src/types/bar.rs:20:31\n   |\n20 |             Self::Io(arg0) => write!(f, \"{:?}\", arg0),\n   |                               ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n20 -             Self::Io(arg0) => write!(f, \"{:?}\", arg0),\n20 +             Self::Io(arg0) => write!(f, \"{arg0:?}\"),\n   |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/types/bar.rs:181:17\n    |\n181 |                 writeln!(f, \"BAR{}: {:?}\", i, bar)?;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n181 -                 writeln!(f, \"BAR{}: {:?}\", i, bar)?;\n181 +                 writeln!(f, \"BAR{i}: {bar:?}\")?;\n    |\n\n"
            ]
          }
        },
        {
          "file": "src/types/mod.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: variables can be used directly in the `format!` string\n  --> src/types/mod.rs:57:40\n   |\n57 |             Header::PciPciBridge(v) => write!(f, \"{}\", v),\n   |                                        ^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n57 -             Header::PciPciBridge(v) => write!(f, \"{}\", v),\n57 +             Header::PciPciBridge(v) => write!(f, \"{v}\"),\n   |\n\n",
              "warning: variables can be used directly in the `format!` string\n  --> src/types/mod.rs:58:36\n   |\n58 |             Header::Endpoint(v) => write!(f, \"{}\", v),\n   |                                    ^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n58 -             Header::Endpoint(v) => write!(f, \"{}\", v),\n58 +             Header::Endpoint(v) => write!(f, \"{v}\"),\n   |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/types/mod.rs:103:13\n    |\n103 |             writeln!(f, \"  {:?}\", cap)?;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n103 -             writeln!(f, \"  {:?}\", cap)?;\n103 +             writeln!(f, \"  {cap:?}\")?;\n    |\n\n"
            ]
          }
        },
        {
          "file": "Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n└── rdrive 0.15.3\n    └── sparreal-kernel 0.9.4\n        ├── sparreal-rt 0.9.8\n        │   └── bare-test 0.4.1\n        │       └── pcie 0.3.0\n        └── bare-test 0.4.1\n\n\n{\n  \"database\": {\n    \"advisory-count\": 787,\n    \"last-commit\": \"7573f55ba337263f61167dbb0ea926cdc7c8eb5d\",\n    \"last-updated\": \"2025-06-17T11:04:25+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 280\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[Lockbud] deadlock detection",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-07-09T10:24:57Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-07-09T10:24:57Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_4/drivercraft/pcie/src/lib.rs (original lines from 17 to 17)\n-pub use root::{RootComplex, EnumElem};\n+pub use root::{EnumElem, RootComplex};\n"
            ]
          }
        },
        {
          "file": "src/root.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: variables can be used directly in the `format!` string\n   --> src/root.rs:207:58\n    |\n207 | ...                   .inspect_err(|e| error!(\"{:?}\", e))\n    |                                        ^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n    = note: `#[warn(clippy::uninlined_format_args)]` on by default\nhelp: change this to\n    |\n207 -                                         .inspect_err(|e| error!(\"{:?}\", e))\n207 +                                         .inspect_err(|e| error!(\"{e:?}\"))\n    |\n\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Atomvchecker",
    "Outdated",
    "Geiger",
    "Unused Deps",
    "Unformatted"
  ]
}