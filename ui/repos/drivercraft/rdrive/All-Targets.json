{
  "repo": {
    "user": "drivercraft",
    "repo": "rdrive"
  },
  "data": [
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdif-pcie",
      "count": 27,
      "raw_reports": [
        {
          "file": "interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs",
          "features": "",
          "count": 9,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unexpected `cfg` condition value: `serde`\n  --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:46:12\n   |\n46 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n   |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `serde` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n   = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
              "warning: unexpected `cfg` condition value: `serde`\n  --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:62:12\n   |\n62 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n   |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `serde` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: unexpected `cfg` condition value: `serde`\n   --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:497:12\n    |\n497 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n    |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n    |\n    = note: no expected values for `feature`\n    = help: consider adding `serde` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: methods `search_superset` and `free` are never used\n   --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:511:8\n    |\n502 | impl IntervalTree {\n    | ----------------- methods in this implementation\n...\n511 |     fn search_superset(&self, key: &RangeInclusive) -> Option<&InnerNode> {\n    |        ^^^^^^^^^^^^^^^\n...\n605 |     pub fn free(&mut self, key: &RangeInclusive) -> Result<()> {\n    |            ^^^^\n\n",
              "warning: methods `search_superset` and `free` are never used\n   --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:511:8\n    |\n502 | impl IntervalTree {\n    | ----------------- methods in this implementation\n...\n511 |     fn search_superset(&self, key: &RangeInclusive) -> Option<&InnerNode> {\n    |        ^^^^^^^^^^^^^^^\n...\n605 |     pub fn free(&mut self, key: &RangeInclusive) -> Result<()> {\n    |            ^^^^\n\n",
              "warning: this `if` statement can be collapsed\n   --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:611:9\n    |\n611 | /         if range.start() > 0 {\n612 | |             if let Some(node) = self.search_superset(&RangeInclusive::new(\n613 | |                 range.start().checked_sub(2).ok_or(Error::Underflow)?,\n614 | |                 range.start().checked_sub(1).ok_or(Error::Underflow)?,\n...   |\n620 | |         }\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n    = note: `#[warn(clippy::collapsible_if)]` on by default\nhelp: collapse nested if block\n    |\n611 ~         if range.start() > 0\n612 ~             && let Some(node) = self.search_superset(&RangeInclusive::new(\n613 |                 range.start().checked_sub(2).ok_or(Error::Underflow)?,\n...\n618 |                 }\n619 ~             }\n    |\n\n",
              "warning: this `if` statement can be collapsed\n   --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:612:13\n    |\n612 | /             if let Some(node) = self.search_superset(&RangeInclusive::new(\n613 | |                 range.start().checked_sub(2).ok_or(Error::Underflow)?,\n614 | |                 range.start().checked_sub(1).ok_or(Error::Underflow)?,\n615 | |             )?) {\n...   |\n619 | |             }\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n    |\n615 ~             )?)\n616 ~                 && node.node_state == NodeState::Free {\n617 |                     range = RangeInclusive::new(node.key.start(), range.end())?;\n618 ~                 }\n    |\n\n",
              "warning: this `if` statement can be collapsed\n   --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:623:9\n    |\n623 | /         if range.end() < u64::MAX {\n624 | |             if let Some(node) = self.search_superset(&RangeInclusive::new(\n625 | |                 range.end().checked_add(1).ok_or(Error::Overflow)?,\n626 | |                 range.end().checked_add(2).ok_or(Error::Overflow)?,\n...   |\n632 | |         }\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n    |\n623 ~         if range.end() < u64::MAX\n624 ~             && let Some(node) = self.search_superset(&RangeInclusive::new(\n625 |                 range.end().checked_add(1).ok_or(Error::Overflow)?,\n...\n630 |                 }\n631 ~             }\n    |\n\n",
              "warning: this `if` statement can be collapsed\n   --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:624:13\n    |\n624 | /             if let Some(node) = self.search_superset(&RangeInclusive::new(\n625 | |                 range.end().checked_add(1).ok_or(Error::Overflow)?,\n626 | |                 range.end().checked_add(2).ok_or(Error::Overflow)?,\n627 | |             )?) {\n...   |\n631 | |             }\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n    |\n627 ~             )?)\n628 ~                 && node.node_state == NodeState::Free {\n629 |                     range = RangeInclusive::new(range.start(), node.key.end())?;\n630 ~                 }\n    |\n\n"
            ]
          }
        },
        {
          "file": "interface/rdif-pcie/src/addr_alloc/mod.rs",
          "features": "",
          "count": 7,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unexpected `cfg` condition value: `serde`\n   --> interface/rdif-pcie/src/addr_alloc/mod.rs:164:12\n    |\n164 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n    |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n    |\n    = note: no expected values for `feature`\n    = help: consider adding `serde` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: constant `DEFAULT_CONSTRAINT_ALIGN` is never used\n  --> interface/rdif-pcie/src/addr_alloc/mod.rs:93:11\n   |\n93 | pub const DEFAULT_CONSTRAINT_ALIGN: u64 = 4;\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` (part of `#[warn(unused)]`) on by default\n\n",
              "warning: method `align` is never used\n   --> interface/rdif-pcie/src/addr_alloc/mod.rs:280:12\n    |\n246 | impl Constraint {\n    | --------------- method in this implementation\n...\n280 |     pub fn align(self) -> u64 {\n    |            ^^^^^\n\n",
              "warning: variants `LastMatch` and `ExactMatch` are never constructed\n   --> interface/rdif-pcie/src/addr_alloc/mod.rs:297:5\n    |\n292 | pub enum AllocPolicy {\n    |          ----------- variants in this enum\n...\n297 |     LastMatch,\n    |     ^^^^^^^^^\n...\n300 |     ExactMatch(u64),\n    |     ^^^^^^^^^^\n    |\n    = note: `AllocPolicy` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis\n\n",
              "warning: variants `LastMatch` and `ExactMatch` are never constructed\n   --> interface/rdif-pcie/src/addr_alloc/mod.rs:297:5\n    |\n292 | pub enum AllocPolicy {\n    |          ----------- variants in this enum\n...\n297 |     LastMatch,\n    |     ^^^^^^^^^\n...\n300 |     ExactMatch(u64),\n    |     ^^^^^^^^^^\n    |\n    = note: `AllocPolicy` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis\n\n",
              "warning: this `if` statement can be collapsed\n   --> interface/rdif-pcie/src/addr_alloc/mod.rs:266:9\n    |\n266 | /         if let AllocPolicy::ExactMatch(start_address) = policy {\n267 | |             if start_address % align != 0 {\n268 | |                 return Err(Error::UnalignedAddress);\n269 | |             }\n270 | |         }\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n    |\n266 ~         if let AllocPolicy::ExactMatch(start_address) = policy\n267 ~             && start_address % align != 0 {\n268 |                 return Err(Error::UnalignedAddress);\n269 ~             }\n    |\n\n",
              "warning: all variants have the same postfix: `Match`\n   --> interface/rdif-pcie/src/addr_alloc/mod.rs:292:1\n    |\n292 | / pub enum AllocPolicy {\n293 | |     /// Allocate the first matched entry.\n294 | |     #[default]\n295 | |     FirstMatch,\n...   |\n300 | |     ExactMatch(u64),\n301 | | }\n    | |_^\n    |\n    = help: remove the postfixes and use full paths to the variants instead of glob imports\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names\n    = note: `#[warn(clippy::enum_variant_names)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "interface/rdif-pcie/src/addr_alloc/id_allocator.rs",
          "features": "",
          "count": 6,
          "kinds": {
            "Clippy(Warn)": [
              "warning: struct `IdAllocator` is never constructed\n  --> interface/rdif-pcie/src/addr_alloc/id_allocator.rs:21:12\n   |\n21 | pub struct IdAllocator {\n   |            ^^^^^^^^^^^\n\n",
              "warning: associated items `new`, `id_in_range`, `allocate_id`, and `free_id` are never used\n  --> interface/rdif-pcie/src/addr_alloc/id_allocator.rs:36:12\n   |\n32 | impl IdAllocator {\n   | ---------------- associated items in this implementation\n...\n36 |     pub fn new(range_base: u32, range_end: u32) -> Result<Self> {\n   |            ^^^\n...\n48 |     fn id_in_range(&self, id: u32) -> bool {\n   |        ^^^^^^^^^^^\n...\n56 |     pub fn allocate_id(&mut self) -> Result<u32> {\n   |            ^^^^^^^^^^^\n...\n79 |     pub fn free_id(&mut self, id: u32) -> Result<u32> {\n   |            ^^^^^^^\n\n",
              "warning: associated items `new`, `id_in_range`, `allocate_id`, and `free_id` are never used\n  --> interface/rdif-pcie/src/addr_alloc/id_allocator.rs:36:12\n   |\n32 | impl IdAllocator {\n   | ---------------- associated items in this implementation\n...\n36 |     pub fn new(range_base: u32, range_end: u32) -> Result<Self> {\n   |            ^^^\n...\n48 |     fn id_in_range(&self, id: u32) -> bool {\n   |        ^^^^^^^^^^^\n...\n56 |     pub fn allocate_id(&mut self) -> Result<u32> {\n   |            ^^^^^^^^^^^\n...\n79 |     pub fn free_id(&mut self, id: u32) -> Result<u32> {\n   |            ^^^^^^^\n\n",
              "warning: associated items `new`, `id_in_range`, `allocate_id`, and `free_id` are never used\n  --> interface/rdif-pcie/src/addr_alloc/id_allocator.rs:36:12\n   |\n32 | impl IdAllocator {\n   | ---------------- associated items in this implementation\n...\n36 |     pub fn new(range_base: u32, range_end: u32) -> Result<Self> {\n   |            ^^^\n...\n48 |     fn id_in_range(&self, id: u32) -> bool {\n   |        ^^^^^^^^^^^\n...\n56 |     pub fn allocate_id(&mut self) -> Result<u32> {\n   |            ^^^^^^^^^^^\n...\n79 |     pub fn free_id(&mut self, id: u32) -> Result<u32> {\n   |            ^^^^^^^\n\n",
              "warning: associated items `new`, `id_in_range`, `allocate_id`, and `free_id` are never used\n  --> interface/rdif-pcie/src/addr_alloc/id_allocator.rs:36:12\n   |\n32 | impl IdAllocator {\n   | ---------------- associated items in this implementation\n...\n36 |     pub fn new(range_base: u32, range_end: u32) -> Result<Self> {\n   |            ^^^\n...\n48 |     fn id_in_range(&self, id: u32) -> bool {\n   |        ^^^^^^^^^^^\n...\n56 |     pub fn allocate_id(&mut self) -> Result<u32> {\n   |            ^^^^^^^^^^^\n...\n79 |     pub fn free_id(&mut self, id: u32) -> Result<u32> {\n   |            ^^^^^^^\n\n",
              "warning: this `if` statement can be collapsed\n  --> interface/rdif-pcie/src/addr_alloc/id_allocator.rs:85:9\n   |\n85 | /         if let Some(next_id) = self.next_id {\n86 | |             if next_id < id {\n87 | |                 return Err(Error::NeverAllocated(id));\n88 | |             }\n89 | |         }\n   | |_________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n   |\n85 ~         if let Some(next_id) = self.next_id\n86 ~             && next_id < id {\n87 |                 return Err(Error::NeverAllocated(id));\n88 ~             }\n   |\n\n"
            ]
          }
        },
        {
          "file": "interface/rdif-pcie/src/addr_alloc/address_allocator.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: methods `free`, `base`, and `end` are never used\n  --> interface/rdif-pcie/src/addr_alloc/address_allocator.rs:71:12\n   |\n34 | impl AddressAllocator {\n   | --------------------- methods in this implementation\n...\n71 |     pub fn free(&mut self, key: &RangeInclusive) -> Result<()> {\n   |            ^^^^\n...\n76 |     pub fn base(&self) -> u64 {\n   |            ^^^^\n...\n81 |     pub fn end(&self) -> u64 {\n   |            ^^^\n\n",
              "warning: methods `free`, `base`, and `end` are never used\n  --> interface/rdif-pcie/src/addr_alloc/address_allocator.rs:71:12\n   |\n34 | impl AddressAllocator {\n   | --------------------- methods in this implementation\n...\n71 |     pub fn free(&mut self, key: &RangeInclusive) -> Result<()> {\n   |            ^^^^\n...\n76 |     pub fn base(&self) -> u64 {\n   |            ^^^^\n...\n81 |     pub fn end(&self) -> u64 {\n   |            ^^^\n\n",
              "warning: methods `free`, `base`, and `end` are never used\n  --> interface/rdif-pcie/src/addr_alloc/address_allocator.rs:71:12\n   |\n34 | impl AddressAllocator {\n   | --------------------- methods in this implementation\n...\n71 |     pub fn free(&mut self, key: &RangeInclusive) -> Result<()> {\n   |            ^^^^\n...\n76 |     pub fn base(&self) -> u64 {\n   |            ^^^^\n...\n81 |     pub fn end(&self) -> u64 {\n   |            ^^^\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_4/drivercraft/rdrive/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── rdrive 0.18.11\n│   └── sparreal-kernel 0.12.2\n│       ├── sparreal-rt 0.12.1\n│       │   └── bare-test 0.7.0\n│       │       └── pcie 0.4.5\n│       │           └── rdrive 0.18.11\n│       │               └── enumerate 0.1.0\n│       └── bare-test 0.7.0\n├── rdrive 0.18.11\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-systick 0.5.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-power 0.6.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   │       └── rdrive 0.18.11\n│   └── rdif-intc 0.12.1\n│       ├── sparreal-rt 0.12.1\n│       ├── sparreal-kernel 0.12.2\n│       └── arm-gic-driver 0.15.8\n│           └── sparreal-rt 0.12.1\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-timer 0.5.0\n│   ├── rdif-systick 0.5.1\n│   ├── rdif-serial 0.5.4\n│   ├── rdif-power 0.6.1\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   ├── rdif-net 0.1.0\n│   ├── rdif-intc 0.12.1\n│   │   ├── rdrive 0.18.11\n│   │   └── enumerate 0.1.0\n│   ├── rdif-clk 0.4.2\n│   │   └── rdrive 0.18.11\n│   └── rdif-block 0.6.2\n└── arm-gic-driver 0.15.8\n\n\n{\n  \"database\": {\n    \"advisory-count\": 861,\n    \"last-commit\": \"32546e97dfa0ad59baab4166705156d8dd0fbfa8\",\n    \"last-updated\": \"2025-10-27T17:45:41+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 352\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\\n\\n## Possible Alternative(s)\\n\\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=rdif-pcie, checker=Lockbud\n// toolchain=nightly, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-pcie\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none \n// timestamp=2025-10-28 4:49:44.325205504 +08:00:00\n   Compiling rdif-pcie v0.1.4 (/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-pcie)\nerror[E0658]: `let` expressions in this position are unstable\n  --> interface/rdif-pcie/src/bar_alloc.rs:49:16\n   |\n49 |             && let Some(set) = self.mem32_pref.as_mut()\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> interface/rdif-pcie/src/bar_alloc.rs:50:16\n   |\n50 |             && let Ok(addr) = set.allocate(size as _, size as _, AllocPolicy::FirstMatch)\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> interface/rdif-pcie/src/bar_alloc.rs:65:16\n   |\n65 |             && let Some(set) = self.mem64_pref.as_mut()\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> interface/rdif-pcie/src/bar_alloc.rs:66:16\n   |\n66 |             && let Ok(addr) = set.allocate(size as _, size as _, AllocPolicy::FirstMatch)\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nwarning: unexpected `cfg` condition value: `serde`\n   --> interface/rdif-pcie/src/addr_alloc/mod.rs:164:12\n    |\n164 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n    |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n    |\n    = note: no expected values for `feature`\n    = help: consider adding `serde` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition value: `serde`\n  --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:46:12\n   |\n46 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n   |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `serde` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `serde`\n  --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:62:12\n   |\n62 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n   |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `serde` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `serde`\n   --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:497:12\n    |\n497 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n    |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n    |\n    = note: no expected values for `feature`\n    = help: consider adding `serde` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nFor more information about this error, try `rustc --explain E0658`.\nwarning: `rdif-pcie` (lib) generated 4 warnings\nerror: could not compile `rdif-pcie` (lib) due to 4 previous errors; 4 warnings emitted\n"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdrive",
      "count": 23,
      "raw_reports": [
        {
          "file": "interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs",
          "features": "",
          "count": 5,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unexpected `cfg` condition value: `serde`\n  --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:46:12\n   |\n46 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n   |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `serde` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n   = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
              "warning: unexpected `cfg` condition value: `serde`\n  --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:62:12\n   |\n62 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n   |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `serde` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: unexpected `cfg` condition value: `serde`\n   --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:497:12\n    |\n497 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n    |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n    |\n    = note: no expected values for `feature`\n    = help: consider adding `serde` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: methods `search_superset` and `free` are never used\n   --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:511:8\n    |\n502 | impl IntervalTree {\n    | ----------------- methods in this implementation\n...\n511 |     fn search_superset(&self, key: &RangeInclusive) -> Option<&InnerNode> {\n    |        ^^^^^^^^^^^^^^^\n...\n605 |     pub fn free(&mut self, key: &RangeInclusive) -> Result<()> {\n    |            ^^^^\n\n",
              "warning: methods `search_superset` and `free` are never used\n   --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:511:8\n    |\n502 | impl IntervalTree {\n    | ----------------- methods in this implementation\n...\n511 |     fn search_superset(&self, key: &RangeInclusive) -> Option<&InnerNode> {\n    |        ^^^^^^^^^^^^^^^\n...\n605 |     pub fn free(&mut self, key: &RangeInclusive) -> Result<()> {\n    |            ^^^^\n\n"
            ]
          }
        },
        {
          "file": "interface/rdif-pcie/src/addr_alloc/id_allocator.rs",
          "features": "",
          "count": 5,
          "kinds": {
            "Clippy(Warn)": [
              "warning: struct `IdAllocator` is never constructed\n  --> interface/rdif-pcie/src/addr_alloc/id_allocator.rs:21:12\n   |\n21 | pub struct IdAllocator {\n   |            ^^^^^^^^^^^\n\n",
              "warning: associated items `new`, `id_in_range`, `allocate_id`, and `free_id` are never used\n  --> interface/rdif-pcie/src/addr_alloc/id_allocator.rs:36:12\n   |\n32 | impl IdAllocator {\n   | ---------------- associated items in this implementation\n...\n36 |     pub fn new(range_base: u32, range_end: u32) -> Result<Self> {\n   |            ^^^\n...\n48 |     fn id_in_range(&self, id: u32) -> bool {\n   |        ^^^^^^^^^^^\n...\n56 |     pub fn allocate_id(&mut self) -> Result<u32> {\n   |            ^^^^^^^^^^^\n...\n79 |     pub fn free_id(&mut self, id: u32) -> Result<u32> {\n   |            ^^^^^^^\n\n",
              "warning: associated items `new`, `id_in_range`, `allocate_id`, and `free_id` are never used\n  --> interface/rdif-pcie/src/addr_alloc/id_allocator.rs:36:12\n   |\n32 | impl IdAllocator {\n   | ---------------- associated items in this implementation\n...\n36 |     pub fn new(range_base: u32, range_end: u32) -> Result<Self> {\n   |            ^^^\n...\n48 |     fn id_in_range(&self, id: u32) -> bool {\n   |        ^^^^^^^^^^^\n...\n56 |     pub fn allocate_id(&mut self) -> Result<u32> {\n   |            ^^^^^^^^^^^\n...\n79 |     pub fn free_id(&mut self, id: u32) -> Result<u32> {\n   |            ^^^^^^^\n\n",
              "warning: associated items `new`, `id_in_range`, `allocate_id`, and `free_id` are never used\n  --> interface/rdif-pcie/src/addr_alloc/id_allocator.rs:36:12\n   |\n32 | impl IdAllocator {\n   | ---------------- associated items in this implementation\n...\n36 |     pub fn new(range_base: u32, range_end: u32) -> Result<Self> {\n   |            ^^^\n...\n48 |     fn id_in_range(&self, id: u32) -> bool {\n   |        ^^^^^^^^^^^\n...\n56 |     pub fn allocate_id(&mut self) -> Result<u32> {\n   |            ^^^^^^^^^^^\n...\n79 |     pub fn free_id(&mut self, id: u32) -> Result<u32> {\n   |            ^^^^^^^\n\n",
              "warning: associated items `new`, `id_in_range`, `allocate_id`, and `free_id` are never used\n  --> interface/rdif-pcie/src/addr_alloc/id_allocator.rs:36:12\n   |\n32 | impl IdAllocator {\n   | ---------------- associated items in this implementation\n...\n36 |     pub fn new(range_base: u32, range_end: u32) -> Result<Self> {\n   |            ^^^\n...\n48 |     fn id_in_range(&self, id: u32) -> bool {\n   |        ^^^^^^^^^^^\n...\n56 |     pub fn allocate_id(&mut self) -> Result<u32> {\n   |            ^^^^^^^^^^^\n...\n79 |     pub fn free_id(&mut self, id: u32) -> Result<u32> {\n   |            ^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "interface/rdif-pcie/src/addr_alloc/mod.rs",
          "features": "",
          "count": 5,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unexpected `cfg` condition value: `serde`\n   --> interface/rdif-pcie/src/addr_alloc/mod.rs:164:12\n    |\n164 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n    |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n    |\n    = note: no expected values for `feature`\n    = help: consider adding `serde` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: constant `DEFAULT_CONSTRAINT_ALIGN` is never used\n  --> interface/rdif-pcie/src/addr_alloc/mod.rs:93:11\n   |\n93 | pub const DEFAULT_CONSTRAINT_ALIGN: u64 = 4;\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` (part of `#[warn(unused)]`) on by default\n\n",
              "warning: method `align` is never used\n   --> interface/rdif-pcie/src/addr_alloc/mod.rs:280:12\n    |\n246 | impl Constraint {\n    | --------------- method in this implementation\n...\n280 |     pub fn align(self) -> u64 {\n    |            ^^^^^\n\n",
              "warning: variants `LastMatch` and `ExactMatch` are never constructed\n   --> interface/rdif-pcie/src/addr_alloc/mod.rs:297:5\n    |\n292 | pub enum AllocPolicy {\n    |          ----------- variants in this enum\n...\n297 |     LastMatch,\n    |     ^^^^^^^^^\n...\n300 |     ExactMatch(u64),\n    |     ^^^^^^^^^^\n    |\n    = note: `AllocPolicy` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis\n\n",
              "warning: variants `LastMatch` and `ExactMatch` are never constructed\n   --> interface/rdif-pcie/src/addr_alloc/mod.rs:297:5\n    |\n292 | pub enum AllocPolicy {\n    |          ----------- variants in this enum\n...\n297 |     LastMatch,\n    |     ^^^^^^^^^\n...\n300 |     ExactMatch(u64),\n    |     ^^^^^^^^^^\n    |\n    = note: `AllocPolicy` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis\n\n"
            ]
          }
        },
        {
          "file": "interface/rdif-pcie/src/addr_alloc/address_allocator.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: methods `free`, `base`, and `end` are never used\n  --> interface/rdif-pcie/src/addr_alloc/address_allocator.rs:71:12\n   |\n34 | impl AddressAllocator {\n   | --------------------- methods in this implementation\n...\n71 |     pub fn free(&mut self, key: &RangeInclusive) -> Result<()> {\n   |            ^^^^\n...\n76 |     pub fn base(&self) -> u64 {\n   |            ^^^^\n...\n81 |     pub fn end(&self) -> u64 {\n   |            ^^^\n\n",
              "warning: methods `free`, `base`, and `end` are never used\n  --> interface/rdif-pcie/src/addr_alloc/address_allocator.rs:71:12\n   |\n34 | impl AddressAllocator {\n   | --------------------- methods in this implementation\n...\n71 |     pub fn free(&mut self, key: &RangeInclusive) -> Result<()> {\n   |            ^^^^\n...\n76 |     pub fn base(&self) -> u64 {\n   |            ^^^^\n...\n81 |     pub fn end(&self) -> u64 {\n   |            ^^^\n\n",
              "warning: methods `free`, `base`, and `end` are never used\n  --> interface/rdif-pcie/src/addr_alloc/address_allocator.rs:71:12\n   |\n34 | impl AddressAllocator {\n   | --------------------- methods in this implementation\n...\n71 |     pub fn free(&mut self, key: &RangeInclusive) -> Result<()> {\n   |            ^^^^\n...\n76 |     pub fn base(&self) -> u64 {\n   |            ^^^^\n...\n81 |     pub fn end(&self) -> u64 {\n   |            ^^^\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1525:11: 1525:40 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1528:13: 1528:56 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_4/drivercraft/rdrive/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── rdrive 0.18.11\n│   └── sparreal-kernel 0.12.2\n│       ├── sparreal-rt 0.12.1\n│       │   └── bare-test 0.7.0\n│       │       └── pcie 0.4.5\n│       │           └── rdrive 0.18.11\n│       │               └── enumerate 0.1.0\n│       └── bare-test 0.7.0\n├── rdrive 0.18.11\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-systick 0.5.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-power 0.6.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   │       └── rdrive 0.18.11\n│   └── rdif-intc 0.12.1\n│       ├── sparreal-rt 0.12.1\n│       ├── sparreal-kernel 0.12.2\n│       └── arm-gic-driver 0.15.8\n│           └── sparreal-rt 0.12.1\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-timer 0.5.0\n│   ├── rdif-systick 0.5.1\n│   ├── rdif-serial 0.5.4\n│   ├── rdif-power 0.6.1\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   ├── rdif-net 0.1.0\n│   ├── rdif-intc 0.12.1\n│   │   ├── rdrive 0.18.11\n│   │   └── enumerate 0.1.0\n│   ├── rdif-clk 0.4.2\n│   │   └── rdrive 0.18.11\n│   └── rdif-block 0.6.2\n└── arm-gic-driver 0.15.8\n\n\n{\n  \"database\": {\n    \"advisory-count\": 861,\n    \"last-commit\": \"32546e97dfa0ad59baab4166705156d8dd0fbfa8\",\n    \"last-updated\": \"2025-10-27T17:45:41+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 352\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\\n\\n## Possible Alternative(s)\\n\\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=rdrive, checker=Lockbud\n// toolchain=nightly, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/rdrive\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none \n// timestamp=2025-10-28 4:49:45.212350697 +08:00:00\n[2025-10-27T20:49:29Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1525:11: 1525:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1528:13: 1528:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-10-27T20:49:29Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling rdrive-macros v0.4.1 (/home/runner/check/batch_4/drivercraft/rdrive/rdrive-macros)\n   Compiling fdt-parser v0.4.18\n   Compiling rdif-pcie v0.1.4 (/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-pcie)\nerror[E0658]: `let` expressions in this position are unstable\n  --> rdrive-macros/src/lib.rs:10:12\n   |\n10 |         if let syn::Item::Static(st) = c\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> rdrive-macros/src/lib.rs:11:16\n   |\n11 |             && let syn::Expr::Struct(expr_struct) = st.expr.as_ref()\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> rdrive-macros/src/lib.rs:14:20\n   |\n14 |                 if let syn::Member::Named(ident) = &field.member\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> rdrive-macros/src/lib.rs:16:24\n   |\n16 |                     && let syn::Expr::Group(expr_group) = &field.expr\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> rdrive-macros/src/lib.rs:17:24\n   |\n17 |                     && let syn::Expr::Lit(expr_lit) = expr_group.expr.as_ref()\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> rdrive-macros/src/lib.rs:18:24\n   |\n18 |                     && let syn::Lit::Str(lit_str) = &expr_lit.lit\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> interface/rdif-pcie/src/bar_alloc.rs:49:16\n   |\n49 |             && let Some(set) = self.mem32_pref.as_mut()\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> interface/rdif-pcie/src/bar_alloc.rs:50:16\n   |\n50 |             && let Ok(addr) = set.allocate(size as _, size as _, AllocPolicy::FirstMatch)\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> interface/rdif-pcie/src/bar_alloc.rs:65:16\n   |\n65 |             && let Some(set) = self.mem64_pref.as_mut()\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> interface/rdif-pcie/src/bar_alloc.rs:66:16\n   |\n66 |             && let Ok(addr) = set.allocate(size as _, size as _, AllocPolicy::FirstMatch)\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nwarning: unexpected `cfg` condition value: `serde`\n   --> interface/rdif-pcie/src/addr_alloc/mod.rs:164:12\n    |\n164 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n    |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n    |\n    = note: no expected values for `feature`\n    = help: consider adding `serde` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition value: `serde`\n  --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:46:12\n   |\n46 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n   |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `serde` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `serde`\n  --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:62:12\n   |\n62 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n   |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `serde` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `serde`\n   --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:497:12\n    |\n497 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n    |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n    |\n    = note: no expected values for `feature`\n    = help: consider adding `serde` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nFor more information about this error, try `rustc --explain E0658`.\nerror: could not compile `rdrive-macros` (lib) due to 6 previous errors\nwarning: build failed, waiting for other jobs to finish...\nwarning: `rdif-pcie` (lib) generated 4 warnings\nerror: could not compile `rdif-pcie` (lib) due to 4 previous errors; 4 warnings emitted\n"
            ]
          }
        },
        {
          "file": "[Lockbud] deadlock detection",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-10-27T20:49:29Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1525:11: 1525:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1528:13: 1528:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-10-27T20:49:29Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=rdrive, checker=Outdated\ntoolchain=nightly, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/rdrive\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-10-28 4:50:28.467697355 +08:00:00\n\nName        Project  Compat  Latest  Kind    Platform\n----        -------  ------  ------  ----    --------\nfdt-parser  0.4.18   ---     0.5.0   Normal  ---\n"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "pcie",
      "count": 22,
      "raw_reports": [
        {
          "file": "interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs",
          "features": "",
          "count": 5,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unexpected `cfg` condition value: `serde`\n  --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:46:12\n   |\n46 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n   |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `serde` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n   = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
              "warning: unexpected `cfg` condition value: `serde`\n  --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:62:12\n   |\n62 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n   |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `serde` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: unexpected `cfg` condition value: `serde`\n   --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:497:12\n    |\n497 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n    |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n    |\n    = note: no expected values for `feature`\n    = help: consider adding `serde` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: methods `search_superset` and `free` are never used\n   --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:511:8\n    |\n502 | impl IntervalTree {\n    | ----------------- methods in this implementation\n...\n511 |     fn search_superset(&self, key: &RangeInclusive) -> Option<&InnerNode> {\n    |        ^^^^^^^^^^^^^^^\n...\n605 |     pub fn free(&mut self, key: &RangeInclusive) -> Result<()> {\n    |            ^^^^\n\n",
              "warning: methods `search_superset` and `free` are never used\n   --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:511:8\n    |\n502 | impl IntervalTree {\n    | ----------------- methods in this implementation\n...\n511 |     fn search_superset(&self, key: &RangeInclusive) -> Option<&InnerNode> {\n    |        ^^^^^^^^^^^^^^^\n...\n605 |     pub fn free(&mut self, key: &RangeInclusive) -> Result<()> {\n    |            ^^^^\n\n"
            ]
          }
        },
        {
          "file": "interface/rdif-pcie/src/addr_alloc/id_allocator.rs",
          "features": "",
          "count": 5,
          "kinds": {
            "Clippy(Warn)": [
              "warning: struct `IdAllocator` is never constructed\n  --> interface/rdif-pcie/src/addr_alloc/id_allocator.rs:21:12\n   |\n21 | pub struct IdAllocator {\n   |            ^^^^^^^^^^^\n\n",
              "warning: associated items `new`, `id_in_range`, `allocate_id`, and `free_id` are never used\n  --> interface/rdif-pcie/src/addr_alloc/id_allocator.rs:36:12\n   |\n32 | impl IdAllocator {\n   | ---------------- associated items in this implementation\n...\n36 |     pub fn new(range_base: u32, range_end: u32) -> Result<Self> {\n   |            ^^^\n...\n48 |     fn id_in_range(&self, id: u32) -> bool {\n   |        ^^^^^^^^^^^\n...\n56 |     pub fn allocate_id(&mut self) -> Result<u32> {\n   |            ^^^^^^^^^^^\n...\n79 |     pub fn free_id(&mut self, id: u32) -> Result<u32> {\n   |            ^^^^^^^\n\n",
              "warning: associated items `new`, `id_in_range`, `allocate_id`, and `free_id` are never used\n  --> interface/rdif-pcie/src/addr_alloc/id_allocator.rs:36:12\n   |\n32 | impl IdAllocator {\n   | ---------------- associated items in this implementation\n...\n36 |     pub fn new(range_base: u32, range_end: u32) -> Result<Self> {\n   |            ^^^\n...\n48 |     fn id_in_range(&self, id: u32) -> bool {\n   |        ^^^^^^^^^^^\n...\n56 |     pub fn allocate_id(&mut self) -> Result<u32> {\n   |            ^^^^^^^^^^^\n...\n79 |     pub fn free_id(&mut self, id: u32) -> Result<u32> {\n   |            ^^^^^^^\n\n",
              "warning: associated items `new`, `id_in_range`, `allocate_id`, and `free_id` are never used\n  --> interface/rdif-pcie/src/addr_alloc/id_allocator.rs:36:12\n   |\n32 | impl IdAllocator {\n   | ---------------- associated items in this implementation\n...\n36 |     pub fn new(range_base: u32, range_end: u32) -> Result<Self> {\n   |            ^^^\n...\n48 |     fn id_in_range(&self, id: u32) -> bool {\n   |        ^^^^^^^^^^^\n...\n56 |     pub fn allocate_id(&mut self) -> Result<u32> {\n   |            ^^^^^^^^^^^\n...\n79 |     pub fn free_id(&mut self, id: u32) -> Result<u32> {\n   |            ^^^^^^^\n\n",
              "warning: associated items `new`, `id_in_range`, `allocate_id`, and `free_id` are never used\n  --> interface/rdif-pcie/src/addr_alloc/id_allocator.rs:36:12\n   |\n32 | impl IdAllocator {\n   | ---------------- associated items in this implementation\n...\n36 |     pub fn new(range_base: u32, range_end: u32) -> Result<Self> {\n   |            ^^^\n...\n48 |     fn id_in_range(&self, id: u32) -> bool {\n   |        ^^^^^^^^^^^\n...\n56 |     pub fn allocate_id(&mut self) -> Result<u32> {\n   |            ^^^^^^^^^^^\n...\n79 |     pub fn free_id(&mut self, id: u32) -> Result<u32> {\n   |            ^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "interface/rdif-pcie/src/addr_alloc/mod.rs",
          "features": "",
          "count": 5,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unexpected `cfg` condition value: `serde`\n   --> interface/rdif-pcie/src/addr_alloc/mod.rs:164:12\n    |\n164 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n    |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n    |\n    = note: no expected values for `feature`\n    = help: consider adding `serde` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: constant `DEFAULT_CONSTRAINT_ALIGN` is never used\n  --> interface/rdif-pcie/src/addr_alloc/mod.rs:93:11\n   |\n93 | pub const DEFAULT_CONSTRAINT_ALIGN: u64 = 4;\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` (part of `#[warn(unused)]`) on by default\n\n",
              "warning: method `align` is never used\n   --> interface/rdif-pcie/src/addr_alloc/mod.rs:280:12\n    |\n246 | impl Constraint {\n    | --------------- method in this implementation\n...\n280 |     pub fn align(self) -> u64 {\n    |            ^^^^^\n\n",
              "warning: variants `LastMatch` and `ExactMatch` are never constructed\n   --> interface/rdif-pcie/src/addr_alloc/mod.rs:297:5\n    |\n292 | pub enum AllocPolicy {\n    |          ----------- variants in this enum\n...\n297 |     LastMatch,\n    |     ^^^^^^^^^\n...\n300 |     ExactMatch(u64),\n    |     ^^^^^^^^^^\n    |\n    = note: `AllocPolicy` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis\n\n",
              "warning: variants `LastMatch` and `ExactMatch` are never constructed\n   --> interface/rdif-pcie/src/addr_alloc/mod.rs:297:5\n    |\n292 | pub enum AllocPolicy {\n    |          ----------- variants in this enum\n...\n297 |     LastMatch,\n    |     ^^^^^^^^^\n...\n300 |     ExactMatch(u64),\n    |     ^^^^^^^^^^\n    |\n    = note: `AllocPolicy` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis\n\n"
            ]
          }
        },
        {
          "file": "interface/rdif-pcie/src/addr_alloc/address_allocator.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: methods `free`, `base`, and `end` are never used\n  --> interface/rdif-pcie/src/addr_alloc/address_allocator.rs:71:12\n   |\n34 | impl AddressAllocator {\n   | --------------------- methods in this implementation\n...\n71 |     pub fn free(&mut self, key: &RangeInclusive) -> Result<()> {\n   |            ^^^^\n...\n76 |     pub fn base(&self) -> u64 {\n   |            ^^^^\n...\n81 |     pub fn end(&self) -> u64 {\n   |            ^^^\n\n",
              "warning: methods `free`, `base`, and `end` are never used\n  --> interface/rdif-pcie/src/addr_alloc/address_allocator.rs:71:12\n   |\n34 | impl AddressAllocator {\n   | --------------------- methods in this implementation\n...\n71 |     pub fn free(&mut self, key: &RangeInclusive) -> Result<()> {\n   |            ^^^^\n...\n76 |     pub fn base(&self) -> u64 {\n   |            ^^^^\n...\n81 |     pub fn end(&self) -> u64 {\n   |            ^^^\n\n",
              "warning: methods `free`, `base`, and `end` are never used\n  --> interface/rdif-pcie/src/addr_alloc/address_allocator.rs:71:12\n   |\n34 | impl AddressAllocator {\n   | --------------------- methods in this implementation\n...\n71 |     pub fn free(&mut self, key: &RangeInclusive) -> Result<()> {\n   |            ^^^^\n...\n76 |     pub fn base(&self) -> u64 {\n   |            ^^^^\n...\n81 |     pub fn end(&self) -> u64 {\n   |            ^^^\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1525:11: 1525:40 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1528:13: 1528:56 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_4/drivercraft/rdrive/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── rdrive 0.18.11\n│   └── sparreal-kernel 0.12.2\n│       ├── sparreal-rt 0.12.1\n│       │   └── bare-test 0.7.0\n│       │       └── pcie 0.4.5\n│       │           └── rdrive 0.18.11\n│       │               └── enumerate 0.1.0\n│       └── bare-test 0.7.0\n├── rdrive 0.18.11\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-systick 0.5.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-power 0.6.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   │       └── rdrive 0.18.11\n│   └── rdif-intc 0.12.1\n│       ├── sparreal-rt 0.12.1\n│       ├── sparreal-kernel 0.12.2\n│       └── arm-gic-driver 0.15.8\n│           └── sparreal-rt 0.12.1\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-timer 0.5.0\n│   ├── rdif-systick 0.5.1\n│   ├── rdif-serial 0.5.4\n│   ├── rdif-power 0.6.1\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   ├── rdif-net 0.1.0\n│   ├── rdif-intc 0.12.1\n│   │   ├── rdrive 0.18.11\n│   │   └── enumerate 0.1.0\n│   ├── rdif-clk 0.4.2\n│   │   └── rdrive 0.18.11\n│   └── rdif-block 0.6.2\n└── arm-gic-driver 0.15.8\n\n\n{\n  \"database\": {\n    \"advisory-count\": 861,\n    \"last-commit\": \"32546e97dfa0ad59baab4166705156d8dd0fbfa8\",\n    \"last-updated\": \"2025-10-27T17:45:41+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 352\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\\n\\n## Possible Alternative(s)\\n\\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=pcie, checker=Lockbud\n// toolchain=nightly, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/bus/pcie\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none \n// timestamp=2025-10-28 4:49:28.939268446 +08:00:00\n   Compiling quote v1.0.41\n   Compiling bitflags v2.10.0\n   Compiling bit_field v0.10.3\n   Compiling log v0.4.28\n   Compiling pci_types v0.10.0\n[2025-10-27T20:49:29Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1525:11: 1525:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1528:13: 1528:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-10-27T20:49:29Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling syn v2.0.108\n   Compiling thiserror-impl v2.0.17\n   Compiling bare-test-macros v0.2.0\n   Compiling async-trait v0.1.89\n   Compiling pcie v0.4.5 (/home/runner/check/batch_4/drivercraft/rdrive/bus/pcie)\n   Compiling thiserror v2.0.17\n   Compiling rdif-def v0.2.0\n   Compiling rdif-base v0.7.0 (/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-base)\n   Compiling rdif-pcie v0.1.4 (/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-pcie)\nerror[E0658]: `let` expressions in this position are unstable\n  --> interface/rdif-pcie/src/bar_alloc.rs:49:16\n   |\n49 |             && let Some(set) = self.mem32_pref.as_mut()\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> interface/rdif-pcie/src/bar_alloc.rs:50:16\n   |\n50 |             && let Ok(addr) = set.allocate(size as _, size as _, AllocPolicy::FirstMatch)\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> interface/rdif-pcie/src/bar_alloc.rs:65:16\n   |\n65 |             && let Some(set) = self.mem64_pref.as_mut()\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> interface/rdif-pcie/src/bar_alloc.rs:66:16\n   |\n66 |             && let Ok(addr) = set.allocate(size as _, size as _, AllocPolicy::FirstMatch)\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nwarning: unexpected `cfg` condition value: `serde`\n   --> interface/rdif-pcie/src/addr_alloc/mod.rs:164:12\n    |\n164 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n    |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n    |\n    = note: no expected values for `feature`\n    = help: consider adding `serde` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition value: `serde`\n  --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:46:12\n   |\n46 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n   |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `serde` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `serde`\n  --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:62:12\n   |\n62 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n   |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `serde` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `serde`\n   --> interface/rdif-pcie/src/addr_alloc/allocation_engine/interval_tree.rs:497:12\n    |\n497 | #[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n    |            ^^^^^^^^^^^^^^^^^ help: remove the condition\n    |\n    = note: no expected values for `feature`\n    = help: consider adding `serde` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nFor more information about this error, try `rustc --explain E0658`.\nwarning: `rdif-pcie` (lib) generated 4 warnings\nerror: could not compile `rdif-pcie` (lib) due to 4 previous errors; 4 warnings emitted\n"
            ]
          }
        },
        {
          "file": "[Lockbud] deadlock detection",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-10-27T20:49:29Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1525:11: 1525:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1528:13: 1528:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-10-27T20:49:29Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "enumerate",
      "count": 7,
      "raw_reports": [
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.6/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Error)": [
              "error[E0463]: can't find crate for `std`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.6/src/lib.rs:198:1\n    |\n198 | extern crate std;\n    | ^^^^^^^^^^^^^^^^^ can't find crate\n    |\n    = note: the `aarch64-unknown-none` target may not support the standard library\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-syntax-0.8.8/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Error)": [
              "error[E0463]: can't find crate for `std`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-syntax-0.8.8/src/lib.rs:176:1\n    |\n176 | extern crate std;\n    | ^^^^^^^^^^^^^^^^^ can't find crate\n    |\n    = note: the `aarch64-unknown-none` target may not support the standard library\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_4/drivercraft/rdrive/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── rdrive 0.18.11\n│   └── sparreal-kernel 0.12.2\n│       ├── sparreal-rt 0.12.1\n│       │   └── bare-test 0.7.0\n│       │       └── pcie 0.4.5\n│       │           └── rdrive 0.18.11\n│       │               └── enumerate 0.1.0\n│       └── bare-test 0.7.0\n├── rdrive 0.18.11\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-systick 0.5.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-power 0.6.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   │       └── rdrive 0.18.11\n│   └── rdif-intc 0.12.1\n│       ├── sparreal-rt 0.12.1\n│       ├── sparreal-kernel 0.12.2\n│       └── arm-gic-driver 0.15.8\n│           └── sparreal-rt 0.12.1\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-timer 0.5.0\n│   ├── rdif-systick 0.5.1\n│   ├── rdif-serial 0.5.4\n│   ├── rdif-power 0.6.1\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   ├── rdif-net 0.1.0\n│   ├── rdif-intc 0.12.1\n│   │   ├── rdrive 0.18.11\n│   │   └── enumerate 0.1.0\n│   ├── rdif-clk 0.4.2\n│   │   └── rdrive 0.18.11\n│   └── rdif-block 0.6.2\n└── arm-gic-driver 0.15.8\n\n\n{\n  \"database\": {\n    \"advisory-count\": 861,\n    \"last-commit\": \"32546e97dfa0ad59baab4166705156d8dd0fbfa8\",\n    \"last-updated\": \"2025-10-27T17:45:41+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 352\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\\n\\n## Possible Alternative(s)\\n\\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) clippy",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=enumerate, checker=Clippy\n// toolchain=nightly, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/examples/enumerate\n// cmd=cargo clippy --target aarch64-unknown-none  --no-deps\n// timestamp=2025-10-28 4:47:03.483480437 +08:00:00\n   Compiling proc-macro2 v1.0.103\n   Compiling unicode-ident v1.0.20\n   Compiling quote v1.0.41\n   Compiling thiserror v2.0.17\n   Compiling paste v1.0.15\n    Checking as-any v0.3.2\n    Checking memchr v2.7.6\n    Checking bit_field v0.10.3\n    Checking bitflags v2.10.0\n    Checking regex-syntax v0.8.8\nerror: could not compile `memchr` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `regex-syntax` (lib) due to 1 previous error\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=enumerate, checker=Lockbud\n// toolchain=nightly, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/examples/enumerate\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none \n// timestamp=2025-10-28 4:49:27.922675156 +08:00:00\n   Compiling proc-macro2 v1.0.103\n   Compiling unicode-ident v1.0.20\n   Compiling quote v1.0.41\n   Compiling thiserror v2.0.17\n   Compiling paste v1.0.15\n   Compiling as-any v0.3.2\n   Compiling memchr v2.7.6\nerror[E0463]: can't find crate for `std`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.6/src/lib.rs:198:1\n    |\n198 | extern crate std;\n    | ^^^^^^^^^^^^^^^^^ can't find crate\n    |\n    = note: the `aarch64-unknown-none` target may not support the standard library\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\n   Compiling regex-syntax v0.8.8\nerror[E0463]: can't find crate for `std`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-syntax-0.8.8/src/lib.rs:176:1\n    |\n176 | extern crate std;\n    | ^^^^^^^^^^^^^^^^^ can't find crate\n    |\n    = note: the `aarch64-unknown-none` target may not support the standard library\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `regex-syntax` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `memchr` (lib) due to 1 previous error\n"
            ]
          }
        },
        {
          "file": "(virtual) udeps",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=enumerate, checker=Udeps\n// toolchain=nightly, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/examples/enumerate\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target aarch64-unknown-none \n// timestamp=2025-10-28 4:50:31.07004643 +08:00:00\n   Compiling proc-macro2 v1.0.103\n   Compiling unicode-ident v1.0.20\n   Compiling quote v1.0.41\n   Compiling thiserror v2.0.17\n   Compiling paste v1.0.15\n    Checking memchr v2.7.6\nerror[E0463]: can't find crate for `std`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.6/src/lib.rs:198:1\n    |\n198 | extern crate std;\n    | ^^^^^^^^^^^^^^^^^ can't find crate\n    |\n    = note: the `aarch64-unknown-none` target may not support the standard library\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\n    Checking as-any v0.3.2\n    Checking bit_field v0.10.3\n    Checking log v0.4.28\nerror[E0463]: can't find crate for `std`\n  |\n  = note: the `aarch64-unknown-none` target may not support the standard library\n  = note: `std` is required by `log` because it does not declare `#![no_std]`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can't find crate for `std`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:395:5\n    |\n395 | use std::cfg;\n    |     ^^^ can't find crate\n    |\n    = note: the `aarch64-unknown-none` target may not support the standard library\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:397:5\n    |\n397 | use std::error;\n    |     ^^^ can't find crate\n    |\n    = note: the `aarch64-unknown-none` target may not support the standard library\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:398:5\n    |\n398 | use std::str::FromStr;\n    |     ^^^ can't find crate\n    |\n    = note: the `aarch64-unknown-none` target may not support the standard library\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:399:5\n    |\n399 | use std::{cmp, fmt, mem};\n    |     ^^^ can't find crate\n    |\n    = note: the `aarch64-unknown-none` target may not support the standard library\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror: could not compile `memchr` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror[E0463]: can't find crate for `std`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:409:5\n    |\n409 | use std::sync::atomic::{AtomicUsize, Ordering};\n    |     ^^^ can't find crate\n    |\n    = note: the `aarch64-unknown-none` target may not support the standard library\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:5:5\n  |\n5 | use std::fmt::Arguments;\n  |     ^^^ can't find crate\n  |\n  = note: the `aarch64-unknown-none` target may not support the standard library\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:6:5\n  |\n6 | use std::panic::Location;\n  |     ^^^ can't find crate\n  |\n  = note: the `aarch64-unknown-none` target may not support the standard library\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:7:9\n  |\n7 | pub use std::{format_args, module_path, stringify};\n  |         ^^^ can't find crate\n  |\n  = note: the `aarch64-unknown-none` target may not support the standard library\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror: cannot find attribute `derive` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:470:3\n    |\n470 | #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n    |   ^^^^^^\n    |\nhelp: consider importing this attribute macro\n    |\n395 + use core::prelude::rust_2024::derive;\n    |\n\nerror: cannot find attribute `derive` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:632:3\n    |\n632 | #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n    |   ^^^^^^\n    |\nhelp: consider importing this attribute macro\n    |\n395 + use core::prelude::rust_2024::derive;\n    |\n\nerror: cannot find attribute `derive` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:775:3\n    |\n775 | #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]\n    |   ^^^^^^\n    |\nhelp: consider importing this attribute macro\n    |\n395 + use core::prelude::rust_2024::derive;\n    |\n\nerror: cannot find attribute `derive` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:836:3\n    |\n836 | #[derive(Clone, Debug)]\n    |   ^^^^^^\n    |\nhelp: consider importing this attribute macro\n    |\n395 + use core::prelude::rust_2024::derive;\n    |\n\nerror: cannot find attribute `derive` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:997:3\n    |\n997 | #[derive(Debug)]\n    |   ^^^^^^\n    |\nhelp: consider importing this attribute macro\n    |\n395 + use core::prelude::rust_2024::derive;\n    |\n\nerror: cannot find macro `format_args` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1019:23\n     |\n1019 |                 args: format_args!(\"\"),\n     |                       ^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n395  + use core::format_args;\n     |\n\nerror: cannot find attribute `derive` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1152:3\n     |\n1152 | #[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]\n     |   ^^^^^^\n     |\nhelp: consider importing this attribute macro\n     |\n395  + use core::prelude::rust_2024::derive;\n     |\n\nerror: cannot find attribute `derive` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1194:3\n     |\n1194 | #[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]\n     |   ^^^^^^\n     |\nhelp: consider importing this attribute macro\n     |\n395  + use core::prelude::rust_2024::derive;\n     |\n\nerror: cannot find macro `unreachable` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1533:13\n     |\n1533 |             unreachable!(\"set_logger_racy must not be used with other initialization functions\")\n     |             ^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n395  + use core::unreachable;\n     |\n\nerror: cannot find attribute `derive` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1543:3\n     |\n1543 | #[derive(Debug)]\n     |   ^^^^^^\n     |\nhelp: consider importing this attribute macro\n     |\n395  + use core::prelude::rust_2024::derive;\n     |\n\nerror: cannot find attribute `derive` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1560:3\n     |\n1560 | #[derive(Debug, PartialEq, Eq)]\n     |   ^^^^^^\n     |\nhelp: consider importing this attribute macro\n     |\n395  + use core::prelude::rust_2024::derive;\n     |\n\nerror: cannot find attribute `derive` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:38:3\n   |\n38 | #[derive(Debug)]\n   |   ^^^^^^\n   |\nhelp: consider importing this attribute macro\n   |\n3  + use core::prelude::rust_2024::derive;\n   |\n\nerror: cannot find macro `panic` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:65:9\n   |\n65 |         panic!(\"key-value support is experimental and must be enabled using the `kv` feature\")\n   |         ^^^^^\n   |\nhelp: consider importing this macro\n   |\n3  + use core::panic;\n   |\n\nerror[E0463]: can't find crate for `std`\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1306:17\n     |\n1306 | impl<T> Log for std::boxed::Box<T>\n     |                 ^^^ can't find crate\n     |\n     = note: the `aarch64-unknown-none` target may not support the standard library\n     = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1323:17\n     |\n1323 | impl<T> Log for std::sync::Arc<T>\n     |                 ^^^ can't find crate\n     |\n     = note: the `aarch64-unknown-none` target may not support the standard library\n     = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1497:17\n     |\n1497 |                 std::hint::spin_loop();\n     |                 ^^^ can't find crate\n     |\n     = note: the `aarch64-unknown-none` target may not support the standard library\n     = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0405]: cannot find trait `PartialEq` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:497:6\n    |\n497 | impl PartialEq<LevelFilter> for Level {\n    |      ^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n395 + use core::cmp::PartialEq;\n    |\n\nerror[E0405]: cannot find trait `PartialOrd` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:504:6\n    |\n504 | impl PartialOrd<LevelFilter> for Level {\n    |      ^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n395 + use core::cmp::PartialOrd;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:506:51\n    |\n506 |     fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {\n    |                                                   ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:507:9\n    |\n507 |         Some((*self as usize).cmp(&(*other as usize)))\n    |         ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:513:33\n    |\n513 |     fn from_str(level: &str) -> Result<Level, Self::Err> {\n    |                                 ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n395 + use core::fmt::Result;\n    |\n395 + use core::result::Result;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:532:32\n    |\n532 |     fn from_usize(u: usize) -> Option<Level> {\n    |                                ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:534:18\n    |\n534 |             1 => Some(Level::Error),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:535:18\n    |\n535 |             2 => Some(Level::Warn),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:536:18\n    |\n536 |             3 => Some(Level::Info),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:537:18\n    |\n537 |             4 => Some(Level::Debug),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:538:18\n    |\n538 |             5 => Some(Level::Trace),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find value `None` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:539:18\n    |\n539 |             _ => None,\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n395 + use core::option::Option::None;\n    |\n\nerror[E0405]: cannot find trait `Iterator` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:576:27\n    |\n576 |     pub fn iter() -> impl Iterator<Item = Self> {\n    |                           ^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n395 + use core::iter::Iterator;\n    |\n\nerror[E0405]: cannot find trait `PartialEq` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:648:6\n    |\n648 | impl PartialEq<Level> for LevelFilter {\n    |      ^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n395 + use core::cmp::PartialEq;\n    |\n\nerror[E0405]: cannot find trait `PartialOrd` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:655:6\n    |\n655 | impl PartialOrd<Level> for LevelFilter {\n    |      ^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n395 + use core::cmp::PartialOrd;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:657:45\n    |\n657 |     fn partial_cmp(&self, other: &Level) -> Option<cmp::Ordering> {\n    |                                             ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:658:9\n    |\n658 |         Some((*self as usize).cmp(&(*other as usize)))\n    |         ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:664:33\n    |\n664 |     fn from_str(level: &str) -> Result<LevelFilter, Self::Err> {\n    |                                 ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n395 + use core::fmt::Result;\n    |\n395 + use core::result::Result;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:680:32\n    |\n680 |     fn from_usize(u: usize) -> Option<LevelFilter> {\n    |                                ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:682:18\n    |\n682 |             0 => Some(LevelFilter::Off),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:683:18\n    |\n683 |             1 => Some(LevelFilter::Error),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:684:18\n    |\n684 |             2 => Some(LevelFilter::Warn),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:685:18\n    |\n685 |             3 => Some(LevelFilter::Info),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:686:18\n    |\n686 |             4 => Some(LevelFilter::Debug),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:687:18\n    |\n687 |             5 => Some(LevelFilter::Trace),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find value `None` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:688:18\n    |\n688 |             _ => None,\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n395 + use core::option::Option::None;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:702:31\n    |\n702 |     pub fn to_level(&self) -> Option<Level> {\n    |                               ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0405]: cannot find trait `Iterator` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:727:27\n    |\n727 |     pub fn iter() -> impl Iterator<Item = Self> {\n    |                           ^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n395 + use core::iter::Iterator;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:840:18\n    |\n840 |     module_path: Option<MaybeStaticStr<'a>>,\n    |                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:841:11\n    |\n841 |     file: Option<MaybeStaticStr<'a>>,\n    |           ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:842:11\n    |\n842 |     line: Option<u32>,\n    |           ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:897:34\n    |\n897 |     pub fn module_path(&self) -> Option<&'a str> {\n    |                                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:903:41\n    |\n903 |     pub fn module_path_static(&self) -> Option<&'static str> {\n    |                                         ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:905:13\n    |\n905 |             Some(MaybeStaticStr::Static(s)) => Some(s),\n    |             ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:905:48\n    |\n905 |             Some(MaybeStaticStr::Static(s)) => Some(s),\n    |                                                ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find value `None` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:906:18\n    |\n906 |             _ => None,\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n395 + use core::option::Option::None;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:912:27\n    |\n912 |     pub fn file(&self) -> Option<&'a str> {\n    |                           ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:918:34\n    |\n918 |     pub fn file_static(&self) -> Option<&'static str> {\n    |                                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:920:13\n    |\n920 |             Some(MaybeStaticStr::Static(s)) => Some(s),\n    |             ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:920:48\n    |\n920 |             Some(MaybeStaticStr::Static(s)) => Some(s),\n    |                                                ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find value `None` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:921:18\n    |\n921 |             _ => None,\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n395 + use core::option::Option::None;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:927:27\n    |\n927 |     pub fn line(&self) -> Option<u32> {\n    |                           ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0425]: cannot find value `None` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1021:30\n     |\n1021 |                 module_path: None,\n     |                              ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n395  + use core::option::Option::None;\n     |\n\nerror[E0425]: cannot find value `None` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1022:23\n     |\n1022 |                 file: None,\n     |                       ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n395  + use core::option::Option::None;\n     |\n\nerror[E0425]: cannot find value `None` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1023:23\n     |\n1023 |                 line: None,\n     |                       ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n395  + use core::option::Option::None;\n     |\n\nerror[E0412]: cannot find type `Option` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1060:41\n     |\n1060 |     pub fn module_path(&mut self, path: Option<&'a str>) -> &mut RecordBuilder<'a> {\n     |                                         ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n395  + use core::option::Option;\n     |\n\nerror[E0412]: cannot find type `Option` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1067:48\n     |\n1067 |     pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {\n     |                                                ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n395  + use core::option::Option;\n     |\n\nerror[E0412]: cannot find type `Option` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1074:34\n     |\n1074 |     pub fn file(&mut self, file: Option<&'a str>) -> &mut RecordBuilder<'a> {\n     |                                  ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n395  + use core::option::Option;\n     |\n\nerror[E0412]: cannot find type `Option` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1081:41\n     |\n1081 |     pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {\n     |                                         ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n395  + use core::option::Option;\n     |\n\nerror[E0412]: cannot find type `Option` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1088:34\n     |\n1088 |     pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {\n     |                                  ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n395  + use core::option::Option;\n     |\n\nerror[E0405]: cannot find trait `Default` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1108:6\n     |\n1108 | impl Default for RecordBuilder<'_> {\n     |      ^^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n395  + use core::default::Default;\n     |\n\nerror[E0405]: cannot find trait `Default` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1237:6\n     |\n1237 | impl Default for MetadataBuilder<'_> {\n     |      ^^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n395  + use core::default::Default;\n     |\n\nerror[E0405]: cannot find trait `Sync` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1244:16\n     |\n1244 | pub trait Log: Sync + Send {\n     |                ^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n395  + use core::marker::Sync;\n     |\n\nerror[E0405]: cannot find trait `Send` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1244:23\n     |\n1244 | pub trait Log: Sync + Send {\n     |                       ^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n395  + use core::marker::Send;\n     |\n\nerror[E0405]: cannot find trait `Sized` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1291:9\n     |\n1291 |     T: ?Sized + Log,\n     |         ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n395  + use core::marker::Sized;\n     |\n\nerror[E0405]: cannot find trait `Sized` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1308:9\n     |\n1308 |     T: ?Sized + Log,\n     |         ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n395  + use core::marker::Sized;\n     |\n\nerror[E0405]: cannot find trait `Sized` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1325:9\n     |\n1325 |     T: ?Sized + Log,\n     |         ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n395  + use core::marker::Sized;\n     |\n\nerror[E0412]: cannot find type `Box` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1415:33\n     |\n1415 | pub fn set_boxed_logger(logger: Box<dyn Log>) -> Result<(), SetLoggerError> {\n     |                                 ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Result` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1415:50\n     |\n1415 | pub fn set_boxed_logger(logger: Box<dyn Log>) -> Result<(), SetLoggerError> {\n     |                                                  ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these items\n     |\n395  + use core::fmt::Result;\n     |\n395  + use core::result::Result;\n     |\n\nerror[E0412]: cannot find type `Result` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1473:48\n     |\n1473 | pub fn set_logger(logger: &'static dyn Log) -> Result<(), SetLoggerError> {\n     |                                                ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these items\n     |\n395  + use core::fmt::Result;\n     |\n395  + use core::result::Result;\n     |\n\nerror[E0405]: cannot find trait `FnOnce` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1480:8\n     |\n1480 |     F: FnOnce() -> &'static dyn Log,\n     |        ^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n395  + use core::ops::FnOnce;\n     |\n\nerror[E0412]: cannot find type `Result` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1478:43\n     |\n1478 | fn set_logger_inner<F>(make_logger: F) -> Result<(), SetLoggerError>\n     |                                           ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these items\n     |\n395  + use core::fmt::Result;\n     |\n395  + use core::result::Result;\n     |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1488:9\n     |\n1488 |         Ok(UNINITIALIZED) => {\n     |         ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n395  + use core::result::Result::Ok;\n     |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1493:13\n     |\n1493 |             Ok(())\n     |             ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n395  + use core::result::Result::Ok;\n     |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1495:9\n     |\n1495 |         Err(INITIALIZING) => {\n     |         ^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n395  + use core::result::Result::Err;\n     |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1499:13\n     |\n1499 |             Err(SetLoggerError(()))\n     |             ^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n395  + use core::result::Result::Err;\n     |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1501:14\n     |\n1501 |         _ => Err(SetLoggerError(())),\n     |              ^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n395  + use core::result::Result::Err;\n     |\n\nerror[E0412]: cannot find type `Result` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1524:60\n     |\n1524 | pub unsafe fn set_logger_racy(logger: &'static dyn Log) -> Result<(), SetLoggerError> {\n     |                                                            ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these items\n     |\n395  + use core::fmt::Result;\n     |\n395  + use core::result::Result;\n     |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1529:13\n     |\n1529 |             Ok(())\n     |             ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n395  + use core::result::Result::Ok;\n     |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1535:14\n     |\n1535 |         _ => Err(SetLoggerError(())),\n     |              ^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n395  + use core::result::Result::Err;\n     |\n\nerror[E0412]: cannot find type `Option` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:15:30\n   |\n15 |         fn into_kvs(self) -> Option<&'a [(&'a str, super::Value<'a>)]>;\n   |                              ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n13 +     use core::option::Option;\n   |\n\nerror[E0412]: cannot find type `Option` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:23:26\n   |\n23 |     fn into_kvs(self) -> Option<&'a [(&'a str, Value<'a>)]> {\n   |                          ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n3  + use core::option::Option;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:24:9\n   |\n24 |         Some(self)\n   |         ^^^^\n   |\nhelp: try calling `Some` as a method\n   |\n24 -         Some(self)\n24 +         self.Some()\n   |\nhelp: consider importing this tuple variant\n   |\n3  + use core::option::Option::Some;\n   |\n\nerror[E0412]: cannot find type `Option` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:30:26\n   |\n30 |     fn into_kvs(self) -> Option<&'a [(&'a str, Value<'a>)]> {\n   |                          ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n3  + use core::option::Option;\n   |\n\nerror[E0425]: cannot find value `None` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:31:9\n   |\n31 |         None\n   |         ^^^^ not found in this scope\n   |\nhelp: consider importing this unit variant\n   |\n3  + use core::option::Option::None;\n   |\n\nerror[E0412]: cannot find type `Option` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:61:10\n   |\n61 |     kvs: Option<&[(&str, Value)]>,\n   |          ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n3  + use core::option::Option;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:74:29\n   |\n74 |         .module_path_static(Some(module_path))\n   |                             ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n3  + use core::option::Option::Some;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:75:22\n   |\n75 |         .file_static(Some(loc.file()))\n   |                      ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n3  + use core::option::Option::Some;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:76:15\n   |\n76 |         .line(Some(loc.line()));\n   |               ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n3  + use core::option::Option::Some;\n   |\n\nerror: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1291:8\n     |\n1291 |     T: ?Sized + Log,\n     |        ^^^^^^\n\nerror: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1308:8\n     |\n1308 |     T: ?Sized + Log,\n     |        ^^^^^^\n\nerror: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1325:8\n     |\n1325 |     T: ?Sized + Log,\n     |        ^^^^^^\n\nerror[E0433]: failed to resolve: use of undeclared type `Box`\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1416:25\n     |\n1416 |     set_logger_inner(|| Box::leak(logger))\n     |                         ^^^ use of undeclared type `Box`\n\nSome errors have detailed explanations: E0405, E0412, E0425, E0433, E0463, E0531.\nFor more information about an error, try `rustc --explain E0405`.\nerror: could not compile `log` (lib) due to 108 previous errors\n"
            ]
          }
        },
        {
          "file": "[Udeps] Unused dependencies",
          "features": "",
          "count": 1,
          "kinds": {
            "Unused Deps": [
              "pkg=enumerate, checker=Udeps\ntoolchain=nightly, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/examples/enumerate\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target aarch64-unknown-none \ntimestamp=2025-10-28 4:50:32.233280114 +08:00:00\n\n\nstdout:\n\nstderr:\n   Compiling proc-macro2 v1.0.103\n   Compiling unicode-ident v1.0.20\n   Compiling quote v1.0.41\n   Compiling thiserror v2.0.17\n   Compiling paste v1.0.15\n    Checking memchr v2.7.6\nerror[E0463]: can't find crate for `std`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.6/src/lib.rs:198:1\n    |\n198 | extern crate std;\n    | ^^^^^^^^^^^^^^^^^ can't find crate\n    |\n    = note: the `aarch64-unknown-none` target may not support the standard library\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\n    Checking as-any v0.3.2\n    Checking bit_field v0.10.3\n    Checking log v0.4.28\nerror[E0463]: can't find crate for `std`\n  |\n  = note: the `aarch64-unknown-none` target may not support the standard library\n  = note: `std` is required by `log` because it does not declare `#![no_std]`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can't find crate for `std`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:395:5\n    |\n395 | use std::cfg;\n    |     ^^^ can't find crate\n    |\n    = note: the `aarch64-unknown-none` target may not support the standard library\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:397:5\n    |\n397 | use std::error;\n    |     ^^^ can't find crate\n    |\n    = note: the `aarch64-unknown-none` target may not support the standard library\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:398:5\n    |\n398 | use std::str::FromStr;\n    |     ^^^ can't find crate\n    |\n    = note: the `aarch64-unknown-none` target may not support the standard library\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:399:5\n    |\n399 | use std::{cmp, fmt, mem};\n    |     ^^^ can't find crate\n    |\n    = note: the `aarch64-unknown-none` target may not support the standard library\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror: could not compile `memchr` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror[E0463]: can't find crate for `std`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:409:5\n    |\n409 | use std::sync::atomic::{AtomicUsize, Ordering};\n    |     ^^^ can't find crate\n    |\n    = note: the `aarch64-unknown-none` target may not support the standard library\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:5:5\n  |\n5 | use std::fmt::Arguments;\n  |     ^^^ can't find crate\n  |\n  = note: the `aarch64-unknown-none` target may not support the standard library\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:6:5\n  |\n6 | use std::panic::Location;\n  |     ^^^ can't find crate\n  |\n  = note: the `aarch64-unknown-none` target may not support the standard library\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:7:9\n  |\n7 | pub use std::{format_args, module_path, stringify};\n  |         ^^^ can't find crate\n  |\n  = note: the `aarch64-unknown-none` target may not support the standard library\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror: cannot find attribute `derive` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:470:3\n    |\n470 | #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n    |   ^^^^^^\n    |\nhelp: consider importing this attribute macro\n    |\n395 + use core::prelude::rust_2024::derive;\n    |\n\nerror: cannot find attribute `derive` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:632:3\n    |\n632 | #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n    |   ^^^^^^\n    |\nhelp: consider importing this attribute macro\n    |\n395 + use core::prelude::rust_2024::derive;\n    |\n\nerror: cannot find attribute `derive` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:775:3\n    |\n775 | #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]\n    |   ^^^^^^\n    |\nhelp: consider importing this attribute macro\n    |\n395 + use core::prelude::rust_2024::derive;\n    |\n\nerror: cannot find attribute `derive` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:836:3\n    |\n836 | #[derive(Clone, Debug)]\n    |   ^^^^^^\n    |\nhelp: consider importing this attribute macro\n    |\n395 + use core::prelude::rust_2024::derive;\n    |\n\nerror: cannot find attribute `derive` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:997:3\n    |\n997 | #[derive(Debug)]\n    |   ^^^^^^\n    |\nhelp: consider importing this attribute macro\n    |\n395 + use core::prelude::rust_2024::derive;\n    |\n\nerror: cannot find macro `format_args` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1019:23\n     |\n1019 |                 args: format_args!(\"\"),\n     |                       ^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n395  + use core::format_args;\n     |\n\nerror: cannot find attribute `derive` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1152:3\n     |\n1152 | #[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]\n     |   ^^^^^^\n     |\nhelp: consider importing this attribute macro\n     |\n395  + use core::prelude::rust_2024::derive;\n     |\n\nerror: cannot find attribute `derive` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1194:3\n     |\n1194 | #[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]\n     |   ^^^^^^\n     |\nhelp: consider importing this attribute macro\n     |\n395  + use core::prelude::rust_2024::derive;\n     |\n\nerror: cannot find macro `unreachable` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1533:13\n     |\n1533 |             unreachable!(\"set_logger_racy must not be used with other initialization functions\")\n     |             ^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n395  + use core::unreachable;\n     |\n\nerror: cannot find attribute `derive` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1543:3\n     |\n1543 | #[derive(Debug)]\n     |   ^^^^^^\n     |\nhelp: consider importing this attribute macro\n     |\n395  + use core::prelude::rust_2024::derive;\n     |\n\nerror: cannot find attribute `derive` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1560:3\n     |\n1560 | #[derive(Debug, PartialEq, Eq)]\n     |   ^^^^^^\n     |\nhelp: consider importing this attribute macro\n     |\n395  + use core::prelude::rust_2024::derive;\n     |\n\nerror: cannot find attribute `derive` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:38:3\n   |\n38 | #[derive(Debug)]\n   |   ^^^^^^\n   |\nhelp: consider importing this attribute macro\n   |\n3  + use core::prelude::rust_2024::derive;\n   |\n\nerror: cannot find macro `panic` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:65:9\n   |\n65 |         panic!(\"key-value support is experimental and must be enabled using the `kv` feature\")\n   |         ^^^^^\n   |\nhelp: consider importing this macro\n   |\n3  + use core::panic;\n   |\n\nerror[E0463]: can't find crate for `std`\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1306:17\n     |\n1306 | impl<T> Log for std::boxed::Box<T>\n     |                 ^^^ can't find crate\n     |\n     = note: the `aarch64-unknown-none` target may not support the standard library\n     = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1323:17\n     |\n1323 | impl<T> Log for std::sync::Arc<T>\n     |                 ^^^ can't find crate\n     |\n     = note: the `aarch64-unknown-none` target may not support the standard library\n     = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1497:17\n     |\n1497 |                 std::hint::spin_loop();\n     |                 ^^^ can't find crate\n     |\n     = note: the `aarch64-unknown-none` target may not support the standard library\n     = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0405]: cannot find trait `PartialEq` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:497:6\n    |\n497 | impl PartialEq<LevelFilter> for Level {\n    |      ^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n395 + use core::cmp::PartialEq;\n    |\n\nerror[E0405]: cannot find trait `PartialOrd` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:504:6\n    |\n504 | impl PartialOrd<LevelFilter> for Level {\n    |      ^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n395 + use core::cmp::PartialOrd;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:506:51\n    |\n506 |     fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {\n    |                                                   ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:507:9\n    |\n507 |         Some((*self as usize).cmp(&(*other as usize)))\n    |         ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:513:33\n    |\n513 |     fn from_str(level: &str) -> Result<Level, Self::Err> {\n    |                                 ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n395 + use core::fmt::Result;\n    |\n395 + use core::result::Result;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:532:32\n    |\n532 |     fn from_usize(u: usize) -> Option<Level> {\n    |                                ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:534:18\n    |\n534 |             1 => Some(Level::Error),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:535:18\n    |\n535 |             2 => Some(Level::Warn),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:536:18\n    |\n536 |             3 => Some(Level::Info),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:537:18\n    |\n537 |             4 => Some(Level::Debug),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:538:18\n    |\n538 |             5 => Some(Level::Trace),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find value `None` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:539:18\n    |\n539 |             _ => None,\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n395 + use core::option::Option::None;\n    |\n\nerror[E0405]: cannot find trait `Iterator` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:576:27\n    |\n576 |     pub fn iter() -> impl Iterator<Item = Self> {\n    |                           ^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n395 + use core::iter::Iterator;\n    |\n\nerror[E0405]: cannot find trait `PartialEq` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:648:6\n    |\n648 | impl PartialEq<Level> for LevelFilter {\n    |      ^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n395 + use core::cmp::PartialEq;\n    |\n\nerror[E0405]: cannot find trait `PartialOrd` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:655:6\n    |\n655 | impl PartialOrd<Level> for LevelFilter {\n    |      ^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n395 + use core::cmp::PartialOrd;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:657:45\n    |\n657 |     fn partial_cmp(&self, other: &Level) -> Option<cmp::Ordering> {\n    |                                             ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:658:9\n    |\n658 |         Some((*self as usize).cmp(&(*other as usize)))\n    |         ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:664:33\n    |\n664 |     fn from_str(level: &str) -> Result<LevelFilter, Self::Err> {\n    |                                 ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n395 + use core::fmt::Result;\n    |\n395 + use core::result::Result;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:680:32\n    |\n680 |     fn from_usize(u: usize) -> Option<LevelFilter> {\n    |                                ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:682:18\n    |\n682 |             0 => Some(LevelFilter::Off),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:683:18\n    |\n683 |             1 => Some(LevelFilter::Error),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:684:18\n    |\n684 |             2 => Some(LevelFilter::Warn),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:685:18\n    |\n685 |             3 => Some(LevelFilter::Info),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:686:18\n    |\n686 |             4 => Some(LevelFilter::Debug),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:687:18\n    |\n687 |             5 => Some(LevelFilter::Trace),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find value `None` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:688:18\n    |\n688 |             _ => None,\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n395 + use core::option::Option::None;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:702:31\n    |\n702 |     pub fn to_level(&self) -> Option<Level> {\n    |                               ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0405]: cannot find trait `Iterator` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:727:27\n    |\n727 |     pub fn iter() -> impl Iterator<Item = Self> {\n    |                           ^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n395 + use core::iter::Iterator;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:840:18\n    |\n840 |     module_path: Option<MaybeStaticStr<'a>>,\n    |                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:841:11\n    |\n841 |     file: Option<MaybeStaticStr<'a>>,\n    |           ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:842:11\n    |\n842 |     line: Option<u32>,\n    |           ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:897:34\n    |\n897 |     pub fn module_path(&self) -> Option<&'a str> {\n    |                                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:903:41\n    |\n903 |     pub fn module_path_static(&self) -> Option<&'static str> {\n    |                                         ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:905:13\n    |\n905 |             Some(MaybeStaticStr::Static(s)) => Some(s),\n    |             ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:905:48\n    |\n905 |             Some(MaybeStaticStr::Static(s)) => Some(s),\n    |                                                ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find value `None` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:906:18\n    |\n906 |             _ => None,\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n395 + use core::option::Option::None;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:912:27\n    |\n912 |     pub fn file(&self) -> Option<&'a str> {\n    |                           ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:918:34\n    |\n918 |     pub fn file_static(&self) -> Option<&'static str> {\n    |                                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:920:13\n    |\n920 |             Some(MaybeStaticStr::Static(s)) => Some(s),\n    |             ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:920:48\n    |\n920 |             Some(MaybeStaticStr::Static(s)) => Some(s),\n    |                                                ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n395 + use core::option::Option::Some;\n    |\n\nerror[E0425]: cannot find value `None` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:921:18\n    |\n921 |             _ => None,\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n395 + use core::option::Option::None;\n    |\n\nerror[E0412]: cannot find type `Option` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:927:27\n    |\n927 |     pub fn line(&self) -> Option<u32> {\n    |                           ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n395 + use core::option::Option;\n    |\n\nerror[E0425]: cannot find value `None` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1021:30\n     |\n1021 |                 module_path: None,\n     |                              ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n395  + use core::option::Option::None;\n     |\n\nerror[E0425]: cannot find value `None` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1022:23\n     |\n1022 |                 file: None,\n     |                       ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n395  + use core::option::Option::None;\n     |\n\nerror[E0425]: cannot find value `None` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1023:23\n     |\n1023 |                 line: None,\n     |                       ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n395  + use core::option::Option::None;\n     |\n\nerror[E0412]: cannot find type `Option` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1060:41\n     |\n1060 |     pub fn module_path(&mut self, path: Option<&'a str>) -> &mut RecordBuilder<'a> {\n     |                                         ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n395  + use core::option::Option;\n     |\n\nerror[E0412]: cannot find type `Option` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1067:48\n     |\n1067 |     pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {\n     |                                                ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n395  + use core::option::Option;\n     |\n\nerror[E0412]: cannot find type `Option` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1074:34\n     |\n1074 |     pub fn file(&mut self, file: Option<&'a str>) -> &mut RecordBuilder<'a> {\n     |                                  ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n395  + use core::option::Option;\n     |\n\nerror[E0412]: cannot find type `Option` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1081:41\n     |\n1081 |     pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {\n     |                                         ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n395  + use core::option::Option;\n     |\n\nerror[E0412]: cannot find type `Option` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1088:34\n     |\n1088 |     pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {\n     |                                  ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n395  + use core::option::Option;\n     |\n\nerror[E0405]: cannot find trait `Default` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1108:6\n     |\n1108 | impl Default for RecordBuilder<'_> {\n     |      ^^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n395  + use core::default::Default;\n     |\n\nerror[E0405]: cannot find trait `Default` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1237:6\n     |\n1237 | impl Default for MetadataBuilder<'_> {\n     |      ^^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n395  + use core::default::Default;\n     |\n\nerror[E0405]: cannot find trait `Sync` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1244:16\n     |\n1244 | pub trait Log: Sync + Send {\n     |                ^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n395  + use core::marker::Sync;\n     |\n\nerror[E0405]: cannot find trait `Send` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1244:23\n     |\n1244 | pub trait Log: Sync + Send {\n     |                       ^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n395  + use core::marker::Send;\n     |\n\nerror[E0405]: cannot find trait `Sized` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1291:9\n     |\n1291 |     T: ?Sized + Log,\n     |         ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n395  + use core::marker::Sized;\n     |\n\nerror[E0405]: cannot find trait `Sized` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1308:9\n     |\n1308 |     T: ?Sized + Log,\n     |         ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n395  + use core::marker::Sized;\n     |\n\nerror[E0405]: cannot find trait `Sized` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1325:9\n     |\n1325 |     T: ?Sized + Log,\n     |         ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n395  + use core::marker::Sized;\n     |\n\nerror[E0412]: cannot find type `Box` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1415:33\n     |\n1415 | pub fn set_boxed_logger(logger: Box<dyn Log>) -> Result<(), SetLoggerError> {\n     |                                 ^^^ not found in this scope\n\nerror[E0412]: cannot find type `Result` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1415:50\n     |\n1415 | pub fn set_boxed_logger(logger: Box<dyn Log>) -> Result<(), SetLoggerError> {\n     |                                                  ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these items\n     |\n395  + use core::fmt::Result;\n     |\n395  + use core::result::Result;\n     |\n\nerror[E0412]: cannot find type `Result` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1473:48\n     |\n1473 | pub fn set_logger(logger: &'static dyn Log) -> Result<(), SetLoggerError> {\n     |                                                ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these items\n     |\n395  + use core::fmt::Result;\n     |\n395  + use core::result::Result;\n     |\n\nerror[E0405]: cannot find trait `FnOnce` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1480:8\n     |\n1480 |     F: FnOnce() -> &'static dyn Log,\n     |        ^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n395  + use core::ops::FnOnce;\n     |\n\nerror[E0412]: cannot find type `Result` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1478:43\n     |\n1478 | fn set_logger_inner<F>(make_logger: F) -> Result<(), SetLoggerError>\n     |                                           ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these items\n     |\n395  + use core::fmt::Result;\n     |\n395  + use core::result::Result;\n     |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1488:9\n     |\n1488 |         Ok(UNINITIALIZED) => {\n     |         ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n395  + use core::result::Result::Ok;\n     |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1493:13\n     |\n1493 |             Ok(())\n     |             ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n395  + use core::result::Result::Ok;\n     |\n\nerror[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1495:9\n     |\n1495 |         Err(INITIALIZING) => {\n     |         ^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n395  + use core::result::Result::Err;\n     |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1499:13\n     |\n1499 |             Err(SetLoggerError(()))\n     |             ^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n395  + use core::result::Result::Err;\n     |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1501:14\n     |\n1501 |         _ => Err(SetLoggerError(())),\n     |              ^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n395  + use core::result::Result::Err;\n     |\n\nerror[E0412]: cannot find type `Result` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1524:60\n     |\n1524 | pub unsafe fn set_logger_racy(logger: &'static dyn Log) -> Result<(), SetLoggerError> {\n     |                                                            ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these items\n     |\n395  + use core::fmt::Result;\n     |\n395  + use core::result::Result;\n     |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1529:13\n     |\n1529 |             Ok(())\n     |             ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n395  + use core::result::Result::Ok;\n     |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1535:14\n     |\n1535 |         _ => Err(SetLoggerError(())),\n     |              ^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n395  + use core::result::Result::Err;\n     |\n\nerror[E0412]: cannot find type `Option` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:15:30\n   |\n15 |         fn into_kvs(self) -> Option<&'a [(&'a str, super::Value<'a>)]>;\n   |                              ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n13 +     use core::option::Option;\n   |\n\nerror[E0412]: cannot find type `Option` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:23:26\n   |\n23 |     fn into_kvs(self) -> Option<&'a [(&'a str, Value<'a>)]> {\n   |                          ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n3  + use core::option::Option;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:24:9\n   |\n24 |         Some(self)\n   |         ^^^^\n   |\nhelp: try calling `Some` as a method\n   |\n24 -         Some(self)\n24 +         self.Some()\n   |\nhelp: consider importing this tuple variant\n   |\n3  + use core::option::Option::Some;\n   |\n\nerror[E0412]: cannot find type `Option` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:30:26\n   |\n30 |     fn into_kvs(self) -> Option<&'a [(&'a str, Value<'a>)]> {\n   |                          ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n3  + use core::option::Option;\n   |\n\nerror[E0425]: cannot find value `None` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:31:9\n   |\n31 |         None\n   |         ^^^^ not found in this scope\n   |\nhelp: consider importing this unit variant\n   |\n3  + use core::option::Option::None;\n   |\n\nerror[E0412]: cannot find type `Option` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:61:10\n   |\n61 |     kvs: Option<&[(&str, Value)]>,\n   |          ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n3  + use core::option::Option;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:74:29\n   |\n74 |         .module_path_static(Some(module_path))\n   |                             ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n3  + use core::option::Option::Some;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:75:22\n   |\n75 |         .file_static(Some(loc.file()))\n   |                      ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n3  + use core::option::Option::Some;\n   |\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/__private_api.rs:76:15\n   |\n76 |         .line(Some(loc.line()));\n   |               ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n3  + use core::option::Option::Some;\n   |\n\nerror: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1291:8\n     |\n1291 |     T: ?Sized + Log,\n     |        ^^^^^^\n\nerror: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1308:8\n     |\n1308 |     T: ?Sized + Log,\n     |        ^^^^^^\n\nerror: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1325:8\n     |\n1325 |     T: ?Sized + Log,\n     |        ^^^^^^\n\nerror[E0433]: failed to resolve: use of undeclared type `Box`\n    --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1416:25\n     |\n1416 |     set_logger_inner(|| Box::leak(logger))\n     |                         ^^^ use of undeclared type `Box`\n\nSome errors have detailed explanations: E0405, E0412, E0425, E0433, E0463, E0531.\nFor more information about an error, try `rustc --explain E0405`.\nerror: could not compile `log` (lib) due to 108 previous errors\n"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdif-block",
      "count": 4,
      "raw_reports": [
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dma-api-0.5.1/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"init\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dma-api-0.5.1/src/lib.rs:72:8: 72:56 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dma-api-0.5.1/src/lib.rs:79:5: 79:60 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_4/drivercraft/rdrive/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── rdrive 0.18.11\n│   └── sparreal-kernel 0.12.2\n│       ├── sparreal-rt 0.12.1\n│       │   └── bare-test 0.7.0\n│       │       └── pcie 0.4.5\n│       │           └── rdrive 0.18.11\n│       │               └── enumerate 0.1.0\n│       └── bare-test 0.7.0\n├── rdrive 0.18.11\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-systick 0.5.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-power 0.6.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   │       └── rdrive 0.18.11\n│   └── rdif-intc 0.12.1\n│       ├── sparreal-rt 0.12.1\n│       ├── sparreal-kernel 0.12.2\n│       └── arm-gic-driver 0.15.8\n│           └── sparreal-rt 0.12.1\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-timer 0.5.0\n│   ├── rdif-systick 0.5.1\n│   ├── rdif-serial 0.5.4\n│   ├── rdif-power 0.6.1\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   ├── rdif-net 0.1.0\n│   ├── rdif-intc 0.12.1\n│   │   ├── rdrive 0.18.11\n│   │   └── enumerate 0.1.0\n│   ├── rdif-clk 0.4.2\n│   │   └── rdrive 0.18.11\n│   └── rdif-block 0.6.2\n└── arm-gic-driver 0.15.8\n\n\n{\n  \"database\": {\n    \"advisory-count\": 861,\n    \"last-commit\": \"32546e97dfa0ad59baab4166705156d8dd0fbfa8\",\n    \"last-updated\": \"2025-10-27T17:45:41+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 352\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\\n\\n## Possible Alternative(s)\\n\\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[Lockbud] deadlock detection",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-10-27T20:49:40Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"init\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dma-api-0.5.1/src/lib.rs:72:8: 72:56 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dma-api-0.5.1/src/lib.rs:79:5: 79:60 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-10-27T20:49:40Z WARN  lockbud::callbacks] crate dma_api contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n[2025-10-27T20:49:40Z WARN  lockbud::callbacks] [\n      {\n        \"UseAfterFree\": {\n          \"bug_kind\": \"UseAfterFree\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": \"Raw ptr is used at interface/rdif-block/src/blk.rs:282:50: 286:22 (#0) after dropped at interface/rdif-block/src/blk.rs:304:17: 304:18 (#0)\",\n          \"explanation\": \"Raw ptr is used or escapes the current function after the pointed value is dropped\"\n        }\n      }\n    ]\n[2025-10-27T20:49:40Z WARN  lockbud::callbacks] crate rdif_block contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 0 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 1 }"
            ]
          }
        },
        {
          "file": "interface/rdif-block/src/blk.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"UseAfterFree\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": \"Raw ptr is used at interface/rdif-block/src/blk.rs:282:50: 286:22 (#0) after dropped at interface/rdif-block/src/blk.rs:304:17: 304:18 (#0)\",\n  \"explanation\": \"Raw ptr is used or escapes the current function after the pointed value is dropped\"\n}"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdif-intc",
      "count": 3,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_4/drivercraft/rdrive/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── rdrive 0.18.11\n│   └── sparreal-kernel 0.12.2\n│       ├── sparreal-rt 0.12.1\n│       │   └── bare-test 0.7.0\n│       │       └── pcie 0.4.5\n│       │           └── rdrive 0.18.11\n│       │               └── enumerate 0.1.0\n│       └── bare-test 0.7.0\n├── rdrive 0.18.11\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-systick 0.5.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-power 0.6.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   │       └── rdrive 0.18.11\n│   └── rdif-intc 0.12.1\n│       ├── sparreal-rt 0.12.1\n│       ├── sparreal-kernel 0.12.2\n│       └── arm-gic-driver 0.15.8\n│           └── sparreal-rt 0.12.1\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-timer 0.5.0\n│   ├── rdif-systick 0.5.1\n│   ├── rdif-serial 0.5.4\n│   ├── rdif-power 0.6.1\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   ├── rdif-net 0.1.0\n│   ├── rdif-intc 0.12.1\n│   │   ├── rdrive 0.18.11\n│   │   └── enumerate 0.1.0\n│   ├── rdif-clk 0.4.2\n│   │   └── rdrive 0.18.11\n│   └── rdif-block 0.6.2\n└── arm-gic-driver 0.15.8\n\n\n{\n  \"database\": {\n    \"advisory-count\": 861,\n    \"last-commit\": \"32546e97dfa0ad59baab4166705156d8dd0fbfa8\",\n    \"last-updated\": \"2025-10-27T17:45:41+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 352\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\\n\\n## Possible Alternative(s)\\n\\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=rdif-intc, checker=Lockbud\n// toolchain=nightly, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-intc\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none \n// timestamp=2025-10-28 4:49:44.087374155 +08:00:00\n   Compiling rdif-intc v0.12.1 (/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-intc)\nerror[E0658]: cannot cast `dyn Interface` to `dyn rdif_base::Any`, trait upcasting coercion is experimental\n  --> interface/rdif-intc/src/lib.rs:20:1\n   |\n20 | def_driver!(Intc, Interface);\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n   = note: required when coercing `&dyn Interface` into `&(dyn rdif_base::Any + 'static)`\n   = note: this error originates in the macro `def_driver` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0658]: cannot cast `dyn Interface` to `dyn rdif_base::Any`, trait upcasting coercion is experimental\n  --> interface/rdif-intc/src/lib.rs:20:1\n   |\n20 | def_driver!(Intc, Interface);\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n   = note: required when coercing `&mut (dyn Interface + 'static)` into `&mut (dyn rdif_base::Any + 'static)`\n   = note: this error originates in the macro `def_driver` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nFor more information about this error, try `rustc --explain E0658`.\nerror: could not compile `rdif-intc` (lib) due to 2 previous errors\n"
            ]
          }
        },
        {
          "file": "[Udeps] Unused dependencies",
          "features": "",
          "count": 1,
          "kinds": {
            "Unused Deps": [
              "pkg=rdif-intc, checker=Udeps\ntoolchain=nightly, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-intc\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target aarch64-unknown-none \ntimestamp=2025-10-28 4:50:45.301959718 +08:00:00\n\n\nstdout:\nunused dependencies:\n`rdif-intc v0.12.1 (/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-intc)`\n└─── dependencies\n     └─── \"cfg-if\"\nNote: These dependencies might be used by other targets.\n      To find dependencies that are not used by any target, enable `--all-targets`.\nNote: They might be false-positive.\n      For example, `cargo-udeps` cannot detect usage of crates that are only used in doc-tests.\n      To ignore some dependencies, write `package.metadata.cargo-udeps.ignore` in Cargo.toml.\n\nstderr:\n    Checking rdif-base v0.7.0 (/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-base)\n    Checking rdif-intc v0.12.1 (/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-intc)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.27s\ninfo: Loading depinfo from \"/home/runner/check/batch_4/drivercraft/rdrive/target/aarch64-unknown-none/debug/deps/rdif_base-996371443e461b38.d\"\ninfo: Loading depinfo from \"/home/runner/check/batch_4/drivercraft/rdrive/target/aarch64-unknown-none/debug/deps/rdif_intc-434502738d87413d.d\"\n"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdif-clk",
      "count": 2,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_4/drivercraft/rdrive/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── rdrive 0.18.11\n│   └── sparreal-kernel 0.12.2\n│       ├── sparreal-rt 0.12.1\n│       │   └── bare-test 0.7.0\n│       │       └── pcie 0.4.5\n│       │           └── rdrive 0.18.11\n│       │               └── enumerate 0.1.0\n│       └── bare-test 0.7.0\n├── rdrive 0.18.11\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-systick 0.5.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-power 0.6.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   │       └── rdrive 0.18.11\n│   └── rdif-intc 0.12.1\n│       ├── sparreal-rt 0.12.1\n│       ├── sparreal-kernel 0.12.2\n│       └── arm-gic-driver 0.15.8\n│           └── sparreal-rt 0.12.1\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-timer 0.5.0\n│   ├── rdif-systick 0.5.1\n│   ├── rdif-serial 0.5.4\n│   ├── rdif-power 0.6.1\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   ├── rdif-net 0.1.0\n│   ├── rdif-intc 0.12.1\n│   │   ├── rdrive 0.18.11\n│   │   └── enumerate 0.1.0\n│   ├── rdif-clk 0.4.2\n│   │   └── rdrive 0.18.11\n│   └── rdif-block 0.6.2\n└── arm-gic-driver 0.15.8\n\n\n{\n  \"database\": {\n    \"advisory-count\": 861,\n    \"last-commit\": \"32546e97dfa0ad59baab4166705156d8dd0fbfa8\",\n    \"last-updated\": \"2025-10-27T17:45:41+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 352\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\\n\\n## Possible Alternative(s)\\n\\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=rdif-clk, checker=Lockbud\n// toolchain=nightly, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-clk\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none \n// timestamp=2025-10-28 4:49:41.222193499 +08:00:00\n   Compiling rdif-clk v0.4.2 (/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-clk)\nerror[E0658]: cannot cast `dyn Interface` to `dyn rdif_base::Any`, trait upcasting coercion is experimental\n  --> interface/rdif-clk/src/lib.rs:20:1\n   |\n20 | def_driver!(Clk, Interface);\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n   = note: required when coercing `&dyn Interface` into `&(dyn rdif_base::Any + 'static)`\n   = note: this error originates in the macro `def_driver` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0658]: cannot cast `dyn Interface` to `dyn rdif_base::Any`, trait upcasting coercion is experimental\n  --> interface/rdif-clk/src/lib.rs:20:1\n   |\n20 | def_driver!(Clk, Interface);\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n   = note: required when coercing `&mut (dyn Interface + 'static)` into `&mut (dyn rdif_base::Any + 'static)`\n   = note: this error originates in the macro `def_driver` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nFor more information about this error, try `rustc --explain E0658`.\nerror: could not compile `rdif-clk` (lib) due to 2 previous errors\n"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdif-power",
      "count": 2,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_4/drivercraft/rdrive/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── rdrive 0.18.11\n│   └── sparreal-kernel 0.12.2\n│       ├── sparreal-rt 0.12.1\n│       │   └── bare-test 0.7.0\n│       │       └── pcie 0.4.5\n│       │           └── rdrive 0.18.11\n│       │               └── enumerate 0.1.0\n│       └── bare-test 0.7.0\n├── rdrive 0.18.11\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-systick 0.5.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-power 0.6.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   │       └── rdrive 0.18.11\n│   └── rdif-intc 0.12.1\n│       ├── sparreal-rt 0.12.1\n│       ├── sparreal-kernel 0.12.2\n│       └── arm-gic-driver 0.15.8\n│           └── sparreal-rt 0.12.1\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-timer 0.5.0\n│   ├── rdif-systick 0.5.1\n│   ├── rdif-serial 0.5.4\n│   ├── rdif-power 0.6.1\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   ├── rdif-net 0.1.0\n│   ├── rdif-intc 0.12.1\n│   │   ├── rdrive 0.18.11\n│   │   └── enumerate 0.1.0\n│   ├── rdif-clk 0.4.2\n│   │   └── rdrive 0.18.11\n│   └── rdif-block 0.6.2\n└── arm-gic-driver 0.15.8\n\n\n{\n  \"database\": {\n    \"advisory-count\": 861,\n    \"last-commit\": \"32546e97dfa0ad59baab4166705156d8dd0fbfa8\",\n    \"last-updated\": \"2025-10-27T17:45:41+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 352\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\\n\\n## Possible Alternative(s)\\n\\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=rdif-power, checker=Lockbud\n// toolchain=nightly, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-power\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none \n// timestamp=2025-10-28 4:49:44.521698998 +08:00:00\n   Compiling rdif-power v0.6.1 (/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-power)\nerror[E0658]: cannot cast `dyn Interface` to `dyn rdif_base::Any`, trait upcasting coercion is experimental\n  --> interface/rdif-power/src/lib.rs:12:1\n   |\n12 | def_driver!(Power, Interface);\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n   = note: required when coercing `&dyn Interface` into `&(dyn rdif_base::Any + 'static)`\n   = note: this error originates in the macro `def_driver` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0658]: cannot cast `dyn Interface` to `dyn rdif_base::Any`, trait upcasting coercion is experimental\n  --> interface/rdif-power/src/lib.rs:12:1\n   |\n12 | def_driver!(Power, Interface);\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n   = note: required when coercing `&mut (dyn Interface + 'static)` into `&mut (dyn rdif_base::Any + 'static)`\n   = note: this error originates in the macro `def_driver` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nFor more information about this error, try `rustc --explain E0658`.\nerror: could not compile `rdif-power` (lib) due to 2 previous errors\n"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdif-serial",
      "count": 2,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_4/drivercraft/rdrive/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── rdrive 0.18.11\n│   └── sparreal-kernel 0.12.2\n│       ├── sparreal-rt 0.12.1\n│       │   └── bare-test 0.7.0\n│       │       └── pcie 0.4.5\n│       │           └── rdrive 0.18.11\n│       │               └── enumerate 0.1.0\n│       └── bare-test 0.7.0\n├── rdrive 0.18.11\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-systick 0.5.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-power 0.6.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   │       └── rdrive 0.18.11\n│   └── rdif-intc 0.12.1\n│       ├── sparreal-rt 0.12.1\n│       ├── sparreal-kernel 0.12.2\n│       └── arm-gic-driver 0.15.8\n│           └── sparreal-rt 0.12.1\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-timer 0.5.0\n│   ├── rdif-systick 0.5.1\n│   ├── rdif-serial 0.5.4\n│   ├── rdif-power 0.6.1\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   ├── rdif-net 0.1.0\n│   ├── rdif-intc 0.12.1\n│   │   ├── rdrive 0.18.11\n│   │   └── enumerate 0.1.0\n│   ├── rdif-clk 0.4.2\n│   │   └── rdrive 0.18.11\n│   └── rdif-block 0.6.2\n└── arm-gic-driver 0.15.8\n\n\n{\n  \"database\": {\n    \"advisory-count\": 861,\n    \"last-commit\": \"32546e97dfa0ad59baab4166705156d8dd0fbfa8\",\n    \"last-updated\": \"2025-10-27T17:45:41+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 352\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\\n\\n## Possible Alternative(s)\\n\\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[Udeps] Unused dependencies",
          "features": "",
          "count": 1,
          "kinds": {
            "Unused Deps": [
              "pkg=rdif-serial, checker=Udeps\ntoolchain=nightly, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-serial\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target aarch64-unknown-none \ntimestamp=2025-10-28 4:50:46.73049758 +08:00:00\n\n\nstdout:\nunused dependencies:\n`rdif-serial v0.5.4 (/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-serial)`\n└─── dependencies\n     ├─── \"futures\"\n     └─── \"spin\"\nNote: These dependencies might be used by other targets.\n      To find dependencies that are not used by any target, enable `--all-targets`.\nNote: They might be false-positive.\n      For example, `cargo-udeps` cannot detect usage of crates that are only used in doc-tests.\n      To ignore some dependencies, write `package.metadata.cargo-udeps.ignore` in Cargo.toml.\n\nstderr:\n    Checking rdif-base v0.7.0 (/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-base)\n    Checking mbarrier v0.1.3\n    Checking rdif-serial v0.5.4 (/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-serial)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.33s\ninfo: Loading depinfo from \"/home/runner/check/batch_4/drivercraft/rdrive/target/aarch64-unknown-none/debug/deps/rdif_base-996371443e461b38.d\"\ninfo: Loading depinfo from \"/home/runner/check/batch_4/drivercraft/rdrive/target/aarch64-unknown-none/debug/deps/rdif_serial-8e72243f61c953bf.d\"\n"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdif-systick",
      "count": 2,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_4/drivercraft/rdrive/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── rdrive 0.18.11\n│   └── sparreal-kernel 0.12.2\n│       ├── sparreal-rt 0.12.1\n│       │   └── bare-test 0.7.0\n│       │       └── pcie 0.4.5\n│       │           └── rdrive 0.18.11\n│       │               └── enumerate 0.1.0\n│       └── bare-test 0.7.0\n├── rdrive 0.18.11\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-systick 0.5.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-power 0.6.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   │       └── rdrive 0.18.11\n│   └── rdif-intc 0.12.1\n│       ├── sparreal-rt 0.12.1\n│       ├── sparreal-kernel 0.12.2\n│       └── arm-gic-driver 0.15.8\n│           └── sparreal-rt 0.12.1\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-timer 0.5.0\n│   ├── rdif-systick 0.5.1\n│   ├── rdif-serial 0.5.4\n│   ├── rdif-power 0.6.1\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   ├── rdif-net 0.1.0\n│   ├── rdif-intc 0.12.1\n│   │   ├── rdrive 0.18.11\n│   │   └── enumerate 0.1.0\n│   ├── rdif-clk 0.4.2\n│   │   └── rdrive 0.18.11\n│   └── rdif-block 0.6.2\n└── arm-gic-driver 0.15.8\n\n\n{\n  \"database\": {\n    \"advisory-count\": 861,\n    \"last-commit\": \"32546e97dfa0ad59baab4166705156d8dd0fbfa8\",\n    \"last-updated\": \"2025-10-27T17:45:41+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 352\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\\n\\n## Possible Alternative(s)\\n\\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=rdif-systick, checker=Lockbud\n// toolchain=nightly, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-systick\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none \n// timestamp=2025-10-28 4:49:44.970947385 +08:00:00\n   Compiling rdif-systick v0.5.1 (/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-systick)\nerror[E0658]: cannot cast `dyn Interface` to `dyn rdif_base::Any`, trait upcasting coercion is experimental\n  --> interface/rdif-systick/src/lib.rs:29:1\n   |\n29 | def_driver!(Systick, Interface);\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n   = note: required when coercing `&dyn Interface` into `&(dyn rdif_base::Any + 'static)`\n   = note: this error originates in the macro `def_driver` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0658]: cannot cast `dyn Interface` to `dyn rdif_base::Any`, trait upcasting coercion is experimental\n  --> interface/rdif-systick/src/lib.rs:29:1\n   |\n29 | def_driver!(Systick, Interface);\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n   = note: required when coercing `&mut (dyn Interface + 'static)` into `&mut (dyn rdif_base::Any + 'static)`\n   = note: this error originates in the macro `def_driver` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nFor more information about this error, try `rustc --explain E0658`.\nerror: could not compile `rdif-systick` (lib) due to 2 previous errors\n"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdif-base",
      "count": 1,
      "raw_reports": [
        {
          "file": "[Udeps] Unused dependencies",
          "features": "",
          "count": 1,
          "kinds": {
            "Unused Deps": [
              "pkg=rdif-base, checker=Udeps\ntoolchain=nightly, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-base\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target aarch64-unknown-none \ntimestamp=2025-10-28 4:50:39.981817608 +08:00:00\n\n\nstdout:\nunused dependencies:\n`rdif-base v0.7.0 (/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-base)`\n└─── dependencies\n     └─── \"as-any\"\nNote: These dependencies might be used by other targets.\n      To find dependencies that are not used by any target, enable `--all-targets`.\nNote: They might be false-positive.\n      For example, `cargo-udeps` cannot detect usage of crates that are only used in doc-tests.\n      To ignore some dependencies, write `package.metadata.cargo-udeps.ignore` in Cargo.toml.\n\nstderr:\n   Compiling syn v2.0.108\n   Compiling thiserror-impl v2.0.17\n   Compiling async-trait v0.1.89\n    Checking thiserror v2.0.17\n    Checking rdif-def v0.2.0\n    Checking rdif-base v0.7.0 (/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-base)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 3.37s\ninfo: Loading depinfo from \"/home/runner/check/batch_4/drivercraft/rdrive/target/aarch64-unknown-none/debug/deps/rdif_base-996371443e461b38.d\"\n"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdif-net",
      "count": 1,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_4/drivercraft/rdrive/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── rdrive 0.18.11\n│   └── sparreal-kernel 0.12.2\n│       ├── sparreal-rt 0.12.1\n│       │   └── bare-test 0.7.0\n│       │       └── pcie 0.4.5\n│       │           └── rdrive 0.18.11\n│       │               └── enumerate 0.1.0\n│       └── bare-test 0.7.0\n├── rdrive 0.18.11\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-systick 0.5.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-power 0.6.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   │       └── rdrive 0.18.11\n│   └── rdif-intc 0.12.1\n│       ├── sparreal-rt 0.12.1\n│       ├── sparreal-kernel 0.12.2\n│       └── arm-gic-driver 0.15.8\n│           └── sparreal-rt 0.12.1\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-timer 0.5.0\n│   ├── rdif-systick 0.5.1\n│   ├── rdif-serial 0.5.4\n│   ├── rdif-power 0.6.1\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   ├── rdif-net 0.1.0\n│   ├── rdif-intc 0.12.1\n│   │   ├── rdrive 0.18.11\n│   │   └── enumerate 0.1.0\n│   ├── rdif-clk 0.4.2\n│   │   └── rdrive 0.18.11\n│   └── rdif-block 0.6.2\n└── arm-gic-driver 0.15.8\n\n\n{\n  \"database\": {\n    \"advisory-count\": 861,\n    \"last-commit\": \"32546e97dfa0ad59baab4166705156d8dd0fbfa8\",\n    \"last-updated\": \"2025-10-27T17:45:41+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 352\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\\n\\n## Possible Alternative(s)\\n\\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdif-timer",
      "count": 1,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_4/drivercraft/rdrive/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── rdrive 0.18.11\n│   └── sparreal-kernel 0.12.2\n│       ├── sparreal-rt 0.12.1\n│       │   └── bare-test 0.7.0\n│       │       └── pcie 0.4.5\n│       │           └── rdrive 0.18.11\n│       │               └── enumerate 0.1.0\n│       └── bare-test 0.7.0\n├── rdrive 0.18.11\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-systick 0.5.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-power 0.6.1\n│   │   ├── sparreal-rt 0.12.1\n│   │   └── sparreal-kernel 0.12.2\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   │       └── rdrive 0.18.11\n│   └── rdif-intc 0.12.1\n│       ├── sparreal-rt 0.12.1\n│       ├── sparreal-kernel 0.12.2\n│       └── arm-gic-driver 0.15.8\n│           └── sparreal-rt 0.12.1\n├── rdif-base 0.7.0\n│   ├── rdrive 0.18.11\n│   ├── rdif-timer 0.5.0\n│   ├── rdif-systick 0.5.1\n│   ├── rdif-serial 0.5.4\n│   ├── rdif-power 0.6.1\n│   ├── rdif-pcie 0.1.4\n│   │   ├── rdrive 0.18.11\n│   │   └── pcie 0.4.5\n│   ├── rdif-net 0.1.0\n│   ├── rdif-intc 0.12.1\n│   │   ├── rdrive 0.18.11\n│   │   └── enumerate 0.1.0\n│   ├── rdif-clk 0.4.2\n│   │   └── rdrive 0.18.11\n│   └── rdif-block 0.6.2\n└── arm-gic-driver 0.15.8\n\n\n{\n  \"database\": {\n    \"advisory-count\": 861,\n    \"last-commit\": \"32546e97dfa0ad59baab4166705156d8dd0fbfa8\",\n    \"last-updated\": \"2025-10-27T17:45:41+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 352\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\\n\\n## Possible Alternative(s)\\n\\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdrive-macros",
      "count": 1,
      "raw_reports": [
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=rdrive-macros, checker=Lockbud\n// toolchain=nightly, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/rdrive-macros\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none \n// timestamp=2025-10-28 4:49:45.604453394 +08:00:00\n   Compiling syn v2.0.108\n   Compiling rdrive-macros v0.4.1 (/home/runner/check/batch_4/drivercraft/rdrive/rdrive-macros)\nerror[E0658]: `let` expressions in this position are unstable\n  --> rdrive-macros/src/lib.rs:10:12\n   |\n10 |         if let syn::Item::Static(st) = c\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> rdrive-macros/src/lib.rs:11:16\n   |\n11 |             && let syn::Expr::Struct(expr_struct) = st.expr.as_ref()\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> rdrive-macros/src/lib.rs:14:20\n   |\n14 |                 if let syn::Member::Named(ident) = &field.member\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> rdrive-macros/src/lib.rs:16:24\n   |\n16 |                     && let syn::Expr::Group(expr_group) = &field.expr\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> rdrive-macros/src/lib.rs:17:24\n   |\n17 |                     && let syn::Expr::Lit(expr_lit) = expr_group.expr.as_ref()\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n  --> rdrive-macros/src/lib.rs:18:24\n   |\n18 |                     && let syn::Lit::Str(lit_str) = &expr_lit.lit\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nFor more information about this error, try `rustc --explain E0658`.\nerror: could not compile `rdrive-macros` (lib) due to 6 previous errors\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Atomvchecker",
    "Outdated",
    "Geiger",
    "Unused Deps",
    "Unformatted"
  ]
}