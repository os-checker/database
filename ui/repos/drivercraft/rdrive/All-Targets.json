{
  "repo": {
    "user": "drivercraft",
    "repo": "rdrive"
  },
  "data": [
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "enumerate",
      "count": 20,
      "raw_reports": [
        {
          "file": "examples/enumerate/src/main.rs",
          "features": "",
          "count": 16,
          "kinds": {
            "Clippy(Error)": [
              "error[E0053]: method `open` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:35:27\n   |\n35 |     fn open(&mut self) -> rdrive::DriverResult {\n   |                           ^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Error>`, found `rdif_base::Error`\n   |\n   = note: expected signature `fn(&mut IrqTest) -> std::result::Result<_, rdif_intc::Box<(dyn std::error::Error + 'static)>>`\n              found signature `fn(&mut IrqTest) -> std::result::Result<_, rdif_base::Error>`\nhelp: change the output type to match the trait\n   |\n35 -     fn open(&mut self) -> rdrive::DriverResult {\n35 +     fn open(&mut self) -> std::result::Result<(), rdif_intc::Box<(dyn std::error::Error + 'static)>> {\n   |\n\n",
              "error[E0053]: method `close` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:39:28\n   |\n39 |     fn close(&mut self) -> rdrive::DriverResult {\n   |                            ^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Error>`, found `rdif_base::Error`\n   |\n   = note: expected signature `fn(&mut IrqTest) -> std::result::Result<_, rdif_intc::Box<(dyn std::error::Error + 'static)>>`\n              found signature `fn(&mut IrqTest) -> std::result::Result<_, rdif_base::Error>`\nhelp: change the output type to match the trait\n   |\n39 -     fn close(&mut self) -> rdrive::DriverResult {\n39 +     fn close(&mut self) -> std::result::Result<(), rdif_intc::Box<(dyn std::error::Error + 'static)>> {\n   |\n\n",
              "error[E0053]: method `irq_enable` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:49:36\n   |\n49 |     fn irq_enable(&mut self, _irq: rdrive::IrqId) {\n   |                                    ^^^^^^^^^^^^^ expected `rdif_intc::IrqId`, found `rdrive::IrqId`\n   |\n   = note: expected signature `fn(&mut IrqTest, rdif_intc::IrqId)`\n              found signature `fn(&mut IrqTest, rdrive::IrqId)`\nhelp: change the parameter type to match the trait\n   |\n49 -     fn irq_enable(&mut self, _irq: rdrive::IrqId) {\n49 +     fn irq_enable(&mut self, _irq: rdif_intc::IrqId) {\n   |\n\n",
              "error[E0053]: method `irq_disable` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:53:37\n   |\n53 |     fn irq_disable(&mut self, _irq: rdrive::IrqId) {\n   |                                     ^^^^^^^^^^^^^ expected `rdif_intc::IrqId`, found `rdrive::IrqId`\n   |\n   = note: expected signature `fn(&mut IrqTest, rdif_intc::IrqId)`\n              found signature `fn(&mut IrqTest, rdrive::IrqId)`\nhelp: change the parameter type to match the trait\n   |\n53 -     fn irq_disable(&mut self, _irq: rdrive::IrqId) {\n53 +     fn irq_disable(&mut self, _irq: rdif_intc::IrqId) {\n   |\n\n",
              "error[E0053]: method `set_priority` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:57:38\n   |\n57 |     fn set_priority(&mut self, _irq: rdrive::IrqId, _priority: usize) {\n   |                                      ^^^^^^^^^^^^^ expected `rdif_intc::IrqId`, found `rdrive::IrqId`\n   |\n   = note: expected signature `fn(&mut IrqTest, rdif_intc::IrqId, _)`\n              found signature `fn(&mut IrqTest, rdrive::IrqId, _)`\nhelp: change the parameter type to match the trait\n   |\n57 -     fn set_priority(&mut self, _irq: rdrive::IrqId, _priority: usize) {\n57 +     fn set_priority(&mut self, _irq: rdif_intc::IrqId, _priority: usize) {\n   |\n\n",
              "error[E0053]: method `set_trigger` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:61:37\n   |\n61 |     fn set_trigger(&mut self, _irq: rdrive::IrqId, _trigger: rdif_intc::Trigger) {\n   |                                     ^^^^^^^^^^^^^ expected `rdif_intc::IrqId`, found `rdrive::IrqId`\n   |\n   = note: expected signature `fn(&mut IrqTest, rdif_intc::IrqId, rdif_intc::Trigger)`\n              found signature `fn(&mut IrqTest, rdrive::IrqId, rdif_intc::Trigger)`\nhelp: change the parameter type to match the trait\n   |\n61 -     fn set_trigger(&mut self, _irq: rdrive::IrqId, _trigger: rdif_intc::Trigger) {\n61 +     fn set_trigger(&mut self, _irq: rdif_intc::IrqId, _trigger: rdif_intc::Trigger) {\n   |\n\n",
              "error[E0053]: method `set_target_cpu` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:65:40\n   |\n65 |     fn set_target_cpu(&mut self, _irq: rdrive::IrqId, _cpu: rdif_intc::CpuId) {\n   |                                        ^^^^^^^^^^^^^ expected `rdif_intc::IrqId`, found `rdrive::IrqId`\n   |\n   = note: expected signature `fn(&mut IrqTest, rdif_intc::IrqId, rdif_intc::CpuId)`\n              found signature `fn(&mut IrqTest, rdrive::IrqId, rdif_intc::CpuId)`\nhelp: change the parameter type to match the trait\n   |\n65 -     fn set_target_cpu(&mut self, _irq: rdrive::IrqId, _cpu: rdif_intc::CpuId) {\n65 +     fn set_target_cpu(&mut self, _irq: rdif_intc::IrqId, _cpu: rdif_intc::CpuId) {\n   |\n\n",
              "error[E0277]: the trait bound `IrqTest: rdrive::intc::Interface` is not satisfied\n  --> examples/enumerate/src/main.rs:82:32\n   |\n82 |     Ok(vec![HardwareKind::Intc(Box::new(IrqTest {}))])\n   |                                ^^^^^^^^^^^^^^^^^^^^ the trait `rdrive::intc::Interface` is not implemented for `IrqTest`\n   |\nnote: there are multiple different versions of crate `rdif_intc` in the dependency graph\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rdif-intc-0.3.0/src/lib.rs:31:1\n   |\n31 | pub trait Interface: DriverGeneric {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this is the required trait\n   |\n  ::: examples/enumerate/src/main.rs:3:5\n   |\n3  | use rdif_intc::IrqConfig;\n   |     --------- one version of crate `rdif_intc` used here, as a direct dependency of the current crate\n4  | use rdrive::{\n   |     ------ one version of crate `rdif_intc` used here, as a dependency of crate `rdrive`\n...\n32 | struct IrqTest {}\n   | -------------- this type doesn't implement the required trait\n   |\n  ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rdif-intc-0.2.0/src/lib.rs:26:1\n   |\n26 | pub trait InterfaceCPU: Send + Sync {\n   | ----------------------------------- this is the found trait\n   = help: you can use `cargo tree` to explore your dependency tree\n   = note: required for the cast from `rdif_intc::Box<IrqTest>` to `rdif_intc::Box<(dyn rdrive::intc::Interface + 'static)>`\n\n"
            ],
            "Mirai": [
              "error[E0053]: method `open` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:35:27\n   |\n35 |     fn open(&mut self) -> rdrive::DriverResult {\n   |                           ^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Error>`, found `rdif_base::Error`\n   |\n   = note: expected signature `fn(&mut IrqTest) -> std::result::Result<_, rdif_intc::Box<(dyn std::error::Error + 'static)>>`\n              found signature `fn(&mut IrqTest) -> std::result::Result<_, rdif_base::Error>`\nhelp: change the output type to match the trait\n   |\n35 |     fn open(&mut self) -> std::result::Result<(), rdif_intc::Box<(dyn std::error::Error + 'static)>> {\n   |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
              "error[E0053]: method `close` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:39:28\n   |\n39 |     fn close(&mut self) -> rdrive::DriverResult {\n   |                            ^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Error>`, found `rdif_base::Error`\n   |\n   = note: expected signature `fn(&mut IrqTest) -> std::result::Result<_, rdif_intc::Box<(dyn std::error::Error + 'static)>>`\n              found signature `fn(&mut IrqTest) -> std::result::Result<_, rdif_base::Error>`\nhelp: change the output type to match the trait\n   |\n39 |     fn close(&mut self) -> std::result::Result<(), rdif_intc::Box<(dyn std::error::Error + 'static)>> {\n   |                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
              "error[E0053]: method `irq_enable` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:49:36\n   |\n49 |     fn irq_enable(&mut self, _irq: rdrive::IrqId) {\n   |                                    ^^^^^^^^^^^^^ expected `rdif_intc::IrqId`, found `rdrive::IrqId`\n   |\n   = note: expected signature `fn(&mut IrqTest, rdif_intc::IrqId)`\n              found signature `fn(&mut IrqTest, rdrive::IrqId)`\nhelp: change the parameter type to match the trait\n   |\n49 |     fn irq_enable(&mut self, _irq: rdif_intc::IrqId) {\n   |                                    ~~~~~~~~~~~~~~~~\n\n",
              "error[E0053]: method `irq_disable` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:53:37\n   |\n53 |     fn irq_disable(&mut self, _irq: rdrive::IrqId) {\n   |                                     ^^^^^^^^^^^^^ expected `rdif_intc::IrqId`, found `rdrive::IrqId`\n   |\n   = note: expected signature `fn(&mut IrqTest, rdif_intc::IrqId)`\n              found signature `fn(&mut IrqTest, rdrive::IrqId)`\nhelp: change the parameter type to match the trait\n   |\n53 |     fn irq_disable(&mut self, _irq: rdif_intc::IrqId) {\n   |                                     ~~~~~~~~~~~~~~~~\n\n",
              "error[E0053]: method `set_priority` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:57:38\n   |\n57 |     fn set_priority(&mut self, _irq: rdrive::IrqId, _priority: usize) {\n   |                                      ^^^^^^^^^^^^^ expected `rdif_intc::IrqId`, found `rdrive::IrqId`\n   |\n   = note: expected signature `fn(&mut IrqTest, rdif_intc::IrqId, _)`\n              found signature `fn(&mut IrqTest, rdrive::IrqId, _)`\nhelp: change the parameter type to match the trait\n   |\n57 |     fn set_priority(&mut self, _irq: rdif_intc::IrqId, _priority: usize) {\n   |                                      ~~~~~~~~~~~~~~~~\n\n",
              "error[E0053]: method `set_trigger` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:61:37\n   |\n61 |     fn set_trigger(&mut self, _irq: rdrive::IrqId, _trigger: rdif_intc::Trigger) {\n   |                                     ^^^^^^^^^^^^^ expected `rdif_intc::IrqId`, found `rdrive::IrqId`\n   |\n   = note: expected signature `fn(&mut IrqTest, rdif_intc::IrqId, rdif_intc::Trigger)`\n              found signature `fn(&mut IrqTest, rdrive::IrqId, rdif_intc::Trigger)`\nhelp: change the parameter type to match the trait\n   |\n61 |     fn set_trigger(&mut self, _irq: rdif_intc::IrqId, _trigger: rdif_intc::Trigger) {\n   |                                     ~~~~~~~~~~~~~~~~\n\n",
              "error[E0053]: method `set_target_cpu` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:65:40\n   |\n65 |     fn set_target_cpu(&mut self, _irq: rdrive::IrqId, _cpu: rdif_intc::CpuId) {\n   |                                        ^^^^^^^^^^^^^ expected `rdif_intc::IrqId`, found `rdrive::IrqId`\n   |\n   = note: expected signature `fn(&mut IrqTest, rdif_intc::IrqId, rdif_intc::CpuId)`\n              found signature `fn(&mut IrqTest, rdrive::IrqId, rdif_intc::CpuId)`\nhelp: change the parameter type to match the trait\n   |\n65 |     fn set_target_cpu(&mut self, _irq: rdif_intc::IrqId, _cpu: rdif_intc::CpuId) {\n   |                                        ~~~~~~~~~~~~~~~~\n\n",
              "error[E0277]: the trait bound `IrqTest: rdrive::intc::Interface` is not satisfied\n  --> examples/enumerate/src/main.rs:82:32\n   |\n82 |     Ok(vec![HardwareKind::Intc(Box::new(IrqTest {}))])\n   |                                ^^^^^^^^^^^^^^^^^^^^ the trait `rdrive::intc::Interface` is not implemented for `IrqTest`\n   |\nnote: there are multiple different versions of crate `rdif_intc` in the dependency graph\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rdif-intc-0.3.0/src/lib.rs:31:1\n   |\n31 | pub trait Interface: DriverGeneric {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this is the required trait\n   |\n  ::: examples/enumerate/src/main.rs:3:5\n   |\n3  | use rdif_intc::IrqConfig;\n   |     --------- one version of crate `rdif_intc` used here, as a direct dependency of the current crate\n4  | use rdrive::{\n   |     ------ one version of crate `rdif_intc` used here, as a dependency of crate `rdrive`\n...\n32 | struct IrqTest {}\n   | -------------- this type doesn't implement the required trait\n   |\n  ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rdif-intc-0.2.0/src/lib.rs:26:1\n   |\n26 | pub trait InterfaceCPU: Send + Sync {\n   | ----------------------------------- this is the found trait\n   = help: you can use `cargo tree` to explore your dependency tree\n   = note: required for the cast from `rdif_intc::Box<IrqTest>` to `rdif_intc::Box<(dyn rdrive::intc::Interface + 'static)>`\n\n"
            ]
          }
        },
        {
          "file": "(virtual) clippy",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=enumerate, checker=Clippy\n// toolchain=nightly, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/examples/enumerate\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu  --no-deps\n// timestamp=2025-03-28 4:27:03.941220568 +08:00:00\n   Compiling proc-macro2 v1.0.94\n   Compiling unicode-ident v1.0.18\n    Checking memchr v2.7.4\n   Compiling autocfg v1.4.0\n    Checking regex-syntax v0.8.5\n    Checking aho-corasick v1.1.3\n   Compiling lock_api v0.4.12\n    Checking rdif-base v0.2.0\n   Compiling quote v1.0.40\n   Compiling syn v2.0.100\n   Compiling thiserror v2.0.12\n    Checking utf8parse v0.2.2\n    Checking scopeguard v1.2.0\n    Checking log v0.4.27\n    Checking regex-automata v0.4.9\n    Checking anstyle-parse v0.2.6\n    Checking colorchoice v1.0.3\n    Checking anstyle v1.0.10\n    Checking is_terminal_polyfill v1.70.1\n    Checking anstyle-query v1.1.2\n    Checking spin v0.9.8\n    Checking anstream v0.6.18\n    Checking rdif-intc v0.3.0\n    Checking rdif-power v0.2.0\n    Checking rdif-timer v0.2.0\n    Checking fdt-parser v0.4.10\n    Checking rdif-base v0.1.4\n    Checking jiff v0.2.5\n    Checking rdif-intc v0.2.0\n    Checking regex v1.11.1\n    Checking env_filter v0.1.3\n   Compiling thiserror-impl v2.0.12\n    Checking env_logger v0.11.7\n    Checking rdrive v0.4.0 (/home/runner/check/batch_4/drivercraft/rdrive/rdrive)\n    Checking enumerate v0.1.0 (/home/runner/check/batch_4/drivercraft/rdrive/examples/enumerate)\nerror: could not compile `enumerate` (bin \"enumerate\") due to 8 previous errors\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=enumerate, checker=Lockbud\n// toolchain=nightly, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/examples/enumerate\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-linux-gnu \n// timestamp=2025-03-28 4:28:11.203633356 +08:00:00\n   Compiling proc-macro2 v1.0.94\n   Compiling unicode-ident v1.0.18\n   Compiling autocfg v1.4.0\n   Compiling memchr v2.7.4\n   Compiling rdif-base v0.2.0\n   Compiling regex-syntax v0.8.5\n   Compiling lock_api v0.4.12\n   Compiling aho-corasick v1.1.3\n   Compiling quote v1.0.40\n   Compiling syn v2.0.100\n   Compiling thiserror v2.0.12\n   Compiling scopeguard v1.2.0\n   Compiling utf8parse v0.2.2\n   Compiling log v0.4.27\n[2025-03-27T20:28:12Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-03-27T20:28:12Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling anstyle-parse v0.2.6\n   Compiling regex-automata v0.4.9\n   Compiling anstyle-query v1.1.2\n   Compiling is_terminal_polyfill v1.70.1\n   Compiling anstyle v1.0.10\n   Compiling colorchoice v1.0.3\n   Compiling spin v0.9.8\n   Compiling anstream v0.6.18\n   Compiling rdif-intc v0.3.0\n   Compiling rdif-timer v0.2.0\n   Compiling rdif-power v0.2.0\n   Compiling rdif-base v0.1.4\n   Compiling fdt-parser v0.4.10\n   Compiling jiff v0.2.5\n   Compiling rdif-intc v0.2.0\n   Compiling regex v1.11.1\n   Compiling thiserror-impl v2.0.12\n   Compiling env_filter v0.1.3\n[2025-03-27T20:28:16Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"regex_automata::util::pool::inner::Pool::<T, F>::get\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.4.9/src/util/pool.rs:525:25: 525:59 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.4.9/src/util/pool.rs:530:17: 530:69 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-03-27T20:28:16Z WARN  lockbud::callbacks] crate env_filter contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling rdrive v0.4.0 (/home/runner/check/batch_4/drivercraft/rdrive/rdrive)\n   Compiling env_logger v0.11.7\n   Compiling enumerate v0.1.0 (/home/runner/check/batch_4/drivercraft/rdrive/examples/enumerate)\nerror[E0053]: method `open` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:35:27\n   |\n35 |     fn open(&mut self) -> rdrive::DriverResult {\n   |                           ^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Error>`, found `rdif_base::Error`\n   |\n   = note: expected signature `fn(&mut IrqTest) -> std::result::Result<_, rdif_intc::Box<(dyn std::error::Error + 'static)>>`\n              found signature `fn(&mut IrqTest) -> std::result::Result<_, rdif_base::Error>`\nhelp: change the output type to match the trait\n   |\n35 |     fn open(&mut self) -> std::result::Result<(), rdif_intc::Box<(dyn std::error::Error + 'static)>> {\n   |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `close` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:39:28\n   |\n39 |     fn close(&mut self) -> rdrive::DriverResult {\n   |                            ^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Error>`, found `rdif_base::Error`\n   |\n   = note: expected signature `fn(&mut IrqTest) -> std::result::Result<_, rdif_intc::Box<(dyn std::error::Error + 'static)>>`\n              found signature `fn(&mut IrqTest) -> std::result::Result<_, rdif_base::Error>`\nhelp: change the output type to match the trait\n   |\n39 |     fn close(&mut self) -> std::result::Result<(), rdif_intc::Box<(dyn std::error::Error + 'static)>> {\n   |                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `irq_enable` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:49:36\n   |\n49 |     fn irq_enable(&mut self, _irq: rdrive::IrqId) {\n   |                                    ^^^^^^^^^^^^^ expected `rdif_intc::IrqId`, found `rdrive::IrqId`\n   |\n   = note: expected signature `fn(&mut IrqTest, rdif_intc::IrqId)`\n              found signature `fn(&mut IrqTest, rdrive::IrqId)`\nhelp: change the parameter type to match the trait\n   |\n49 |     fn irq_enable(&mut self, _irq: rdif_intc::IrqId) {\n   |                                    ~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `irq_disable` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:53:37\n   |\n53 |     fn irq_disable(&mut self, _irq: rdrive::IrqId) {\n   |                                     ^^^^^^^^^^^^^ expected `rdif_intc::IrqId`, found `rdrive::IrqId`\n   |\n   = note: expected signature `fn(&mut IrqTest, rdif_intc::IrqId)`\n              found signature `fn(&mut IrqTest, rdrive::IrqId)`\nhelp: change the parameter type to match the trait\n   |\n53 |     fn irq_disable(&mut self, _irq: rdif_intc::IrqId) {\n   |                                     ~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `set_priority` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:57:38\n   |\n57 |     fn set_priority(&mut self, _irq: rdrive::IrqId, _priority: usize) {\n   |                                      ^^^^^^^^^^^^^ expected `rdif_intc::IrqId`, found `rdrive::IrqId`\n   |\n   = note: expected signature `fn(&mut IrqTest, rdif_intc::IrqId, _)`\n              found signature `fn(&mut IrqTest, rdrive::IrqId, _)`\nhelp: change the parameter type to match the trait\n   |\n57 |     fn set_priority(&mut self, _irq: rdif_intc::IrqId, _priority: usize) {\n   |                                      ~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `set_trigger` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:61:37\n   |\n61 |     fn set_trigger(&mut self, _irq: rdrive::IrqId, _trigger: rdif_intc::Trigger) {\n   |                                     ^^^^^^^^^^^^^ expected `rdif_intc::IrqId`, found `rdrive::IrqId`\n   |\n   = note: expected signature `fn(&mut IrqTest, rdif_intc::IrqId, rdif_intc::Trigger)`\n              found signature `fn(&mut IrqTest, rdrive::IrqId, rdif_intc::Trigger)`\nhelp: change the parameter type to match the trait\n   |\n61 |     fn set_trigger(&mut self, _irq: rdif_intc::IrqId, _trigger: rdif_intc::Trigger) {\n   |                                     ~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `set_target_cpu` has an incompatible type for trait\n  --> examples/enumerate/src/main.rs:65:40\n   |\n65 |     fn set_target_cpu(&mut self, _irq: rdrive::IrqId, _cpu: rdif_intc::CpuId) {\n   |                                        ^^^^^^^^^^^^^ expected `rdif_intc::IrqId`, found `rdrive::IrqId`\n   |\n   = note: expected signature `fn(&mut IrqTest, rdif_intc::IrqId, rdif_intc::CpuId)`\n              found signature `fn(&mut IrqTest, rdrive::IrqId, rdif_intc::CpuId)`\nhelp: change the parameter type to match the trait\n   |\n65 |     fn set_target_cpu(&mut self, _irq: rdif_intc::IrqId, _cpu: rdif_intc::CpuId) {\n   |                                        ~~~~~~~~~~~~~~~~\n\nerror[E0277]: the trait bound `IrqTest: rdrive::intc::Interface` is not satisfied\n  --> examples/enumerate/src/main.rs:82:32\n   |\n82 |     Ok(vec![HardwareKind::Intc(Box::new(IrqTest {}))])\n   |                                ^^^^^^^^^^^^^^^^^^^^ the trait `rdrive::intc::Interface` is not implemented for `IrqTest`\n   |\nnote: there are multiple different versions of crate `rdif_intc` in the dependency graph\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rdif-intc-0.3.0/src/lib.rs:31:1\n   |\n31 | pub trait Interface: DriverGeneric {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this is the required trait\n   |\n  ::: examples/enumerate/src/main.rs:3:5\n   |\n3  | use rdif_intc::IrqConfig;\n   |     --------- one version of crate `rdif_intc` used here, as a direct dependency of the current crate\n4  | use rdrive::{\n   |     ------ one version of crate `rdif_intc` used here, as a dependency of crate `rdrive`\n...\n32 | struct IrqTest {}\n   | -------------- this type doesn't implement the required trait\n   |\n  ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rdif-intc-0.2.0/src/lib.rs:26:1\n   |\n26 | pub trait InterfaceCPU: Send + Sync {\n   | ----------------------------------- this is the found trait\n   = help: you can use `cargo tree` to explore your dependency tree\n   = note: required for the cast from `rdif_intc::Box<IrqTest>` to `rdif_intc::Box<(dyn rdrive::intc::Interface + 'static)>`\n\nSome errors have detailed explanations: E0053, E0277.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `enumerate` (bin \"enumerate\") due to 8 previous errors\n"
            ]
          }
        },
        {
          "file": "(virtual) mirai",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=enumerate, checker=Mirai\n// toolchain=nightly, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/examples/enumerate\n// cmd=cargo +nightly-2025-01-10 mirai --target x86_64-unknown-linux-gnu \n// timestamp=2025-03-28 4:27:30.273093407 +08:00:00\n   Compiling proc-macro2 v1.0.94\n   Compiling unicode-ident v1.0.18\n    Checking memchr v2.7.4\n   Compiling autocfg v1.4.0\n    Checking regex-syntax v0.8.5\n    Checking aho-corasick v1.1.3\n   Compiling lock_api v0.4.12\n    Checking rdif-base v0.2.0\n   Compiling quote v1.0.40\n   Compiling syn v2.0.100\n    Checking log v0.4.27\n   Compiling thiserror v2.0.12\n    Checking scopeguard v1.2.0\n    Checking utf8parse v0.2.2\n    Checking anstyle-parse v0.2.6\n    Checking regex-automata v0.4.9\n    Checking anstyle-query v1.1.2\n    Checking is_terminal_polyfill v1.70.1\n    Checking colorchoice v1.0.3\n    Checking anstyle v1.0.10\n    Checking spin v0.9.8\n    Checking anstream v0.6.18\n    Checking rdif-power v0.2.0\n    Checking rdif-timer v0.2.0\n    Checking rdif-intc v0.3.0\n    Checking fdt-parser v0.4.10\n    Checking jiff v0.2.5\n    Checking rdif-base v0.1.4\n    Checking rdif-intc v0.2.0\n    Checking regex v1.11.1\n    Checking env_filter v0.1.3\n   Compiling thiserror-impl v2.0.12\n    Checking rdrive v0.4.0 (/home/runner/check/batch_4/drivercraft/rdrive/rdrive)\n    Checking env_logger v0.11.7\n    Checking enumerate v0.1.0 (/home/runner/check/batch_4/drivercraft/rdrive/examples/enumerate)\nerror: could not compile `enumerate` (bin \"enumerate\") due to 8 previous errors\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=enumerate, checker=Outdated\ntoolchain=nightly, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/examples/enumerate\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-03-28 4:28:30.532211121 +08:00:00\n\nName       Project  Compat  Latest  Kind    Platform\n----       -------  ------  ------  ----    --------\nrdif-intc  0.2.0    ---     0.3.0   Normal  ---\n"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdif-serial",
      "count": 3,
      "raw_reports": [
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=rdif-serial, checker=SemverChecks\n// toolchain=nightly, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-serial\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \n// timestamp=2025-03-28 4:27:17.194051207 +08:00:00\n    Building rdif-serial v0.1.0 (current)\n       Built [   0.270s] (current)\n     Parsing rdif-serial v0.1.0 (current)\n      Parsed [   0.001s] (current)\nerror: rdif-serial not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=rdif-serial, checker=SemverChecks\ntoolchain=nightly, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-serial\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \ntimestamp=2025-03-28 4:27:17.776676051 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building rdif-serial v0.1.0 (current)\n       Built [   0.270s] (current)\n     Parsing rdif-serial v0.1.0 (current)\n      Parsed [   0.001s] (current)\nerror: rdif-serial not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        },
        {
          "file": "src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-serial/src/lib.rs (original lines from 4 to 4)\n+\n"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdrive",
      "count": 2,
      "raw_reports": [
        {
          "file": "(virtual) mirai",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=rdrive, checker=Mirai\n// toolchain=nightly, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/rdrive\n// cmd=cargo +nightly-2025-01-10 mirai --target x86_64-unknown-linux-gnu \n// timestamp=2025-03-28 4:27:36.916583549 +08:00:00\n    Checking log v0.4.27\n    Checking rdrive v0.4.0 (/home/runner/check/batch_4/drivercraft/rdrive/rdrive)\nerror: could not compile `rdrive` (lib)\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.cargo/bin/cargo-mirai /home/runner/.rustup/toolchains/nightly-2025-01-10-x86_64-unknown-linux-gnu/bin/rustc --crate-name rdrive --edition=2024 rdrive/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=bc9dd894a9625a11 -C extra-filename=-92032b3d7d6590e1 --out-dir /home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps --target x86_64-unknown-linux-gnu -L dependency=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps -L dependency=/home/runner/check/batch_4/drivercraft/rdrive/target/debug/deps --extern fdt_parser=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/libfdt_parser-a54b78e6d0a0ac5b.rmeta --extern log=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/liblog-db8057b4c6ec239b.rmeta --extern rdif_base=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_base-0cb69a72d0703e95.rmeta --extern rdif_intc=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_intc-54b81ce331c3436d.rmeta --extern rdif_power=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_power-e8875c809a90c2d3.rmeta --extern rdif_timer=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_timer-6278848cdb9a1cc7.rmeta --extern spin=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/libspin-0ea1d3e5a5b6602b.rmeta --extern thiserror=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/libthiserror-e3d05c7438a703e7.rmeta --cfg mirai -Z always_encode_mir` (exit status: 1)\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=rdrive, checker=Outdated\ntoolchain=nightly, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/rdrive\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-03-28 4:28:32.663310218 +08:00:00\n\nName  Project  Compat  Latest  Kind    Platform\n----  -------  ------  ------  ----    --------\nspin  0.9.8    ---     0.10.0  Normal  ---\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Outdated",
    "Geiger",
    "Unformatted"
  ]
}