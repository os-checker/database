{
  "repo": {
    "user": "drivercraft",
    "repo": "rdrive"
  },
  "data": [
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdrive",
      "count": 7,
      "raw_reports": [
        {
          "file": "src/register/mod.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_4/drivercraft/rdrive/rdrive/src/register/mod.rs (original lines from 123 to 123)\n-        self.registers.insert(\n+        self.registers.insert(id, DriverRegisterData {\n",
              "file: /home/runner/check/batch_4/drivercraft/rdrive/rdrive/src/register/mod.rs (original lines from 125 to 130)\n-            DriverRegisterData {\n-                id,\n-                register,\n-                probed: false,\n-            },\n-        );\n+            register,\n+            probed: false,\n+        });\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "(virtual) mirai",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=rdrive, checker=Mirai\n// toolchain=nightly, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/rdrive\n// cmd=cargo +nightly-2025-01-10 mirai --target x86_64-unknown-linux-gnu \n// timestamp=2025-05-30 4:33:41.78626848 +08:00:00\n    Checking log v0.4.27\n    Checking rdrive v0.11.0 (/home/runner/check/batch_4/drivercraft/rdrive/rdrive)\nerror: could not compile `rdrive` (lib)\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.cargo/bin/cargo-mirai /home/runner/.rustup/toolchains/nightly-2025-01-10-x86_64-unknown-linux-gnu/bin/rustc --crate-name rdrive --edition=2024 rdrive/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=759f57d5f1ed591e -C extra-filename=-232b4c40d1db5737 --out-dir /home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps --target x86_64-unknown-linux-gnu -L dependency=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps -L dependency=/home/runner/check/batch_4/drivercraft/rdrive/target/debug/deps --extern fdt_parser=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/libfdt_parser-1f2338180bf6a786.rmeta --extern log=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/liblog-db8057b4c6ec239b.rmeta --extern paste=/home/runner/check/batch_4/drivercraft/rdrive/target/debug/deps/libpaste-ac502cfd392638e9.so --extern rdif_base=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_base-7a5780e8b258ec8e.rmeta --extern rdif_block=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_block-b9e980dc21ce82f1.rmeta --extern rdif_clk=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_clk-b318d593b35deaf9.rmeta --extern rdif_intc=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_intc-f71421fd78428ff7.rmeta --extern rdif_power=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_power-34b667be295fcbf5.rmeta --extern rdif_serial=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_serial-599dd6c1e65fe185.rmeta --extern rdif_systick=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_systick-baee765d7e5c5439.rmeta --extern rdrive_macros=/home/runner/check/batch_4/drivercraft/rdrive/target/debug/deps/librdrive_macros-2cb9a1f3e0117eed.so --extern spin=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/libspin-f285e0d3588f2c67.rmeta --extern thiserror=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/libthiserror-da980d7cd0a937b0.rmeta --cfg mirai -Z always_encode_mir` (exit status: 1)\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-29T20:34:31Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-29T20:34:31Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n[2025-05-29T20:34:31Z WARN  lockbud::callbacks] [\n      {\n        \"DoubleLock\": {\n          \"bug_kind\": \"DoubleLock\",\n          \"possibility\": \"Probably\",\n          \"diagnosis\": {\n            \"first_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n            \"first_lock_span\": \"rdrive/src/lib.rs:40:9: 40:14 (#0)\",\n            \"second_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n            \"second_lock_span\": \"rdrive/src/lib.rs:48:9: 48:10 (#0)\",\n            \"callchains\": [\n              [\n                [\n                  \"rdrive/src/lib.rs:41:5: 41:45 (#0)\"\n                ],\n                [\n                  \"rdrive/src/lib.rs:93:39: 93:63 (#0)\"\n                ],\n                [\n                  \"rdrive/src/manager.rs:29:9: 29:47 (#0)\"\n                ],\n                [\n                  \"rdrive/src/probe/mod.rs:53:31: 53:56 (#0)\"\n                ],\n                [],\n                [\n                  \"rdrive/src/lib.rs:149:9: 156:11 (#81)\"\n                ]\n              ]\n            ]\n          },\n          \"explanation\": \"The first lock is not released when acquiring the second lock\"\n        }\n      },\n      {\n        \"DoubleLock\": {\n          \"bug_kind\": \"DoubleLock\",\n          \"possibility\": \"Probably\",\n          \"diagnosis\": {\n            \"first_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n            \"first_lock_span\": \"rdrive/src/lib.rs:40:9: 40:14 (#0)\",\n            \"second_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n            \"second_lock_span\": \"rdrive/src/lib.rs:48:9: 48:10 (#0)\",\n            \"callchains\": [\n              [\n                [\n                  \"rdrive/src/lib.rs:41:5: 41:45 (#0)\"\n                ],\n                [\n                  \"rdrive/src/lib.rs:93:39: 93:63 (#0)\"\n                ],\n                [\n                  \"rdrive/src/manager.rs:29:9: 29:47 (#0)\"\n                ],\n                [\n                  \"rdrive/src/probe/mod.rs:53:31: 53:56 (#0)\"\n                ],\n                [],\n                [\n                  \"rdrive/src/lib.rs:149:9: 156:11 (#81)\"\n                ]\n              ]\n            ]\n          },\n          \"explanation\": \"The first lock is not released when acquiring the second lock\"\n        }\n      }\n    ]\n[2025-05-29T20:34:31Z WARN  lockbud::callbacks] crate rdrive contains bugs: { probably: 2, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 0 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "rdrive/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"DoubleLock\",\n  \"possibility\": \"Probably\",\n  \"diagnosis\": {\n    \"first_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n    \"first_lock_span\": \"rdrive/src/lib.rs:40:9: 40:14 (#0)\",\n    \"second_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n    \"second_lock_span\": \"rdrive/src/lib.rs:48:9: 48:10 (#0)\",\n    \"callchains\": [\n      [\n        [\n          \"rdrive/src/lib.rs:41:5: 41:45 (#0)\"\n        ],\n        [\n          \"rdrive/src/lib.rs:93:39: 93:63 (#0)\"\n        ],\n        [\n          \"rdrive/src/manager.rs:29:9: 29:47 (#0)\"\n        ],\n        [\n          \"rdrive/src/probe/mod.rs:53:31: 53:56 (#0)\"\n        ],\n        [],\n        [\n          \"rdrive/src/lib.rs:149:9: 156:11 (#81)\"\n        ]\n      ]\n    ]\n  },\n  \"explanation\": \"The first lock is not released when acquiring the second lock\"\n}"
            ]
          }
        },
        {
          "file": "rdrive/src/probe/fdt/mod.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: this `if` statement can be collapsed\n   --> rdrive/src/probe/fdt/mod.rs:93:13\n    |\n93  | /             if let Some(parent) = irq_parent {\n94  | |                 if let Some(raws) = register.node.interrupts() {\n95  | |                     match get_dev!(parent, Intc) {\n96  | |                         Some(intc) => {\n...   |\n116 | |             }\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n    = note: `#[warn(clippy::collapsible_if)]` on by default\nhelp: collapse nested if block\n    |\n93  ~             if let Some(parent) = irq_parent\n94  ~                 && let Some(raws) = register.node.interrupts() {\n95  |                     match get_dev!(parent, Intc) {\n...\n114 |                     }\n115 ~                 }\n    |\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "enumerate",
      "count": 6,
      "raw_reports": [
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.4.9/src/util/pool.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"regex_automata::util::pool::inner::Pool::<T, F>::get\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.4.9/src/util/pool.rs:525:25: 525:59 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.4.9/src/util/pool.rs:530:17: 530:69 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_4/drivercraft/rdrive/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n└── rdrive 0.11.0\n    └── enumerate 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 98\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-29T20:34:17Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-29T20:34:17Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n[2025-05-29T20:34:19Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"regex_automata::util::pool::inner::Pool::<T, F>::get\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.4.9/src/util/pool.rs:525:25: 525:59 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.4.9/src/util/pool.rs:530:17: 530:69 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-29T20:34:19Z WARN  lockbud::callbacks] crate env_filter contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n[2025-05-29T20:34:23Z WARN  lockbud::callbacks] [\n      {\n        \"DoubleLock\": {\n          \"bug_kind\": \"DoubleLock\",\n          \"possibility\": \"Probably\",\n          \"diagnosis\": {\n            \"first_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n            \"first_lock_span\": \"rdrive/src/lib.rs:40:9: 40:14 (#0)\",\n            \"second_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n            \"second_lock_span\": \"rdrive/src/lib.rs:48:9: 48:10 (#0)\",\n            \"callchains\": [\n              [\n                [\n                  \"rdrive/src/lib.rs:41:5: 41:45 (#0)\"\n                ],\n                [\n                  \"rdrive/src/lib.rs:93:39: 93:63 (#0)\"\n                ],\n                [\n                  \"rdrive/src/manager.rs:29:9: 29:47 (#0)\"\n                ],\n                [\n                  \"rdrive/src/probe/mod.rs:53:31: 53:56 (#0)\"\n                ],\n                [],\n                [\n                  \"rdrive/src/lib.rs:149:9: 156:11 (#81)\"\n                ]\n              ]\n            ]\n          },\n          \"explanation\": \"The first lock is not released when acquiring the second lock\"\n        }\n      },\n      {\n        \"DoubleLock\": {\n          \"bug_kind\": \"DoubleLock\",\n          \"possibility\": \"Probably\",\n          \"diagnosis\": {\n            \"first_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n            \"first_lock_span\": \"rdrive/src/lib.rs:40:9: 40:14 (#0)\",\n            \"second_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n            \"second_lock_span\": \"rdrive/src/lib.rs:48:9: 48:10 (#0)\",\n            \"callchains\": [\n              [\n                [\n                  \"rdrive/src/lib.rs:41:5: 41:45 (#0)\"\n                ],\n                [\n                  \"rdrive/src/lib.rs:93:39: 93:63 (#0)\"\n                ],\n                [\n                  \"rdrive/src/manager.rs:29:9: 29:47 (#0)\"\n                ],\n                [\n                  \"rdrive/src/probe/mod.rs:53:31: 53:56 (#0)\"\n                ],\n                [],\n                [\n                  \"rdrive/src/lib.rs:149:9: 156:11 (#81)\"\n                ]\n              ]\n            ]\n          },\n          \"explanation\": \"The first lock is not released when acquiring the second lock\"\n        }\n      }\n    ]\n[2025-05-29T20:34:23Z WARN  lockbud::callbacks] crate rdrive contains bugs: { probably: 2, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 0 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "examples/enumerate/src/timer.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: this `if` statement can be collapsed\n  --> examples/enumerate/src/timer.rs:25:5\n   |\n25 | /     if let Some(parent) = desc.irq_parent {\n26 | |         if let Some(intc) = get_dev!(parent, Intc) {\n27 | |             debug!(\"intc : {}\", intc.descriptor.name);\n28 | |         }\n29 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n   = note: `#[warn(clippy::collapsible_if)]` on by default\nhelp: collapse nested if block\n   |\n25 ~     if let Some(parent) = desc.irq_parent\n26 ~         && let Some(intc) = get_dev!(parent, Intc) {\n27 |             debug!(\"intc : {}\", intc.descriptor.name);\n28 ~         }\n   |\n\n"
            ]
          }
        },
        {
          "file": "rdrive/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"DoubleLock\",\n  \"possibility\": \"Probably\",\n  \"diagnosis\": {\n    \"first_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n    \"first_lock_span\": \"rdrive/src/lib.rs:40:9: 40:14 (#0)\",\n    \"second_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n    \"second_lock_span\": \"rdrive/src/lib.rs:48:9: 48:10 (#0)\",\n    \"callchains\": [\n      [\n        [\n          \"rdrive/src/lib.rs:41:5: 41:45 (#0)\"\n        ],\n        [\n          \"rdrive/src/lib.rs:93:39: 93:63 (#0)\"\n        ],\n        [\n          \"rdrive/src/manager.rs:29:9: 29:47 (#0)\"\n        ],\n        [\n          \"rdrive/src/probe/mod.rs:53:31: 53:56 (#0)\"\n        ],\n        [],\n        [\n          \"rdrive/src/lib.rs:149:9: 156:11 (#81)\"\n        ]\n      ]\n    ]\n  },\n  \"explanation\": \"The first lock is not released when acquiring the second lock\"\n}"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdrive-macros",
      "count": 5,
      "raw_reports": [
        {
          "file": "rdrive-macros/src/lib.rs",
          "features": "",
          "count": 5,
          "kinds": {
            "Clippy(Warn)": [
              "warning: this `if` statement can be collapsed\n  --> rdrive-macros/src/lib.rs:10:9\n   |\n10 | /         if let syn::Item::Static(st) = c {\n11 | |             if let syn::Expr::Struct(expr_struct) = st.expr.as_ref() {\n12 | |                 for field in &expr_struct.fields {\n13 | |                     if let syn::Member::Named(ident) = &field.member {\n...  |\n26 | |         }\n   | |_________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n   = note: `#[warn(clippy::collapsible_if)]` on by default\nhelp: collapse nested if block\n   |\n10 ~         if let syn::Item::Static(st) = c\n11 ~             && let syn::Expr::Struct(expr_struct) = st.expr.as_ref() {\n12 |                 for field in &expr_struct.fields {\n...\n24 |                 }\n25 ~             }\n   |\n\n",
              "warning: this `if` statement can be collapsed\n  --> rdrive-macros/src/lib.rs:13:21\n   |\n13 | /                     if let syn::Member::Named(ident) = &field.member {\n14 | |                         if *ident == \"name\" {\n15 | |                             if let syn::Expr::Group(expr_group) = &field.expr {\n16 | |                                 if let syn::Expr::Lit(expr_lit) = expr_group.expr.as_ref() {\n...  |\n23 | |                     }\n   | |_____________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n   |\n13 ~                     if let syn::Member::Named(ident) = &field.member\n14 ~                         && *ident == \"name\" {\n15 |                             if let syn::Expr::Group(expr_group) = &field.expr {\n...\n21 |                             }\n22 ~                         }\n   |\n\n",
              "warning: this `if` statement can be collapsed\n  --> rdrive-macros/src/lib.rs:14:25\n   |\n14 | /                         if *ident == \"name\" {\n15 | |                             if let syn::Expr::Group(expr_group) = &field.expr {\n16 | |                                 if let syn::Expr::Lit(expr_lit) = expr_group.expr.as_ref() {\n17 | |                                     if let syn::Lit::Str(lit_str) = &expr_lit.lit {\n...  |\n22 | |                         }\n   | |_________________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n   |\n14 ~                         if *ident == \"name\"\n15 ~                             && let syn::Expr::Group(expr_group) = &field.expr {\n16 |                                 if let syn::Expr::Lit(expr_lit) = expr_group.expr.as_ref() {\n...\n20 |                                 }\n21 ~                             }\n   |\n\n",
              "warning: this `if` statement can be collapsed\n  --> rdrive-macros/src/lib.rs:15:29\n   |\n15 | / ...                   if let syn::Expr::Group(expr_group) = &field.expr {\n16 | | ...                       if let syn::Expr::Lit(expr_lit) = expr_group.expr.as_ref() {\n17 | | ...                           if let syn::Lit::Str(lit_str) = &expr_lit.lit {\n18 | | ...                               name = lit_str.value();\n...  |\n21 | | ...                   }\n   | |_______________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n   |\n15 ~                             if let syn::Expr::Group(expr_group) = &field.expr\n16 ~                                 && let syn::Expr::Lit(expr_lit) = expr_group.expr.as_ref() {\n17 |                                     if let syn::Lit::Str(lit_str) = &expr_lit.lit {\n18 |                                         name = lit_str.value();\n19 |                                     }\n20 ~                                 }\n   |\n\n",
              "warning: this `if` statement can be collapsed\n  --> rdrive-macros/src/lib.rs:16:33\n   |\n16 | / ...                   if let syn::Expr::Lit(expr_lit) = expr_group.expr.as_ref() {\n17 | | ...                       if let syn::Lit::Str(lit_str) = &expr_lit.lit {\n18 | | ...                           name = lit_str.value();\n19 | | ...                       }\n20 | | ...                   }\n   | |_______________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n   |\n16 ~                                 if let syn::Expr::Lit(expr_lit) = expr_group.expr.as_ref()\n17 ~                                     && let syn::Lit::Str(lit_str) = &expr_lit.lit {\n18 |                                         name = lit_str.value();\n19 ~                                     }\n   |\n\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Outdated",
    "Geiger",
    "Unformatted"
  ]
}