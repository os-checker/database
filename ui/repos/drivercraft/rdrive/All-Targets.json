{
  "repo": {
    "user": "drivercraft",
    "repo": "rdrive"
  },
  "data": [
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "enumerate",
      "count": 5,
      "raw_reports": [
        {
          "file": "examples/enumerate/src/timer.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Mirai": [
              "warning: unused import: `Node`\n --> examples/enumerate/src/timer.rs:6:41\n  |\n6 |     register::{DriverRegister, FdtInfo, Node, ProbeKind, ProbeLevel, ProbePriority},\n  |                                         ^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n"
            ],
            "Clippy(Warn)": [
              "warning: unused import: `Node`\n --> examples/enumerate/src/timer.rs:6:41\n  |\n6 |     register::{DriverRegister, FdtInfo, Node, ProbeKind, ProbeLevel, ProbePriority},\n  |                                         ^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n",
              "warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n  --> examples/enumerate/src/timer.rs:25:5\n   |\n25 | /     match desc.irq_parent {\n26 | |         Some(parent) => match get_dev!(parent, Intc) {\n27 | |             Some(intc) => {\n28 | |                 debug!(\"intc : {}\", intc.descriptor.name);\n...  |\n32 | |         None => {}\n33 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match\n   = note: `#[warn(clippy::single_match)]` on by default\nhelp: try\n   |\n25 ~     if let Some(parent) = desc.irq_parent { match get_dev!(parent, Intc) {\n26 +         Some(intc) => {\n27 +             debug!(\"intc : {}\", intc.descriptor.name);\n28 +         }\n29 +         None => {}\n30 +     } }\n   |\n\n",
              "warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n  --> examples/enumerate/src/timer.rs:26:25\n   |\n26 |           Some(parent) => match get_dev!(parent, Intc) {\n   |  _________________________^\n27 | |             Some(intc) => {\n28 | |                 debug!(\"intc : {}\", intc.descriptor.name);\n...  |\n31 | |         },\n   | |_________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match\nhelp: try\n   |\n26 ~         Some(parent) => if let Some(intc) = get_dev!(parent, Intc) {\n27 +             debug!(\"intc : {}\", intc.descriptor.name);\n28 ~         },\n   |\n\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T03:40:29Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T03:40:29Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n[2025-05-25T03:40:33Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"regex_automata::util::pool::inner::Pool::<T, F>::get\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.4.9/src/util/pool.rs:525:25: 525:59 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.4.9/src/util/pool.rs:530:17: 530:69 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T03:40:33Z WARN  lockbud::callbacks] crate env_filter contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n[2025-05-25T03:40:37Z WARN  lockbud::callbacks] [\n      {\n        \"DoubleLock\": {\n          \"bug_kind\": \"DoubleLock\",\n          \"possibility\": \"Probably\",\n          \"diagnosis\": {\n            \"first_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n            \"first_lock_span\": \"rdrive/src/lib.rs:40:9: 40:14 (#0)\",\n            \"second_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n            \"second_lock_span\": \"rdrive/src/lib.rs:48:9: 48:10 (#0)\",\n            \"callchains\": [\n              [\n                [\n                  \"rdrive/src/lib.rs:41:5: 41:45 (#0)\"\n                ],\n                [\n                  \"rdrive/src/lib.rs:93:39: 93:63 (#0)\"\n                ],\n                [\n                  \"rdrive/src/manager.rs:29:9: 29:47 (#0)\"\n                ],\n                [\n                  \"rdrive/src/probe/mod.rs:53:31: 53:56 (#0)\"\n                ],\n                [],\n                [\n                  \"rdrive/src/lib.rs:149:9: 156:11 (#85)\"\n                ]\n              ]\n            ]\n          },\n          \"explanation\": \"The first lock is not released when acquiring the second lock\"\n        }\n      },\n      {\n        \"DoubleLock\": {\n          \"bug_kind\": \"DoubleLock\",\n          \"possibility\": \"Probably\",\n          \"diagnosis\": {\n            \"first_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n            \"first_lock_span\": \"rdrive/src/lib.rs:40:9: 40:14 (#0)\",\n            \"second_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n            \"second_lock_span\": \"rdrive/src/lib.rs:48:9: 48:10 (#0)\",\n            \"callchains\": [\n              [\n                [\n                  \"rdrive/src/lib.rs:41:5: 41:45 (#0)\"\n                ],\n                [\n                  \"rdrive/src/lib.rs:93:39: 93:63 (#0)\"\n                ],\n                [\n                  \"rdrive/src/manager.rs:29:9: 29:47 (#0)\"\n                ],\n                [\n                  \"rdrive/src/probe/mod.rs:53:31: 53:56 (#0)\"\n                ],\n                [],\n                [\n                  \"rdrive/src/lib.rs:149:9: 156:11 (#85)\"\n                ]\n              ]\n            ]\n          },\n          \"explanation\": \"The first lock is not released when acquiring the second lock\"\n        }\n      }\n    ]\n[2025-05-25T03:40:37Z WARN  lockbud::callbacks] crate rdrive contains bugs: { probably: 2, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 0 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdrive",
      "count": 5,
      "raw_reports": [
        {
          "file": "src/register/mod.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_4/drivercraft/rdrive/rdrive/src/register/mod.rs (original lines from 123 to 123)\n-        self.registers.insert(\n+        self.registers.insert(id, DriverRegisterData {\n",
              "file: /home/runner/check/batch_4/drivercraft/rdrive/rdrive/src/register/mod.rs (original lines from 125 to 130)\n-            DriverRegisterData {\n-                id,\n-                register,\n-                probed: false,\n-            },\n-        );\n+            register,\n+            probed: false,\n+        });\n"
            ]
          }
        },
        {
          "file": "(virtual) mirai",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=rdrive, checker=Mirai\n// toolchain=nightly, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/rdrive\n// cmd=cargo +nightly-2025-01-10 mirai --target x86_64-unknown-linux-gnu \n// timestamp=2025-05-25 11:39:54.554111926 +08:00:00\n    Checking log v0.4.27\n    Checking rdif-block v0.2.0\n    Checking rdif-systick v0.2.1\n    Checking rdif-clk v0.1.0\n    Checking rdif-intc v0.7.1\n    Checking rdif-power v0.3.1\n    Checking rdif-timer v0.3.0\n    Checking rdrive v0.9.1 (/home/runner/check/batch_4/drivercraft/rdrive/rdrive)\nerror: could not compile `rdrive` (lib)\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.cargo/bin/cargo-mirai /home/runner/.rustup/toolchains/nightly-2025-01-10-x86_64-unknown-linux-gnu/bin/rustc --crate-name rdrive --edition=2024 rdrive/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=8dbe42bae6377cbc -C extra-filename=-03370b970f605445 --out-dir /home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps --target x86_64-unknown-linux-gnu -L dependency=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps -L dependency=/home/runner/check/batch_4/drivercraft/rdrive/target/debug/deps --extern fdt_parser=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/libfdt_parser-1f2338180bf6a786.rmeta --extern log=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/liblog-db8057b4c6ec239b.rmeta --extern rdif_base=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_base-4c3bbd53c27de951.rmeta --extern rdif_block=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_block-202e94571042cc71.rmeta --extern rdif_clk=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_clk-26d99efc883f6521.rmeta --extern rdif_intc=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_intc-b94a54ce55180999.rmeta --extern rdif_power=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_power-2991946abc12cd60.rmeta --extern rdif_systick=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_systick-f7ab6ce2ae4fa63c.rmeta --extern rdif_timer=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/librdif_timer-b5f70c650f100e88.rmeta --extern spin=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/libspin-3cd9d8aae3e73d50.rmeta --extern thiserror=/home/runner/check/batch_4/drivercraft/rdrive/target/x86_64-unknown-linux-gnu/debug/deps/libthiserror-a855bcb56e456afc.rmeta --cfg mirai -Z always_encode_mir` (exit status: 1)\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T03:40:42Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T03:40:42Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n[2025-05-25T03:40:42Z WARN  lockbud::callbacks] [\n      {\n        \"DoubleLock\": {\n          \"bug_kind\": \"DoubleLock\",\n          \"possibility\": \"Probably\",\n          \"diagnosis\": {\n            \"first_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n            \"first_lock_span\": \"rdrive/src/lib.rs:40:9: 40:14 (#0)\",\n            \"second_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n            \"second_lock_span\": \"rdrive/src/lib.rs:48:9: 48:10 (#0)\",\n            \"callchains\": [\n              [\n                [\n                  \"rdrive/src/lib.rs:41:5: 41:45 (#0)\"\n                ],\n                [\n                  \"rdrive/src/lib.rs:93:39: 93:63 (#0)\"\n                ],\n                [\n                  \"rdrive/src/manager.rs:29:9: 29:47 (#0)\"\n                ],\n                [\n                  \"rdrive/src/probe/mod.rs:53:31: 53:56 (#0)\"\n                ],\n                [],\n                [\n                  \"rdrive/src/lib.rs:149:9: 156:11 (#85)\"\n                ]\n              ]\n            ]\n          },\n          \"explanation\": \"The first lock is not released when acquiring the second lock\"\n        }\n      },\n      {\n        \"DoubleLock\": {\n          \"bug_kind\": \"DoubleLock\",\n          \"possibility\": \"Probably\",\n          \"diagnosis\": {\n            \"first_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n            \"first_lock_span\": \"rdrive/src/lib.rs:40:9: 40:14 (#0)\",\n            \"second_lock_type\": \"SpinMutex(core::option::Option<manager::Manager>)\",\n            \"second_lock_span\": \"rdrive/src/lib.rs:48:9: 48:10 (#0)\",\n            \"callchains\": [\n              [\n                [\n                  \"rdrive/src/lib.rs:41:5: 41:45 (#0)\"\n                ],\n                [\n                  \"rdrive/src/lib.rs:93:39: 93:63 (#0)\"\n                ],\n                [\n                  \"rdrive/src/manager.rs:29:9: 29:47 (#0)\"\n                ],\n                [\n                  \"rdrive/src/probe/mod.rs:53:31: 53:56 (#0)\"\n                ],\n                [],\n                [\n                  \"rdrive/src/lib.rs:149:9: 156:11 (#85)\"\n                ]\n              ]\n            ]\n          },\n          \"explanation\": \"The first lock is not released when acquiring the second lock\"\n        }\n      }\n    ]\n[2025-05-25T03:40:42Z WARN  lockbud::callbacks] crate rdrive contains bugs: { probably: 2, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 0 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "rdrive/src/probe/fdt/mod.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: this `if` statement can be collapsed\n   --> rdrive/src/probe/fdt/mod.rs:94:13\n    |\n94  | /             if let Some(parent) = irq_parent {\n95  | |                 if let Some(raws) = register.node.interrupts() {\n96  | |                     match get_dev!(parent, Intc) {\n97  | |                         Some(intc) => {\n...   |\n128 | |             }\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n    = note: `#[warn(clippy::collapsible_if)]` on by default\nhelp: collapse nested if block\n    |\n94  ~             if let Some(parent) = irq_parent\n95  ~                 && let Some(raws) = register.node.interrupts() {\n96  |                     match get_dev!(parent, Intc) {\n...\n126 |                     }\n127 ~                 }\n    |\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdif-serial",
      "count": 2,
      "raw_reports": [
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=rdif-serial, checker=SemverChecks\n// toolchain=nightly, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-serial\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \n// timestamp=2025-05-25 11:38:00.550777407 +08:00:00\n    Building rdif-serial v0.1.0 (current)\n       Built [   3.130s] (current)\n     Parsing rdif-serial v0.1.0 (current)\n      Parsed [   0.001s] (current)\nerror: rdif-serial not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=rdif-serial, checker=SemverChecks\ntoolchain=nightly, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_4/drivercraft/rdrive/interface/rdif-serial\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \ntimestamp=2025-05-25 11:38:04.201666599 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building rdif-serial v0.1.0 (current)\n       Built [   3.130s] (current)\n     Parsing rdif-serial v0.1.0 (current)\n      Parsed [   0.001s] (current)\nerror: rdif-serial not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        }
      ]
    },
    {
      "user": "drivercraft",
      "repo": "rdrive",
      "pkg": "rdrive-macro-utils",
      "count": 1,
      "raw_reports": [
        {
          "file": "rdrive-macro-utils/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: this `if` statement can be collapsed\n  --> rdrive-macro-utils/src/lib.rs:22:13\n   |\n22 | /             if let proc_macro2::TokenTree::Ident(i) = t {\n23 | |                 if i == \"name\" {\n24 | |                     it.next();\n25 | |                     if let Some(proc_macro2::TokenTree::Literal(l)) = it.next() {\n...  |\n32 | |             }\n   | |_____________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n   = note: `#[warn(clippy::collapsible_if)]` on by default\nhelp: collapse nested if block\n   |\n22 ~             if let proc_macro2::TokenTree::Ident(i) = t\n23 ~                 && i == \"name\" {\n24 |                     it.next();\n...\n30 |                     }\n31 ~                 }\n   |\n\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Outdated",
    "Geiger",
    "Unformatted"
  ]
}