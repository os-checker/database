{
  "repo": {
    "user": "drivercraft",
    "repo": "CrabUSB"
  },
  "data": [
    {
      "user": "drivercraft",
      "repo": "CrabUSB",
      "pkg": "crab-usb",
      "count": 17,
      "raw_reports": [
        {
          "file": "src/host/xhci/ring/cmd.rs",
          "features": "",
          "count": 8,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unused import: `dma_api::Impl`\n --> src/host/xhci/ring/cmd.rs:2:5\n  |\n2 | use dma_api::Impl;\n  |     ^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n",
              "warning: unused import: `wmb`\n --> src/host/xhci/ring/cmd.rs:3:20\n  |\n3 | use mbarrier::{mb, wmb};\n  |                    ^^^\n\n",
              "warning: unused import: `TrbData`\n  --> src/host/xhci/ring/cmd.rs:18:22\n   |\n18 |         ring::{Ring, TrbData},\n   |                      ^^^^^^^\n\n",
              "warning: struct `CommandRing` is never constructed\n  --> src/host/xhci/ring/cmd.rs:22:12\n   |\n22 | pub struct CommandRing {\n   |            ^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n",
              "warning: struct `Inner` is never constructed\n  --> src/host/xhci/ring/cmd.rs:34:8\n   |\n34 | struct Inner {\n   |        ^^^^^\n\n",
              "warning: associated items `new`, `post_raw`, and `post` are never used\n  --> src/host/xhci/ring/cmd.rs:43:12\n   |\n42 | impl CommandRing {\n   | ---------------- associated items in this implementation\n43 |     pub fn new(reg: XhciRegisters) -> Result<Self> {\n   |            ^^^\n...\n52 |     fn post_raw(&mut self, trb: command::Allowed) -> impl Future<Output = CommandCompletion> {\n   |        ^^^^^^^^\n...\n67 |     pub async fn post(&mut self, trb: command::Allowed) -> Result<CommandCompletion> {\n   |                  ^^^^\n\n",
              "warning: associated items `new`, `post_raw`, and `post` are never used\n  --> src/host/xhci/ring/cmd.rs:43:12\n   |\n42 | impl CommandRing {\n   | ---------------- associated items in this implementation\n43 |     pub fn new(reg: XhciRegisters) -> Result<Self> {\n   |            ^^^\n...\n52 |     fn post_raw(&mut self, trb: command::Allowed) -> impl Future<Output = CommandCompletion> {\n   |        ^^^^^^^^\n...\n67 |     pub async fn post(&mut self, trb: command::Allowed) -> Result<CommandCompletion> {\n   |                  ^^^^\n\n",
              "warning: associated items `new`, `post_raw`, and `post` are never used\n  --> src/host/xhci/ring/cmd.rs:43:12\n   |\n42 | impl CommandRing {\n   | ---------------- associated items in this implementation\n43 |     pub fn new(reg: XhciRegisters) -> Result<Self> {\n   |            ^^^\n...\n52 |     fn post_raw(&mut self, trb: command::Allowed) -> impl Future<Output = CommandCompletion> {\n   |        ^^^^^^^^\n...\n67 |     pub async fn post(&mut self, trb: command::Allowed) -> Result<CommandCompletion> {\n   |                  ^^^^\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=crab-usb, checker=SemverChecks\n// toolchain=nightly, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/CrabUSB\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none \n// timestamp=2025-07-30 4:37:16.650224106 +08:00:00\n    Building crab-usb v0.1.0 (current)\nerror: running cargo-doc on crate 'crab-usb' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling autocfg v1.5.0\n   Compiling crossbeam-utils v0.8.21\n   Compiling syn v1.0.109\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `crossbeam-utils` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate crab-usb v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_4/drivercraft/CrabUSB &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate crab-usb v0.1.0\n"
            ]
          }
        },
        {
          "file": "(virtual) udeps",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=crab-usb, checker=Udeps\n// toolchain=nightly, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/CrabUSB\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target aarch64-unknown-none \n// timestamp=2025-07-30 4:37:31.07508434 +08:00:00\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling autocfg v1.5.0\n   Compiling crossbeam-utils v0.8.21\n   Compiling syn v1.0.109\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `crossbeam-utils` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── xhci 0.9.2\n│   └── crab-usb 0.1.0\n└── rdrive 0.15.3\n    └── sparreal-kernel 0.10.0\n        ├── sparreal-rt 0.10.0\n        │   └── bare-test 0.5.0\n        │       └── crab-usb 0.1.0\n        └── bare-test 0.5.0\n\nCrate:     rustls\nVersion:   0.23.30\nWarning:   yanked\nDependency tree:\nrustls 0.23.30\n├── tokio-rustls 0.26.2\n│   └── hyper-rustls 0.27.7\n│       └── reqwest 0.12.22\n│           └── bindeps-simple 0.2.5\n│               └── pie-boot 0.2.20\n│                   └── sparreal-rt 0.10.0\n│                       └── bare-test 0.5.0\n│                           └── crab-usb 0.1.0\n└── hyper-rustls 0.27.7\n\n\n{\n  \"database\": {\n    \"advisory-count\": 792,\n    \"last-commit\": \"c62e71ad8c5256ffa3cafbb1a8c687db60869e98\",\n    \"last-updated\": \"2025-07-23T15:03:26+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 295\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\\n\\n## Possible Alternative(s)\\n\\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"yanked\": [\n      {\n        \"kind\": \"yanked\",\n        \"package\": {\n          \"name\": \"rustls\",\n          \"version\": \"0.23.30\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"069a8df149a16b1a12dcc31497c3396a173844be3cac4bd40c9e7671fef96671\",\n          \"dependencies\": [\n            {\n              \"name\": \"once_cell\",\n              \"version\": \"1.21.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            },\n            {\n              \"name\": \"rustls-pki-types\",\n              \"version\": \"1.12.0\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            },\n            {\n              \"name\": \"rustls-webpki\",\n              \"version\": \"0.103.4\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            },\n            {\n              \"name\": \"subtle\",\n              \"version\": \"2.6.1\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            },\n            {\n              \"name\": \"zeroize\",\n              \"version\": \"1.8.1\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": null,\n        \"affected\": null,\n        \"versions\": null\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[Lockbud] deadlock detection",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-07-29T20:37:24Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-07-29T20:37:24Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[Udeps] Unused dependencies",
          "features": "",
          "count": 1,
          "kinds": {
            "Unused Deps": [
              "pkg=crab-usb, checker=Udeps\ntoolchain=nightly, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_4/drivercraft/CrabUSB\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target aarch64-unknown-none \ntimestamp=2025-07-30 4:37:31.784867279 +08:00:00\n\n\nstdout:\n\nstderr:\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling autocfg v1.5.0\n   Compiling crossbeam-utils v0.8.21\n   Compiling syn v1.0.109\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `crossbeam-utils` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=crab-usb, checker=Outdated\ntoolchain=nightly, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_4/drivercraft/CrabUSB\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-07-30 4:37:31.074114594 +08:00:00\n\nName  Project  Compat  Latest  Kind         Platform\n----  -------  ------  ------  ----         --------\npcie  0.2.7    ---     0.3.0   Development  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks violation]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=crab-usb, checker=SemverChecks\ntoolchain=nightly, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_4/drivercraft/CrabUSB\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none \ntimestamp=2025-07-30 4:37:17.639609344 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building crab-usb v0.1.0 (current)\nerror: running cargo-doc on crate 'crab-usb' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling autocfg v1.5.0\n   Compiling crossbeam-utils v0.8.21\n   Compiling syn v1.0.109\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `crossbeam-utils` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate crab-usb v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_4/drivercraft/CrabUSB &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate crab-usb v0.1.0\n"
            ]
          }
        },
        {
          "file": "src/host/xhci/def.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_4/drivercraft/CrabUSB/src/host/xhci/def.rs (original lines from 13 to 13)\n-\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Atomvchecker",
    "Outdated",
    "Geiger",
    "Unused Deps",
    "Unformatted"
  ]
}