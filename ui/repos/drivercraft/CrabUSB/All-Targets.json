{
  "repo": {
    "user": "drivercraft",
    "repo": "CrabUSB"
  },
  "data": [
    {
      "user": "drivercraft",
      "repo": "CrabUSB",
      "pkg": "crab-usb",
      "count": 30,
      "raw_reports": [
        {
          "file": "src/host/xhci/mod.rs",
          "features": "",
          "count": 16,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unused import: `dma_api::DVec`\n  --> src/host/xhci/mod.rs:11:5\n   |\n11 | use dma_api::DVec;\n   |     ^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by default\n\n",
              "warning: unused variable: `packet_size`\n   --> src/host/xhci/mod.rs:540:13\n    |\n540 |         let packet_size = data\n    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_packet_size`\n    |\n    = note: `#[warn(unused_variables)]` on by default\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/host/xhci/mod.rs:237:9\n    |\n237 |         debug!(\"Max device slots: {}\", max_slots);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n237 -         debug!(\"Max device slots: {}\", max_slots);\n237 +         debug!(\"Max device slots: {max_slots}\");\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/host/xhci/mod.rs:244:9\n    |\n244 |         debug!(\"DCBAAP: {:X}\", dcbaa_addr);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n244 -         debug!(\"DCBAAP: {:X}\", dcbaa_addr);\n244 +         debug!(\"DCBAAP: {dcbaa_addr:X}\");\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/host/xhci/mod.rs:256:9\n    |\n256 |         debug!(\"CRCR: {:X}\", crcr);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n256 -         debug!(\"CRCR: {:X}\", crcr);\n256 +         debug!(\"CRCR: {crcr:X}\");\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/host/xhci/mod.rs:284:13\n    |\n284 |             debug!(\"ERDP: {:x}\", erdp);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n284 -             debug!(\"ERDP: {:x}\", erdp);\n284 +             debug!(\"ERDP: {erdp:x}\");\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/host/xhci/mod.rs:292:13\n    |\n292 |             debug!(\"ERSTZ: {:x}\", erstz);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n292 -             debug!(\"ERSTZ: {:x}\", erstz);\n292 +             debug!(\"ERSTZ: {erstz:x}\");\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/host/xhci/mod.rs:294:13\n    |\n294 |             debug!(\"ERSTBA: {:X}\", erstba);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n294 -             debug!(\"ERSTBA: {:X}\", erstba);\n294 +             debug!(\"ERSTBA: {erstba:X}\");\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/host/xhci/mod.rs:334:17\n    |\n334 |                 debug!(\"Scratch buf count: {}\", count);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n334 -                 debug!(\"Scratch buf count: {}\", count);\n334 +                 debug!(\"Scratch buf count: {count}\");\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/host/xhci/mod.rs:346:13\n    |\n346 |             debug!(\"Setting up {} scratchpads, at {:#0x}\", buf_count, bus_addr);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n346 -             debug!(\"Setting up {} scratchpads, at {:#0x}\", buf_count, bus_addr);\n346 +             debug!(\"Setting up {buf_count} scratchpads, at {bus_addr:#0x}\");\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/host/xhci/mod.rs:390:13\n    |\n390 |             debug!(\"Port {} start reset\", i,);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n390 -             debug!(\"Port {} start reset\", i,);\n390 +             debug!(\"Port {i} start reset\",);\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/host/xhci/mod.rs:509:9\n    |\n509 |         debug!(\"Slot {} assigned\", slot_id);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n509 -         debug!(\"Slot {} assigned\", slot_id);\n509 +         debug!(\"Slot {slot_id} assigned\");\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/host/xhci/mod.rs:519:9\n    |\n519 |         debug!(\"Slot {} address complete\", slot_id);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n519 -         debug!(\"Slot {} address complete\", slot_id);\n519 +         debug!(\"Slot {slot_id} address complete\");\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/host/xhci/mod.rs:562:9\n    |\n562 |         trace!(\"ring0: {:#x}\", transfer_ring_0_addr);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n562 -         trace!(\"ring0: {:#x}\", transfer_ring_0_addr);\n562 +         trace!(\"ring0: {transfer_ring_0_addr:#x}\");\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/host/xhci/mod.rs:615:9\n    |\n615 |         debug!(\"Address slot ok {:?}\", result);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n615 -         debug!(\"Address slot ok {:?}\", result);\n615 +         debug!(\"Address slot ok {result:?}\");\n    |\n\n"
            ],
            "Unformatted": [
              "file: /home/runner/check/batch_4/drivercraft/CrabUSB/src/host/xhci/mod.rs (original lines from 540 to 541)\n-        let packet_size = data\n-            .last().map(|&len| if len == 0 { 8u8 } else { len });\n+        let packet_size = data.last().map(|&len| if len == 0 { 8u8 } else { len });\n"
            ]
          }
        },
        {
          "file": "src/host/xhci/event.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_4/drivercraft/CrabUSB/src/host/xhci/event.rs (original lines from 125 to 127)\n-                Allowed::TransferEvent(c)=>{\n-                    \n-                }\n+                Allowed::TransferEvent(c) => {}\n"
            ],
            "Clippy(Warn)": [
              "warning: unused variable: `c`\n   --> src/host/xhci/event.rs:125:40\n    |\n125 |                 Allowed::TransferEvent(c)=>{\n    |                                        ^ help: if this is intentional, prefix it with an underscore: `_c`\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/host/xhci/event.rs:105:21\n    |\n105 |                     trace!(\"[EVENT] << {:?} @{:X}\", allowed, addr);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n105 -                     trace!(\"[EVENT] << {:?} @{:X}\", allowed, addr);\n105 +                     trace!(\"[EVENT] << {allowed:?} @{addr:X}\");\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/host/xhci/event.rs:129:21\n    |\n129 |                     debug!(\"unhandled event {:?}\", allowed);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n129 -                     debug!(\"unhandled event {:?}\", allowed);\n129 +                     debug!(\"unhandled event {allowed:?}\");\n    |\n\n"
            ]
          }
        },
        {
          "file": "src/host/xhci/ring.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: variables can be used directly in the `format!` string\n  --> src/host/xhci/ring.rs:78:9\n   |\n78 |         trace!(\"[CMD] >> {:?} @{:X}\", trb, addr);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n78 -         trace!(\"[CMD] >> {:?} @{:X}\", trb, addr);\n78 +         trace!(\"[CMD] >> {trb:?} @{addr:X}\");\n   |\n\n",
              "warning: variables can be used directly in the `format!` string\n  --> src/host/xhci/ring.rs:89:9\n   |\n89 |         trace!(\"[Transfer] >> {:?} @{:X}\", trb, addr);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n89 -         trace!(\"[Transfer] >> {:?} @{:X}\", trb, addr);\n89 +         trace!(\"[Transfer] >> {trb:?} @{addr:X}\");\n   |\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=crab-usb, checker=SemverChecks\n// toolchain=nightly, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/drivercraft/CrabUSB\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none \n// timestamp=2025-06-28 14:23:58.031620971 +08:00:00\n    Building crab-usb v0.1.0 (current)\n       Built [   6.201s] (current)\n     Parsing crab-usb v0.1.0 (current)\n      Parsed [   0.003s] (current)\nerror: crab-usb not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        },
        {
          "file": "Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── xhci 0.9.2\n│   └── crab-usb 0.1.0\n└── rdrive 0.15.3\n    └── sparreal-kernel 0.9.4\n        ├── sparreal-rt 0.9.6\n        │   └── bare-test 0.4.1\n        │       └── crab-usb 0.1.0\n        └── bare-test 0.4.1\n\n\n{\n  \"database\": {\n    \"advisory-count\": 787,\n    \"last-commit\": \"7573f55ba337263f61167dbb0ea926cdc7c8eb5d\",\n    \"last-updated\": \"2025-06-17T11:04:25+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 291\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[Lockbud] deadlock detection",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-06-28T06:24:10Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:24:10Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[Udeps] Unused dependencies",
          "features": "",
          "count": 1,
          "kinds": {
            "Unused Deps": [
              "pkg=crab-usb, checker=Udeps\ntoolchain=nightly, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_4/drivercraft/CrabUSB\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target aarch64-unknown-none \ntimestamp=2025-06-28 14:24:23.388935622 +08:00:00\n\n\nstdout:\nunused dependencies:\n`crab-usb v0.1.0 (/home/runner/check/batch_4/drivercraft/CrabUSB)`\n└─── dependencies\n     ├─── \"bitflags\"\n     ├─── \"crossbeam\"\n     ├─── \"crossbeam-skiplist\"\n     ├─── \"nb\"\n     ├─── \"spin\"\n     └─── \"tock-registers\"\nNote: These dependencies might be used by other targets.\n      To find dependencies that are not used by any target, enable `--all-targets`.\nNote: They might be false-positive.\n      For example, `cargo-udeps` cannot detect usage of crates that are only used in doc-tests.\n      To ignore some dependencies, write `package.metadata.cargo-udeps.ignore` in Cargo.toml.\n\nstderr:\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling autocfg v1.5.0\n   Compiling crossbeam-utils v0.8.21\n   Compiling syn v1.0.109\n    Checking futures-sink v0.3.31\n   Compiling rustversion v1.0.21\n   Compiling paste v1.0.15\n   Compiling num-traits v0.2.19\n   Compiling lock_api v0.4.13\n    Checking futures-core v0.3.31\n   Compiling quote v1.0.40\n   Compiling syn v2.0.104\n    Checking crossbeam-epoch v0.9.18\n    Checking scopeguard v1.2.0\n    Checking pin-project-lite v0.2.16\n    Checking pin-utils v0.1.0\n    Checking futures-task v0.3.31\n   Compiling thiserror v2.0.12\n    Checking futures-util v0.3.31\n    Checking futures-channel v0.3.31\n    Checking crossbeam-queue v0.3.12\n    Checking accessor v0.3.3\n    Checking futures-io v0.3.31\n    Checking bit_field v0.10.2\n    Checking futures v0.3.31\n    Checking crossbeam v0.8.4\n    Checking spin v0.9.8\n    Checking crossbeam-skiplist v0.1.3\n    Checking dma-api v0.3.0\n    Checking log v0.4.27\n    Checking tock-registers v0.9.0\n    Checking bitflags v2.9.1\n    Checking nb v1.1.0\n   Compiling num-derive v0.3.3\n    Checking xhci v0.9.2\n   Compiling bare-test-macros v0.2.0\n   Compiling num_enum_derive v0.7.4\n   Compiling thiserror-impl v2.0.12\n   Compiling crab-usb v0.1.0 (/home/runner/check/batch_4/drivercraft/CrabUSB)\n    Checking num_enum v0.7.4\nwarning: unused import: `dma_api::DVec`\n  --> src/host/xhci/mod.rs:11:5\n   |\n11 | use dma_api::DVec;\n   |     ^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by default\n\nwarning: unused variable: `packet_size`\n   --> src/host/xhci/mod.rs:540:13\n    |\n540 |         let packet_size = data\n    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_packet_size`\n    |\n    = note: `#[warn(unused_variables)]` on by default\n\nwarning: unused variable: `c`\n   --> src/host/xhci/event.rs:125:40\n    |\n125 |                 Allowed::TransferEvent(c)=>{\n    |                                        ^ help: if this is intentional, prefix it with an underscore: `_c`\n\nwarning: `crab-usb` (lib) generated 3 warnings (run `cargo fix --lib -p crab-usb` to apply 1 suggestion)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 6.38s\ninfo: Loading depinfo from \"/home/runner/check/batch_4/drivercraft/CrabUSB/target/debug/build/crab-usb-f71383c5820de924/build_script_build-f71383c5820de924.d\"\ninfo: Loading depinfo from \"/home/runner/check/batch_4/drivercraft/CrabUSB/target/aarch64-unknown-none/debug/deps/crab_usb-c605b26bdca5beef.d\"\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=crab-usb, checker=Outdated\ntoolchain=nightly, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_4/drivercraft/CrabUSB\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-06-28 14:24:16.957195563 +08:00:00\n\nName  Project  Compat  Latest  Kind    Platform\n----  -------  ------  ------  ----    --------\nspin  0.9.8    ---     0.10.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks violation]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=crab-usb, checker=SemverChecks\ntoolchain=nightly, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_4/drivercraft/CrabUSB\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none \ntimestamp=2025-06-28 14:24:04.959695258 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building crab-usb v0.1.0 (current)\n       Built [   6.201s] (current)\n     Parsing crab-usb v0.1.0 (current)\n      Parsed [   0.003s] (current)\nerror: crab-usb not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        },
        {
          "file": "src/host/xhci/context.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: variables can be used directly in the `format!` string\n   --> src/host/xhci/context.rs:163:9\n    |\n163 |         trace!(\"trb : {:#x}\", trb_ptr);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n    = note: `#[warn(clippy::uninlined_format_args)]` on by default\nhelp: change this to\n    |\n163 -         trace!(\"trb : {:#x}\", trb_ptr);\n163 +         trace!(\"trb : {trb_ptr:#x}\");\n    |\n\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Atomvchecker",
    "Outdated",
    "Geiger",
    "Unused Deps",
    "Unformatted"
  ]
}