{
  "repo": {
    "user": "Azure-stars",
    "repo": "kernel_elf_parser"
  },
  "data": [
    {
      "user": "Azure-stars",
      "repo": "kernel_elf_parser",
      "pkg": "kernel-elf-parser",
      "count": 5,
      "raw_reports": [
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "[Lockbud] deadlock detection",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-06-28T04:11:27Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T04:11:27Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[Udeps] Unused dependencies",
          "features": "",
          "count": 1,
          "kinds": {
            "Unused Deps": [
              "pkg=kernel-elf-parser, checker=Udeps\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Azure-stars/kernel_elf_parser\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target riscv64gc-unknown-none-elf \ntimestamp=2025-06-28 12:11:37.898347762 +08:00:00\n\n\nstdout:\nunused dependencies:\n`kernel-elf-parser v0.3.3 (/home/runner/check/batch_1/Azure-stars/kernel_elf_parser)`\n└─── dependencies\n     ├─── \"axerrno\"\n     ├─── \"cfg-if\"\n     └─── \"log\"\nNote: These dependencies might be used by other targets.\n      To find dependencies that are not used by any target, enable `--all-targets`.\nNote: They might be false-positive.\n      For example, `cargo-udeps` cannot detect usage of crates that are only used in doc-tests.\n      To ignore some dependencies, write `package.metadata.cargo-udeps.ignore` in Cargo.toml.\n\nstderr:\n   Compiling axerrno v0.1.0\n    Checking memory_addr v0.4.0\n    Checking log v0.4.27\n    Checking bitflags v2.9.1\n    Checking zero v0.1.3\n    Checking xmas-elf v0.9.1\n    Checking cfg-if v1.0.1\n    Checking page_table_entry v0.5.4\n    Checking kernel-elf-parser v0.3.3 (/home/runner/check/batch_1/Azure-stars/kernel_elf_parser)\nwarning: lifetime flowing from input to output with different syntax can be confusing\n   --> src/info.rs:134:16\n    |\n134 |     pub fn elf(&self) -> &xmas_elf::ElfFile {\n    |                ^^^^^     ------------------\n    |                |         ||\n    |                |         |the lifetimes get resolved as `'_`\n    |                |         the lifetimes get resolved as `'_`\n    |                this lifetime flows to the output\n    |\n    = note: `#[warn(mismatched_lifetime_syntaxes)]` on by default\nhelp: one option is to remove the lifetime for references and use the anonymous lifetime for paths\n    |\n134 |     pub fn elf(&self) -> &xmas_elf::ElfFile<'_> {\n    |                                            ++++\n\nwarning: `kernel-elf-parser` (lib) generated 1 warning\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.33s\ninfo: Loading depinfo from \"/home/runner/check/batch_1/Azure-stars/kernel_elf_parser/target/riscv64gc-unknown-none-elf/debug/deps/kernel_elf_parser-72a95380a2c32534.d\"\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=kernel-elf-parser, checker=Outdated\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Azure-stars/kernel_elf_parser\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-06-28 12:11:33.230590762 +08:00:00\n\nName      Project  Compat  Latest  Kind    Platform\n----      -------  ------  ------  ----    --------\nxmas-elf  0.9.1    ---     0.10.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "src/info.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: lifetime flowing from input to output with different syntax can be confusing\n   --> src/info.rs:134:16\n    |\n134 |     pub fn elf(&self) -> &xmas_elf::ElfFile {\n    |                ^^^^^     ------------------\n    |                |         ||\n    |                |         |the lifetimes get resolved as `'_`\n    |                |         the lifetimes get resolved as `'_`\n    |                this lifetime flows to the output\n    |\n    = note: `#[warn(mismatched_lifetime_syntaxes)]` on by default\nhelp: one option is to remove the lifetime for references and use the anonymous lifetime for paths\n    |\n134 |     pub fn elf(&self) -> &xmas_elf::ElfFile<'_> {\n    |                                            ++++\n\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Atomvchecker",
    "Outdated",
    "Geiger",
    "Unused Deps",
    "Unformatted"
  ]
}