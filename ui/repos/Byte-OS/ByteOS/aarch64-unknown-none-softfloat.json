{
  "repo": {
    "user": "Byte-OS",
    "repo": "ByteOS"
  },
  "data": [
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "fs",
      "count": 22,
      "raw_reports": [
        {
          "file": "filesystem/devfs/src/tty.rs",
          "features": "",
          "count": 7,
          "kinds": {
            "Clippy(Warn)": [
              "warning: this `else { if .. }` block can be collapsed\n  --> filesystem/devfs/src/tty.rs:47:16\n   |\n47 |           } else {\n   |  ________________^\n48 | |             if let Some(c) = get_char() {\n49 | |                 buffer[0] = c as u8;\n50 | |                 Ok(1)\n...  |\n54 | |         }\n   | |_________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if\n   = note: `#[warn(clippy::collapsible_else_if)]` on by default\nhelp: collapse nested if block\n   |\n47 ~         } else if let Some(c) = get_char() {\n48 +             buffer[0] = c as u8;\n49 +             Ok(1)\n50 +         } else {\n51 +             Err(Errno::EWOULDBLOCK)\n52 +         }\n   |\n\n",
              "warning: this `else { if .. }` block can be collapsed\n  --> filesystem/devfs/src/tty.rs:82:20\n   |\n82 |               } else {\n   |  ____________________^\n83 | |                 if let Some(c) = get_char() {\n84 | |                     res |= PollEvent::IN;\n85 | |                     self.buffer.lock().push_back(c);\n86 | |                 }\n87 | |             }\n   | |_____________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if\nhelp: collapse nested if block\n   |\n82 ~             } else if let Some(c) = get_char() {\n83 +                 res |= PollEvent::IN;\n84 +                 self.buffer.lock().push_back(c);\n85 +             }\n   |\n\n",
              "warning: you should consider adding a `Default` implementation for `Tty`\n  --> filesystem/devfs/src/tty.rs:22:5\n   |\n22 | /     pub fn new() -> Tty {\n23 | |         Tty {\n24 | |             buffer: Mutex::new(VecDeque::new()),\n25 | |             termios: Default::default(),\n...  |\n34 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n   = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n   |\n21 + impl Default for Tty {\n22 +     fn default() -> Self {\n23 +         Self::new()\n24 +     }\n25 + }\n   |\n\n",
              "warning: length comparison to zero\n  --> filesystem/devfs/src/tty.rs:39:17\n   |\n39 |         assert!(buffer.len() > 0);\n   |                 ^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!buffer.is_empty()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n   = note: `#[warn(clippy::len_zero)]` on by default\n\n",
              "warning: length comparison to zero\n  --> filesystem/devfs/src/tty.rs:41:12\n   |\n41 |         if self_buffer.len() > 0 {\n   |            ^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!self_buffer.is_empty()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n\n",
              "warning: the loop variable `i` is only used to index `buffer`\n  --> filesystem/devfs/src/tty.rs:43:22\n   |\n43 |             for i in 0..rlen {\n   |                      ^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\n   = note: `#[warn(clippy::needless_range_loop)]` on by default\nhelp: consider using an iterator\n   |\n43 |             for <item> in buffer.iter_mut().take(rlen) {\n   |                 ~~~~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
              "warning: casting to the same type is unnecessary (`u8` -> `u8`)\n  --> filesystem/devfs/src/tty.rs:49:29\n   |\n49 |                 buffer[0] = c as u8;\n   |                             ^^^^^^^ help: try: `c`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n   = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "filesystem/fs/src/lib.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning: the following explicit lifetimes could be elided: 'a\n  --> filesystem/fs/src/lib.rs:83:6\n   |\n83 | impl<'a> Future for WaitBlockingRead<'a> {\n   |      ^^                              ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n   = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n   |\n83 - impl<'a> Future for WaitBlockingRead<'a> {\n83 + impl Future for WaitBlockingRead<'_> {\n   |\n\n",
              "warning: the following explicit lifetimes could be elided: 'a\n  --> filesystem/fs/src/lib.rs:83:6\n   |\n83 | impl<'a> Future for WaitBlockingRead<'a> {\n   |      ^^                              ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n   = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n   |\n83 - impl<'a> Future for WaitBlockingRead<'a> {\n83 + impl Future for WaitBlockingRead<'_> {\n   |\n\n",
              "warning: the following explicit lifetimes could be elided: 'a\n   --> filesystem/fs/src/lib.rs:105:6\n    |\n105 | impl<'a> Future for WaitBlockingWrite<'a> {\n    |      ^^                               ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n105 - impl<'a> Future for WaitBlockingWrite<'a> {\n105 + impl Future for WaitBlockingWrite<'_> {\n    |\n\n",
              "warning: the following explicit lifetimes could be elided: 'a\n   --> filesystem/fs/src/lib.rs:105:6\n    |\n105 | impl<'a> Future for WaitBlockingWrite<'a> {\n    |      ^^                               ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n105 - impl<'a> Future for WaitBlockingWrite<'a> {\n105 + impl Future for WaitBlockingWrite<'_> {\n    |\n\n"
            ]
          }
        },
        {
          "file": "filesystem/devfs/src/lib.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: you should consider adding a `Default` implementation for `DevDir`\n  --> filesystem/devfs/src/lib.rs:61:5\n   |\n61 | /     pub fn new() -> Self {\n62 | |         let mut map: BTreeMap<&'static str, Arc<dyn INodeInterface>> = BTreeMap::new();\n63 | |         map.insert(\"stdout\", Arc::new(Tty::new()));\n64 | |         map.insert(\"stderr\", Arc::new(Tty::new()));\n...  |\n75 | |         Self { map }\n76 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\nhelp: try adding this\n   |\n60 + impl Default for DevDir {\n61 +     fn default() -> Self {\n62 +         Self::new()\n63 +     }\n64 + }\n   |\n\n",
              "warning: you are using an explicit closure for cloning elements\n  --> filesystem/devfs/src/lib.rs:85:9\n   |\n85 | /         self.inner\n86 | |             .map\n87 | |             .get(name)\n88 | |             .map(|x| x.clone())\n   | |_______________________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_clone\n   = note: `#[warn(clippy::map_clone)]` on by default\nhelp: consider calling the dedicated `cloned` method\n   |\n85 ~         self.inner\n86 +             .map\n87 +             .get(name).cloned()\n   |\n\n",
              "warning: iterating on a map's keys\n   --> filesystem/devfs/src/lib.rs:93:12\n    |\n93  |           Ok(self\n    |  ____________^\n94  | |             .inner\n95  | |             .map\n96  | |             .iter()\n...   |\n100 | |                 file_type: FileType::Device,\n101 | |             })\n    | |______________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#iter_kv_map\n    = note: `#[warn(clippy::iter_kv_map)]` on by default\nhelp: try\n    |\n93  ~         Ok(self\n94  +             .inner\n95  +             .map.keys().map(|name| DirEntry {\n96  +                 filename: name.to_string(),\n97  +                 len: 0,\n98  +                 file_type: FileType::Device,\n99  +             })\n    |\n\n"
            ]
          }
        },
        {
          "file": "filesystem/fs/src/pipe.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: length comparison to zero\n  --> filesystem/fs/src/pipe.rs:68:16\n   |\n68 |             if self.queue.lock().len() > 0 {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!self.queue.lock().is_empty()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n   = note: `#[warn(clippy::len_zero)]` on by default\n\n",
              "warning: length comparison to zero\n  --> filesystem/fs/src/pipe.rs:75:16\n   |\n75 |             && self.queue.lock().len() == 0\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `self.queue.lock().is_empty()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       ├── ext4rsfs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       ├── ext4fs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    ├── ext4rsfs 0.1.0\n    │   └── fs 0.1.0\n    ├── ext4fs 0.1.0\n    │   └── fs 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 111\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=fs, checker=Audit\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs\n// cmd=cargo audit\n// timestamp=2025-05-25 12:36:08.35427108 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 782 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (111 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=fs, checker=SemverChecks\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:33:45.929841926 +08:00:00\n    Building fs v0.1.0 (current)\nerror: running cargo-doc on crate 'fs' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n    Checking bitflags v2.9.1\n    Checking tock-registers v0.8.1\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `tock-registers` (lib) due to 1 previous error\nerror: could not compile `bitflags` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate fs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate fs v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=fs, checker=Outdated\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-25 12:38:42.781961918 +08:00:00\n\nName      Project  Compat  Latest  Kind    Platform\n----      -------  ------  ------  ----    --------\nbitflags  2.9.0    2.9.1   2.9.1   Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=fs, checker=SemverChecks\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-25 12:33:47.085683943 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building fs v0.1.0 (current)\nerror: running cargo-doc on crate 'fs' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n    Checking bitflags v2.9.1\n    Checking tock-registers v0.8.1\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `tock-registers` (lib) due to 1 previous error\nerror: could not compile `bitflags` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate fs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate fs v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "devfs",
      "count": 16,
      "raw_reports": [
        {
          "file": "filesystem/devfs/src/tty.rs",
          "features": "",
          "count": 7,
          "kinds": {
            "Clippy(Warn)": [
              "warning: this `else { if .. }` block can be collapsed\n  --> filesystem/devfs/src/tty.rs:47:16\n   |\n47 |           } else {\n   |  ________________^\n48 | |             if let Some(c) = get_char() {\n49 | |                 buffer[0] = c as u8;\n50 | |                 Ok(1)\n...  |\n54 | |         }\n   | |_________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if\n   = note: `#[warn(clippy::collapsible_else_if)]` on by default\nhelp: collapse nested if block\n   |\n47 ~         } else if let Some(c) = get_char() {\n48 +             buffer[0] = c as u8;\n49 +             Ok(1)\n50 +         } else {\n51 +             Err(Errno::EWOULDBLOCK)\n52 +         }\n   |\n\n",
              "warning: this `else { if .. }` block can be collapsed\n  --> filesystem/devfs/src/tty.rs:82:20\n   |\n82 |               } else {\n   |  ____________________^\n83 | |                 if let Some(c) = get_char() {\n84 | |                     res |= PollEvent::IN;\n85 | |                     self.buffer.lock().push_back(c);\n86 | |                 }\n87 | |             }\n   | |_____________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if\nhelp: collapse nested if block\n   |\n82 ~             } else if let Some(c) = get_char() {\n83 +                 res |= PollEvent::IN;\n84 +                 self.buffer.lock().push_back(c);\n85 +             }\n   |\n\n",
              "warning: you should consider adding a `Default` implementation for `Tty`\n  --> filesystem/devfs/src/tty.rs:22:5\n   |\n22 | /     pub fn new() -> Tty {\n23 | |         Tty {\n24 | |             buffer: Mutex::new(VecDeque::new()),\n25 | |             termios: Default::default(),\n...  |\n34 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n   = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n   |\n21 + impl Default for Tty {\n22 +     fn default() -> Self {\n23 +         Self::new()\n24 +     }\n25 + }\n   |\n\n",
              "warning: length comparison to zero\n  --> filesystem/devfs/src/tty.rs:39:17\n   |\n39 |         assert!(buffer.len() > 0);\n   |                 ^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!buffer.is_empty()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n   = note: `#[warn(clippy::len_zero)]` on by default\n\n",
              "warning: length comparison to zero\n  --> filesystem/devfs/src/tty.rs:41:12\n   |\n41 |         if self_buffer.len() > 0 {\n   |            ^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!self_buffer.is_empty()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n\n",
              "warning: the loop variable `i` is only used to index `buffer`\n  --> filesystem/devfs/src/tty.rs:43:22\n   |\n43 |             for i in 0..rlen {\n   |                      ^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\n   = note: `#[warn(clippy::needless_range_loop)]` on by default\nhelp: consider using an iterator\n   |\n43 |             for <item> in buffer.iter_mut().take(rlen) {\n   |                 ~~~~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
              "warning: casting to the same type is unnecessary (`u8` -> `u8`)\n  --> filesystem/devfs/src/tty.rs:49:29\n   |\n49 |                 buffer[0] = c as u8;\n   |                             ^^^^^^^ help: try: `c`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n   = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "filesystem/devfs/src/lib.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: you should consider adding a `Default` implementation for `DevDir`\n  --> filesystem/devfs/src/lib.rs:61:5\n   |\n61 | /     pub fn new() -> Self {\n62 | |         let mut map: BTreeMap<&'static str, Arc<dyn INodeInterface>> = BTreeMap::new();\n63 | |         map.insert(\"stdout\", Arc::new(Tty::new()));\n64 | |         map.insert(\"stderr\", Arc::new(Tty::new()));\n...  |\n75 | |         Self { map }\n76 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\nhelp: try adding this\n   |\n60 + impl Default for DevDir {\n61 +     fn default() -> Self {\n62 +         Self::new()\n63 +     }\n64 + }\n   |\n\n",
              "warning: you are using an explicit closure for cloning elements\n  --> filesystem/devfs/src/lib.rs:85:9\n   |\n85 | /         self.inner\n86 | |             .map\n87 | |             .get(name)\n88 | |             .map(|x| x.clone())\n   | |_______________________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_clone\n   = note: `#[warn(clippy::map_clone)]` on by default\nhelp: consider calling the dedicated `cloned` method\n   |\n85 ~         self.inner\n86 +             .map\n87 +             .get(name).cloned()\n   |\n\n",
              "warning: iterating on a map's keys\n   --> filesystem/devfs/src/lib.rs:93:12\n    |\n93  |           Ok(self\n    |  ____________^\n94  | |             .inner\n95  | |             .map\n96  | |             .iter()\n...   |\n100 | |                 file_type: FileType::Device,\n101 | |             })\n    | |______________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#iter_kv_map\n    = note: `#[warn(clippy::iter_kv_map)]` on by default\nhelp: try\n    |\n93  ~         Ok(self\n94  +             .inner\n95  +             .map.keys().map(|name| DirEntry {\n96  +                 filename: name.to_string(),\n97  +                 len: 0,\n98  +                 file_type: FileType::Device,\n99  +             })\n    |\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       ├── ext4rsfs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       ├── ext4fs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    ├── ext4rsfs 0.1.0\n    │   └── fs 0.1.0\n    ├── ext4fs 0.1.0\n    │   └── fs 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 111\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=devfs, checker=Audit\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/devfs\n// cmd=cargo audit\n// timestamp=2025-05-25 12:36:00.49622232 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 782 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (111 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=devfs, checker=SemverChecks\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/devfs\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:32:16.333001805 +08:00:00\n    Building devfs v0.1.0 (current)\nerror: running cargo-doc on crate 'devfs' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling autocfg v1.4.0\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate devfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/devfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate devfs v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=devfs, checker=Outdated\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/devfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-25 12:37:38.794823798 +08:00:00\n\nName      Project  Compat  Latest  Kind    Platform\n----      -------  ------  ------  ----    --------\nbitflags  2.9.0    2.9.1   2.9.1   Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=devfs, checker=SemverChecks\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/devfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-25 12:32:17.83922049 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building devfs v0.1.0 (current)\nerror: running cargo-doc on crate 'devfs' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling autocfg v1.4.0\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate devfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/devfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate devfs v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "kvirtio",
      "count": 16,
      "raw_reports": [
        {
          "file": "driver/kvirtio/src/lib.rs",
          "features": "",
          "count": 7,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unneeded sub `cfg` when there is only one condition\n  --> driver/kvirtio/src/lib.rs:27:7\n   |\n27 | #[cfg(any(target_arch = \"x86_64\"))]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `target_arch = \"x86_64\"`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n   = note: `#[warn(clippy::non_minimal_cfg)]` on by default\n\n",
              "warning: unneeded sub `cfg` when there is only one condition\n  --> driver/kvirtio/src/lib.rs:29:7\n   |\n29 | #[cfg(any(target_arch = \"x86_64\"))]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `target_arch = \"x86_64\"`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n\n",
              "warning: unneeded sub `cfg` when there is only one condition\n  --> driver/kvirtio/src/lib.rs:32:7\n   |\n32 | #[cfg(any(target_arch = \"x86_64\"))]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `target_arch = \"x86_64\"`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n\n",
              "warning: unneeded sub `cfg` when there is only one condition\n  --> driver/kvirtio/src/lib.rs:38:7\n   |\n38 | #[cfg(any(target_arch = \"x86_64\"))]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `target_arch = \"x86_64\"`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n\n",
              "warning: unneeded sub `cfg` when there is only one condition\n  --> driver/kvirtio/src/lib.rs:79:7\n   |\n79 | #[cfg(any(target_arch = \"x86_64\"))]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `target_arch = \"x86_64\"`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n\n",
              "warning: unneeded sub `cfg` when there is only one condition\n   --> driver/kvirtio/src/lib.rs:112:7\n    |\n112 | #[cfg(any(target_arch = \"x86_64\"))]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `target_arch = \"x86_64\"`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n\n",
              "warning: unneeded sub `cfg` when there is only one condition\n   --> driver/kvirtio/src/lib.rs:130:7\n    |\n130 | #[cfg(any(target_arch = \"x86_64\"))]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `target_arch = \"x86_64\"`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n\n"
            ]
          }
        },
        {
          "file": "driver/kvirtio/src/virtio_impl.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: explicit call to `.into_iter()` in function argument accepting `IntoIterator`\n   --> driver/kvirtio/src/virtio_impl.rs:17:40\n    |\n17  |         VIRTIO_CONTAINER.lock().extend(trackers.into_iter());\n    |                                        ^^^^^^^^------------\n    |                                                |\n    |                                                help: consider removing the `.into_iter()`\n    |\nnote: this parameter accepts any `IntoIterator`, so you don't need to call `.into_iter()`\n   --> /home/runner/.rustup/toolchains/nightly-2025-02-01-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs:416:18\n    |\n416 |     fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T);\n    |                  ^^^^^^^^^^^^^^^^^^^^^^\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n    = note: `#[warn(clippy::useless_conversion)]` on by default\n\n",
              "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n  --> driver/kvirtio/src/virtio_impl.rs:30:28\n   |\n30 |             let phy_page = paddr as usize >> 12;\n   |                            ^^^^^^^^^^^^^^ help: try: `paddr`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n   = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n",
              "warning: useless conversion to the same type: `usize`\n  --> driver/kvirtio/src/virtio_impl.rs:39:23\n   |\n39 |         NonNull::new((usize::from(paddr) | VIRT_ADDR_START) as *mut u8).unwrap()\n   |                       ^^^^^^^^^^^^^^^^^^ help: consider removing `usize::from()`: `paddr`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       ├── ext4rsfs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       ├── ext4fs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    ├── ext4rsfs 0.1.0\n    │   └── fs 0.1.0\n    ├── ext4fs 0.1.0\n    │   └── fs 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 111\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kvirtio, checker=Audit\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kvirtio\n// cmd=cargo audit\n// timestamp=2025-05-25 12:36:16.68114381 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 782 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (111 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kvirtio, checker=SemverChecks\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kvirtio\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:34:40.816274979 +08:00:00\n    Building kvirtio v0.1.0 (current)\nerror: running cargo-doc on crate 'kvirtio' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n    Checking tock-registers v0.8.1\n    Checking bitflags v2.9.1\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `tock-registers` (lib) due to 1 previous error\nerror: could not compile `bitflags` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate kvirtio v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/kvirtio &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate kvirtio v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=kvirtio, checker=Outdated\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kvirtio\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-25 12:39:52.504310611 +08:00:00\n\nName            Project  Compat  Latest  Kind    Platform\n----            -------  ------  ------  ----    --------\nvirtio-drivers  0.8.0    ---     0.11.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=kvirtio, checker=SemverChecks\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kvirtio\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-25 12:34:41.459909552 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building kvirtio v0.1.0 (current)\nerror: running cargo-doc on crate 'kvirtio' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n    Checking tock-registers v0.8.1\n    Checking bitflags v2.9.1\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `tock-registers` (lib) due to 1 previous error\nerror: could not compile `bitflags` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate kvirtio v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/kvirtio &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate kvirtio v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "executor",
      "count": 13,
      "raw_reports": [
        {
          "file": "crates/executor/src/executor.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning: empty line after doc comment\n  --> crates/executor/src/executor.rs:23:1\n   |\n23 | / /// wake queue, not use at current.\n24 | |\n   | |_^\n25 |   pub static DEFAULT_EXECUTOR: Executor = Executor::new();\n   |   ------------------------------------- the comment documents this static\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = note: `#[warn(clippy::empty_line_after_doc_comments)]` on by default\n   = help: if the empty line is unintentional remove it\n\n",
              "warning: very complex type used. Consider factoring parts into `type` definitions\n  --> crates/executor/src/executor.rs:30:12\n   |\n30 |     cores: LazyInit<Vec<Mutex<Option<Arc<dyn AsyncTask>>>>>,\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity\n   = note: `#[warn(clippy::type_complexity)]` on by default\n\n",
              "warning: you should consider adding a `Default` implementation for `Executor`\n  --> crates/executor/src/executor.rs:35:5\n   |\n35 | /     pub const fn new() -> Self {\n36 | |         Executor {\n37 | |             cores: LazyInit::new(),\n38 | |             inited: AtomicBool::new(false),\n39 | |         }\n40 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n   = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n   |\n34 + impl Default for Executor {\n35 +     fn default() -> Self {\n36 +         Self::new()\n37 +     }\n38 + }\n   |\n\n",
              "warning: busy-waiting loop should at least have a spin loop hint\n  --> crates/executor/src/executor.rs:68:51\n   |\n68 |         while !self.inited.load(Ordering::SeqCst) {}\n   |                                                   ^^ help: try: `{ core::hint::spin_loop() }`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_spin_loop\n   = note: `#[warn(clippy::missing_spin_loop)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/downcast-rs-1.2.0/src/lib.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: bound is defined in more than one place\n  --> crates/executor/src/task.rs:83:1\n   |\n83 | impl_downcast!(sync AsyncTask);\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n   = note: `#[warn(clippy::multiple_bound_locations)]` on by default\n   = note: this warning originates in the macro `impl_downcast` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: bound is defined in more than one place\n  --> crates/executor/src/task.rs:83:1\n   |\n83 | impl_downcast!(sync AsyncTask);\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n   = note: `#[warn(clippy::multiple_bound_locations)]` on by default\n   = note: this warning originates in the macro `impl_downcast` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       ├── ext4rsfs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       ├── ext4fs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    ├── ext4rsfs 0.1.0\n    │   └── fs 0.1.0\n    ├── ext4fs 0.1.0\n    │   └── fs 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 111\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=executor, checker=Audit\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/executor\n// cmd=cargo audit\n// timestamp=2025-05-25 12:36:03.362858845 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 782 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (111 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=executor, checker=SemverChecks\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/executor\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:32:47.300970608 +08:00:00\n    Building executor v0.1.0 (current)\nerror: running cargo-doc on crate 'executor' failed with output:\n-----\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling equivalent v1.0.2\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\n   Compiling hashbrown v0.15.3\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate executor v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/crates/executor &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate executor v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=executor, checker=Outdated\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/executor\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-25 12:38:00.95096841 +08:00:00\n\nName         Project  Compat  Latest  Kind    Platform\n----         -------  ------  ------  ----    --------\ndowncast-rs  1.2.0    1.2.1   2.0.1   Normal  ---\nhashbrown    0.14.5   ---     0.15.3  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=executor, checker=SemverChecks\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/executor\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-25 12:32:48.301724972 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building executor v0.1.0 (current)\nerror: running cargo-doc on crate 'executor' failed with output:\n-----\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling equivalent v1.0.2\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\n   Compiling hashbrown v0.15.3\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate executor v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/crates/executor &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate executor v0.1.0\n"
            ]
          }
        },
        {
          "file": "crates/executor/src/ops.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: you should consider adding a `Default` implementation for `Yield`\n  --> crates/executor/src/ops.rs:10:5\n   |\n10 | /     pub const fn new() -> Self {\n11 | |         Self(false)\n12 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\nhelp: try adding this\n   |\n9  + impl Default for Yield {\n10 +     fn default() -> Self {\n11 +         Self::new()\n12 +     }\n13 + }\n   |\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "ext4rsfs",
      "count": 11,
      "raw_reports": [
        {
          "file": "filesystem/ext4rsfs/src/lib.rs",
          "features": "",
          "count": 5,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unused variable: `inode`\n   --> filesystem/ext4rsfs/src/lib.rs:181:17\n    |\n181 |         let mut inode = self.inode;\n    |                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_inode`\n    |\n    = note: `#[warn(unused_variables)]` on by default\n\n",
              "warning: unused variable: `name_off`\n   --> filesystem/ext4rsfs/src/lib.rs:182:17\n    |\n182 |         let mut name_off = 0;\n    |                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_name_off`\n\n",
              "warning: variable does not need to be mutable\n   --> filesystem/ext4rsfs/src/lib.rs:181:13\n    |\n181 |         let mut inode = self.inode;\n    |             ----^^^^^\n    |             |\n    |             help: remove this `mut`\n    |\n    = note: `#[warn(unused_mut)]` on by default\n\n",
              "warning: variable does not need to be mutable\n   --> filesystem/ext4rsfs/src/lib.rs:182:13\n    |\n182 |         let mut name_off = 0;\n    |             ----^^^^^^^^\n    |             |\n    |             help: remove this `mut`\n\n",
              "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n  --> filesystem/ext4rsfs/src/lib.rs:91:33\n   |\n91 |             device.write_blocks(current_block_id as usize, &data);\n   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `current_block_id`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n   = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       ├── ext4rsfs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       ├── ext4fs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    ├── ext4rsfs 0.1.0\n    │   └── fs 0.1.0\n    ├── ext4fs 0.1.0\n    │   └── fs 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 111\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ext4rsfs, checker=Audit\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ext4rsfs\n// cmd=cargo audit\n// timestamp=2025-05-25 12:36:07.088831833 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 782 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (111 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ext4rsfs, checker=SemverChecks\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ext4rsfs\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:33:17.497888245 +08:00:00\n    Building ext4rsfs v0.1.0 (current)\nerror: running cargo-doc on crate 'ext4rsfs' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling autocfg v1.4.0\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate ext4rsfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ext4rsfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate ext4rsfs v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=ext4rsfs, checker=Outdated\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ext4rsfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-25 12:38:40.015184918 +08:00:00\n\nName     Project  Compat  Latest  Kind    Platform\n----     -------  ------  ------  ----    --------\next4_rs  1.3.1    1.3.2   1.3.2   Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=ext4rsfs, checker=SemverChecks\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ext4rsfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-25 12:33:18.511271232 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building ext4rsfs v0.1.0 (current)\nerror: running cargo-doc on crate 'ext4rsfs' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling autocfg v1.4.0\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate ext4rsfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ext4rsfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate ext4rsfs v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "ext4fs",
      "count": 7,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       ├── ext4rsfs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       ├── ext4fs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    ├── ext4rsfs 0.1.0\n    │   └── fs 0.1.0\n    ├── ext4fs 0.1.0\n    │   └── fs 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 111\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ext4fs, checker=Audit\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ext4fs\n// cmd=cargo audit\n// timestamp=2025-05-25 12:36:05.848468452 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 782 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (111 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) clippy",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ext4fs, checker=Clippy\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ext4fs\n// cmd=cargo clippy --target aarch64-unknown-none-softfloat  --no-deps\n// timestamp=2025-05-25 12:31:32.48720657 +08:00:00\n   Compiling lwext4_rust v0.2.0 (https://github.com/Azure-stars/lwext4_rust.git?rev=ee5131c#ee5131ca)\nerror: failed to run custom build command for `lwext4_rust v0.2.0 (https://github.com/Azure-stars/lwext4_rust.git?rev=ee5131c#ee5131ca)`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/check/batch_1/Byte-OS/ByteOS/target/debug/build/lwext4_rust-95b80d03d16b9754/build-script-build` (exit status: 101)\n  --- stdout\n  Retrieve lwext4 source code\n  To patch lwext4 src\n  make: Entering directory '/home/runner/.cargo/git/checkouts/lwext4_rust-42b311d794fde3a2/ee5131c/c/lwext4'\n  rm -R -f build_musl-generic\n  mkdir build_musl-generic\n  cd build_musl-generic && cmake -G\"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release -DVERSION_MAJOR=1 -DVERSION_MINOR=0 -DVERSION_PATCH=0 -DVERSION=1.0.0-58bcf89 -DLWEXT4_BUILD_SHARED_LIB=OFF -DCMAKE_INSTALL_PREFIX=./install   -DCMAKE_TOOLCHAIN_FILE=../toolchain/musl-generic.cmake ..\n  -- The C compiler identification is unknown\n  -- Configuring incomplete, errors occurred!\n  make: Leaving directory '/home/runner/.cargo/git/checkouts/lwext4_rust-42b311d794fde3a2/ee5131c/c/lwext4'\n\n  --- stderr\n  CMake Warning (dev) at CMakeLists.txt:1 (project):\n    cmake_minimum_required() should be called prior to this top-level project()\n    call.  Please see the cmake-commands(7) manual for usage documentation of\n    both commands.\n  This warning is for project developers.  Use -Wno-dev to suppress it.\n\n  CMake Error at CMakeLists.txt:1 (project):\n    The CMAKE_C_COMPILER:\n\n      aarch64-linux-musl-gcc\n\n    is not a full path and was not found in the PATH.\n\n    Tell CMake where to find the compiler by setting either the environment\n    variable \"CC\" or the CMake cache entry CMAKE_C_COMPILER to the full path to\n    the compiler, or to the compiler name if it is in the PATH.\n\n\n  make: *** [Makefile:37: musl-generic] Error 1\n\n  thread 'main' panicked at /home/runner/.cargo/git/checkouts/lwext4_rust-42b311d794fde3a2/ee5131c/build.rs:48:9:\n  assertion failed: status.success()\n  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ext4fs, checker=Lockbud\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ext4fs\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:36:40.131377041 +08:00:00\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling lwext4_rust v0.2.0 (https://github.com/Azure-stars/lwext4_rust.git?rev=ee5131c#ee5131ca)\nerror: failed to run custom build command for `lwext4_rust v0.2.0 (https://github.com/Azure-stars/lwext4_rust.git?rev=ee5131c#ee5131ca)`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/check/batch_1/Byte-OS/ByteOS/target/debug/build/lwext4_rust-95b80d03d16b9754/build-script-build` (exit status: 101)\n  --- stdout\n  make: Entering directory '/home/runner/.cargo/git/checkouts/lwext4_rust-42b311d794fde3a2/ee5131c/c/lwext4'\n  rm -R -f build_musl-generic\n  mkdir build_musl-generic\n  cd build_musl-generic && cmake -G\"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release -DVERSION_MAJOR=1 -DVERSION_MINOR=0 -DVERSION_PATCH=0 -DVERSION=1.0.0-58bcf89 -DLWEXT4_BUILD_SHARED_LIB=OFF -DCMAKE_INSTALL_PREFIX=./install   -DCMAKE_TOOLCHAIN_FILE=../toolchain/musl-generic.cmake ..\n  -- The C compiler identification is unknown\n  -- Configuring incomplete, errors occurred!\n  make: Leaving directory '/home/runner/.cargo/git/checkouts/lwext4_rust-42b311d794fde3a2/ee5131c/c/lwext4'\n\n  --- stderr\n  CMake Warning (dev) at CMakeLists.txt:1 (project):\n    cmake_minimum_required() should be called prior to this top-level project()\n    call.  Please see the cmake-commands(7) manual for usage documentation of\n    both commands.\n  This warning is for project developers.  Use -Wno-dev to suppress it.\n\n  CMake Error at CMakeLists.txt:1 (project):\n    The CMAKE_C_COMPILER:\n\n      aarch64-linux-musl-gcc\n\n    is not a full path and was not found in the PATH.\n\n    Tell CMake where to find the compiler by setting either the environment\n    variable \"CC\" or the CMake cache entry CMAKE_C_COMPILER to the full path to\n    the compiler, or to the compiler name if it is in the PATH.\n\n\n  make: *** [Makefile:37: musl-generic] Error 1\n\n  thread 'main' panicked at /home/runner/.cargo/git/checkouts/lwext4_rust-42b311d794fde3a2/ee5131c/build.rs:48:9:\n  assertion failed: status.success()\n  stack backtrace:\n     0:     0x557ae92efcb0 - std::backtrace_rs::backtrace::libunwind::trace::h09b3d24f06048964\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/../../backtrace/src/backtrace/libunwind.rs:116:5\n     1:     0x557ae92efcb0 - std::backtrace_rs::backtrace::trace_unsynchronized::hf47addf765c6ae4e\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n     2:     0x557ae92efcb0 - std::sys::backtrace::_print_fmt::h1cac4748ae805433\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/sys/backtrace.rs:66:9\n     3:     0x557ae92efcb0 - <std::sys::backtrace::BacktraceLock::print::DisplayBacktrace as core::fmt::Display>::fmt::h51876e9b806abd2f\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/sys/backtrace.rs:39:26\n     4:     0x557ae9311a83 - core::fmt::rt::Argument::fmt::h74675d727819c734\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/fmt/rt.rs:177:76\n     5:     0x557ae9311a83 - core::fmt::write::hec8160b518640e0a\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/fmt/mod.rs:1449:21\n     6:     0x557ae92ecd73 - std::io::Write::write_fmt::h23dd9fd522f1ed73\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/io/mod.rs:1890:15\n     7:     0x557ae92efb02 - std::sys::backtrace::BacktraceLock::print::h82fa1cbd2f5c85f6\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/sys/backtrace.rs:42:9\n     8:     0x557ae92f0a4f - std::panicking::default_hook::{{closure}}::h0c71ebc4d32ee68d\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:298:22\n     9:     0x557ae92f08ba - std::panicking::default_hook::h869bbd2dc4246a59\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:325:9\n    10:     0x557ae92f1322 - std::panicking::rust_panic_with_hook::he7cb010bd1162eb7\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:831:13\n    11:     0x557ae92f1186 - std::panicking::begin_panic_handler::{{closure}}::h144a44d32326050e\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:697:13\n    12:     0x557ae92f01b9 - std::sys::backtrace::__rust_end_short_backtrace::h7baa569e657f05a9\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/sys/backtrace.rs:168:18\n    13:     0x557ae92f0e4d - rust_begin_unwind\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:695:5\n    14:     0x557ae9310cb0 - core::panicking::panic_fmt::hc13ec85888cb23ce\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/panicking.rs:75:14\n    15:     0x557ae9310d3c - core::panicking::panic::h296877b1e66d3b41\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/panicking.rs:145:5\n    16:     0x557ae92ca639 - build_script_build::main::h5180c3d8ec01dd7a\n                                 at /home/runner/.cargo/git/checkouts/lwext4_rust-42b311d794fde3a2/ee5131c/build.rs:48:9\n    17:     0x557ae92c780b - core::ops::function::FnOnce::call_once::he7dddd4a8ebae2bd\n                                 at /home/runner/.rustup/toolchains/nightly-2025-02-01-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5\n    18:     0x557ae92c6cde - std::sys::backtrace::__rust_begin_short_backtrace::h1eee043fe58785ce\n                                 at /home/runner/.rustup/toolchains/nightly-2025-02-01-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/backtrace.rs:152:18\n    19:     0x557ae92c3441 - std::rt::lang_start::{{closure}}::h845338bd888c9f6f\n                                 at /home/runner/.rustup/toolchains/nightly-2025-02-01-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/rt.rs:199:18\n    20:     0x557ae92e9a10 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::h73c200d88ac341db\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ops/function.rs:284:13\n    21:     0x557ae92e9a10 - std::panicking::try::do_call::h5d854913854b71fe\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:587:40\n    22:     0x557ae92e9a10 - std::panicking::try::hf1ae1b2a2498e678\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:550:19\n    23:     0x557ae92e9a10 - std::panic::catch_unwind::hcfb0a552e6092b8e\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panic.rs:358:14\n    24:     0x557ae92e9a10 - std::rt::lang_start_internal::{{closure}}::hb0245fc583346cd7\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/rt.rs:168:24\n    25:     0x557ae92e9a10 - std::panicking::try::do_call::h946e97edafdf2f58\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:587:40\n    26:     0x557ae92e9a10 - std::panicking::try::ha9077e2e87ccc6a6\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:550:19\n    27:     0x557ae92e9a10 - std::panic::catch_unwind::hd02f80e9111b6f00\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panic.rs:358:14\n    28:     0x557ae92e9a10 - std::rt::lang_start_internal::h13b1bd40350dac66\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/rt.rs:164:5\n    29:     0x557ae92c3427 - std::rt::lang_start::h7c3e1fee94beef88\n                                 at /home/runner/.rustup/toolchains/nightly-2025-02-01-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/rt.rs:198:5\n    30:     0x557ae92cad7e - main\n    31:     0x7f46c422a1ca - <unknown>\n    32:     0x7f46c422a28b - __libc_start_main\n    33:     0x557ae92c2015 - _start\n    34:                0x0 - <unknown>\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ext4fs, checker=SemverChecks\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ext4fs\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:33:04.258219354 +08:00:00\n    Building ext4fs v0.1.0 (current)\nerror: running cargo-doc on crate 'ext4fs' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling autocfg v1.4.0\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate ext4fs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ext4fs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate ext4fs v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=ext4fs, checker=SemverChecks\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ext4fs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-25 12:33:05.548598963 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building ext4fs v0.1.0 (current)\nerror: running cargo-doc on crate 'ext4fs' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling autocfg v1.4.0\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate ext4fs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ext4fs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate ext4fs v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "kramdisk",
      "count": 7,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       ├── ext4rsfs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       ├── ext4fs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    ├── ext4rsfs 0.1.0\n    │   └── fs 0.1.0\n    ├── ext4fs 0.1.0\n    │   └── fs 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 111\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kramdisk, checker=Audit\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk\n// cmd=cargo audit\n// timestamp=2025-05-25 12:36:14.751876223 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 782 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (111 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) clippy",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kramdisk, checker=Clippy\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk\n// cmd=cargo clippy --target aarch64-unknown-none-softfloat  --no-deps\n// timestamp=2025-05-25 12:31:50.346750562 +08:00:00\n   Compiling kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)\nerror: failed to run custom build command for `kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/check/batch_1/Byte-OS/ByteOS/target/debug/build/kramdisk-bee069a1272df925/build-script-build` (exit status: 101)\n  --- stderr\n\n  thread 'main' panicked at driver/kramdisk/build.rs:13:53:\n  can't find manifest directory: NotPresent\n  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kramdisk, checker=Lockbud\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:36:55.617884391 +08:00:00\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)\nerror: failed to run custom build command for `kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/check/batch_1/Byte-OS/ByteOS/target/debug/build/kramdisk-0b919c9e6bf0b894/build-script-build` (exit status: 101)\n  --- stderr\n\n  thread 'main' panicked at driver/kramdisk/build.rs:13:53:\n  can't find manifest directory: NotPresent\n  stack backtrace:\n     0:     0x558cbc177720 - std::backtrace_rs::backtrace::libunwind::trace::h09b3d24f06048964\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/../../backtrace/src/backtrace/libunwind.rs:116:5\n     1:     0x558cbc177720 - std::backtrace_rs::backtrace::trace_unsynchronized::hf47addf765c6ae4e\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n     2:     0x558cbc177720 - std::sys::backtrace::_print_fmt::h1cac4748ae805433\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/sys/backtrace.rs:66:9\n     3:     0x558cbc177720 - <std::sys::backtrace::BacktraceLock::print::DisplayBacktrace as core::fmt::Display>::fmt::h51876e9b806abd2f\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/sys/backtrace.rs:39:26\n     4:     0x558cbc194d23 - core::fmt::rt::Argument::fmt::h74675d727819c734\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/fmt/rt.rs:177:76\n     5:     0x558cbc194d23 - core::fmt::write::hec8160b518640e0a\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/fmt/mod.rs:1449:21\n     6:     0x558cbc174aa3 - std::io::Write::write_fmt::h23dd9fd522f1ed73\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/io/mod.rs:1890:15\n     7:     0x558cbc177572 - std::sys::backtrace::BacktraceLock::print::h82fa1cbd2f5c85f6\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/sys/backtrace.rs:42:9\n     8:     0x558cbc1784bf - std::panicking::default_hook::{{closure}}::h0c71ebc4d32ee68d\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:298:22\n     9:     0x558cbc17832a - std::panicking::default_hook::h869bbd2dc4246a59\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:325:9\n    10:     0x558cbc178d92 - std::panicking::rust_panic_with_hook::he7cb010bd1162eb7\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:831:13\n    11:     0x558cbc178c2a - std::panicking::begin_panic_handler::{{closure}}::h144a44d32326050e\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:704:13\n    12:     0x558cbc177c29 - std::sys::backtrace::__rust_end_short_backtrace::h7baa569e657f05a9\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/sys/backtrace.rs:168:18\n    13:     0x558cbc1788bd - rust_begin_unwind\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:695:5\n    14:     0x558cbc193f50 - core::panicking::panic_fmt::hc13ec85888cb23ce\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/panicking.rs:75:14\n    15:     0x558cbc1942f6 - core::result::unwrap_failed::h68ee3ebc0a871e1d\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/result.rs:1704:5\n    16:     0x558cbc155a46 - core::result::Result<T,E>::expect::ha0c8de9ab1b1600c\n                                 at /home/runner/.rustup/toolchains/nightly-2025-02-01-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:1061:23\n    17:     0x558cbc156759 - build_script_build::main::ha4954a181e90d83d\n                                 at /home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk/build.rs:13:23\n    18:     0x558cbc15534b - core::ops::function::FnOnce::call_once::hd19b8ab106fe7b15\n                                 at /home/runner/.rustup/toolchains/nightly-2025-02-01-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5\n    19:     0x558cbc154bbe - std::sys::backtrace::__rust_begin_short_backtrace::hda555096c8e7425e\n                                 at /home/runner/.rustup/toolchains/nightly-2025-02-01-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/backtrace.rs:152:18\n    20:     0x558cbc154a91 - std::rt::lang_start::{{closure}}::h760865ba532539ce\n                                 at /home/runner/.rustup/toolchains/nightly-2025-02-01-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/rt.rs:199:18\n    21:     0x558cbc171ce0 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::h73c200d88ac341db\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ops/function.rs:284:13\n    22:     0x558cbc171ce0 - std::panicking::try::do_call::h5d854913854b71fe\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:587:40\n    23:     0x558cbc171ce0 - std::panicking::try::hf1ae1b2a2498e678\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:550:19\n    24:     0x558cbc171ce0 - std::panic::catch_unwind::hcfb0a552e6092b8e\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panic.rs:358:14\n    25:     0x558cbc171ce0 - std::rt::lang_start_internal::{{closure}}::hb0245fc583346cd7\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/rt.rs:168:24\n    26:     0x558cbc171ce0 - std::panicking::try::do_call::h946e97edafdf2f58\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:587:40\n    27:     0x558cbc171ce0 - std::panicking::try::ha9077e2e87ccc6a6\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:550:19\n    28:     0x558cbc171ce0 - std::panic::catch_unwind::hd02f80e9111b6f00\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panic.rs:358:14\n    29:     0x558cbc171ce0 - std::rt::lang_start_internal::h13b1bd40350dac66\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/rt.rs:164:5\n    30:     0x558cbc154a77 - std::rt::lang_start::h6dd3f87e7892aca1\n                                 at /home/runner/.rustup/toolchains/nightly-2025-02-01-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/rt.rs:198:5\n    31:     0x558cbc156b0e - main\n    32:     0x7f210dc2a1ca - <unknown>\n    33:     0x7f210dc2a28b - __libc_start_main\n    34:     0x558cbc154155 - _start\n    35:                0x0 - <unknown>\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kramdisk, checker=SemverChecks\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:34:22.586108724 +08:00:00\n    Building kramdisk v0.1.0 (current)\nerror: running cargo-doc on crate 'kramdisk' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n    Checking tock-registers v0.8.1\n   Compiling proc-macro-crate v3.3.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `tock-registers` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate kramdisk v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate kramdisk v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=kramdisk, checker=SemverChecks\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-25 12:34:23.502411851 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building kramdisk v0.1.0 (current)\nerror: running cargo-doc on crate 'kramdisk' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n    Checking tock-registers v0.8.1\n   Compiling proc-macro-crate v3.3.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `tock-registers` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate kramdisk v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate kramdisk v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "libc-types",
      "count": 7,
      "raw_reports": [
        {
          "file": "crates/libc-types/src/types.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Error)": [
              "error: this `else { if .. }` block can be collapsed\n  --> crates/libc-types/src/types.rs:52:16\n   |\n52 |           } else {\n   |  ________________^\n53 | |             if self.usec > other.usec {\n54 | |                 Some(Ordering::Greater)\n55 | |             } else if self.usec < other.usec {\n...  |\n60 | |         }\n   | |_________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if\nnote: the lint level is defined here\n  --> crates/libc-types/src/lib.rs:7:9\n   |\n7  | #![deny(clippy::all)]\n   |         ^^^^^^^^^^^\n   = note: `#[deny(clippy::collapsible_else_if)]` implied by `#[deny(clippy::all)]`\nhelp: collapse nested if block\n   |\n52 ~         } else if self.usec > other.usec {\n53 +             Some(Ordering::Greater)\n54 +         } else if self.usec < other.usec {\n55 +             Some(Ordering::Less)\n56 +         } else {\n57 +             Some(Ordering::Equal)\n58 +         }\n   |\n\n",
              "error: `if` chain can be rewritten with `match`\n  --> crates/libc-types/src/types.rs:48:9\n   |\n48 | /         if self.sec > other.sec {\n49 | |             Some(Ordering::Greater)\n50 | |         } else if self.sec < other.sec {\n51 | |             Some(Ordering::Less)\n...  |\n60 | |         }\n   | |_________^ help: consider rewriting the `if` chain with `match`: `match self.sec.cmp(&other.sec) {...}`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\n   = note: `#[deny(clippy::comparison_chain)]` implied by `#[deny(clippy::all)]`\n\n",
              "error: `if` chain can be rewritten with `match`\n  --> crates/libc-types/src/types.rs:53:13\n   |\n53 | /             if self.usec > other.usec {\n54 | |                 Some(Ordering::Greater)\n55 | |             } else if self.usec < other.usec {\n56 | |                 Some(Ordering::Less)\n57 | |             } else {\n58 | |                 Some(Ordering::Equal)\n59 | |             }\n   | |_____________^ help: consider rewriting the `if` chain with `match`: `match self.usec.cmp(&other.usec) {...}`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\n\n"
            ]
          }
        },
        {
          "file": "(virtual) clippy",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=libc-types, checker=Clippy\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/libc-types\n// cmd=cargo clippy --target aarch64-unknown-none-softfloat  --no-deps\n// timestamp=2025-05-25 12:32:02.171722483 +08:00:00\n   Compiling proc-macro2 v1.0.95\n   Compiling quote v1.0.35\n   Compiling syn v2.0.100\n   Compiling num_enum_derive v0.7.3\n    Checking num_enum v0.7.3\n    Checking libc-types v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/libc-types)\nerror: could not compile `libc-types` (lib) due to 3 previous errors\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=libc-types, checker=SemverChecks\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/libc-types\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:34:49.204940388 +08:00:00\n    Building libc-types v0.1.0 (current)\nerror: running cargo-doc on crate 'libc-types' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking bitflags v2.9.1\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `bitflags` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate libc-types v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/crates/libc-types &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate libc-types v0.1.0\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=libc-types, checker=Outdated\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/libc-types\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-25 12:40:14.747141958 +08:00:00\n\nName      Project  Compat  Latest  Kind    Platform\n----      -------  ------  ------  ----    --------\nbitflags  2.9.0    2.9.1   2.9.1   Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=libc-types, checker=SemverChecks\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/libc-types\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-25 12:34:49.715012868 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building libc-types v0.1.0 (current)\nerror: running cargo-doc on crate 'libc-types' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking bitflags v2.9.1\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `bitflags` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate libc-types v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/crates/libc-types &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate libc-types v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "devices",
      "count": 6,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       ├── ext4rsfs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       ├── ext4fs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    ├── ext4rsfs 0.1.0\n    │   └── fs 0.1.0\n    ├── ext4fs 0.1.0\n    │   └── fs 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 111\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=devices, checker=Audit\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/devices\n// cmd=cargo audit\n// timestamp=2025-05-25 12:36:01.760174875 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 782 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (111 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=devices, checker=SemverChecks\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/devices\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:32:32.081362252 +08:00:00\n    Building devices v0.1.0 (current)\nerror: running cargo-doc on crate 'devices' failed with output:\n-----\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate devices v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/crates/devices &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate devices v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=devices, checker=Outdated\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/devices\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-25 12:37:47.191194515 +08:00:00\n\nName        Project  Compat  Latest  Kind    Platform\n----        -------  ------  ------  ----    --------\nfdt-parser  0.4.12   0.4.16  0.4.16  Normal  ---\nlinkme      0.3.22   0.3.33  0.3.33  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=devices, checker=SemverChecks\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/devices\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-25 12:32:32.987101594 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building devices v0.1.0 (current)\nerror: running cargo-doc on crate 'devices' failed with output:\n-----\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate devices v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/crates/devices &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate devices v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "kernel",
      "count": 6,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       ├── ext4rsfs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       ├── ext4fs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    ├── ext4rsfs 0.1.0\n    │   └── fs 0.1.0\n    ├── ext4fs 0.1.0\n    │   └── fs 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 111\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kernel, checker=Audit\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/kernel\n// cmd=cargo audit\n// timestamp=2025-05-25 12:36:11.54052802 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 782 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (111 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) clippy",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kernel, checker=Clippy\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/kernel\n// cmd=cargo clippy --target aarch64-unknown-none-softfloat  --no-deps\n// timestamp=2025-05-25 12:31:38.978831608 +08:00:00\n   Compiling syn v2.0.100\n   Compiling serde v1.0.188\n   Compiling thiserror v2.0.12\n   Compiling zerocopy v0.8.24\n   Compiling futures-core v0.3.28\n   Compiling kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)\n    Checking embedded-io v0.6.1\n    Checking zero v0.1.3\nerror: failed to run custom build command for `kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/check/batch_1/Byte-OS/ByteOS/target/debug/build/kramdisk-bee069a1272df925/build-script-build` (exit status: 101)\n  --- stderr\n\n  thread 'main' panicked at driver/kramdisk/build.rs:13:53:\n  can't find manifest directory: NotPresent\n  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kernel, checker=Lockbud\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/kernel\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:36:48.880385288 +08:00:00\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling polyhal v0.3.2\n   Compiling linkme v0.3.22\n   Compiling num_enum v0.7.3\n   Compiling thiserror v2.0.12\n   Compiling libc-types v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/libc-types)\n   Compiling zerocopy v0.8.24\n   Compiling embedded-io v0.6.1\n   Compiling kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)\nerror: failed to run custom build command for `kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/check/batch_1/Byte-OS/ByteOS/target/debug/build/kramdisk-0b919c9e6bf0b894/build-script-build` (exit status: 101)\n  --- stderr\n\n  thread 'main' panicked at driver/kramdisk/build.rs:13:53:\n  can't find manifest directory: NotPresent\n  stack backtrace:\n     0:     0x56011d7cd720 - std::backtrace_rs::backtrace::libunwind::trace::h09b3d24f06048964\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/../../backtrace/src/backtrace/libunwind.rs:116:5\n     1:     0x56011d7cd720 - std::backtrace_rs::backtrace::trace_unsynchronized::hf47addf765c6ae4e\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n     2:     0x56011d7cd720 - std::sys::backtrace::_print_fmt::h1cac4748ae805433\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/sys/backtrace.rs:66:9\n     3:     0x56011d7cd720 - <std::sys::backtrace::BacktraceLock::print::DisplayBacktrace as core::fmt::Display>::fmt::h51876e9b806abd2f\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/sys/backtrace.rs:39:26\n     4:     0x56011d7ead23 - core::fmt::rt::Argument::fmt::h74675d727819c734\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/fmt/rt.rs:177:76\n     5:     0x56011d7ead23 - core::fmt::write::hec8160b518640e0a\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/fmt/mod.rs:1449:21\n     6:     0x56011d7caaa3 - std::io::Write::write_fmt::h23dd9fd522f1ed73\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/io/mod.rs:1890:15\n     7:     0x56011d7cd572 - std::sys::backtrace::BacktraceLock::print::h82fa1cbd2f5c85f6\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/sys/backtrace.rs:42:9\n     8:     0x56011d7ce4bf - std::panicking::default_hook::{{closure}}::h0c71ebc4d32ee68d\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:298:22\n     9:     0x56011d7ce32a - std::panicking::default_hook::h869bbd2dc4246a59\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:325:9\n    10:     0x56011d7ced92 - std::panicking::rust_panic_with_hook::he7cb010bd1162eb7\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:831:13\n    11:     0x56011d7cec2a - std::panicking::begin_panic_handler::{{closure}}::h144a44d32326050e\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:704:13\n    12:     0x56011d7cdc29 - std::sys::backtrace::__rust_end_short_backtrace::h7baa569e657f05a9\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/sys/backtrace.rs:168:18\n    13:     0x56011d7ce8bd - rust_begin_unwind\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:695:5\n    14:     0x56011d7e9f50 - core::panicking::panic_fmt::hc13ec85888cb23ce\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/panicking.rs:75:14\n    15:     0x56011d7ea2f6 - core::result::unwrap_failed::h68ee3ebc0a871e1d\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/result.rs:1704:5\n    16:     0x56011d7aba46 - core::result::Result<T,E>::expect::ha0c8de9ab1b1600c\n                                 at /home/runner/.rustup/toolchains/nightly-2025-02-01-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:1061:23\n    17:     0x56011d7ac759 - build_script_build::main::ha4954a181e90d83d\n                                 at /home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk/build.rs:13:23\n    18:     0x56011d7ab34b - core::ops::function::FnOnce::call_once::hd19b8ab106fe7b15\n                                 at /home/runner/.rustup/toolchains/nightly-2025-02-01-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5\n    19:     0x56011d7aabbe - std::sys::backtrace::__rust_begin_short_backtrace::hda555096c8e7425e\n                                 at /home/runner/.rustup/toolchains/nightly-2025-02-01-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/backtrace.rs:152:18\n    20:     0x56011d7aaa91 - std::rt::lang_start::{{closure}}::h760865ba532539ce\n                                 at /home/runner/.rustup/toolchains/nightly-2025-02-01-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/rt.rs:199:18\n    21:     0x56011d7c7ce0 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::h73c200d88ac341db\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ops/function.rs:284:13\n    22:     0x56011d7c7ce0 - std::panicking::try::do_call::h5d854913854b71fe\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:587:40\n    23:     0x56011d7c7ce0 - std::panicking::try::hf1ae1b2a2498e678\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:550:19\n    24:     0x56011d7c7ce0 - std::panic::catch_unwind::hcfb0a552e6092b8e\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panic.rs:358:14\n    25:     0x56011d7c7ce0 - std::rt::lang_start_internal::{{closure}}::hb0245fc583346cd7\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/rt.rs:168:24\n    26:     0x56011d7c7ce0 - std::panicking::try::do_call::h946e97edafdf2f58\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:587:40\n    27:     0x56011d7c7ce0 - std::panicking::try::ha9077e2e87ccc6a6\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:550:19\n    28:     0x56011d7c7ce0 - std::panic::catch_unwind::hd02f80e9111b6f00\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panic.rs:358:14\n    29:     0x56011d7c7ce0 - std::rt::lang_start_internal::h13b1bd40350dac66\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/rt.rs:164:5\n    30:     0x56011d7aaa77 - std::rt::lang_start::h6dd3f87e7892aca1\n                                 at /home/runner/.rustup/toolchains/nightly-2025-02-01-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/rt.rs:198:5\n    31:     0x56011d7acb0e - main\n    32:     0x7f9e8322a1ca - <unknown>\n    33:     0x7f9e8322a28b - __libc_start_main\n    34:     0x56011d7aa155 - _start\n    35:                0x0 - <unknown>\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=kernel, checker=Outdated\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/kernel\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-25 12:39:10.279925595 +08:00:00\n\nName             Project  Compat   Latest   Kind    Platform\n----             -------  ------   ------   ----    --------\nasync-recursion  1.1.0    1.1.1    1.1.1    Normal  ---\nbitflags         2.9.0    2.9.1    2.9.1    Normal  ---\nfutures-lite     1.13.0   ---      2.6.0    Normal  ---\nhashbrown        0.14.5   ---      0.15.3   Normal  ---\nserde            1.0.188  1.0.219  1.0.219  Build   ---\nserde_derive     1.0.188  1.0.219  1.0.219  Build   ---\ntoml             0.5.11   ---      0.8.22   Build   ---\nxmas-elf         0.9.0    0.9.1    0.10.0   Normal  ---\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "ns16550a",
      "count": 6,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       ├── ext4rsfs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       ├── ext4fs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    ├── ext4rsfs 0.1.0\n    │   └── fs 0.1.0\n    ├── ext4fs 0.1.0\n    │   └── fs 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 111\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ns16550a, checker=Audit\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/ns16550a\n// cmd=cargo audit\n// timestamp=2025-05-25 12:36:17.987427585 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 782 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (111 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ns16550a, checker=SemverChecks\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/ns16550a\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:35:01.525592317 +08:00:00\n    Building ns16550a v0.1.0 (current)\nerror: running cargo-doc on crate 'ns16550a' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n    Checking tock-registers v0.8.1\n   Compiling polyhal v0.3.2\n    Checking bitflags v2.9.1\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `bitflags` (lib) due to 1 previous error\nerror: could not compile `tock-registers` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate ns16550a v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/ns16550a &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate ns16550a v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=ns16550a, checker=Outdated\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/ns16550a\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-25 12:40:31.680730103 +08:00:00\n\nName      Project  Compat  Latest  Kind    Platform\n----      -------  ------  ------  ----    --------\nns16550a  0.2.0    ---     0.5.0   Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=ns16550a, checker=SemverChecks\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/ns16550a\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-25 12:35:02.202436218 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building ns16550a v0.1.0 (current)\nerror: running cargo-doc on crate 'ns16550a' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n    Checking tock-registers v0.8.1\n   Compiling polyhal v0.3.2\n    Checking bitflags v2.9.1\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `bitflags` (lib) due to 1 previous error\nerror: could not compile `tock-registers` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate ns16550a v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/ns16550a &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate ns16550a v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "runtime",
      "count": 6,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       ├── ext4rsfs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       ├── ext4fs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    ├── ext4rsfs 0.1.0\n    │   └── fs 0.1.0\n    ├── ext4fs 0.1.0\n    │   └── fs 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 111\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=runtime, checker=Audit\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime\n// cmd=cargo audit\n// timestamp=2025-05-25 12:36:21.799793097 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 782 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (111 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=runtime, checker=SemverChecks\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:35:35.358177257 +08:00:00\n    Building runtime v0.1.0 (current)\nerror: running cargo-doc on crate 'runtime' failed with output:\n-----\n   Compiling autocfg v1.4.0\n    Checking scopeguard v1.2.0\n   Compiling proc-macro2 v1.0.95\n   Compiling hashbrown v0.15.3\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate runtime v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate runtime v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=runtime, checker=Outdated\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-25 12:41:02.678354316 +08:00:00\n\nName                    Project  Compat  Latest  Kind    Platform\n----                    -------  ------  ------  ----    --------\nbuddy_system_allocator  0.9.0    0.9.1   0.11.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=runtime, checker=SemverChecks\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-25 12:35:36.258599806 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building runtime v0.1.0 (current)\nerror: running cargo-doc on crate 'runtime' failed with output:\n-----\n   Compiling autocfg v1.4.0\n    Checking scopeguard v1.2.0\n   Compiling proc-macro2 v1.0.95\n   Compiling hashbrown v0.15.3\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate runtime v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate runtime v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "general-plic",
      "count": 5,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       ├── ext4rsfs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       ├── ext4fs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    ├── ext4rsfs 0.1.0\n    │   └── fs 0.1.0\n    ├── ext4fs 0.1.0\n    │   └── fs 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 111\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=general-plic, checker=Audit\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/general-plic\n// cmd=cargo audit\n// timestamp=2025-05-25 12:36:09.942267301 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 782 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (111 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=general-plic, checker=SemverChecks\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/general-plic\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:33:50.990769423 +08:00:00\n    Building general-plic v0.1.0 (current)\nerror: running cargo-doc on crate 'general-plic' failed with output:\n-----\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate general-plic v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/general-plic &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate general-plic v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=general-plic, checker=SemverChecks\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/general-plic\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-25 12:33:51.881013139 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building general-plic v0.1.0 (current)\nerror: running cargo-doc on crate 'general-plic' failed with output:\n-----\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate general-plic v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/general-plic &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate general-plic v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "kgoldfish-rtc",
      "count": 5,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       ├── ext4rsfs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       ├── ext4fs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    ├── ext4rsfs 0.1.0\n    │   └── fs 0.1.0\n    ├── ext4fs 0.1.0\n    │   └── fs 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 111\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kgoldfish-rtc, checker=Audit\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kgoldfish-rtc\n// cmd=cargo audit\n// timestamp=2025-05-25 12:36:13.154416734 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 782 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (111 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kgoldfish-rtc, checker=SemverChecks\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kgoldfish-rtc\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:34:10.872536481 +08:00:00\n    Building kgoldfish-rtc v0.1.0 (current)\nerror: running cargo-doc on crate 'kgoldfish-rtc' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n    Checking tock-registers v0.8.1\n   Compiling polyhal v0.3.2\n    Checking bitflags v2.9.1\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `tock-registers` (lib) due to 1 previous error\nerror: could not compile `bitflags` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate kgoldfish-rtc v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/kgoldfish-rtc &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate kgoldfish-rtc v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=kgoldfish-rtc, checker=SemverChecks\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kgoldfish-rtc\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-25 12:34:11.506552722 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building kgoldfish-rtc v0.1.0 (current)\nerror: running cargo-doc on crate 'kgoldfish-rtc' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n    Checking tock-registers v0.8.1\n   Compiling polyhal v0.3.2\n    Checking bitflags v2.9.1\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `tock-registers` (lib) due to 1 previous error\nerror: could not compile `bitflags` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate kgoldfish-rtc v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/kgoldfish-rtc &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate kgoldfish-rtc v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "procfs",
      "count": 5,
      "raw_reports": [
        {
          "file": "filesystem/procfs/src/lib.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: you are using an explicit closure for cloning elements\n  --> filesystem/procfs/src/lib.rs:61:9\n   |\n61 | /         self.inner\n62 | |             .map\n63 | |             .get(name)\n64 | |             .map(|x| x.clone())\n   | |_______________________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_clone\n   = note: `#[warn(clippy::map_clone)]` on by default\nhelp: consider calling the dedicated `cloned` method\n   |\n61 ~         self.inner\n62 +             .map\n63 +             .get(name).cloned()\n   |\n\n",
              "warning: iterating on a map's keys\n  --> filesystem/procfs/src/lib.rs:69:12\n   |\n69 |           Ok(self\n   |  ____________^\n70 | |             .inner\n71 | |             .map\n72 | |             .iter()\n...  |\n76 | |                 file_type: FileType::Device,\n77 | |             })\n   | |______________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#iter_kv_map\n   = note: `#[warn(clippy::iter_kv_map)]` on by default\nhelp: try\n   |\n69 ~         Ok(self\n70 +             .inner\n71 +             .map.keys().map(|name| DirEntry {\n72 +                 filename: name.to_string(),\n73 +                 len: 0,\n74 +                 file_type: FileType::Device,\n75 +             })\n   |\n\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=procfs, checker=SemverChecks\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/procfs\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:35:16.845384534 +08:00:00\n    Building procfs v0.1.0 (current)\nerror: running cargo-doc on crate 'procfs' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling syscalls v0.6.18 (https://github.com/jasonwhite/syscalls.git#92624de3)\n    Checking num_enum v0.7.3\n    Checking bitflags v2.9.1\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `num_enum` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nerror: could not compile `bitflags` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate procfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/procfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate procfs v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=procfs, checker=SemverChecks\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/procfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-25 12:35:17.464260675 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building procfs v0.1.0 (current)\nerror: running cargo-doc on crate 'procfs' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling syscalls v0.6.18 (https://github.com/jasonwhite/syscalls.git#92624de3)\n    Checking num_enum v0.7.3\n    Checking bitflags v2.9.1\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `num_enum` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nerror: could not compile `bitflags` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate procfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/procfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate procfs v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "ramfs",
      "count": 5,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       ├── ext4rsfs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       ├── ext4fs 0.1.0\n│       │       │   └── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    ├── ext4rsfs 0.1.0\n    │   └── fs 0.1.0\n    ├── ext4fs 0.1.0\n    │   └── fs 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 111\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ramfs, checker=Audit\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ramfs\n// cmd=cargo audit\n// timestamp=2025-05-25 12:36:19.8890333 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 782 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (111 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ramfs, checker=SemverChecks\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ramfs\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:35:34.722474796 +08:00:00\n    Building ramfs v0.1.0 (current)\nerror: running cargo-doc on crate 'ramfs' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n    Checking tock-registers v0.8.1\n    Checking bitflags v2.9.1\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `tock-registers` (lib) due to 1 previous error\nerror: could not compile `bitflags` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate ramfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ramfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate ramfs v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:36:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:36:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=ramfs, checker=SemverChecks\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ramfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-25 12:35:35.355518187 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building ramfs v0.1.0 (current)\nerror: running cargo-doc on crate 'ramfs' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n    Checking tock-registers v0.8.1\n    Checking bitflags v2.9.1\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `tock-registers` (lib) due to 1 previous error\nerror: could not compile `bitflags` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate ramfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ramfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate ramfs v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "sync",
      "count": 3,
      "raw_reports": [
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=sync, checker=SemverChecks\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:35:51.342528373 +08:00:00\n    Building sync v0.1.0 (current)\nerror: running cargo-doc on crate 'sync' failed with output:\n-----\n   Compiling lock_api v0.4.12\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate sync v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate sync v0.1.0\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=sync, checker=Outdated\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-25 12:41:29.036742518 +08:00:00\n\nName  Project  Compat  Latest  Kind    Platform\n----  -------  ------  ------  ----    --------\nspin  0.9.8    ---     0.10.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=sync, checker=SemverChecks\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-25 12:35:51.686262249 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building sync v0.1.0 (current)\nerror: running cargo-doc on crate 'sync' failed with output:\n-----\n   Compiling lock_api v0.4.12\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate sync v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate sync v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "vfscore",
      "count": 3,
      "raw_reports": [
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=vfscore, checker=SemverChecks\n// toolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-25 12:35:57.379944739 +08:00:00\n    Building vfscore v0.1.0 (current)\nerror: running cargo-doc on crate 'vfscore' failed with output:\n-----\n    Checking bitflags v2.9.1\n   Compiling syscalls v0.6.18 (https://github.com/jasonwhite/syscalls.git#92624de3)\n    Checking downcast-rs v1.2.1\n    Checking num_enum v0.7.3\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `downcast-rs` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `num_enum` (lib) due to 1 previous error\nerror: could not compile `bitflags` (lib) due to 1 previous error\nerror: could not compile `syscalls` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate vfscore v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate vfscore v0.1.0\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=vfscore, checker=Outdated\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-25 12:41:31.767091603 +08:00:00\n\nName         Project  Compat  Latest  Kind    Platform\n----         -------  ------  ------  ----    --------\nbitflags     2.9.0    2.9.1   2.9.1   Normal  ---\ndowncast-rs  1.2.0    1.2.1   2.0.1   Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=vfscore, checker=SemverChecks\ntoolchain=nightly-2025-02-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-25 12:35:57.908039431 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building vfscore v0.1.0 (current)\nerror: running cargo-doc on crate 'vfscore' failed with output:\n-----\n    Checking bitflags v2.9.1\n   Compiling syscalls v0.6.18 (https://github.com/jasonwhite/syscalls.git#92624de3)\n    Checking downcast-rs v1.2.1\n    Checking num_enum v0.7.3\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `downcast-rs` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `num_enum` (lib) due to 1 previous error\nerror: could not compile `bitflags` (lib) due to 1 previous error\nerror: could not compile `syscalls` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate vfscore v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate vfscore v0.1.0\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Outdated",
    "Geiger",
    "Unformatted"
  ]
}