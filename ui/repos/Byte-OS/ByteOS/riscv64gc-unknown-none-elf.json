{
  "repo": {
    "user": "Byte-OS",
    "repo": "ByteOS"
  },
  "data": [
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "fs",
      "count": 50,
      "raw_reports": [
        {
          "file": "filesystem/devfs/src/tty.rs",
          "features": "",
          "count": 21,
          "kinds": {
            "Clippy(Warn)": [
              "warning: this `else { if .. }` block can be collapsed\n  --> filesystem/devfs/src/tty.rs:39:16\n   |\n39 |           } else {\n   |  ________________^\n40 | |             if let Some(c) = get_char() {\n41 | |                 buffer[0] = c as u8;\n42 | |                 Ok(1)\n...  |\n45 | |             }\n46 | |         }\n   | |_________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if\n   = note: `#[warn(clippy::collapsible_else_if)]` on by default\nhelp: collapse nested if block\n   |\n39 ~         } else if let Some(c) = get_char() {\n40 +             buffer[0] = c as u8;\n41 +             Ok(1)\n42 +         } else {\n43 +             Err(Errno::EWOULDBLOCK)\n44 +         }\n   |\n\n",
              "warning: this `else { if .. }` block can be collapsed\n  --> filesystem/devfs/src/tty.rs:74:20\n   |\n74 |               } else {\n   |  ____________________^\n75 | |                 if let Some(c) = get_char() {\n76 | |                     res |= PollEvent::POLLIN;\n77 | |                     self.buffer.lock().push_back(c);\n78 | |                 }\n79 | |             }\n   | |_____________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if\nhelp: collapse nested if block\n   |\n74 ~             } else if let Some(c) = get_char() {\n75 +                 res |= PollEvent::POLLIN;\n76 +                 self.buffer.lock().push_back(c);\n77 +             }\n   |\n\n",
              "warning: you should consider adding a `Default` implementation for `Tty`\n  --> filesystem/devfs/src/tty.rs:19:5\n   |\n19 | /     pub fn new() -> Tty {\n20 | |         Tty {\n21 | |             buffer: Mutex::new(VecDeque::new()),\n22 | |             termios: Default::default(),\n...  |\n25 | |         }\n26 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n   = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n   |\n18 + impl Default for Tty {\n19 +     fn default() -> Self {\n20 +         Self::new()\n21 +     }\n22 + }\n   |\n\n",
              "warning: length comparison to zero\n  --> filesystem/devfs/src/tty.rs:31:17\n   |\n31 |         assert!(buffer.len() > 0);\n   |                 ^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!buffer.is_empty()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n   = note: `#[warn(clippy::len_zero)]` on by default\n\n",
              "warning: the loop variable `i` is only used to index `buffer`\n  --> filesystem/devfs/src/tty.rs:35:22\n   |\n35 |             for i in 0..rlen {\n   |                      ^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\n   = note: `#[warn(clippy::needless_range_loop)]` on by default\nhelp: consider using an iterator\n   |\n35 |             for <item> in buffer.iter_mut().take(rlen) {\n   |                 ~~~~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
              "warning: casting to the same type is unnecessary (`u8` -> `u8`)\n  --> filesystem/devfs/src/tty.rs:41:29\n   |\n41 |                 buffer[0] = c as u8;\n   |                             ^^^^^^^ help: try: `c`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n   = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n",
              "warning: name `TCGETS` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:218:5\n    |\n218 |     TCGETS = 0x5401,\n    |     ^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tcgets`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n    = note: `#[warn(clippy::upper_case_acronyms)]` on by default\n\n",
              "warning: name `TCSETS` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:220:5\n    |\n220 |     TCSETS = 0x5402,\n    |     ^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tcsets`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TCSETSW` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:222:5\n    |\n222 |     TCSETSW = 0x5403,\n    |     ^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tcsetsw`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TCSETSF` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:224:5\n    |\n224 |     TCSETSF = 0x5404,\n    |     ^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tcsetsf`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TCGETA` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:228:5\n    |\n228 |     TCGETA = 0x5405,\n    |     ^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tcgeta`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TCSETA` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:230:5\n    |\n230 |     TCSETA = 0x5406,\n    |     ^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tcseta`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TCSETAW` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:232:5\n    |\n232 |     TCSETAW = 0x5407,\n    |     ^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tcsetaw`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TCSETAF` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:234:5\n    |\n234 |     TCSETAF = 0x5408,\n    |     ^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tcsetaf`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TIOCGPGRP` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:237:5\n    |\n237 |     TIOCGPGRP = 0x540F,\n    |     ^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tiocgpgrp`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TIOCSPGRP` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:239:5\n    |\n239 |     TIOCSPGRP = 0x5410,\n    |     ^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tiocspgrp`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TIOCGWINSZ` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:242:5\n    |\n242 |     TIOCGWINSZ = 0x5413,\n    |     ^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tiocgwinsz`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TIOCSWINSZ` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:244:5\n    |\n244 |     TIOCSWINSZ = 0x5414,\n    |     ^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tiocswinsz`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `FIONCLEX` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:247:5\n    |\n247 |     FIONCLEX = 0x5450,\n    |     ^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Fionclex`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `FIOCLEX` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:249:5\n    |\n249 |     FIOCLEX = 0x5451,\n    |     ^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Fioclex`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `FIONBIO` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:253:5\n    |\n253 |     FIONBIO = 0x5421,\n    |     ^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Fionbio`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n"
            ]
          }
        },
        {
          "file": "filesystem/fs/src/file.rs",
          "features": "",
          "count": 10,
          "kinds": {
            "Clippy(Warn)": [
              "warning: this lifetime isn't used in the impl\n  --> filesystem/fs/src/file.rs:17:6\n   |\n17 | impl<'a> File {\n   |      ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes\n   = note: `#[warn(clippy::extra_unused_lifetimes)]` on by default\n\n",
              "warning: manual implementation of an assign operation\n   --> filesystem/fs/src/file.rs:129:13\n    |\n129 |             ptr = ptr + current_len;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `ptr += current_len`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern\n    = note: `#[warn(clippy::assign_op_pattern)]` on by default\n\n",
              "warning: length comparison to zero\n   --> filesystem/fs/src/file.rs:225:12\n    |\n225 |         if buffer.len() == 0 {\n    |            ^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `buffer.is_empty()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n    = note: `#[warn(clippy::len_zero)]` on by default\n\n",
              "warning: using `map` over `inspect`\n   --> filesystem/fs/src/file.rs:233:43\n    |\n233 |         self.inner.readat(offset, buffer).map(|x| {\n    |                                           ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_inspect\n    = note: `#[warn(clippy::manual_inspect)]` on by default\nhelp: try\n    |\n233 ~         self.inner.readat(offset, buffer).inspect(|&x| {\n234 ~             *self.offset.lock() += x;\n    |\n\n",
              "warning: length comparison to zero\n   --> filesystem/fs/src/file.rs:241:12\n    |\n241 |         if buffer.len() == 0 {\n    |            ^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `buffer.is_empty()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n\n",
              "warning: using `map` over `inspect`\n   --> filesystem/fs/src/file.rs:245:44\n    |\n245 |         self.inner.writeat(offset, buffer).map(|x| {\n    |                                            ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_inspect\nhelp: try\n    |\n245 ~         self.inner.writeat(offset, buffer).inspect(|&x| {\n246 ~             *self.offset.lock() += x;\n    |\n\n",
              "warning: using `map` over `inspect`\n   --> filesystem/fs/src/file.rs:258:10\n    |\n258 |         .map(|x| {\n    |          ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_inspect\nhelp: try\n    |\n258 ~         .inspect(|&x| {\n259 ~             *self.offset.lock() += x;\n    |\n\n",
              "warning: length comparison to zero\n   --> filesystem/fs/src/file.rs:266:12\n    |\n266 |         if buffer.len() == 0 {\n    |            ^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `buffer.is_empty()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n\n",
              "warning: using `map` over `inspect`\n   --> filesystem/fs/src/file.rs:272:14\n    |\n272 |             .map(|x| {\n    |              ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_inspect\nhelp: try\n    |\n272 ~             .inspect(|&x| {\n273 ~                 *self.offset.lock() += x;\n    |\n\n",
              "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> filesystem/fs/src/file.rs:270:47\n    |\n270 |         WaitBlockingWrite(self.inner.clone(), &buffer, offset)\n    |                                               ^^^^^^^ help: change this to: `buffer`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n    = note: `#[warn(clippy::needless_borrow)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "filesystem/fs/src/lib.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning: importing legacy numeric constants\n  --> filesystem/fs/src/lib.rs:27:5\n   |\n27 |     usize,\n   |     ^^^^^\n   |\n   = help: remove this import\n   = note: then `usize::<CONST>` will resolve to the respective associated constant\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n   = note: `#[warn(clippy::legacy_numeric_constants)]` on by default\n\n",
              "warning: length comparison to zero\n  --> filesystem/fs/src/lib.rs:52:8\n   |\n52 |     if get_blk_devices().len() > 0 {\n   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!get_blk_devices().is_empty()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n\n",
              "warning: deref which would be done by auto-deref\n  --> filesystem/fs/src/lib.rs:97:35\n   |\n97 |         match file.readat(offset, *buffer) {\n   |                                   ^^^^^^^ help: try: `buffer`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref\n   = note: `#[warn(clippy::explicit_auto_deref)]` on by default\n\n",
              "warning: deref which would be done by auto-deref\n   --> filesystem/fs/src/lib.rs:120:36\n    |\n120 |         match file.writeat(offset, *buffer) {\n    |                                    ^^^^^^^ help: try: `buffer`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref\n\n"
            ]
          }
        },
        {
          "file": "filesystem/devfs/src/lib.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: you should consider adding a `Default` implementation for `DevDir`\n  --> filesystem/devfs/src/lib.rs:60:5\n   |\n60 | /     pub fn new() -> Self {\n61 | |         let mut map: BTreeMap<&'static str, Arc<dyn INodeInterface>> = BTreeMap::new();\n62 | |         map.insert(\"stdout\", Arc::new(Tty::new()));\n63 | |         map.insert(\"stderr\", Arc::new(Tty::new()));\n...  |\n74 | |         Self { map }\n75 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\nhelp: try adding this\n   |\n59 + impl Default for DevDir {\n60 +     fn default() -> Self {\n61 +         Self::new()\n62 +     }\n63 + }\n   |\n\n",
              "warning: you are using an explicit closure for cloning elements\n  --> filesystem/devfs/src/lib.rs:84:9\n   |\n84 | /         self.inner\n85 | |             .map\n86 | |             .get(name)\n87 | |             .map(|x| x.clone())\n   | |_______________________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_clone\n   = note: `#[warn(clippy::map_clone)]` on by default\nhelp: consider calling the dedicated `cloned` method\n   |\n84 ~         self.inner\n85 +             .map\n86 +             .get(name).cloned()\n   |\n\n",
              "warning: iterating on a map's keys\n   --> filesystem/devfs/src/lib.rs:92:12\n    |\n92  |           Ok(self\n    |  ____________^\n93  | |             .inner\n94  | |             .map\n95  | |             .iter()\n...   |\n99  | |                 file_type: FileType::Device,\n100 | |             })\n    | |______________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#iter_kv_map\n    = note: `#[warn(clippy::iter_kv_map)]` on by default\nhelp: try\n    |\n92  ~         Ok(self\n93  +             .inner\n94  +             .map.keys().map(|name| DirEntry {\n95  +                 filename: name.to_string(),\n96  +                 len: 0,\n97  +                 file_type: FileType::Device,\n98  +             })\n    |\n\n"
            ]
          }
        },
        {
          "file": "filesystem/fs/src/pipe.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: this `if` statement can be collapsed\n  --> filesystem/fs/src/pipe.rs:29:9\n   |\n29 | /         if events.contains(PollEvent::POLLOUT) {\n30 | |             if self.0.lock().len() <= 0x50000 {\n31 | |                 res |= PollEvent::POLLOUT;\n32 | |             }\n33 | |         }\n   | |_________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n   = note: `#[warn(clippy::collapsible_if)]` on by default\nhelp: collapse nested if block\n   |\n29 ~         if events.contains(PollEvent::POLLOUT) && self.0.lock().len() <= 0x50000 {\n30 +             res |= PollEvent::POLLOUT;\n31 +         }\n   |\n\n",
              "warning: this `if` statement can be collapsed\n  --> filesystem/fs/src/pipe.rs:76:9\n   |\n76 | /         if events.contains(PollEvent::POLLERR) {\n77 | |             if self.queue.lock().len() == 0 && Weak::strong_count(&self.sender) == 0 {\n78 | |                 res |= PollEvent::POLLERR;\n79 | |             }\n80 | |         }\n   | |_________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n   |\n76 ~         if events.contains(PollEvent::POLLERR) && self.queue.lock().len() == 0 && Weak::strong_count(&self.sender) == 0 {\n77 +             res |= PollEvent::POLLERR;\n78 +         }\n   |\n\n",
              "warning: useless conversion to the same type: `core::iter::Enumerate<alloc::collections::vec_deque::Drain<'_, u8>>`\n  --> filesystem/fs/src/pipe.rs:53:9\n   |\n53 | /         queue\n54 | |             .drain(..rlen)\n55 | |             .enumerate()\n56 | |             .into_iter()\n   | |________________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n   = note: `#[warn(clippy::useless_conversion)]` on by default\nhelp: consider removing `.into_iter()`\n   |\n53 ~         queue\n54 +             .drain(..rlen)\n55 +             .enumerate()\n   |\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 780,\n    \"last-commit\": \"982c2320aa55b3095110a0b0eadd446d83be45f9\",\n    \"last-updated\": \"2025-05-14T22:55:51+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 101\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=fs, checker=Audit\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs\n// cmd=cargo audit\n// timestamp=2025-05-16 5:30:48.289991167 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 780 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (101 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=fs, checker=Lockbud\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:31:20.218382677 +08:00:00\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling polyhal v0.2.4\n   Compiling fs v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs)\n   Compiling procfs v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/procfs)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=fs, checker=Rapx\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:33:42.942090914 +08:00:00\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.8\n    Checking scopeguard v1.1.0\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking bitflags v2.9.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n    Checking critical-section v1.2.0\n   Compiling lock_api v0.4.9\n   Compiling polyhal v0.2.4\n    Checking riscv-pac v0.2.0\n   Compiling quote v1.0.35\n   Compiling syscalls v0.6.18 (https://github.com/jasonwhite/syscalls.git#92624de3)\n    Checking embedded-hal v1.0.0\n   Compiling syn v2.0.100\n    Checking spin v0.9.8\n    Checking log v0.4.27\n    Checking spin v0.10.0\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking sbi-rt v0.0.2\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking cfg-if v1.0.0\n    Checking arrayvec v0.7.6\n    Checking fdt-parser v0.4.12\n    Checking lazyinit v0.2.1\n    Checking buddy_system_allocator v0.9.0\n    Checking downcast-rs v1.2.0\n    Checking bit_field v0.10.2\n   Compiling num-traits v0.2.16\n    Checking vfscore v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore)\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\n   Compiling fs v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs)\n   Compiling riscv-macros v0.2.0\n   Compiling polyhal-macro v0.2.4\n   Compiling linkme-impl v0.3.22\n   Compiling num-derive v0.4.0\n    Checking linkme v0.3.22\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n154 | |         // Restore Kernel Context.\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n186 | |         // Switch to new page table.\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nFor more information about this error, try `rustc --explain E0787`.\nerror: could not compile `polyhal` (lib) due to 3 previous errors\nwarning: build failed, waiting for other jobs to finish...\n21:33:50|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=fs, checker=SemverChecks\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:28:50.826391054 +08:00:00\n    Building fs v0.1.0 (current)\nerror: running cargo-doc on crate 'fs' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking bitflags v2.9.1\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking log v0.4.27\n    Checking spin v0.9.8\n    Checking critical-section v1.2.0\n    Checking riscv-pac v0.2.0\n    Checking embedded-hal v1.0.0\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking spin v0.10.0\n   Compiling syscalls v0.6.18 (https://github.com/jasonwhite/syscalls.git#92624de3)\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking fdt-parser v0.4.13\n    Checking arrayvec v0.7.6\n    Checking lazyinit v0.2.1\n    Checking cfg-if v1.0.0\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking buddy_system_allocator v0.9.1\n    Checking bit_field v0.10.2\n    Checking downcast-rs v1.2.1\n   Compiling num-traits v0.2.19\n    Checking linkme v0.3.32\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\n   Compiling fs v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs)\n    Checking vfscore v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore)\n    Checking procfs v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/procfs)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate fs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate fs v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=fs, checker=Outdated\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-16 5:39:52.825464647 +08:00:00\n\nName      Project  Compat  Latest  Kind    Platform\n----      -------  ------  ------  ----    --------\nbitflags  2.9.0    2.9.1   2.9.1   Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=fs, checker=SemverChecks\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-05-16 5:28:52.93886095 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building fs v0.1.0 (current)\nerror: running cargo-doc on crate 'fs' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking bitflags v2.9.1\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking log v0.4.27\n    Checking spin v0.9.8\n    Checking critical-section v1.2.0\n    Checking riscv-pac v0.2.0\n    Checking embedded-hal v1.0.0\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking spin v0.10.0\n   Compiling syscalls v0.6.18 (https://github.com/jasonwhite/syscalls.git#92624de3)\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking fdt-parser v0.4.13\n    Checking arrayvec v0.7.6\n    Checking lazyinit v0.2.1\n    Checking cfg-if v1.0.0\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking buddy_system_allocator v0.9.1\n    Checking bit_field v0.10.2\n    Checking downcast-rs v1.2.1\n   Compiling num-traits v0.2.19\n    Checking linkme v0.3.32\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\n   Compiling fs v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs)\n    Checking vfscore v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore)\n    Checking procfs v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/procfs)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate fs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate fs v0.1.0\n"
            ]
          }
        },
        {
          "file": "filesystem/fs/src/pathbuf.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: you should consider adding a `Default` implementation for `PathBuf`\n  --> filesystem/fs/src/pathbuf.rs:32:5\n   |\n32 | /     pub const fn new() -> Self {\n33 | |         Self(Vec::new())\n34 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n   = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n   |\n31 + impl Default for PathBuf {\n32 +     fn default() -> Self {\n33 +         Self::new()\n34 +     }\n35 + }\n   |\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "devfs",
      "count": 32,
      "raw_reports": [
        {
          "file": "filesystem/devfs/src/tty.rs",
          "features": "",
          "count": 21,
          "kinds": {
            "Clippy(Warn)": [
              "warning: this `else { if .. }` block can be collapsed\n  --> filesystem/devfs/src/tty.rs:39:16\n   |\n39 |           } else {\n   |  ________________^\n40 | |             if let Some(c) = get_char() {\n41 | |                 buffer[0] = c as u8;\n42 | |                 Ok(1)\n...  |\n45 | |             }\n46 | |         }\n   | |_________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if\n   = note: `#[warn(clippy::collapsible_else_if)]` on by default\nhelp: collapse nested if block\n   |\n39 ~         } else if let Some(c) = get_char() {\n40 +             buffer[0] = c as u8;\n41 +             Ok(1)\n42 +         } else {\n43 +             Err(Errno::EWOULDBLOCK)\n44 +         }\n   |\n\n",
              "warning: this `else { if .. }` block can be collapsed\n  --> filesystem/devfs/src/tty.rs:74:20\n   |\n74 |               } else {\n   |  ____________________^\n75 | |                 if let Some(c) = get_char() {\n76 | |                     res |= PollEvent::POLLIN;\n77 | |                     self.buffer.lock().push_back(c);\n78 | |                 }\n79 | |             }\n   | |_____________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if\nhelp: collapse nested if block\n   |\n74 ~             } else if let Some(c) = get_char() {\n75 +                 res |= PollEvent::POLLIN;\n76 +                 self.buffer.lock().push_back(c);\n77 +             }\n   |\n\n",
              "warning: you should consider adding a `Default` implementation for `Tty`\n  --> filesystem/devfs/src/tty.rs:19:5\n   |\n19 | /     pub fn new() -> Tty {\n20 | |         Tty {\n21 | |             buffer: Mutex::new(VecDeque::new()),\n22 | |             termios: Default::default(),\n...  |\n25 | |         }\n26 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n   = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n   |\n18 + impl Default for Tty {\n19 +     fn default() -> Self {\n20 +         Self::new()\n21 +     }\n22 + }\n   |\n\n",
              "warning: length comparison to zero\n  --> filesystem/devfs/src/tty.rs:31:17\n   |\n31 |         assert!(buffer.len() > 0);\n   |                 ^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!buffer.is_empty()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n   = note: `#[warn(clippy::len_zero)]` on by default\n\n",
              "warning: the loop variable `i` is only used to index `buffer`\n  --> filesystem/devfs/src/tty.rs:35:22\n   |\n35 |             for i in 0..rlen {\n   |                      ^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\n   = note: `#[warn(clippy::needless_range_loop)]` on by default\nhelp: consider using an iterator\n   |\n35 |             for <item> in buffer.iter_mut().take(rlen) {\n   |                 ~~~~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
              "warning: casting to the same type is unnecessary (`u8` -> `u8`)\n  --> filesystem/devfs/src/tty.rs:41:29\n   |\n41 |                 buffer[0] = c as u8;\n   |                             ^^^^^^^ help: try: `c`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n   = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n",
              "warning: name `TCGETS` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:218:5\n    |\n218 |     TCGETS = 0x5401,\n    |     ^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tcgets`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n    = note: `#[warn(clippy::upper_case_acronyms)]` on by default\n\n",
              "warning: name `TCSETS` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:220:5\n    |\n220 |     TCSETS = 0x5402,\n    |     ^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tcsets`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TCSETSW` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:222:5\n    |\n222 |     TCSETSW = 0x5403,\n    |     ^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tcsetsw`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TCSETSF` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:224:5\n    |\n224 |     TCSETSF = 0x5404,\n    |     ^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tcsetsf`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TCGETA` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:228:5\n    |\n228 |     TCGETA = 0x5405,\n    |     ^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tcgeta`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TCSETA` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:230:5\n    |\n230 |     TCSETA = 0x5406,\n    |     ^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tcseta`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TCSETAW` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:232:5\n    |\n232 |     TCSETAW = 0x5407,\n    |     ^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tcsetaw`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TCSETAF` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:234:5\n    |\n234 |     TCSETAF = 0x5408,\n    |     ^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tcsetaf`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TIOCGPGRP` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:237:5\n    |\n237 |     TIOCGPGRP = 0x540F,\n    |     ^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tiocgpgrp`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TIOCSPGRP` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:239:5\n    |\n239 |     TIOCSPGRP = 0x5410,\n    |     ^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tiocspgrp`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TIOCGWINSZ` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:242:5\n    |\n242 |     TIOCGWINSZ = 0x5413,\n    |     ^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tiocgwinsz`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `TIOCSWINSZ` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:244:5\n    |\n244 |     TIOCSWINSZ = 0x5414,\n    |     ^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Tiocswinsz`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `FIONCLEX` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:247:5\n    |\n247 |     FIONCLEX = 0x5450,\n    |     ^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Fionclex`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `FIOCLEX` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:249:5\n    |\n249 |     FIOCLEX = 0x5451,\n    |     ^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Fioclex`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `FIONBIO` contains a capitalized acronym\n   --> filesystem/devfs/src/tty.rs:253:5\n    |\n253 |     FIONBIO = 0x5421,\n    |     ^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `Fionbio`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n"
            ]
          }
        },
        {
          "file": "filesystem/devfs/src/lib.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: you should consider adding a `Default` implementation for `DevDir`\n  --> filesystem/devfs/src/lib.rs:60:5\n   |\n60 | /     pub fn new() -> Self {\n61 | |         let mut map: BTreeMap<&'static str, Arc<dyn INodeInterface>> = BTreeMap::new();\n62 | |         map.insert(\"stdout\", Arc::new(Tty::new()));\n63 | |         map.insert(\"stderr\", Arc::new(Tty::new()));\n...  |\n74 | |         Self { map }\n75 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\nhelp: try adding this\n   |\n59 + impl Default for DevDir {\n60 +     fn default() -> Self {\n61 +         Self::new()\n62 +     }\n63 + }\n   |\n\n",
              "warning: you are using an explicit closure for cloning elements\n  --> filesystem/devfs/src/lib.rs:84:9\n   |\n84 | /         self.inner\n85 | |             .map\n86 | |             .get(name)\n87 | |             .map(|x| x.clone())\n   | |_______________________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_clone\n   = note: `#[warn(clippy::map_clone)]` on by default\nhelp: consider calling the dedicated `cloned` method\n   |\n84 ~         self.inner\n85 +             .map\n86 +             .get(name).cloned()\n   |\n\n",
              "warning: iterating on a map's keys\n   --> filesystem/devfs/src/lib.rs:92:12\n    |\n92  |           Ok(self\n    |  ____________^\n93  | |             .inner\n94  | |             .map\n95  | |             .iter()\n...   |\n99  | |                 file_type: FileType::Device,\n100 | |             })\n    | |______________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#iter_kv_map\n    = note: `#[warn(clippy::iter_kv_map)]` on by default\nhelp: try\n    |\n92  ~         Ok(self\n93  +             .inner\n94  +             .map.keys().map(|name| DirEntry {\n95  +                 filename: name.to_string(),\n96  +                 len: 0,\n97  +                 file_type: FileType::Device,\n98  +             })\n    |\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 780,\n    \"last-commit\": \"982c2320aa55b3095110a0b0eadd446d83be45f9\",\n    \"last-updated\": \"2025-05-14T22:55:51+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 101\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=devfs, checker=Audit\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/devfs\n// cmd=cargo audit\n// timestamp=2025-05-16 5:30:44.1675405 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 780 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (101 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=devfs, checker=Lockbud\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/devfs\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:31:04.983824757 +08:00:00\n   Compiling scopeguard v1.1.0\n   Compiling lock_api v0.4.9\n   Compiling paste v1.0.15\n   Compiling static_assertions v1.1.0\n   Compiling riscv v0.13.0\n   Compiling sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n   Compiling critical-section v1.2.0\n   Compiling riscv-pac v0.2.0\n   Compiling spin v0.9.8\n   Compiling embedded-hal v1.0.0\n   Compiling bitflags v2.9.0\n   Compiling spin v0.10.0\n   Compiling polyhal v0.2.4\n   Compiling sbi-rt v0.0.2\n   Compiling lazyinit v0.2.1\n   Compiling cfg-if v1.0.0\n   Compiling fdt-parser v0.4.12\n   Compiling log v0.4.27\n   Compiling arrayvec v0.7.6\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling syscalls v0.6.18 (https://github.com/jasonwhite/syscalls.git#92624de3)\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n   Compiling sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n   Compiling buddy_system_allocator v0.9.0\n   Compiling bit_field v0.10.2\n   Compiling num-traits v0.2.16\n   Compiling linkme v0.3.22\n   Compiling timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\n   Compiling downcast-rs v1.2.0\n   Compiling vfscore v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=devfs, checker=Rapx\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/devfs\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:32:10.010780455 +08:00:00\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.8\n    Checking scopeguard v1.1.0\n   Compiling paste v1.0.15\n    Checking static_assertions v1.1.0\n   Compiling riscv v0.13.0\n    Checking sbi-spec v0.0.4\n    Checking critical-section v1.2.0\n   Compiling lock_api v0.4.9\n   Compiling polyhal v0.2.4\n    Checking embedded-hal v1.0.0\n   Compiling quote v1.0.35\n    Checking riscv-pac v0.2.0\n    Checking bitflags v2.9.0\n   Compiling syn v2.0.100\n    Checking spin v0.9.8\n    Checking spin v0.10.0\n    Checking sbi-rt v0.0.2\n    Checking fdt-parser v0.4.12\n    Checking cfg-if v1.0.0\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking arrayvec v0.7.6\n    Checking lazyinit v0.2.1\n   Compiling syscalls v0.6.18 (https://github.com/jasonwhite/syscalls.git#92624de3)\n    Checking log v0.4.27\n    Checking buddy_system_allocator v0.9.0\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n   Compiling num-traits v0.2.16\n    Checking bit_field v0.10.2\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\n    Checking downcast-rs v1.2.0\n    Checking vfscore v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore)\n   Compiling riscv-macros v0.2.0\n   Compiling polyhal-macro v0.2.4\n   Compiling linkme-impl v0.3.22\n   Compiling num-derive v0.4.0\n    Checking linkme v0.3.22\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n154 | |         // Restore Kernel Context.\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n186 | |         // Switch to new page table.\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nFor more information about this error, try `rustc --explain E0787`.\nerror: could not compile `polyhal` (lib) due to 3 previous errors\nwarning: build failed, waiting for other jobs to finish...\n21:32:17|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=devfs, checker=SemverChecks\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/devfs\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:28:16.716846973 +08:00:00\n    Building devfs v0.1.0 (current)\nerror: running cargo-doc on crate 'devfs' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking riscv-pac v0.2.0\n    Checking critical-section v1.2.0\n    Checking embedded-hal v1.0.0\n    Checking spin v0.9.8\n    Checking bitflags v2.9.1\n    Checking spin v0.10.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking lazyinit v0.2.1\n    Checking log v0.4.27\n    Checking fdt-parser v0.4.13\n    Checking arrayvec v0.7.6\n    Checking cfg-if v1.0.0\n   Compiling syscalls v0.6.18 (https://github.com/jasonwhite/syscalls.git#92624de3)\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking buddy_system_allocator v0.9.1\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking bit_field v0.10.2\n   Compiling num-traits v0.2.19\n    Checking linkme v0.3.32\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\n    Checking downcast-rs v1.2.1\n    Checking vfscore v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate devfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/devfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate devfs v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=devfs, checker=Outdated\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/devfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-16 5:39:24.872990255 +08:00:00\n\nName        Project  Compat  Latest  Kind    Platform\n----        -------  ------  ------  ----    --------\nbitflags    2.9.0    2.9.1   2.9.1   Normal  ---\nnum-derive  0.4.0    0.4.2   0.4.2   Normal  ---\nnum-traits  0.2.16   0.2.19  0.2.19  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=devfs, checker=SemverChecks\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/devfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-05-16 5:28:18.83480349 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building devfs v0.1.0 (current)\nerror: running cargo-doc on crate 'devfs' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking riscv-pac v0.2.0\n    Checking critical-section v1.2.0\n    Checking embedded-hal v1.0.0\n    Checking spin v0.9.8\n    Checking bitflags v2.9.1\n    Checking spin v0.10.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking lazyinit v0.2.1\n    Checking log v0.4.27\n    Checking fdt-parser v0.4.13\n    Checking arrayvec v0.7.6\n    Checking cfg-if v1.0.0\n   Compiling syscalls v0.6.18 (https://github.com/jasonwhite/syscalls.git#92624de3)\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking buddy_system_allocator v0.9.1\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking bit_field v0.10.2\n   Compiling num-traits v0.2.19\n    Checking linkme v0.3.32\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\n    Checking downcast-rs v1.2.1\n    Checking vfscore v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate devfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/devfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate devfs v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "kvirtio",
      "count": 18,
      "raw_reports": [
        {
          "file": "driver/kvirtio/src/lib.rs",
          "features": "",
          "count": 7,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unneeded sub `cfg` when there is only one condition\n  --> driver/kvirtio/src/lib.rs:28:7\n   |\n28 | #[cfg(any(target_arch = \"x86_64\"))]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `target_arch = \"x86_64\"`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n   = note: `#[warn(clippy::non_minimal_cfg)]` on by default\n\n",
              "warning: unneeded sub `cfg` when there is only one condition\n  --> driver/kvirtio/src/lib.rs:30:7\n   |\n30 | #[cfg(any(target_arch = \"x86_64\"))]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `target_arch = \"x86_64\"`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n\n",
              "warning: unneeded sub `cfg` when there is only one condition\n  --> driver/kvirtio/src/lib.rs:33:7\n   |\n33 | #[cfg(any(target_arch = \"x86_64\"))]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `target_arch = \"x86_64\"`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n\n",
              "warning: unneeded sub `cfg` when there is only one condition\n  --> driver/kvirtio/src/lib.rs:39:7\n   |\n39 | #[cfg(any(target_arch = \"x86_64\"))]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `target_arch = \"x86_64\"`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n\n",
              "warning: unneeded sub `cfg` when there is only one condition\n  --> driver/kvirtio/src/lib.rs:80:7\n   |\n80 | #[cfg(any(target_arch = \"x86_64\"))]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `target_arch = \"x86_64\"`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n\n",
              "warning: unneeded sub `cfg` when there is only one condition\n   --> driver/kvirtio/src/lib.rs:113:7\n    |\n113 | #[cfg(any(target_arch = \"x86_64\"))]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `target_arch = \"x86_64\"`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n\n",
              "warning: unneeded sub `cfg` when there is only one condition\n   --> driver/kvirtio/src/lib.rs:131:7\n    |\n131 | #[cfg(any(target_arch = \"x86_64\"))]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `target_arch = \"x86_64\"`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n\n"
            ]
          }
        },
        {
          "file": "driver/kvirtio/src/virtio_impl.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: explicit call to `.into_iter()` in function argument accepting `IntoIterator`\n   --> driver/kvirtio/src/virtio_impl.rs:17:40\n    |\n17  |         VIRTIO_CONTAINER.lock().extend(trackers.into_iter());\n    |                                        ^^^^^^^^^^^^^^^^^^^^ help: consider removing the `.into_iter()`: `trackers`\n    |\nnote: this parameter accepts any `IntoIterator`, so you don't need to call `.into_iter()`\n   --> /home/runner/.rustup/toolchains/nightly-2024-08-01-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs:450:18\n    |\n450 |     fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T);\n    |                  ^^^^^^^^^^^^^^^^^^^^^^\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n    = note: `#[warn(clippy::useless_conversion)]` on by default\n\n",
              "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n  --> driver/kvirtio/src/virtio_impl.rs:30:28\n   |\n30 |             let phy_page = paddr as usize >> 12;\n   |                            ^^^^^^^^^^^^^^ help: try: `paddr`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n   = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n",
              "warning: useless conversion to the same type: `usize`\n  --> driver/kvirtio/src/virtio_impl.rs:39:23\n   |\n39 |         NonNull::new((usize::from(paddr) | VIRT_ADDR_START) as *mut u8).unwrap()\n   |                       ^^^^^^^^^^^^^^^^^^ help: consider removing `usize::from()`: `paddr`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 780,\n    \"last-commit\": \"982c2320aa55b3095110a0b0eadd446d83be45f9\",\n    \"last-updated\": \"2025-05-14T22:55:51+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 101\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kvirtio, checker=Audit\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kvirtio\n// cmd=cargo audit\n// timestamp=2025-05-16 5:30:54.406768403 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 780 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (101 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kvirtio, checker=Lockbud\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kvirtio\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:31:40.068550076 +08:00:00\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling polyhal v0.2.4\n   Compiling thiserror v2.0.12\n   Compiling zerocopy v0.8.24\n   Compiling embedded-io v0.6.1\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kvirtio, checker=Rapx\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kvirtio\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:36:18.163255119 +08:00:00\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.8\n   Compiling autocfg v1.4.0\n    Checking scopeguard v1.1.0\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n    Checking embedded-hal v1.0.0\n   Compiling lock_api v0.4.9\n   Compiling polyhal v0.2.4\n    Checking riscv-pac v0.2.0\n   Compiling quote v1.0.35\n    Checking log v0.4.27\n    Checking critical-section v1.2.0\n   Compiling syn v2.0.100\n    Checking spin v0.9.8\n    Checking bitflags v2.9.0\n    Checking spin v0.10.0\n    Checking sbi-rt v0.0.2\n    Checking lazyinit v0.2.1\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking fdt-parser v0.4.12\n    Checking arrayvec v0.7.6\n   Compiling zerocopy v0.8.24\n    Checking cfg-if v1.0.0\n   Compiling thiserror v2.0.12\n    Checking buddy_system_allocator v0.9.0\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking bit_field v0.10.2\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\n    Checking embedded-io v0.6.1\n   Compiling riscv-macros v0.2.0\n   Compiling polyhal-macro v0.2.4\n   Compiling linkme-impl v0.3.22\n   Compiling thiserror-impl v2.0.12\n   Compiling zerocopy-derive v0.8.24\n    Checking linkme v0.3.22\n   Compiling enumn v0.1.14\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n154 | |         // Restore Kernel Context.\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n186 | |         // Switch to new page table.\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nFor more information about this error, try `rustc --explain E0787`.\nerror: could not compile `polyhal` (lib) due to 3 previous errors\nwarning: build failed, waiting for other jobs to finish...\n21:36:24|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kvirtio, checker=SemverChecks\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kvirtio\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:29:37.628828091 +08:00:00\n    Building kvirtio v0.1.0 (current)\nerror: running cargo-doc on crate 'kvirtio' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking log v0.4.27\n    Checking bitflags v2.9.1\n    Checking riscv-pac v0.2.0\n    Checking critical-section v1.2.0\n    Checking spin v0.9.8\n    Checking embedded-hal v1.0.0\n    Checking spin v0.10.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking arrayvec v0.7.6\n    Checking cfg-if v1.0.0\n    Checking lazyinit v0.2.1\n    Checking fdt-parser v0.4.13\n   Compiling zerocopy v0.8.25\n   Compiling thiserror v2.0.12\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking buddy_system_allocator v0.9.1\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking bit_field v0.10.2\n    Checking linkme v0.3.32\n   Compiling enumn v0.1.14\n    Checking embedded-io v0.6.1\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate kvirtio v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/kvirtio &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate kvirtio v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=kvirtio, checker=Outdated\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kvirtio\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-16 5:40:32.425190964 +08:00:00\n\nName            Project  Compat  Latest  Kind    Platform\n----            -------  ------  ------  ----    --------\nvirtio-drivers  0.8.0    ---     0.11.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=kvirtio, checker=SemverChecks\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kvirtio\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-05-16 5:29:39.801765195 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building kvirtio v0.1.0 (current)\nerror: running cargo-doc on crate 'kvirtio' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking log v0.4.27\n    Checking bitflags v2.9.1\n    Checking riscv-pac v0.2.0\n    Checking critical-section v1.2.0\n    Checking spin v0.9.8\n    Checking embedded-hal v1.0.0\n    Checking spin v0.10.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking arrayvec v0.7.6\n    Checking cfg-if v1.0.0\n    Checking lazyinit v0.2.1\n    Checking fdt-parser v0.4.13\n   Compiling zerocopy v0.8.25\n   Compiling thiserror v2.0.12\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking buddy_system_allocator v0.9.1\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking bit_field v0.10.2\n    Checking linkme v0.3.32\n   Compiling enumn v0.1.14\n    Checking embedded-io v0.6.1\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate kvirtio v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/kvirtio &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate kvirtio v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "executor",
      "count": 12,
      "raw_reports": [
        {
          "file": "crates/executor/src/executor.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: very complex type used. Consider factoring parts into `type` definitions\n  --> crates/executor/src/executor.rs:30:12\n   |\n30 |     cores: LazyInit<Vec<Mutex<Option<Arc<dyn AsyncTask>>>>>,\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity\n   = note: `#[warn(clippy::type_complexity)]` on by default\n\n",
              "warning: you should consider adding a `Default` implementation for `Executor`\n  --> crates/executor/src/executor.rs:35:5\n   |\n35 | /     pub const fn new() -> Self {\n36 | |         Executor {\n37 | |             cores: LazyInit::new(),\n38 | |             inited: AtomicBool::new(false),\n39 | |         }\n40 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n   = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n   |\n34 + impl Default for Executor {\n35 +     fn default() -> Self {\n36 +         Self::new()\n37 +     }\n38 + }\n   |\n\n",
              "warning: busy-waiting loop should at least have a spin loop hint\n  --> crates/executor/src/executor.rs:68:51\n   |\n68 |         while !self.inited.load(Ordering::SeqCst) {}\n   |                                                   ^^ help: try: `{ core::hint::spin_loop() }`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_spin_loop\n   = note: `#[warn(clippy::missing_spin_loop)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 780,\n    \"last-commit\": \"982c2320aa55b3095110a0b0eadd446d83be45f9\",\n    \"last-updated\": \"2025-05-14T22:55:51+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 101\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=executor, checker=Audit\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/executor\n// cmd=cargo audit\n// timestamp=2025-05-16 5:30:46.795065992 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 780 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (101 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=executor, checker=Lockbud\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/executor\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:31:16.782032851 +08:00:00\n   Compiling ahash v0.8.11\n   Compiling once_cell v1.21.0\n   Compiling zerocopy v0.7.32\n   Compiling allocator-api2 v0.2.16\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling polyhal v0.2.4\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=executor, checker=Rapx\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/executor\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:33:01.168074581 +08:00:00\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.8\n    Checking scopeguard v1.1.0\n   Compiling version_check v0.9.5\n   Compiling paste v1.0.15\n    Checking static_assertions v1.1.0\n    Checking cfg-if v1.0.0\n   Compiling ahash v0.8.11\n   Compiling riscv v0.13.0\n   Compiling lock_api v0.4.9\n   Compiling polyhal v0.2.4\n    Checking sbi-spec v0.0.4\n   Compiling quote v1.0.35\n   Compiling syn v2.0.100\n    Checking zerocopy v0.7.32\n    Checking once_cell v1.21.0\n    Checking embedded-hal v1.0.0\n    Checking riscv-pac v0.2.0\n    Checking critical-section v1.2.0\n    Checking spin v0.10.0\n    Checking spin v0.9.8\n    Checking sbi-rt v0.0.2\n    Checking log v0.4.27\n    Checking fdt-parser v0.4.12\n    Checking allocator-api2 v0.2.16\n    Checking lazyinit v0.2.1\n    Checking arrayvec v0.7.6\n    Checking bitflags v2.9.0\n    Checking hashbrown v0.14.5\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking downcast-rs v1.2.0\n   Compiling riscv-macros v0.2.0\n   Compiling polyhal-macro v0.2.4\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n154 | |         // Restore Kernel Context.\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n186 | |         // Switch to new page table.\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nFor more information about this error, try `rustc --explain E0787`.\nerror: could not compile `polyhal` (lib) due to 3 previous errors\n21:33:06|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=executor, checker=SemverChecks\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/executor\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:28:40.948504323 +08:00:00\n    Building executor v0.1.0 (current)\nerror: running cargo-doc on crate 'executor' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling zerocopy v0.8.25\n    Checking static_assertions v1.1.0\n    Checking cfg-if v1.0.0\n   Compiling riscv v0.13.0\n    Checking sbi-spec v0.0.4\n   Compiling ahash v0.8.12\n   Compiling riscv-macros v0.2.0\n    Checking critical-section v1.2.0\n    Checking riscv-pac v0.2.0\n    Checking embedded-hal v1.0.0\n    Checking once_cell v1.21.3\n    Checking spin v0.9.8\n    Checking spin v0.10.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking log v0.4.27\n    Checking bitflags v2.9.1\n    Checking arrayvec v0.7.6\n    Checking fdt-parser v0.4.13\n    Checking allocator-api2 v0.2.21\n    Checking lazyinit v0.2.1\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking downcast-rs v1.2.1\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate executor v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/crates/executor &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate executor v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=executor, checker=Outdated\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/executor\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-16 5:39:43.708331551 +08:00:00\n\nName         Project  Compat  Latest  Kind    Platform\n----         -------  ------  ------  ----    --------\ndowncast-rs  1.2.0    1.2.1   2.0.1   Normal  ---\nhashbrown    0.14.5   ---     0.15.3  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=executor, checker=SemverChecks\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/executor\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-05-16 5:28:42.973056752 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building executor v0.1.0 (current)\nerror: running cargo-doc on crate 'executor' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling zerocopy v0.8.25\n    Checking static_assertions v1.1.0\n    Checking cfg-if v1.0.0\n   Compiling riscv v0.13.0\n    Checking sbi-spec v0.0.4\n   Compiling ahash v0.8.12\n   Compiling riscv-macros v0.2.0\n    Checking critical-section v1.2.0\n    Checking riscv-pac v0.2.0\n    Checking embedded-hal v1.0.0\n    Checking once_cell v1.21.3\n    Checking spin v0.9.8\n    Checking spin v0.10.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking log v0.4.27\n    Checking bitflags v2.9.1\n    Checking arrayvec v0.7.6\n    Checking fdt-parser v0.4.13\n    Checking allocator-api2 v0.2.21\n    Checking lazyinit v0.2.1\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking downcast-rs v1.2.1\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate executor v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/crates/executor &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate executor v0.1.0\n"
            ]
          }
        },
        {
          "file": "crates/executor/src/ops.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: you should consider adding a `Default` implementation for `Yield`\n  --> crates/executor/src/ops.rs:10:5\n   |\n10 | /     pub const fn new() -> Self {\n11 | |         Self(false)\n12 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\nhelp: try adding this\n   |\n9  + impl Default for Yield {\n10 +     fn default() -> Self {\n11 +         Self::new()\n12 +     }\n13 + }\n   |\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "devices",
      "count": 8,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 780,\n    \"last-commit\": \"982c2320aa55b3095110a0b0eadd446d83be45f9\",\n    \"last-updated\": \"2025-05-14T22:55:51+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 101\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=devices, checker=Audit\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/devices\n// cmd=cargo audit\n// timestamp=2025-05-16 5:30:44.958939563 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 780 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (101 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=devices, checker=Lockbud\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/devices\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:31:14.250264504 +08:00:00\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling polyhal v0.2.4\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=devices, checker=Rapx\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/devices\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:32:44.804519744 +08:00:00\n   Compiling proc-macro2 v1.0.95\n   Compiling autocfg v1.4.0\n   Compiling unicode-ident v1.0.8\n    Checking scopeguard v1.1.0\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n    Checking critical-section v1.2.0\n   Compiling lock_api v0.4.9\n   Compiling polyhal v0.2.4\n    Checking riscv-pac v0.2.0\n   Compiling quote v1.0.35\n    Checking embedded-hal v1.0.0\n    Checking sbi-rt v0.0.2\n   Compiling syn v2.0.100\n    Checking spin v0.9.8\n    Checking spin v0.10.0\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking lazyinit v0.2.1\n    Checking fdt-parser v0.4.12\n    Checking arrayvec v0.7.6\n    Checking bitflags v2.9.0\n    Checking cfg-if v1.0.0\n    Checking log v0.4.27\n    Checking buddy_system_allocator v0.9.0\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking bit_field v0.10.2\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\n   Compiling riscv-macros v0.2.0\n   Compiling polyhal-macro v0.2.4\n   Compiling linkme-impl v0.3.22\n    Checking linkme v0.3.22\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n154 | |         // Restore Kernel Context.\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n186 | |         // Switch to new page table.\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nFor more information about this error, try `rustc --explain E0787`.\nerror: could not compile `polyhal` (lib) due to 3 previous errors\n21:32:50|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=devices, checker=SemverChecks\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/devices\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:28:28.399816143 +08:00:00\n    Building devices v0.1.0 (current)\nerror: running cargo-doc on crate 'devices' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling paste v1.0.15\n   Compiling lock_api v0.4.12\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking riscv-pac v0.2.0\n    Checking embedded-hal v1.0.0\n    Checking spin v0.9.8\n    Checking critical-section v1.2.0\n    Checking spin v0.10.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking fdt-parser v0.4.13\n    Checking arrayvec v0.7.6\n    Checking cfg-if v1.0.0\n    Checking bitflags v2.9.1\n    Checking log v0.4.27\n    Checking lazyinit v0.2.1\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking buddy_system_allocator v0.9.1\n    Checking bit_field v0.10.2\n    Checking linkme v0.3.32\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate devices v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/crates/devices &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate devices v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=devices, checker=Outdated\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/devices\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-16 5:39:34.24836923 +08:00:00\n\nName        Project  Compat  Latest  Kind    Platform\n----        -------  ------  ------  ----    --------\nfdt-parser  0.4.12   0.4.13  0.4.13  Normal  ---\nlinkme      0.3.22   0.3.32  0.3.32  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=devices, checker=SemverChecks\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/devices\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-05-16 5:28:30.278550692 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building devices v0.1.0 (current)\nerror: running cargo-doc on crate 'devices' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling paste v1.0.15\n   Compiling lock_api v0.4.12\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking riscv-pac v0.2.0\n    Checking embedded-hal v1.0.0\n    Checking spin v0.9.8\n    Checking critical-section v1.2.0\n    Checking spin v0.10.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking fdt-parser v0.4.13\n    Checking arrayvec v0.7.6\n    Checking cfg-if v1.0.0\n    Checking bitflags v2.9.1\n    Checking log v0.4.27\n    Checking lazyinit v0.2.1\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking buddy_system_allocator v0.9.1\n    Checking bit_field v0.10.2\n    Checking linkme v0.3.32\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate devices v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/crates/devices &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate devices v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "kramdisk",
      "count": 8,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 780,\n    \"last-commit\": \"982c2320aa55b3095110a0b0eadd446d83be45f9\",\n    \"last-updated\": \"2025-05-14T22:55:51+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 101\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kramdisk, checker=Audit\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk\n// cmd=cargo audit\n// timestamp=2025-05-16 5:30:53.430021082 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 780 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (101 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) clippy",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kramdisk, checker=Clippy\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk\n// cmd=cargo clippy --target riscv64gc-unknown-none-elf  --no-deps\n// timestamp=2025-05-16 5:27:46.245377921 +08:00:00\n   Compiling kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)\nerror: failed to run custom build command for `kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/check/batch_1/Byte-OS/ByteOS/target/debug/build/kramdisk-c95710fe6e9d3a62/build-script-build` (exit status: 101)\n  --- stderr\n  thread 'main' panicked at driver/kramdisk/build.rs:13:53:\n  can't find manifest directory: NotPresent\n  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kramdisk, checker=Lockbud\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:31:37.025771769 +08:00:00\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling polyhal v0.2.4\n   Compiling kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)\nerror: failed to run custom build command for `kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/check/batch_1/Byte-OS/ByteOS/target/debug/build/kramdisk-0b919c9e6bf0b894/build-script-build` (exit status: 101)\n  --- stderr\n\n  thread 'main' panicked at driver/kramdisk/build.rs:13:53:\n  can't find manifest directory: NotPresent\n  stack backtrace:\n     0:     0x5608696ab620 - std::backtrace_rs::backtrace::libunwind::trace::h09b3d24f06048964\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/../../backtrace/src/backtrace/libunwind.rs:116:5\n     1:     0x5608696ab620 - std::backtrace_rs::backtrace::trace_unsynchronized::hf47addf765c6ae4e\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n     2:     0x5608696ab620 - std::sys::backtrace::_print_fmt::h1cac4748ae805433\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/sys/backtrace.rs:66:9\n     3:     0x5608696ab620 - <std::sys::backtrace::BacktraceLock::print::DisplayBacktrace as core::fmt::Display>::fmt::h51876e9b806abd2f\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/sys/backtrace.rs:39:26\n     4:     0x5608696c8c23 - core::fmt::rt::Argument::fmt::h74675d727819c734\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/fmt/rt.rs:177:76\n     5:     0x5608696c8c23 - core::fmt::write::hec8160b518640e0a\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/fmt/mod.rs:1449:21\n     6:     0x5608696a89a3 - std::io::Write::write_fmt::h23dd9fd522f1ed73\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/io/mod.rs:1890:15\n     7:     0x5608696ab472 - std::sys::backtrace::BacktraceLock::print::h82fa1cbd2f5c85f6\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/sys/backtrace.rs:42:9\n     8:     0x5608696ac3bf - std::panicking::default_hook::{{closure}}::h0c71ebc4d32ee68d\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:298:22\n     9:     0x5608696ac22a - std::panicking::default_hook::h869bbd2dc4246a59\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:325:9\n    10:     0x5608696acc92 - std::panicking::rust_panic_with_hook::he7cb010bd1162eb7\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:831:13\n    11:     0x5608696acb2a - std::panicking::begin_panic_handler::{{closure}}::h144a44d32326050e\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:704:13\n    12:     0x5608696abb29 - std::sys::backtrace::__rust_end_short_backtrace::h7baa569e657f05a9\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/sys/backtrace.rs:168:18\n    13:     0x5608696ac7bd - rust_begin_unwind\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:695:5\n    14:     0x5608696c7e50 - core::panicking::panic_fmt::hc13ec85888cb23ce\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/panicking.rs:75:14\n    15:     0x5608696c81f6 - core::result::unwrap_failed::h68ee3ebc0a871e1d\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/result.rs:1704:5\n    16:     0x560869689946 - core::result::Result<T,E>::expect::ha0c8de9ab1b1600c\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/result.rs:1061:23\n    17:     0x56086968a659 - build_script_build::main::ha4954a181e90d83d\n                                 at /home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk/build.rs:13:23\n    18:     0x56086968924b - core::ops::function::FnOnce::call_once::hd19b8ab106fe7b15\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ops/function.rs:250:5\n    19:     0x560869688abe - std::sys::backtrace::__rust_begin_short_backtrace::hda555096c8e7425e\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/sys/backtrace.rs:152:18\n    20:     0x560869688991 - std::rt::lang_start::{{closure}}::h760865ba532539ce\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/rt.rs:199:18\n    21:     0x5608696a5be0 - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::h73c200d88ac341db\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ops/function.rs:284:13\n    22:     0x5608696a5be0 - std::panicking::try::do_call::h5d854913854b71fe\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:587:40\n    23:     0x5608696a5be0 - std::panicking::try::hf1ae1b2a2498e678\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:550:19\n    24:     0x5608696a5be0 - std::panic::catch_unwind::hcfb0a552e6092b8e\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panic.rs:358:14\n    25:     0x5608696a5be0 - std::rt::lang_start_internal::{{closure}}::hb0245fc583346cd7\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/rt.rs:168:24\n    26:     0x5608696a5be0 - std::panicking::try::do_call::h946e97edafdf2f58\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:587:40\n    27:     0x5608696a5be0 - std::panicking::try::ha9077e2e87ccc6a6\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panicking.rs:550:19\n    28:     0x5608696a5be0 - std::panic::catch_unwind::hd02f80e9111b6f00\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/panic.rs:358:14\n    29:     0x5608696a5be0 - std::rt::lang_start_internal::h13b1bd40350dac66\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/rt.rs:164:5\n    30:     0x560869688977 - std::rt::lang_start::h6dd3f87e7892aca1\n                                 at /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/std/src/rt.rs:198:5\n    31:     0x56086968aa0e - main\n    32:     0x7fe4f402a1ca - <unknown>\n    33:     0x7fe4f402a28b - __libc_start_main\n    34:     0x560869688055 - _start\n    35:                0x0 - <unknown>\nwarning: build failed, waiting for other jobs to finish...\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kramdisk, checker=Rapx\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:35:52.260585437 +08:00:00\n   Compiling proc-macro2 v1.0.95\n   Compiling autocfg v1.4.0\n   Compiling unicode-ident v1.0.8\n    Checking scopeguard v1.1.0\n   Compiling paste v1.0.15\n    Checking static_assertions v1.1.0\n   Compiling riscv v0.13.0\n    Checking sbi-spec v0.0.4\n    Checking embedded-hal v1.0.0\n   Compiling lock_api v0.4.9\n   Compiling polyhal v0.2.4\n    Checking riscv-pac v0.2.0\n   Compiling quote v1.0.35\n    Checking critical-section v1.2.0\n    Checking sbi-rt v0.0.2\n   Compiling syn v2.0.100\n    Checking spin v0.9.8\n    Checking spin v0.10.0\n    Checking cfg-if v1.0.0\n    Checking lazyinit v0.2.1\n    Checking bitflags v2.9.0\n    Checking arrayvec v0.7.6\n    Checking log v0.4.27\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking fdt-parser v0.4.12\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking buddy_system_allocator v0.9.0\n    Checking bit_field v0.10.2\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\n   Compiling kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)\nerror: failed to run custom build command for `kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/check/batch_1/Byte-OS/ByteOS/target/debug/build/kramdisk-5017110bbf6b8246/build-script-build` (exit status: 101)\n  --- stderr\n  thread 'main' panicked at driver/kramdisk/build.rs:13:53:\n  can't find manifest directory: NotPresent\n  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nwarning: build failed, waiting for other jobs to finish...\n21:35:56|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kramdisk, checker=SemverChecks\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:29:20.462669191 +08:00:00\n    Building kramdisk v0.1.0 (current)\nerror: running cargo-doc on crate 'kramdisk' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling autocfg v1.4.0\n   Compiling unicode-ident v1.0.18\n    Checking scopeguard v1.2.0\n   Compiling paste v1.0.15\n    Checking static_assertions v1.1.0\n   Compiling riscv v0.13.0\n    Checking sbi-spec v0.0.4\n    Checking riscv-pac v0.2.0\n    Checking critical-section v1.2.0\n   Compiling linkme-impl v0.3.32\n   Compiling lock_api v0.4.12\n   Compiling polyhal v0.2.4\n    Checking embedded-hal v1.0.0\n   Compiling quote v1.0.40\n    Checking sbi-rt v0.0.2\n   Compiling syn v2.0.101\n    Checking spin v0.9.8\n    Checking spin v0.10.0\n    Checking arrayvec v0.7.6\n    Checking cfg-if v1.0.0\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking log v0.4.27\n    Checking bitflags v2.9.1\n    Checking fdt-parser v0.4.13\n    Checking lazyinit v0.2.1\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking buddy_system_allocator v0.9.1\n    Checking bit_field v0.10.2\n   Compiling kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\nerror: failed to run custom build command for `kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/check/batch_1/Byte-OS/ByteOS/target/semver-checks/local-kramdisk-0_1_0-01666ec060466c14/target/debug/build/kramdisk-8efddaf227e4050f/build-script-build` (exit status: 101)\n  --- stderr\n\n  thread 'main' panicked at /home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk/build.rs:13:53:\n  can't find manifest directory: NotPresent\n  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate kramdisk v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate kramdisk v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=kramdisk, checker=SemverChecks\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-05-16 5:29:24.387748851 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building kramdisk v0.1.0 (current)\nerror: running cargo-doc on crate 'kramdisk' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling autocfg v1.4.0\n   Compiling unicode-ident v1.0.18\n    Checking scopeguard v1.2.0\n   Compiling paste v1.0.15\n    Checking static_assertions v1.1.0\n   Compiling riscv v0.13.0\n    Checking sbi-spec v0.0.4\n    Checking riscv-pac v0.2.0\n    Checking critical-section v1.2.0\n   Compiling linkme-impl v0.3.32\n   Compiling lock_api v0.4.12\n   Compiling polyhal v0.2.4\n    Checking embedded-hal v1.0.0\n   Compiling quote v1.0.40\n    Checking sbi-rt v0.0.2\n   Compiling syn v2.0.101\n    Checking spin v0.9.8\n    Checking spin v0.10.0\n    Checking arrayvec v0.7.6\n    Checking cfg-if v1.0.0\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking log v0.4.27\n    Checking bitflags v2.9.1\n    Checking fdt-parser v0.4.13\n    Checking lazyinit v0.2.1\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking buddy_system_allocator v0.9.1\n    Checking bit_field v0.10.2\n   Compiling kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\nerror: failed to run custom build command for `kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/check/batch_1/Byte-OS/ByteOS/target/semver-checks/local-kramdisk-0_1_0-01666ec060466c14/target/debug/build/kramdisk-8efddaf227e4050f/build-script-build` (exit status: 101)\n  --- stderr\n\n  thread 'main' panicked at /home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk/build.rs:13:53:\n  can't find manifest directory: NotPresent\n  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate kramdisk v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate kramdisk v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "ns16550a",
      "count": 8,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 780,\n    \"last-commit\": \"982c2320aa55b3095110a0b0eadd446d83be45f9\",\n    \"last-updated\": \"2025-05-14T22:55:51+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 101\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ns16550a, checker=Audit\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/ns16550a\n// cmd=cargo audit\n// timestamp=2025-05-16 5:30:56.665622932 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 780 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (101 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ns16550a, checker=Lockbud\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/ns16550a\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:31:44.190844507 +08:00:00\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling polyhal v0.2.4\n   Compiling ns16550a v0.2.0\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ns16550a, checker=Rapx\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/ns16550a\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:36:37.482750568 +08:00:00\n   Compiling proc-macro2 v1.0.95\n   Compiling autocfg v1.4.0\n   Compiling unicode-ident v1.0.8\n    Checking scopeguard v1.1.0\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n    Checking critical-section v1.2.0\n   Compiling lock_api v0.4.9\n   Compiling polyhal v0.2.4\n    Checking embedded-hal v1.0.0\n   Compiling quote v1.0.35\n    Checking riscv-pac v0.2.0\n    Checking sbi-rt v0.0.2\n   Compiling syn v2.0.100\n    Checking spin v0.9.8\n    Checking spin v0.10.0\n    Checking cfg-if v1.0.0\n    Checking log v0.4.27\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking arrayvec v0.7.6\n    Checking lazyinit v0.2.1\n    Checking bitflags v2.9.0\n    Checking fdt-parser v0.4.12\n    Checking buddy_system_allocator v0.9.0\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking bit_field v0.10.2\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\n    Checking ns16550a v0.2.0\n   Compiling riscv-macros v0.2.0\n   Compiling polyhal-macro v0.2.4\n   Compiling linkme-impl v0.3.22\n    Checking linkme v0.3.22\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n154 | |         // Restore Kernel Context.\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n186 | |         // Switch to new page table.\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nFor more information about this error, try `rustc --explain E0787`.\nerror: could not compile `polyhal` (lib) due to 3 previous errors\n21:36:42|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ns16550a, checker=SemverChecks\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/ns16550a\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:29:48.565041231 +08:00:00\n    Building ns16550a v0.1.0 (current)\nerror: running cargo-doc on crate 'ns16550a' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n    Checking static_assertions v1.1.0\n   Compiling riscv v0.13.0\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking embedded-hal v1.0.0\n    Checking critical-section v1.2.0\n    Checking riscv-pac v0.2.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking fdt-parser v0.4.13\n    Checking spin v0.9.8\n    Checking spin v0.10.0\n    Checking lazyinit v0.2.1\n    Checking log v0.4.27\n    Checking bitflags v2.9.1\n    Checking arrayvec v0.7.6\n    Checking cfg-if v1.0.0\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking buddy_system_allocator v0.9.1\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking bit_field v0.10.2\n    Checking linkme v0.3.32\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\n    Checking ns16550a v0.2.0\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate ns16550a v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/ns16550a &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate ns16550a v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=ns16550a, checker=Outdated\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/ns16550a\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-16 5:40:38.956679374 +08:00:00\n\nName      Project  Compat  Latest  Kind    Platform\n----      -------  ------  ------  ----    --------\nns16550a  0.2.0    ---     0.5.0   Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=ns16550a, checker=SemverChecks\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/ns16550a\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-05-16 5:29:50.293408087 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building ns16550a v0.1.0 (current)\nerror: running cargo-doc on crate 'ns16550a' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n    Checking static_assertions v1.1.0\n   Compiling riscv v0.13.0\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking embedded-hal v1.0.0\n    Checking critical-section v1.2.0\n    Checking riscv-pac v0.2.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking fdt-parser v0.4.13\n    Checking spin v0.9.8\n    Checking spin v0.10.0\n    Checking lazyinit v0.2.1\n    Checking log v0.4.27\n    Checking bitflags v2.9.1\n    Checking arrayvec v0.7.6\n    Checking cfg-if v1.0.0\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking buddy_system_allocator v0.9.1\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking bit_field v0.10.2\n    Checking linkme v0.3.32\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\n    Checking ns16550a v0.2.0\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate ns16550a v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/ns16550a &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate ns16550a v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "runtime",
      "count": 8,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 780,\n    \"last-commit\": \"982c2320aa55b3095110a0b0eadd446d83be45f9\",\n    \"last-updated\": \"2025-05-14T22:55:51+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 101\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=runtime, checker=Audit\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime\n// cmd=cargo audit\n// timestamp=2025-05-16 5:30:59.405546715 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 780 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (101 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=runtime, checker=Lockbud\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:31:48.787694342 +08:00:00\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling polyhal v0.2.4\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=runtime, checker=Rapx\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:38:10.448740314 +08:00:00\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.8\n    Checking scopeguard v1.1.0\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n    Checking embedded-hal v1.0.0\n   Compiling lock_api v0.4.9\n   Compiling polyhal v0.2.4\n    Checking critical-section v1.2.0\n   Compiling quote v1.0.35\n    Checking riscv-pac v0.2.0\n    Checking sbi-rt v0.0.2\n   Compiling syn v2.0.100\n    Checking spin v0.9.8\n    Checking spin v0.10.0\n    Checking bitflags v2.9.0\n    Checking fdt-parser v0.4.12\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking log v0.4.27\n    Checking cfg-if v1.0.0\n    Checking arrayvec v0.7.6\n    Checking lazyinit v0.2.1\n    Checking buddy_system_allocator v0.9.0\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking bit_field v0.10.2\n   Compiling riscv-macros v0.2.0\n   Compiling polyhal-macro v0.2.4\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n154 | |         // Restore Kernel Context.\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n186 | |         // Switch to new page table.\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nFor more information about this error, try `rustc --explain E0787`.\nerror: could not compile `polyhal` (lib) due to 3 previous errors\n21:38:15|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=runtime, checker=SemverChecks\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:30:18.33786927 +08:00:00\n    Building runtime v0.1.0 (current)\nerror: running cargo-doc on crate 'runtime' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking embedded-hal v1.0.0\n    Checking spin v0.9.8\n    Checking riscv-pac v0.2.0\n    Checking critical-section v1.2.0\n    Checking spin v0.10.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking cfg-if v1.0.0\n    Checking bitflags v2.9.1\n    Checking fdt-parser v0.4.13\n    Checking lazyinit v0.2.1\n    Checking log v0.4.27\n    Checking arrayvec v0.7.6\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking buddy_system_allocator v0.9.1\n    Checking bit_field v0.10.2\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate runtime v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate runtime v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=runtime, checker=Outdated\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-16 5:40:58.970793273 +08:00:00\n\nName                    Project  Compat  Latest  Kind    Platform\n----                    -------  ------  ------  ----    --------\nbuddy_system_allocator  0.9.0    0.9.1   0.11.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=runtime, checker=SemverChecks\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-05-16 5:30:20.223364921 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building runtime v0.1.0 (current)\nerror: running cargo-doc on crate 'runtime' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking embedded-hal v1.0.0\n    Checking spin v0.9.8\n    Checking riscv-pac v0.2.0\n    Checking critical-section v1.2.0\n    Checking spin v0.10.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking cfg-if v1.0.0\n    Checking bitflags v2.9.1\n    Checking fdt-parser v0.4.13\n    Checking lazyinit v0.2.1\n    Checking log v0.4.27\n    Checking arrayvec v0.7.6\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking buddy_system_allocator v0.9.1\n    Checking bit_field v0.10.2\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate runtime v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate runtime v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "general-plic",
      "count": 7,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 780,\n    \"last-commit\": \"982c2320aa55b3095110a0b0eadd446d83be45f9\",\n    \"last-updated\": \"2025-05-14T22:55:51+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 101\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=general-plic, checker=Audit\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/general-plic\n// cmd=cargo audit\n// timestamp=2025-05-16 5:30:49.637147174 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 780 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (101 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=general-plic, checker=Lockbud\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/general-plic\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:31:20.983849267 +08:00:00\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling polyhal v0.2.4\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=general-plic, checker=Rapx\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/general-plic\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:34:17.05193576 +08:00:00\n   Compiling proc-macro2 v1.0.95\n   Compiling autocfg v1.4.0\n   Compiling unicode-ident v1.0.8\n    Checking scopeguard v1.1.0\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n    Checking embedded-hal v1.0.0\n   Compiling lock_api v0.4.9\n   Compiling polyhal v0.2.4\n    Checking critical-section v1.2.0\n   Compiling quote v1.0.35\n    Checking riscv-pac v0.2.0\n    Checking sbi-rt v0.0.2\n   Compiling syn v2.0.100\n    Checking spin v0.9.8\n    Checking spin v0.10.0\n    Checking arrayvec v0.7.6\n    Checking bitflags v2.9.0\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking lazyinit v0.2.1\n    Checking log v0.4.27\n    Checking fdt-parser v0.4.12\n    Checking cfg-if v1.0.0\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking buddy_system_allocator v0.9.0\n    Checking bit_field v0.10.2\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\n   Compiling riscv-macros v0.2.0\n   Compiling polyhal-macro v0.2.4\n   Compiling linkme-impl v0.3.22\n    Checking linkme v0.3.22\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n154 | |         // Restore Kernel Context.\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n186 | |         // Switch to new page table.\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nFor more information about this error, try `rustc --explain E0787`.\nerror: could not compile `polyhal` (lib) due to 3 previous errors\n21:34:22|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=general-plic, checker=SemverChecks\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/general-plic\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:29:03.511625738 +08:00:00\n    Building general-plic v0.1.0 (current)\nerror: running cargo-doc on crate 'general-plic' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling paste v1.0.15\n   Compiling lock_api v0.4.12\n    Checking static_assertions v1.1.0\n   Compiling riscv v0.13.0\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking critical-section v1.2.0\n    Checking riscv-pac v0.2.0\n    Checking embedded-hal v1.0.0\n    Checking spin v0.9.8\n    Checking spin v0.10.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking bitflags v2.9.1\n    Checking fdt-parser v0.4.13\n    Checking arrayvec v0.7.6\n    Checking lazyinit v0.2.1\n    Checking cfg-if v1.0.0\n    Checking log v0.4.27\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking buddy_system_allocator v0.9.1\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking bit_field v0.10.2\n    Checking linkme v0.3.32\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate general-plic v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/general-plic &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate general-plic v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=general-plic, checker=SemverChecks\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/general-plic\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-05-16 5:29:05.384990391 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building general-plic v0.1.0 (current)\nerror: running cargo-doc on crate 'general-plic' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling paste v1.0.15\n   Compiling lock_api v0.4.12\n    Checking static_assertions v1.1.0\n   Compiling riscv v0.13.0\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking critical-section v1.2.0\n    Checking riscv-pac v0.2.0\n    Checking embedded-hal v1.0.0\n    Checking spin v0.9.8\n    Checking spin v0.10.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking bitflags v2.9.1\n    Checking fdt-parser v0.4.13\n    Checking arrayvec v0.7.6\n    Checking lazyinit v0.2.1\n    Checking cfg-if v1.0.0\n    Checking log v0.4.27\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking buddy_system_allocator v0.9.1\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking bit_field v0.10.2\n    Checking linkme v0.3.32\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate general-plic v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/general-plic &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate general-plic v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "kernel",
      "count": 7,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 780,\n    \"last-commit\": \"982c2320aa55b3095110a0b0eadd446d83be45f9\",\n    \"last-updated\": \"2025-05-14T22:55:51+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 101\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kernel, checker=Audit\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/kernel\n// cmd=cargo audit\n// timestamp=2025-05-16 5:30:50.629813817 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 780 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (101 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) clippy",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kernel, checker=Clippy\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/kernel\n// cmd=cargo clippy --target riscv64gc-unknown-none-elf  --no-deps\n// timestamp=2025-05-16 5:27:41.567529675 +08:00:00\n   Compiling riscv-macros v0.2.0\n    Checking linkme v0.3.22\n   Compiling thiserror v2.0.12\n   Compiling zerocopy v0.8.24\n   Compiling futures-core v0.3.28\n    Checking num_enum v0.6.1\n    Checking embedded-io v0.6.1\n   Compiling kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)\nerror: failed to run custom build command for `kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/check/batch_1/Byte-OS/ByteOS/target/debug/build/kramdisk-c95710fe6e9d3a62/build-script-build` (exit status: 101)\n  --- stderr\n  thread 'main' panicked at driver/kramdisk/build.rs:13:53:\n  can't find manifest directory: NotPresent\n  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kernel, checker=Lockbud\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/kernel\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:31:27.580046702 +08:00:00\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling riscv-macros v0.2.0\n   Compiling linkme v0.3.22\n   Compiling zerocopy v0.8.24\n   Compiling thiserror v2.0.12\n   Compiling num_enum_derive v0.6.1\n   Compiling futures-core v0.3.28\n   Compiling toml v0.5.11\n   Compiling riscv v0.13.0\n   Compiling num_enum v0.6.1\n   Compiling enumn v0.1.14\n   Compiling polyhal v0.2.4\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\n   Compiling num-derive v0.4.0\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kernel, checker=Rapx\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/kernel\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:34:51.695903318 +08:00:00\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.8\n   Compiling autocfg v1.4.0\n    Checking scopeguard v1.1.0\n    Checking bitflags v2.9.0\n    Checking log v0.4.27\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking cfg-if v1.0.0\n    Checking sbi-spec v0.0.4\n   Compiling lock_api v0.4.9\n   Compiling polyhal v0.2.4\n    Checking embedded-hal v1.0.0\n   Compiling quote v1.0.35\n   Compiling syn v2.0.100\n    Checking spin v0.9.8\n    Checking critical-section v1.2.0\n    Checking riscv-pac v0.2.0\n    Checking spin v0.10.0\n    Checking sbi-rt v0.0.2\n    Checking lazyinit v0.2.1\n    Checking arrayvec v0.7.6\n    Checking fdt-parser v0.4.12\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking bit_field v0.10.2\n    Checking buddy_system_allocator v0.9.0\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\n   Compiling syscalls v0.6.18 (https://github.com/jasonwhite/syscalls.git#92624de3)\n    Checking downcast-rs v1.2.0\n   Compiling serde v1.0.188\n   Compiling version_check v0.9.5\n   Compiling num-traits v0.2.16\n    Checking vfscore v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore)\n   Compiling thiserror v2.0.12\n   Compiling ahash v0.8.11\n   Compiling zerocopy v0.8.24\n   Compiling futures-core v0.3.28\n    Checking zerocopy v0.7.32\n    Checking once_cell v1.21.0\n   Compiling kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)\n    Checking embedded-io v0.6.1\n    Checking allocator-api2 v0.2.16\n   Compiling toml v0.5.11\n   Compiling fs v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/fs)\n    Checking hashbrown v0.14.5\nerror: failed to run custom build command for `kramdisk v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kramdisk)`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/check/batch_1/Byte-OS/ByteOS/target/debug/build/kramdisk-5017110bbf6b8246/build-script-build` (exit status: 101)\n  --- stderr\n  thread 'main' panicked at driver/kramdisk/build.rs:13:53:\n  can't find manifest directory: NotPresent\n  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nwarning: build failed, waiting for other jobs to finish...\n21:35:00|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=kernel, checker=Outdated\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/kernel\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-16 5:40:10.569560041 +08:00:00\n\nName             Project  Compat   Latest   Kind    Platform\n----             -------  ------   ------   ----    --------\nasync-recursion  1.1.0    1.1.1    1.1.1    Normal  ---\nbitflags         2.9.0    2.9.1    2.9.1    Normal  ---\nfutures-lite     1.13.0   ---      2.6.0    Normal  ---\nhashbrown        0.14.5   ---      0.15.3   Normal  ---\nnum-derive       0.4.0    0.4.2    0.4.2    Normal  ---\nnum-traits       0.2.16   0.2.19   0.2.19   Normal  ---\nserde            1.0.188  1.0.219  1.0.219  Build   ---\nserde_derive     1.0.188  1.0.219  1.0.219  Build   ---\ntoml             0.5.11   ---      0.8.22   Build   ---\nxmas-elf         0.9.0    0.9.1    0.10.0   Normal  ---\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "kgoldfish-rtc",
      "count": 7,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 780,\n    \"last-commit\": \"982c2320aa55b3095110a0b0eadd446d83be45f9\",\n    \"last-updated\": \"2025-05-14T22:55:51+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 101\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kgoldfish-rtc, checker=Audit\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kgoldfish-rtc\n// cmd=cargo audit\n// timestamp=2025-05-16 5:30:52.186037318 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 780 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (101 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kgoldfish-rtc, checker=Lockbud\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kgoldfish-rtc\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:31:35.293678778 +08:00:00\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling polyhal v0.2.4\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kgoldfish-rtc, checker=Rapx\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kgoldfish-rtc\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:35:27.059922084 +08:00:00\n   Compiling proc-macro2 v1.0.95\n   Compiling autocfg v1.4.0\n   Compiling unicode-ident v1.0.8\n    Checking scopeguard v1.1.0\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n    Checking embedded-hal v1.0.0\n   Compiling lock_api v0.4.9\n   Compiling polyhal v0.2.4\n    Checking critical-section v1.2.0\n   Compiling quote v1.0.35\n    Checking riscv-pac v0.2.0\n    Checking sbi-rt v0.0.2\n   Compiling syn v2.0.100\n    Checking spin v0.9.8\n    Checking spin v0.10.0\n    Checking cfg-if v1.0.0\n    Checking log v0.4.27\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking fdt-parser v0.4.12\n    Checking arrayvec v0.7.6\n    Checking bitflags v2.9.0\n    Checking lazyinit v0.2.1\n    Checking buddy_system_allocator v0.9.0\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking bit_field v0.10.2\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\n   Compiling riscv-macros v0.2.0\n   Compiling polyhal-macro v0.2.4\n   Compiling linkme-impl v0.3.22\n    Checking linkme v0.3.22\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n154 | |         // Restore Kernel Context.\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n186 | |         // Switch to new page table.\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nFor more information about this error, try `rustc --explain E0787`.\nerror: could not compile `polyhal` (lib) due to 3 previous errors\n21:35:32|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=kgoldfish-rtc, checker=SemverChecks\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kgoldfish-rtc\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:29:14.636458939 +08:00:00\n    Building kgoldfish-rtc v0.1.0 (current)\nerror: running cargo-doc on crate 'kgoldfish-rtc' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking riscv-pac v0.2.0\n    Checking embedded-hal v1.0.0\n    Checking spin v0.9.8\n    Checking critical-section v1.2.0\n    Checking spin v0.10.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking cfg-if v1.0.0\n    Checking arrayvec v0.7.6\n    Checking log v0.4.27\n    Checking bitflags v2.9.1\n    Checking fdt-parser v0.4.13\n    Checking lazyinit v0.2.1\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking buddy_system_allocator v0.9.1\n    Checking bit_field v0.10.2\n    Checking linkme v0.3.32\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate kgoldfish-rtc v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/kgoldfish-rtc &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate kgoldfish-rtc v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=kgoldfish-rtc, checker=SemverChecks\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/driver/kgoldfish-rtc\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-05-16 5:29:16.481707829 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building kgoldfish-rtc v0.1.0 (current)\nerror: running cargo-doc on crate 'kgoldfish-rtc' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking riscv-pac v0.2.0\n    Checking embedded-hal v1.0.0\n    Checking spin v0.9.8\n    Checking critical-section v1.2.0\n    Checking spin v0.10.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking cfg-if v1.0.0\n    Checking arrayvec v0.7.6\n    Checking log v0.4.27\n    Checking bitflags v2.9.1\n    Checking fdt-parser v0.4.13\n    Checking lazyinit v0.2.1\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking buddy_system_allocator v0.9.1\n    Checking bit_field v0.10.2\n    Checking linkme v0.3.32\n    Checking timestamp v0.1.0 (https://github.com/Byte-OS/timestamp.git#0394ccfa)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate kgoldfish-rtc v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/driver/kgoldfish-rtc &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate kgoldfish-rtc v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "ramfs",
      "count": 7,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/ByteOS/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     xmas-elf\nVersion:   0.9.0\nTitle:     Potential out-of-bounds read with a malformed ELF file and the HashTable API.\nDate:      2025-03-26\nID:        RUSTSEC-2025-0018\nURL:       https://rustsec.org/advisories/RUSTSEC-2025-0018\nSolution:  Upgrade to >=0.10\nDependency tree:\nxmas-elf 0.9.0\n└── kernel 0.1.0\n\nCrate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── runtime 0.1.0\n│       │   ├── ramfs 0.1.0\n│       │   │   └── fs 0.1.0\n│       │   │       └── kernel 0.1.0\n│       │   ├── kernel 0.1.0\n│       │   └── devices 0.1.0\n│       │       ├── ns16550a 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kvirtio 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kramdisk 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kgoldfish-rtc 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── kernel 0.1.0\n│       │       ├── general-plic 0.1.0\n│       │       │   └── kernel 0.1.0\n│       │       ├── fs 0.1.0\n│       │       └── devfs 0.1.0\n│       │           └── fs 0.1.0\n│       ├── ramfs 0.1.0\n│       ├── polyhal-trap 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── kernel 0.1.0\n│       ├── kernel 0.1.0\n│       ├── executor 0.1.0\n│       │   └── kernel 0.1.0\n│       └── devices 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\nCrate:     linkme\nVersion:   0.3.22\nWarning:   unsound\nTitle:     Fails to ensure slice elements match the slice's declared type\nDate:      2024-03-05\nID:        RUSTSEC-2024-0407\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0407\nDependency tree:\nlinkme 0.3.22\n└── devices 0.1.0\n    ├── ns16550a 0.1.0\n    │   └── kernel 0.1.0\n    ├── kvirtio 0.1.0\n    │   └── kernel 0.1.0\n    ├── kramdisk 0.1.0\n    │   └── kernel 0.1.0\n    ├── kgoldfish-rtc 0.1.0\n    │   └── kernel 0.1.0\n    ├── kernel 0.1.0\n    ├── general-plic 0.1.0\n    │   └── kernel 0.1.0\n    ├── fs 0.1.0\n    │   └── kernel 0.1.0\n    └── devfs 0.1.0\n        └── fs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 780,\n    \"last-commit\": \"982c2320aa55b3095110a0b0eadd446d83be45f9\",\n    \"last-updated\": \"2025-05-14T22:55:51+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 101\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": true,\n    \"count\": 1,\n    \"list\": [\n      {\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2025-0018\",\n          \"package\": \"xmas-elf\",\n          \"title\": \"Potential out-of-bounds read with a malformed ELF file and the HashTable API.\",\n          \"description\": \"Affected versions of this crate only validated the `index` argument of\\n`HashTable::get_bucket` and `HashTable::get_chain` against the input-controlled\\n`bucket_count` and `chain_count` fields, but not against the size of the ELF\\nsection. As a result, a malformed ELF file could trigger out-of-bounds reads in\\na consumer of the HashTable API by setting these fields to inappropriately large\\nvalues that would fall outside the relevant hash table section, and by\\nintroducing correspondingly out-of-bounds hash table indexes elsewhere in the ELF\\nfile.\",\n          \"date\": \"2025-03-26\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [\n            \"memory-exposure\"\n          ],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": null,\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/nrc/xmas-elf/issues/86\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"versions\": {\n          \"patched\": [\n            \">=0.10\"\n          ],\n          \"unaffected\": []\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [],\n          \"functions\": {\n            \"xmas_elf::hash::HashTable::get_bucket\": [\n              \"<0.10\"\n            ],\n            \"xmas_elf::hash::HashTable::get_chain\": [\n              \"<0.10\"\n            ]\n          }\n        },\n        \"package\": {\n          \"name\": \"xmas-elf\",\n          \"version\": \"0.9.0\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"f820cc767d65b32eef9d7ce7201448f28501c59edc55d47b71375fea579fc2df\",\n          \"dependencies\": [\n            {\n              \"name\": \"zero\",\n              \"version\": \"0.1.3\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        }\n      }\n    ]\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"linkme\",\n          \"version\": \"0.3.22\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8b53ad6a33de58864705954edb5ad5d571a010f9e296865ed43dc72a5621b430\",\n          \"dependencies\": [\n            {\n              \"name\": \"linkme-impl\",\n              \"version\": \"0.3.22\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0407\",\n          \"package\": \"linkme\",\n          \"title\": \"Fails to ensure slice elements match the slice's declared type\",\n          \"description\": \"Affected versions allow populating a DistributedSlice of T with elements of an\\narbitrary other type that coerces to T. For example, elements of type `&&str`\\ncould end up in a slice of type `[&str]`, since `&&str` coerces to `&str` via a\\nderef coercion.\\n\\nThe flaw was corrected by implementing typechecking for distributed slice\\nelements in such a way that coercion no longer occurs. The element's type must\\nbe a subtype of the slice's declared element type.\",\n          \"date\": \"2024-03-05\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/linkme/issues/82\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [\n            \">=0.3.24\"\n          ],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) audit",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ramfs, checker=Audit\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ramfs\n// cmd=cargo audit\n// timestamp=2025-05-16 5:30:58.193619294 +08:00:00\n    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 780 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (101 crate dependencies)\nerror: 1 vulnerability found!\nwarning: 2 allowed warnings found\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ramfs, checker=Lockbud\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ramfs\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:31:45.976125317 +08:00:00\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling polyhal v0.2.4\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ramfs, checker=Rapx\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ramfs\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:37:39.058944924 +08:00:00\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.8\n    Checking scopeguard v1.1.0\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n    Checking embedded-hal v1.0.0\n   Compiling lock_api v0.4.9\n   Compiling polyhal v0.2.4\n    Checking critical-section v1.2.0\n   Compiling quote v1.0.35\n    Checking riscv-pac v0.2.0\n   Compiling syscalls v0.6.18 (https://github.com/jasonwhite/syscalls.git#92624de3)\n   Compiling syn v2.0.100\n    Checking spin v0.9.8\n    Checking bitflags v2.9.0\n    Checking spin v0.10.0\n    Checking sbi-rt v0.0.2\n    Checking arrayvec v0.7.6\n    Checking cfg-if v1.0.0\n    Checking log v0.4.27\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking fdt-parser v0.4.12\n    Checking lazyinit v0.2.1\n    Checking buddy_system_allocator v0.9.0\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking downcast-rs v1.2.0\n    Checking bit_field v0.10.2\n    Checking vfscore v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore)\n   Compiling riscv-macros v0.2.0\n   Compiling polyhal-macro v0.2.4\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n154 | |         // Restore Kernel Context.\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n186 | |         // Switch to new page table.\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nFor more information about this error, try `rustc --explain E0787`.\nerror: could not compile `polyhal` (lib) due to 3 previous errors\nwarning: build failed, waiting for other jobs to finish...\n21:37:45|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=ramfs, checker=SemverChecks\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ramfs\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:30:07.102582718 +08:00:00\n    Building ramfs v0.1.0 (current)\nerror: running cargo-doc on crate 'ramfs' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking riscv-pac v0.2.0\n    Checking critical-section v1.2.0\n    Checking spin v0.9.8\n    Checking embedded-hal v1.0.0\n    Checking bitflags v2.9.1\n   Compiling syscalls v0.6.18 (https://github.com/jasonwhite/syscalls.git#92624de3)\n    Checking spin v0.10.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking cfg-if v1.0.0\n    Checking arrayvec v0.7.6\n    Checking lazyinit v0.2.1\n    Checking log v0.4.27\n    Checking fdt-parser v0.4.13\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking buddy_system_allocator v0.9.1\n    Checking bit_field v0.10.2\n    Checking downcast-rs v1.2.1\n    Checking vfscore v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate ramfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ramfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate ramfs v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=ramfs, checker=SemverChecks\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ramfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-05-16 5:30:09.08323484 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building ramfs v0.1.0 (current)\nerror: running cargo-doc on crate 'ramfs' failed with output:\n-----\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling paste v1.0.15\n   Compiling riscv v0.13.0\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n   Compiling riscv-macros v0.2.0\n    Checking riscv-pac v0.2.0\n    Checking critical-section v1.2.0\n    Checking spin v0.9.8\n    Checking embedded-hal v1.0.0\n    Checking bitflags v2.9.1\n   Compiling syscalls v0.6.18 (https://github.com/jasonwhite/syscalls.git#92624de3)\n    Checking spin v0.10.0\n   Compiling polyhal v0.2.4\n    Checking sbi-rt v0.0.2\n    Checking cfg-if v1.0.0\n    Checking arrayvec v0.7.6\n    Checking lazyinit v0.2.1\n    Checking log v0.4.27\n    Checking fdt-parser v0.4.13\n   Compiling runtime v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/runtime)\n    Checking sync v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync)\n    Checking buddy_system_allocator v0.9.1\n    Checking bit_field v0.10.2\n    Checking downcast-rs v1.2.1\n    Checking vfscore v0.1.0 (/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0308]: mismatched types\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.2.4/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/f7cc13af822fe68c64fec0b05aa9dd1412451f7c/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `polyhal` (lib) due to 5 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate ramfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/ramfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate ramfs v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "signal",
      "count": 5,
      "raw_reports": [
        {
          "file": "crates/signal/src/lib.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: you should consider adding a `Default` implementation for `SigProcMask`\n   --> crates/signal/src/lib.rs:176:5\n    |\n176 | /     pub fn new() -> Self {\n177 | |         Self { mask: 0 }\n178 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n175 + impl Default for SigProcMask {\n176 +     fn default() -> Self {\n177 +         Self::new()\n178 +     }\n179 + }\n    |\n\n",
              "warning: you should consider adding a `Default` implementation for `SigAction`\n   --> crates/signal/src/lib.rs:212:5\n    |\n212 | /     pub fn new() -> Self {\n213 | |         Self {\n214 | |             handler: 0,\n215 | |             mask: SigProcMask::new(),\n...   |\n218 | |         }\n219 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\nhelp: try adding this\n    |\n211 + impl Default for SigAction {\n212 +     fn default() -> Self {\n213 +         Self::new()\n214 +     }\n215 + }\n    |\n\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=signal, checker=SemverChecks\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/signal\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:30:29.181060695 +08:00:00\n    Building signal v0.1.0 (current)\n       Built [   0.314s] (current)\n     Parsing signal v0.1.0 (current)\n      Parsed [   0.002s] (current)\n    Building signal v0.1.0 (baseline)\nerror: running cargo-doc on crate 'signal' failed with output:\n-----\n   Compiling libc v0.2.172\n   Compiling nix v0.30.1\n    Checking cfg-if v1.0.0\n    Checking bitflags v2.9.1\nerror[E0463]: can't find crate for `std`\n  |\n  = note: the `riscv64gc-unknown-none-elf` target may not support the standard library\n  = note: `std` is required by `nix` because it does not declare `#![no_std]`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `nix` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate signal v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add signal@=0.1.0 &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate signal v0.1.0\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=signal, checker=Outdated\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/signal\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-16 5:41:05.638522968 +08:00:00\n\nName      Project  Compat  Latest  Kind    Platform\n----      -------  ------  ------  ----    --------\nbitflags  2.9.0    2.9.1   2.9.1   Normal  ---\nnum_enum  0.6.1    ---     0.7.3   Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=signal, checker=SemverChecks\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/signal\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-05-16 5:30:30.386088948 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building signal v0.1.0 (current)\n       Built [   0.314s] (current)\n     Parsing signal v0.1.0 (current)\n      Parsed [   0.002s] (current)\n    Building signal v0.1.0 (baseline)\nerror: running cargo-doc on crate 'signal' failed with output:\n-----\n   Compiling libc v0.2.172\n   Compiling nix v0.30.1\n    Checking cfg-if v1.0.0\n    Checking bitflags v2.9.1\nerror[E0463]: can't find crate for `std`\n  |\n  = note: the `riscv64gc-unknown-none-elf` target may not support the standard library\n  = note: `std` is required by `nix` because it does not declare `#![no_std]`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `nix` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate signal v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add signal@=0.1.0 &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate signal v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "procfs",
      "count": 3,
      "raw_reports": [
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=procfs, checker=SemverChecks\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/procfs\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:29:57.213999642 +08:00:00\n    Building procfs v0.1.0 (current)\n       Built [   0.612s] (current)\n     Parsing procfs v0.1.0 (current)\n      Parsed [   0.001s] (current)\n    Building procfs v0.1.0 (baseline)\nerror: running cargo-doc on crate 'procfs' failed with output:\n-----\n   Compiling num-traits v0.2.19\n    Checking lazy_static v1.5.0\n    Checking hex v0.3.2\n   Compiling libc v0.2.172\nerror[E0463]: can't find crate for `std`\n --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lazy_static-1.5.0/src/inline_lazy.rs:9:1\n  |\n9 | extern crate std;\n  | ^^^^^^^^^^^^^^^^^ can't find crate\n  |\n  = note: the `riscv64gc-unknown-none-elf` target may not support the standard library\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n  |\n  = note: the `riscv64gc-unknown-none-elf` target may not support the standard library\n  = note: `std` is required by `hex` because it does not declare `#![no_std]`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: cannot find attribute `derive` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:83:3\n   |\n83 | #[derive(Debug, Clone, Copy, PartialEq)]\n   |   ^^^^^^\n\nerror: cannot find macro `write` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:117:17\n    |\n117 |                 write!(f, \"Invalid character '{}' at position {}\", c, index),\n    |                 ^^^^^\n\nerror: cannot find macro `write` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:119:17\n    |\n119 |                 write!(f, \"Odd number of digits\"),\n    |                 ^^^^^\n\nerror: cannot find macro `write` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:121:17\n    |\n121 |                 write!(f, \"Invalid string length\"),\n    |                 ^^^^^\n\nerror: could not compile `lazy_static` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror[E0405]: cannot find trait `AsRef` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:68:9\n   |\n68 | impl<T: AsRef<[u8]>> ToHex for T {\n   |         ^^^^^ not found in this scope\n\nerror[E0405]: cannot find trait `Sized` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:146:20\n    |\n146 | pub trait FromHex: Sized {\n    |                    ^^^^^ not found in this scope\n\nerror[E0405]: cannot find trait `AsRef` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:154:20\n    |\n154 |     fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error>;\n    |                    ^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:154:44\n    |\n154 |     fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error>;\n    |                                            ^^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:157:30\n    |\n157 | fn val(c: u8, idx: usize) -> Result<u8, FromHexError> {\n    |                              ^^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:171:18\n    |\n171 | impl FromHex for Vec<u8> {\n    |                  ^^^ not found in this scope\n\nerror[E0405]: cannot find trait `AsRef` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:174:20\n    |\n174 |     fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {\n    |                    ^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:174:44\n    |\n174 |     fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {\n    |                                            ^^^^^^ not found in this scope\n\nerror[E0405]: cannot find trait `AsRef` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:193:28\n    |\n193 |               fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {\n    |                              ^^^^^ not found in this scope\n...\n214 | / from_hex_array_impl! {\n215 | |     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n216 | |     17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\n217 | |     33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\n...   |\n223 | |     160 192 200 224 256 384 512 768 1024 2048 4096 8192 16384 32768\n224 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:193:52\n    |\n193 |               fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {\n    |                                                      ^^^^^^ not found in this scope\n...\n214 | / from_hex_array_impl! {\n215 | |     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n216 | |     17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\n217 | |     33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\n...   |\n223 | |     160 192 200 224 256 384 512 768 1024 2048 4096 8192 16384 32768\n224 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0405]: cannot find trait `AsRef` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:193:28\n    |\n193 |               fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {\n    |                              ^^^^^ not found in this scope\n...\n227 | / from_hex_array_impl! {\n228 | |     65536 131072 262144 524288 1048576 2097152 4194304 8388608\n229 | |     16777216 33554432 67108864 134217728 268435456 536870912\n230 | |     1073741824 2147483648\n231 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:193:52\n    |\n193 |               fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {\n    |                                                      ^^^^^^ not found in this scope\n...\n227 | / from_hex_array_impl! {\n228 | |     65536 131072 262144 524288 1048576 2097152 4194304 8388608\n229 | |     16777216 33554432 67108864 134217728 268435456 536870912\n230 | |     1073741824 2147483648\n231 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0405]: cannot find trait `AsRef` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:193:28\n    |\n193 |               fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {\n    |                              ^^^^^ not found in this scope\n...\n234 | / from_hex_array_impl! {\n235 | |     4294967296\n236 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:193:52\n    |\n193 |               fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {\n    |                                                      ^^^^^^ not found in this scope\n...\n234 | / from_hex_array_impl! {\n235 | |     4294967296\n236 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0405]: cannot find trait `AsRef` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:251:18\n    |\n251 | pub fn encode<T: AsRef<[u8]>>(data: T) -> String {\n    |                  ^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:251:43\n    |\n251 | pub fn encode<T: AsRef<[u8]>>(data: T) -> String {\n    |                                           ^^^^^^ not found in this scope\n\nerror[E0405]: cannot find trait `AsRef` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:269:24\n    |\n269 | pub fn encode_upper<T: AsRef<[u8]>>(data: T) -> String {\n    |                        ^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:269:49\n    |\n269 | pub fn encode_upper<T: AsRef<[u8]>>(data: T) -> String {\n    |                                                 ^^^^^^ not found in this scope\n\nerror[E0405]: cannot find trait `AsRef` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:292:18\n    |\n292 | pub fn decode<T: AsRef<[u8]>>(data: T) -> Result<Vec<u8>, FromHexError> {\n    |                  ^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:292:43\n    |\n292 | pub fn decode<T: AsRef<[u8]>>(data: T) -> Result<Vec<u8>, FromHexError> {\n    |                                           ^^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:292:50\n    |\n292 | pub fn decode<T: AsRef<[u8]>>(data: T) -> Result<Vec<u8>, FromHexError> {\n    |                                                  ^^^ not found in this scope\n\nerror: requires `sized` lang_item\n\nerror[E0433]: failed to resolve: use of undeclared type `String`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:252:17\n    |\n252 |     let mut s = String::with_capacity(data.as_ref().len() * 2);\n    |                 ^^^^^^ use of undeclared type `String`\n\nerror[E0433]: failed to resolve: use of undeclared type `String`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:270:17\n    |\n270 |     let mut s = String::with_capacity(data.as_ref().len() * 2);\n    |                 ^^^^^^ use of undeclared type `String`\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:65:5\n   |\n65 |     Ok(())\n   |     ^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:159:24\n    |\n159 |         b'A'...b'F' => Ok(c - b'A' + 10),\n    |                        ^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:160:24\n    |\n160 |         b'a'...b'f' => Ok(c - b'a' + 10),\n    |                        ^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:161:24\n    |\n161 |         b'0'...b'9' => Ok(c - b'0'),\n    |                        ^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:163:13\n    |\n163 |             Err(FromHexError::InvalidHexCharacter {\n    |             ^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:177:20\n    |\n177 |             return Err(FromHexError::OddLength);\n    |                    ^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:181:13\n    |\n181 |             Ok(val(pair[0], 2 * i)? << 4 | val(pair[1], 2 * i + 1)?)\n    |             ^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:196:28\n    |\n196 |                       return Err(FromHexError::OddLength);\n    |                              ^^^ not found in this scope\n...\n214 | / from_hex_array_impl! {\n215 | |     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n216 | |     17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\n217 | |     33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\n...   |\n223 | |     160 192 200 224 256 384 512 768 1024 2048 4096 8192 16384 32768\n224 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:199:28\n    |\n199 |                       return Err(FromHexError::InvalidStringLength);\n    |                              ^^^ not found in this scope\n...\n214 | / from_hex_array_impl! {\n215 | |     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n216 | |     17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\n217 | |     33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\n...   |\n223 | |     160 192 200 224 256 384 512 768 1024 2048 4096 8192 16384 32768\n224 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:208:17\n    |\n208 |                   Ok(out)\n    |                   ^^ not found in this scope\n...\n214 | / from_hex_array_impl! {\n215 | |     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n216 | |     17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\n217 | |     33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\n...   |\n223 | |     160 192 200 224 256 384 512 768 1024 2048 4096 8192 16384 32768\n224 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:196:28\n    |\n196 |                       return Err(FromHexError::OddLength);\n    |                              ^^^ not found in this scope\n...\n227 | / from_hex_array_impl! {\n228 | |     65536 131072 262144 524288 1048576 2097152 4194304 8388608\n229 | |     16777216 33554432 67108864 134217728 268435456 536870912\n230 | |     1073741824 2147483648\n231 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:199:28\n    |\n199 |                       return Err(FromHexError::InvalidStringLength);\n    |                              ^^^ not found in this scope\n...\n227 | / from_hex_array_impl! {\n228 | |     65536 131072 262144 524288 1048576 2097152 4194304 8388608\n229 | |     16777216 33554432 67108864 134217728 268435456 536870912\n230 | |     1073741824 2147483648\n231 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:208:17\n    |\n208 |                   Ok(out)\n    |                   ^^ not found in this scope\n...\n227 | / from_hex_array_impl! {\n228 | |     65536 131072 262144 524288 1048576 2097152 4194304 8388608\n229 | |     16777216 33554432 67108864 134217728 268435456 536870912\n230 | |     1073741824 2147483648\n231 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:196:28\n    |\n196 |                       return Err(FromHexError::OddLength);\n    |                              ^^^ not found in this scope\n...\n234 | / from_hex_array_impl! {\n235 | |     4294967296\n236 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:199:28\n    |\n199 |                       return Err(FromHexError::InvalidStringLength);\n    |                              ^^^ not found in this scope\n...\n234 | / from_hex_array_impl! {\n235 | |     4294967296\n236 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:208:17\n    |\n208 |                   Ok(out)\n    |                   ^^ not found in this scope\n...\n234 | / from_hex_array_impl! {\n235 | |     4294967296\n236 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0405, E0412, E0425, E0433, E0463.\nFor more information about an error, try `rustc --explain E0405`.\nerror: could not compile `hex` (lib) due to 45 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate procfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add procfs@=0.1.0 &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate procfs v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-15T21:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-15T21:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=procfs, checker=SemverChecks\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/procfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-05-16 5:29:59.194236726 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building procfs v0.1.0 (current)\n       Built [   0.612s] (current)\n     Parsing procfs v0.1.0 (current)\n      Parsed [   0.001s] (current)\n    Building procfs v0.1.0 (baseline)\nerror: running cargo-doc on crate 'procfs' failed with output:\n-----\n   Compiling num-traits v0.2.19\n    Checking lazy_static v1.5.0\n    Checking hex v0.3.2\n   Compiling libc v0.2.172\nerror[E0463]: can't find crate for `std`\n --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lazy_static-1.5.0/src/inline_lazy.rs:9:1\n  |\n9 | extern crate std;\n  | ^^^^^^^^^^^^^^^^^ can't find crate\n  |\n  = note: the `riscv64gc-unknown-none-elf` target may not support the standard library\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nerror[E0463]: can't find crate for `std`\n  |\n  = note: the `riscv64gc-unknown-none-elf` target may not support the standard library\n  = note: `std` is required by `hex` because it does not declare `#![no_std]`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: cannot find attribute `derive` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:83:3\n   |\n83 | #[derive(Debug, Clone, Copy, PartialEq)]\n   |   ^^^^^^\n\nerror: cannot find macro `write` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:117:17\n    |\n117 |                 write!(f, \"Invalid character '{}' at position {}\", c, index),\n    |                 ^^^^^\n\nerror: cannot find macro `write` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:119:17\n    |\n119 |                 write!(f, \"Odd number of digits\"),\n    |                 ^^^^^\n\nerror: cannot find macro `write` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:121:17\n    |\n121 |                 write!(f, \"Invalid string length\"),\n    |                 ^^^^^\n\nerror: could not compile `lazy_static` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror[E0405]: cannot find trait `AsRef` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:68:9\n   |\n68 | impl<T: AsRef<[u8]>> ToHex for T {\n   |         ^^^^^ not found in this scope\n\nerror[E0405]: cannot find trait `Sized` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:146:20\n    |\n146 | pub trait FromHex: Sized {\n    |                    ^^^^^ not found in this scope\n\nerror[E0405]: cannot find trait `AsRef` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:154:20\n    |\n154 |     fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error>;\n    |                    ^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:154:44\n    |\n154 |     fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error>;\n    |                                            ^^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:157:30\n    |\n157 | fn val(c: u8, idx: usize) -> Result<u8, FromHexError> {\n    |                              ^^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:171:18\n    |\n171 | impl FromHex for Vec<u8> {\n    |                  ^^^ not found in this scope\n\nerror[E0405]: cannot find trait `AsRef` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:174:20\n    |\n174 |     fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {\n    |                    ^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:174:44\n    |\n174 |     fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {\n    |                                            ^^^^^^ not found in this scope\n\nerror[E0405]: cannot find trait `AsRef` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:193:28\n    |\n193 |               fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {\n    |                              ^^^^^ not found in this scope\n...\n214 | / from_hex_array_impl! {\n215 | |     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n216 | |     17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\n217 | |     33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\n...   |\n223 | |     160 192 200 224 256 384 512 768 1024 2048 4096 8192 16384 32768\n224 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:193:52\n    |\n193 |               fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {\n    |                                                      ^^^^^^ not found in this scope\n...\n214 | / from_hex_array_impl! {\n215 | |     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n216 | |     17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\n217 | |     33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\n...   |\n223 | |     160 192 200 224 256 384 512 768 1024 2048 4096 8192 16384 32768\n224 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0405]: cannot find trait `AsRef` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:193:28\n    |\n193 |               fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {\n    |                              ^^^^^ not found in this scope\n...\n227 | / from_hex_array_impl! {\n228 | |     65536 131072 262144 524288 1048576 2097152 4194304 8388608\n229 | |     16777216 33554432 67108864 134217728 268435456 536870912\n230 | |     1073741824 2147483648\n231 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:193:52\n    |\n193 |               fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {\n    |                                                      ^^^^^^ not found in this scope\n...\n227 | / from_hex_array_impl! {\n228 | |     65536 131072 262144 524288 1048576 2097152 4194304 8388608\n229 | |     16777216 33554432 67108864 134217728 268435456 536870912\n230 | |     1073741824 2147483648\n231 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0405]: cannot find trait `AsRef` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:193:28\n    |\n193 |               fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {\n    |                              ^^^^^ not found in this scope\n...\n234 | / from_hex_array_impl! {\n235 | |     4294967296\n236 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:193:52\n    |\n193 |               fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {\n    |                                                      ^^^^^^ not found in this scope\n...\n234 | / from_hex_array_impl! {\n235 | |     4294967296\n236 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0405]: cannot find trait `AsRef` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:251:18\n    |\n251 | pub fn encode<T: AsRef<[u8]>>(data: T) -> String {\n    |                  ^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:251:43\n    |\n251 | pub fn encode<T: AsRef<[u8]>>(data: T) -> String {\n    |                                           ^^^^^^ not found in this scope\n\nerror[E0405]: cannot find trait `AsRef` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:269:24\n    |\n269 | pub fn encode_upper<T: AsRef<[u8]>>(data: T) -> String {\n    |                        ^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `String` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:269:49\n    |\n269 | pub fn encode_upper<T: AsRef<[u8]>>(data: T) -> String {\n    |                                                 ^^^^^^ not found in this scope\n\nerror[E0405]: cannot find trait `AsRef` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:292:18\n    |\n292 | pub fn decode<T: AsRef<[u8]>>(data: T) -> Result<Vec<u8>, FromHexError> {\n    |                  ^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `Result` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:292:43\n    |\n292 | pub fn decode<T: AsRef<[u8]>>(data: T) -> Result<Vec<u8>, FromHexError> {\n    |                                           ^^^^^^ not found in this scope\n\nerror[E0412]: cannot find type `Vec` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:292:50\n    |\n292 | pub fn decode<T: AsRef<[u8]>>(data: T) -> Result<Vec<u8>, FromHexError> {\n    |                                                  ^^^ not found in this scope\n\nerror: requires `sized` lang_item\n\nerror[E0433]: failed to resolve: use of undeclared type `String`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:252:17\n    |\n252 |     let mut s = String::with_capacity(data.as_ref().len() * 2);\n    |                 ^^^^^^ use of undeclared type `String`\n\nerror[E0433]: failed to resolve: use of undeclared type `String`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:270:17\n    |\n270 |     let mut s = String::with_capacity(data.as_ref().len() * 2);\n    |                 ^^^^^^ use of undeclared type `String`\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:65:5\n   |\n65 |     Ok(())\n   |     ^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:159:24\n    |\n159 |         b'A'...b'F' => Ok(c - b'A' + 10),\n    |                        ^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:160:24\n    |\n160 |         b'a'...b'f' => Ok(c - b'a' + 10),\n    |                        ^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:161:24\n    |\n161 |         b'0'...b'9' => Ok(c - b'0'),\n    |                        ^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:163:13\n    |\n163 |             Err(FromHexError::InvalidHexCharacter {\n    |             ^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:177:20\n    |\n177 |             return Err(FromHexError::OddLength);\n    |                    ^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:181:13\n    |\n181 |             Ok(val(pair[0], 2 * i)? << 4 | val(pair[1], 2 * i + 1)?)\n    |             ^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:196:28\n    |\n196 |                       return Err(FromHexError::OddLength);\n    |                              ^^^ not found in this scope\n...\n214 | / from_hex_array_impl! {\n215 | |     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n216 | |     17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\n217 | |     33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\n...   |\n223 | |     160 192 200 224 256 384 512 768 1024 2048 4096 8192 16384 32768\n224 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:199:28\n    |\n199 |                       return Err(FromHexError::InvalidStringLength);\n    |                              ^^^ not found in this scope\n...\n214 | / from_hex_array_impl! {\n215 | |     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n216 | |     17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\n217 | |     33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\n...   |\n223 | |     160 192 200 224 256 384 512 768 1024 2048 4096 8192 16384 32768\n224 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:208:17\n    |\n208 |                   Ok(out)\n    |                   ^^ not found in this scope\n...\n214 | / from_hex_array_impl! {\n215 | |     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n216 | |     17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\n217 | |     33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\n...   |\n223 | |     160 192 200 224 256 384 512 768 1024 2048 4096 8192 16384 32768\n224 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:196:28\n    |\n196 |                       return Err(FromHexError::OddLength);\n    |                              ^^^ not found in this scope\n...\n227 | / from_hex_array_impl! {\n228 | |     65536 131072 262144 524288 1048576 2097152 4194304 8388608\n229 | |     16777216 33554432 67108864 134217728 268435456 536870912\n230 | |     1073741824 2147483648\n231 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:199:28\n    |\n199 |                       return Err(FromHexError::InvalidStringLength);\n    |                              ^^^ not found in this scope\n...\n227 | / from_hex_array_impl! {\n228 | |     65536 131072 262144 524288 1048576 2097152 4194304 8388608\n229 | |     16777216 33554432 67108864 134217728 268435456 536870912\n230 | |     1073741824 2147483648\n231 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:208:17\n    |\n208 |                   Ok(out)\n    |                   ^^ not found in this scope\n...\n227 | / from_hex_array_impl! {\n228 | |     65536 131072 262144 524288 1048576 2097152 4194304 8388608\n229 | |     16777216 33554432 67108864 134217728 268435456 536870912\n230 | |     1073741824 2147483648\n231 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:196:28\n    |\n196 |                       return Err(FromHexError::OddLength);\n    |                              ^^^ not found in this scope\n...\n234 | / from_hex_array_impl! {\n235 | |     4294967296\n236 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:199:28\n    |\n199 |                       return Err(FromHexError::InvalidStringLength);\n    |                              ^^^ not found in this scope\n...\n234 | / from_hex_array_impl! {\n235 | |     4294967296\n236 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hex-0.3.2/src/lib.rs:208:17\n    |\n208 |                   Ok(out)\n    |                   ^^ not found in this scope\n...\n234 | / from_hex_array_impl! {\n235 | |     4294967296\n236 | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in the macro `from_hex_array_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0405, E0412, E0425, E0433, E0463.\nFor more information about an error, try `rustc --explain E0405`.\nerror: could not compile `hex` (lib) due to 45 previous errors\n\n-----\n\nerror: failed to build rustdoc for crate procfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add procfs@=0.1.0 &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate procfs v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "sync",
      "count": 3,
      "raw_reports": [
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=sync, checker=SemverChecks\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:30:32.800492584 +08:00:00\n    Building sync v0.1.0 (current)\n       Built [   0.704s] (current)\n     Parsing sync v0.1.0 (current)\n      Parsed [   0.001s] (current)\n    Building sync v0.1.0 (baseline)\nerror: running cargo-doc on crate 'sync' failed with output:\n-----\n Documenting sync v0.1.0\nerror[E0557]: feature has been removed\n --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sync-0.1.0/src/lib.rs:3:12\n  |\n3 | #![feature(const_fn)]\n  |            ^^^^^^^^ feature has been removed\n  |\n  = note: split into finer-grained feature gates\n\nerror: Compilation failed, aborting rustdoc\n\nFor more information about this error, try `rustc --explain E0557`.\nerror: could not document `sync`\n\n-----\n\nerror: failed to build rustdoc for crate sync v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add sync@=0.1.0 &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate sync v0.1.0\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=sync, checker=Outdated\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-16 5:41:11.881845895 +08:00:00\n\nName  Project  Compat  Latest  Kind    Platform\n----  -------  ------  ------  ----    --------\nspin  0.9.8    ---     0.10.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=sync, checker=SemverChecks\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/crates/sync\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-05-16 5:30:34.971008082 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building sync v0.1.0 (current)\n       Built [   0.704s] (current)\n     Parsing sync v0.1.0 (current)\n      Parsed [   0.001s] (current)\n    Building sync v0.1.0 (baseline)\nerror: running cargo-doc on crate 'sync' failed with output:\n-----\n Documenting sync v0.1.0\nerror[E0557]: feature has been removed\n --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sync-0.1.0/src/lib.rs:3:12\n  |\n3 | #![feature(const_fn)]\n  |            ^^^^^^^^ feature has been removed\n  |\n  = note: split into finer-grained feature gates\n\nerror: Compilation failed, aborting rustdoc\n\nFor more information about this error, try `rustc --explain E0557`.\nerror: could not document `sync`\n\n-----\n\nerror: failed to build rustdoc for crate sync v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add sync@=0.1.0 &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate sync v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "ByteOS",
      "pkg": "vfscore",
      "count": 3,
      "raw_reports": [
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=vfscore, checker=SemverChecks\n// toolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-16 5:30:40.565359897 +08:00:00\n    Building vfscore v0.1.0 (current)\n       Built [   0.433s] (current)\n     Parsing vfscore v0.1.0 (current)\n      Parsed [   0.004s] (current)\nerror: vfscore not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=vfscore, checker=Outdated\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-16 5:41:18.34730884 +08:00:00\n\nName         Project  Compat  Latest  Kind    Platform\n----         -------  ------  ------  ----    --------\nbitflags     2.9.0    2.9.1   2.9.1   Normal  ---\ndowncast-rs  1.2.0    1.2.1   2.0.1   Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=vfscore, checker=SemverChecks\ntoolchain=nightly-2024-08-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/ByteOS/filesystem/vfscore\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-05-16 5:30:41.466748917 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building vfscore v0.1.0 (current)\n       Built [   0.433s] (current)\n     Parsing vfscore v0.1.0 (current)\n      Parsed [   0.004s] (current)\nerror: vfscore not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Outdated",
    "Geiger",
    "Unformatted"
  ]
}