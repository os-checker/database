{"repo":{"user":"Byte-OS","repo":"polyhal"},"data":[{"user":"Byte-OS","repo":"polyhal","pkg":"example","count":11,"raw_reports":[{"file":"/home/runner/check/batch_2/Byte-OS/polyhal/src/components/percpu/riscv64.rs","count":2,"kinds":{"Clippy(Warn)":["warning: unused macro definition: `PerCPUReservedOffset`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/percpu/riscv64.rs:18:18\n   |\n18 | pub(crate) macro PerCPUReservedOffset($field: ident) {\n   |                  ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_macros)]` on by default\n\n","warning: struct `PerCPUReserved` is never constructed\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/percpu/riscv64.rs:5:19\n  |\n5 | pub(crate) struct PerCPUReserved {\n  |                   ^^^^^^^^^^^^^^\n\n"]}},{"file":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/macros.rs","count":1,"kinds":{"Clippy(Warn)":["warning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"]}},{"file":"/home/runner/check/batch_2/Byte-OS/polyhal/src/components/common.rs","count":1,"kinds":{"Clippy(Warn)":["warning: function `parse_dtb_info` is never used\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/common.rs:77:15\n   |\n77 | pub(crate) fn parse_dtb_info() {\n   |               ^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n"]}},{"file":"(virtual) lockbud","count":1,"kinds":{"Cargo":["// pkg_name=example, checker=Lockbud\n// toolchain=nightly-2023-12-01, target=riscv64imac-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2024-12-01 lockbud -k all -- --target riscv64imac-unknown-none-elf\n// timestamp=2025-01-10 13:59:43.477851306 +08:00:00\n   Compiling scopeguard v1.2.0\n   Compiling static_assertions v1.1.0\n   Compiling lock_api v0.4.11\n   Compiling riscv v0.11.1\n   Compiling log v0.4.22\n   Compiling sbi-spec v0.0.4\n   Compiling bitflags v2.6.0\n[2025-01-10T05:59:43Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-01-10T05:59:43Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling byteorder v1.5.0\n   Compiling embedded-hal v1.0.0\n   Compiling spin v0.9.8\n   Compiling critical-section v1.1.2\n   Compiling zerocopy v0.7.35\n   Compiling sbi-rt v0.0.2\n   Compiling cfg-if v1.0.0\n   Compiling fdt v0.1.5\n   Compiling buddy_system_allocator v0.9.1\n   Compiling polyhal v0.1.3 (/home/runner/check/batch_2/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:23:15\n   |\n23 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:39:19\n   |\n39 |         #[cfg(not(c906))]\n   |                   ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:94:15\n   |\n94 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:96:15\n   |\n96 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:98:15\n   |\n98 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:100:15\n    |\n100 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:102:15\n    |\n102 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused macro definition: `PerCPUReservedOffset`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/percpu/riscv64.rs:18:18\n   |\n18 | pub(crate) macro PerCPUReservedOffset($field: ident) {\n   |                  ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_macros)]` on by default\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/riscv64.rs:39:5\n   |\n39 | /     core::arch::asm!(\n40 | |         // Chcek boot core\n41 | |         \"\n42 | |             beqz    a0, 2f\n...  |\n75 | |         options(noreturn),\n76 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/riscv64.rs:85:5\n    |\n85  | /     core::arch::asm!(\n86  | |         // 1. Set Stack Pointer.\n87  | |         // sp = a1(given Stack Pointer.)\n88  | |         \"\n...   |\n115 | |         options(noreturn)\n116 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n154 | |         // Restore Kernel Context.\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n186 | |         // Switch to new page table.\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/riscv64.rs:139:5\n    |\n139 | /     asm!(\n140 | |         // 宏定义\n141 | |         r\"\n142 | |             .align 4\n...   |\n162 | |         options(noreturn)\n163 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/riscv64.rs:170:9\n    |\n170 | /         asm!(\n171 | |             r\"\n172 | |                 .align 4\n173 | |                 .altmacro\n...   |\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/riscv64.rs:219:5\n    |\n219 | /     asm!(\n220 | |         r\"\n221 | |         .altmacro\n222 | |     \",\n...   |\n259 | |         options(noreturn)\n260 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\n   Compiling virtio-drivers v0.7.5\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 16 warnings\nerror: could not compile `polyhal` (lib) due to 8 previous errors; 16 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n"]}},{"file":"(virtual) rapx","count":1,"kinds":{"Cargo":["// pkg_name=example, checker=Rapx\n// toolchain=nightly-2023-12-01, target=riscv64imac-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64imac-unknown-none-elf\n// timestamp=2025-01-10 14:00:21.795191143 +08:00:00\n   Compiling proc-macro2 v1.0.79\n   Compiling unicode-ident v1.0.12\n   Compiling autocfg v1.2.0\n    Checking scopeguard v1.2.0\n    Checking static_assertions v1.1.0\n   Compiling riscv v0.11.1\n    Checking sbi-spec v0.0.4\n    Checking bitflags v2.6.0\n    Checking byteorder v1.5.0\n    Checking embedded-hal v1.0.0\n   Compiling lock_api v0.4.11\n    Checking critical-section v1.1.2\n    Checking log v0.4.22\n    Checking sbi-rt v0.0.2\n   Compiling quote v1.0.35\n    Checking cfg-if v1.0.0\n   Compiling syn v2.0.58\n    Checking spin v0.9.8\n    Checking fdt v0.1.5\n    Checking buddy_system_allocator v0.9.1\n   Compiling zerocopy-derive v0.7.35\n   Compiling enumn v0.1.14\n   Compiling polyhal-macro v0.1.3\n    Checking polyhal v0.1.3 (/home/runner/check/batch_2/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:23:15\n   |\n23 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:39:19\n   |\n39 |         #[cfg(not(c906))]\n   |                   ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:94:15\n   |\n94 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:96:15\n   |\n96 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:98:15\n   |\n98 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:100:15\n    |\n100 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:102:15\n    |\n102 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused macro definition: `PerCPUReservedOffset`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/percpu/riscv64.rs:18:18\n   |\n18 | pub(crate) macro PerCPUReservedOffset($field: ident) {\n   |                  ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_macros)]` on by default\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/riscv64.rs:39:5\n   |\n39 | /     core::arch::asm!(\n40 | |         // Chcek boot core\n41 | |         \"\n42 | |             beqz    a0, 2f\n...  |\n75 | |         options(noreturn),\n76 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/riscv64.rs:85:5\n    |\n85  | /     core::arch::asm!(\n86  | |         // 1. Set Stack Pointer.\n87  | |         // sp = a1(given Stack Pointer.)\n88  | |         \"\n...   |\n115 | |         options(noreturn)\n116 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n154 | |         // Restore Kernel Context.\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n186 | |         // Switch to new page table.\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/riscv64.rs:139:5\n    |\n139 | /     asm!(\n140 | |         // 宏定义\n141 | |         r\"\n142 | |             .align 4\n...   |\n162 | |         options(noreturn)\n163 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/riscv64.rs:170:9\n    |\n170 | /         asm!(\n171 | |             r\"\n172 | |                 .align 4\n173 | |                 .altmacro\n...   |\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/riscv64.rs:219:5\n    |\n219 | /     asm!(\n220 | |         r\"\n221 | |         .altmacro\n222 | |     \",\n...   |\n259 | |         options(noreturn)\n260 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\n    Checking zerocopy v0.7.35\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 16 warnings\nerror: could not compile `polyhal` (lib) due to 8 previous errors; 16 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n06:00:26|RAP|ERROR|: Finished with non-zero exit code.\n"]}},{"file":"Cargo.lock","count":1,"kinds":{"Audit":["    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 724 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (44 crate dependencies)\nCrate:     critical-section\nVersion:   1.1.2\nWarning:   yanked\nDependency tree:\ncritical-section 1.1.2\n└── riscv 0.11.1\n    └── polyhal 0.1.3\n        └── example 0.1.0\n\nwarning: 1 allowed warning found\n\n{\n  \"database\": {\n    \"advisory-count\": 724,\n    \"last-commit\": \"63a2f39924f66ca89cf5761f299a8a244fe02543\",\n    \"last-updated\": \"2025-01-03T11:23:54-07:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 44\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"yanked\": [\n      {\n        \"kind\": \"yanked\",\n        \"package\": {\n          \"name\": \"critical-section\",\n          \"version\": \"1.1.2\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"7059fff8937831a9ae6f0fe4d658ffabf58f2ca96aa9dec1c889f936f705f216\",\n          \"replace\": null\n        },\n        \"advisory\": null,\n        \"affected\": null,\n        \"versions\": null\n      }\n    ]\n  }\n}"]}},{"file":"[outdated direct dependencies]","count":1,"kinds":{"Outdated":["pkg=example, checker=Outdated\ntoolchain=nightly-2023-12-01, target=riscv64imac-unknown-none-elf\npkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal/example\ncmd=cargo +nightly-2025-01-07-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-01-10 14:01:03.15485847 +08:00:00\n\nName                    Project  Compat  Latest  Kind    Platform\n----                    -------  ------  ------  ----    --------\nbuddy_system_allocator  0.9.1    ---     0.11.0  Normal  ---\nvirtio-drivers          0.7.5    ---     0.8.0   Normal  ---\n"]}},{"file":"src/frame.rs","count":1,"kinds":{"Clippy(Warn)":["warning: redundant closure\n --> src/frame.rs:6:15\n  |\n6 |     Lazy::new(|| LockedFrameAllocator::new());\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `LockedFrameAllocator::new`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n"]}},{"file":"src/main.rs","count":1,"kinds":{"Clippy(Warn)":["warning: empty `loop {}` wastes CPU cycles\n  --> src/main.rs:70:9\n   |\n70 |         loop {}\n   |         ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n"]}},{"file":"src/pci.rs","count":1,"kinds":{"Clippy(Warn)":["warning: unneeded `return` statement\n  --> src/pci.rs:14:94\n   |\n14 |               enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |  ______________________________________________________________________________________________^\n15 | |             return;\n   | |__________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n14 -             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n15 -             return;\n14 +             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |\n\n"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Semver Violation","Audit","Mirai","Rapx","Rudra","Lockbud(Probably)","Lockbud(Possibly)","Outdated","Geiger","Unformatted"]}