{
  "repo": {
    "user": "Byte-OS",
    "repo": "polyhal"
  },
  "data": [
    {
      "user": "Byte-OS",
      "repo": "polyhal",
      "pkg": "polyhal-trap",
      "count": 14,
      "raw_reports": [
        {
          "file": "polyhal/src/pagetable/aarch64.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n  --> polyhal/src/pagetable/aarch64.rs:15:32\n   |\n15 |         self.0 = (ppn << 10) | flags.bits() as usize;\n   |                                ^^^^^^^^^^^^^^^^^^^^^ help: try: `flags.bits()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n   = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n",
              "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n  --> polyhal/src/pagetable/aarch64.rs:40:28\n   |\n40 |         Self(paddr.raw() | flags.bits() as usize)\n   |                            ^^^^^^^^^^^^^^^^^^^^^ help: try: `flags.bits()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n",
              "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> polyhal/src/pagetable/aarch64.rs:65:1\n   |\n65 | impl Into<MappingFlags> for PTEFlags {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: `#[warn(clippy::from_over_into)]` on by default\nhelp: replace the `Into` implementation with `From<pagetable::aarch64::PTEFlags>`\n   |\n65 ~ impl From<PTEFlags> for MappingFlags {\n66 ~     fn from(val: PTEFlags) -> Self {\n67 ~         if val.is_empty() {\n68 |             return MappingFlags::empty();\n...\n71 |\n72 ~         if !val.contains(PTEFlags::AP_RO) {\n73 |             flags |= MappingFlags::W;\n74 |         }\n75 ~         if !val.contains(PTEFlags::UXN) || !val.contains(PTEFlags::PXN) {\n76 |             flags |= MappingFlags::X;\n77 |         }\n78 ~         if val.contains(PTEFlags::AP_EL0) {\n79 |             flags |= MappingFlags::U;\n80 |         }\n81 ~         if val.contains(PTEFlags::AF) {\n82 |             flags |= MappingFlags::A;\n83 |         }\n84 ~         if !val.contains(PTEFlags::NG) {\n   |\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/kcontext/aarch64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal/src/components/kcontext/aarch64.rs:127:1\n    |\n127 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal/src/components/kcontext/aarch64.rs:143:1\n    |\n143 | / pub unsafe extern \"C\" fn context_switch_pt(\n144 | |     from: *mut KContext,\n145 | |     to: *const KContext,\n146 | |     pt_token: PageTable,\n147 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/polyhal/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── polyhal-trap 0.2.4\n│       │   └── example 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── example 0.1.0\n│       └── example 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\n\n{\n  \"database\": {\n    \"advisory-count\": 752,\n    \"last-commit\": \"1273f0099ce6882659ff64b852c8fdb5f8cdd5b9\",\n    \"last-updated\": \"2025-04-10T14:29:37+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 54\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal-trap, checker=Lockbud\n// toolchain=nightly-2024-07-15, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-trap\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none \n// timestamp=2025-04-20 4:45:09.942692915 +08:00:00\n[2025-04-19T20:45:00Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-04-19T20:45:00Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling polyhal v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:128:5\n    |\n128 | /     core::arch::asm!(\n129 | |         // Save Kernel Context.\n130 | |         save_callee_regs!(),\n...   |\n135 | |         options(noreturn)\n136 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:160:5\n    |\n160 | /     core::arch::asm!(\n161 | |         // Save Kernel Context.\n162 | |         save_callee_regs!(),\n...   |\n174 | |         options(noreturn)\n175 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:182:9\n    |\n182 | /         core::arch::asm!(\n183 | |             \"\n184 | |                 mrs      x0, tpidr_el1\n185 | |                 ret\n186 | |             \",\n187 | |             options(noreturn)\n188 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `unsafe_attributes` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(unsafe_attributes)]\n  |            ^^^^^^^^^^^^^^^^^\n\nwarning: the feature `const_option` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> polyhal/src/lib.rs:11:46\n   |\n11 | #![cfg_attr(target_arch = \"aarch64\", feature(const_option))]\n   |                                              ^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> polyhal/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> polyhal/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nwarning: `polyhal` (lib) generated 3 warnings\nerror: could not compile `polyhal` (lib) due to 5 previous errors; 3 warnings emitted\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal-trap, checker=Rapx\n// toolchain=nightly-2024-07-15, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-trap\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target aarch64-unknown-none \n// timestamp=2025-04-20 4:47:19.32476617 +08:00:00\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.94\n   Compiling unicode-ident v1.0.18\n    Checking tock-registers v0.8.1\n    Checking scopeguard v1.2.0\n    Checking arm_pl011 v0.1.0\n    Checking aarch64-cpu v9.4.0\n    Checking arm_gicv2 v0.1.0\n    Checking bitflags v2.9.0\n   Compiling lock_api v0.4.12\n   Compiling polyhal v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal)\n    Checking log v0.4.26\n   Compiling quote v1.0.40\n   Compiling syn v2.0.100\n    Checking spin v0.10.0\n    Checking fdt-parser v0.4.10\n    Checking lazyinit v0.2.1\n    Checking cfg-if v1.0.0\n    Checking arrayvec v0.7.6\n   Compiling polyhal-macro v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-macro)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:128:5\n    |\n128 | /     core::arch::asm!(\n129 | |         // Save Kernel Context.\n130 | |         save_callee_regs!(),\n131 | |         // Restore Kernel Context.\n...   |\n135 | |         options(noreturn)\n136 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:160:5\n    |\n160 | /     core::arch::asm!(\n161 | |         // Save Kernel Context.\n162 | |         save_callee_regs!(),\n163 | |         // Switch to new page table.\n...   |\n174 | |         options(noreturn)\n175 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:182:9\n    |\n182 | /         core::arch::asm!(\n183 | |             \"\n184 | |                 mrs      x0, tpidr_el1\n185 | |                 ret\n186 | |             \",\n187 | |             options(noreturn)\n188 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `unsafe_attributes` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(unsafe_attributes)]\n  |            ^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 2 warnings\nerror: could not compile `polyhal` (lib) due to 3 previous errors; 2 warnings emitted\n20:47:23|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal-trap, checker=SemverChecks\n// toolchain=nightly-2024-07-15, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-trap\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none \n// timestamp=2025-04-20 4:44:35.577073654 +08:00:00\n    Building polyhal-trap v0.2.4 (current)\nerror: running cargo-doc on crate 'polyhal-trap' failed with output:\n-----\n    Checking tock-registers v0.8.1\n   Compiling lock_api v0.4.12\n    Checking scopeguard v1.2.0\n   Compiling quote v1.0.40\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `tock-registers` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate polyhal-trap v0.2.4\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/polyhal/polyhal-trap &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal-trap v0.2.4\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=polyhal-trap, checker=Outdated\ntoolchain=nightly-2024-07-15, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-trap\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-04-20 4:47:34.326536969 +08:00:00\n\nName            Project  Compat  Latest  Kind    Platform\n----            -------  ------  ------  ----    --------\naarch64-cpu     9.4.0    ---     10.0.0  Normal  cfg(target_arch = \"aarch64\")\nlog             0.4.26   0.4.27  0.4.27  Normal  ---\nloongArch64     0.2.4    0.2.5   0.2.5   Normal  cfg(target_arch = \"loongarch64\")\ntock-registers  0.8.1    ---     0.9.0   Normal  cfg(target_arch = \"aarch64\")\nx86_64          0.14.12  ---     0.15.2  Normal  cfg(target_arch = \"x86_64\")\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=polyhal-trap, checker=SemverChecks\ntoolchain=nightly-2024-07-15, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-trap\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none \ntimestamp=2025-04-20 4:44:36.079357382 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building polyhal-trap v0.2.4 (current)\nerror: running cargo-doc on crate 'polyhal-trap' failed with output:\n-----\n    Checking tock-registers v0.8.1\n   Compiling lock_api v0.4.12\n    Checking scopeguard v1.2.0\n   Compiling quote v1.0.40\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `tock-registers` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate polyhal-trap v0.2.4\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/polyhal/polyhal-trap &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal-trap v0.2.4\n"
            ]
          }
        },
        {
          "file": "polyhal/src/arch/aarch64/psci.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: empty `loop {}` wastes CPU cycles\n  --> polyhal/src/arch/aarch64/psci.rs:93:5\n   |\n93 | /     loop {\n94 | |         // crate::arch::halt();\n95 | |     }\n   | |_____^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/irq/aarch64.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: function `init` is never used\n  --> polyhal/src/components/irq/aarch64.rs:30:15\n   |\n30 | pub(crate) fn init() {\n   |               ^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "polyhal-trap/src/trap/aarch64.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: casting function pointer `exception_vector_base` to `u64`\n   --> polyhal-trap/src/trap/aarch64.rs:103:18\n    |\n103 |     VBAR_EL1.set(exception_vector_base as _);\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `exception_vector_base as usize`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n    = note: `#[warn(clippy::fn_to_numeric_cast)]` on by default\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "polyhal",
      "pkg": "polyhal",
      "count": 13,
      "raw_reports": [
        {
          "file": "polyhal/src/pagetable/aarch64.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n  --> polyhal/src/pagetable/aarch64.rs:15:32\n   |\n15 |         self.0 = (ppn << 10) | flags.bits() as usize;\n   |                                ^^^^^^^^^^^^^^^^^^^^^ help: try: `flags.bits()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n   = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n",
              "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n  --> polyhal/src/pagetable/aarch64.rs:40:28\n   |\n40 |         Self(paddr.raw() | flags.bits() as usize)\n   |                            ^^^^^^^^^^^^^^^^^^^^^ help: try: `flags.bits()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n",
              "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> polyhal/src/pagetable/aarch64.rs:65:1\n   |\n65 | impl Into<MappingFlags> for PTEFlags {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: `#[warn(clippy::from_over_into)]` on by default\nhelp: replace the `Into` implementation with `From<pagetable::aarch64::PTEFlags>`\n   |\n65 ~ impl From<PTEFlags> for MappingFlags {\n66 ~     fn from(val: PTEFlags) -> Self {\n67 ~         if val.is_empty() {\n68 |             return MappingFlags::empty();\n...\n71 |\n72 ~         if !val.contains(PTEFlags::AP_RO) {\n73 |             flags |= MappingFlags::W;\n74 |         }\n75 ~         if !val.contains(PTEFlags::UXN) || !val.contains(PTEFlags::PXN) {\n76 |             flags |= MappingFlags::X;\n77 |         }\n78 ~         if val.contains(PTEFlags::AP_EL0) {\n79 |             flags |= MappingFlags::U;\n80 |         }\n81 ~         if val.contains(PTEFlags::AF) {\n82 |             flags |= MappingFlags::A;\n83 |         }\n84 ~         if !val.contains(PTEFlags::NG) {\n   |\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/kcontext/aarch64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal/src/components/kcontext/aarch64.rs:127:1\n    |\n127 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal/src/components/kcontext/aarch64.rs:143:1\n    |\n143 | / pub unsafe extern \"C\" fn context_switch_pt(\n144 | |     from: *mut KContext,\n145 | |     to: *const KContext,\n146 | |     pt_token: PageTable,\n147 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/polyhal/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── polyhal-trap 0.2.4\n│       │   └── example 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── example 0.1.0\n│       └── example 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\n\n{\n  \"database\": {\n    \"advisory-count\": 752,\n    \"last-commit\": \"1273f0099ce6882659ff64b852c8fdb5f8cdd5b9\",\n    \"last-updated\": \"2025-04-10T14:29:37+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 54\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal, checker=Lockbud\n// toolchain=nightly-2024-07-15, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none \n// timestamp=2025-04-20 4:45:05.466912109 +08:00:00\n   Compiling polyhal v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal)\n[2025-04-19T20:45:00Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-04-19T20:45:00Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:128:5\n    |\n128 | /     core::arch::asm!(\n129 | |         // Save Kernel Context.\n130 | |         save_callee_regs!(),\n...   |\n135 | |         options(noreturn)\n136 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:160:5\n    |\n160 | /     core::arch::asm!(\n161 | |         // Save Kernel Context.\n162 | |         save_callee_regs!(),\n...   |\n174 | |         options(noreturn)\n175 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:182:9\n    |\n182 | /         core::arch::asm!(\n183 | |             \"\n184 | |                 mrs      x0, tpidr_el1\n185 | |                 ret\n186 | |             \",\n187 | |             options(noreturn)\n188 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `unsafe_attributes` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(unsafe_attributes)]\n  |            ^^^^^^^^^^^^^^^^^\n\nwarning: the feature `const_option` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> polyhal/src/lib.rs:11:46\n   |\n11 | #![cfg_attr(target_arch = \"aarch64\", feature(const_option))]\n   |                                              ^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> polyhal/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> polyhal/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nwarning: `polyhal` (lib) generated 3 warnings\nerror: could not compile `polyhal` (lib) due to 5 previous errors; 3 warnings emitted\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal, checker=Rapx\n// toolchain=nightly-2024-07-15, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target aarch64-unknown-none \n// timestamp=2025-04-20 4:46:08.752085168 +08:00:00\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.94\n   Compiling unicode-ident v1.0.18\n    Checking tock-registers v0.8.1\n    Checking scopeguard v1.2.0\n    Checking aarch64-cpu v9.4.0\n    Checking arm_gicv2 v0.1.0\n    Checking arm_pl011 v0.1.0\n    Checking cfg-if v1.0.0\n   Compiling lock_api v0.4.12\n   Compiling polyhal v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal)\n    Checking arrayvec v0.7.6\n   Compiling quote v1.0.40\n   Compiling syn v2.0.100\n    Checking spin v0.10.0\n    Checking fdt-parser v0.4.10\n    Checking log v0.4.26\n    Checking bitflags v2.9.0\n    Checking lazyinit v0.2.1\n   Compiling polyhal-macro v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-macro)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:128:5\n    |\n128 | /     core::arch::asm!(\n129 | |         // Save Kernel Context.\n130 | |         save_callee_regs!(),\n131 | |         // Restore Kernel Context.\n...   |\n135 | |         options(noreturn)\n136 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:160:5\n    |\n160 | /     core::arch::asm!(\n161 | |         // Save Kernel Context.\n162 | |         save_callee_regs!(),\n163 | |         // Switch to new page table.\n...   |\n174 | |         options(noreturn)\n175 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:182:9\n    |\n182 | /         core::arch::asm!(\n183 | |             \"\n184 | |                 mrs      x0, tpidr_el1\n185 | |                 ret\n186 | |             \",\n187 | |             options(noreturn)\n188 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `unsafe_attributes` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(unsafe_attributes)]\n  |            ^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 2 warnings\nerror: could not compile `polyhal` (lib) due to 3 previous errors; 2 warnings emitted\n20:46:13|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal, checker=SemverChecks\n// toolchain=nightly-2024-07-15, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none \n// timestamp=2025-04-20 4:44:25.099765812 +08:00:00\n    Building polyhal v0.2.4 (current)\nerror: running cargo-doc on crate 'polyhal' failed with output:\n-----\n    Checking tock-registers v0.8.1\n   Compiling lock_api v0.4.12\n    Checking scopeguard v1.2.0\n   Compiling syn v2.0.100\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `tock-registers` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `scopeguard` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate polyhal v0.2.4\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/polyhal/polyhal --features boot,default,graphic,logger,trap &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal v0.2.4\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=polyhal, checker=Outdated\ntoolchain=nightly-2024-07-15, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-04-20 4:47:28.301056382 +08:00:00\n\nName            Project  Compat  Latest  Kind    Platform\n----            -------  ------  ------  ----    --------\naarch64-cpu     9.4.0    ---     10.0.0  Normal  cfg(target_arch = \"aarch64\")\nfdt-parser      0.4.10   0.4.13  0.4.13  Normal  ---\nlog             0.4.26   0.4.27  0.4.27  Normal  ---\nloongArch64     0.2.4    0.2.5   0.2.5   Normal  cfg(target_arch = \"loongarch64\")\nsbi-rt          0.0.2    ---     0.0.3   Normal  cfg(target_arch = \"riscv64\")\ntock-registers  0.8.1    ---     0.9.0   Normal  cfg(target_arch = \"aarch64\")\nx2apic          0.4.3    ---     0.5.0   Normal  cfg(target_arch = \"x86_64\")\nx86_64          0.14.12  ---     0.15.2  Normal  cfg(target_arch = \"x86_64\")\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=polyhal, checker=SemverChecks\ntoolchain=nightly-2024-07-15, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none \ntimestamp=2025-04-20 4:44:27.583379308 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building polyhal v0.2.4 (current)\nerror: running cargo-doc on crate 'polyhal' failed with output:\n-----\n    Checking tock-registers v0.8.1\n   Compiling lock_api v0.4.12\n    Checking scopeguard v1.2.0\n   Compiling syn v2.0.100\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `tock-registers` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `scopeguard` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate polyhal v0.2.4\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/polyhal/polyhal --features boot,default,graphic,logger,trap &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal v0.2.4\n"
            ]
          }
        },
        {
          "file": "polyhal/src/arch/aarch64/psci.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: empty `loop {}` wastes CPU cycles\n  --> polyhal/src/arch/aarch64/psci.rs:93:5\n   |\n93 | /     loop {\n94 | |         // crate::arch::halt();\n95 | |     }\n   | |_____^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/irq/aarch64.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: function `init` is never used\n  --> polyhal/src/components/irq/aarch64.rs:30:15\n   |\n30 | pub(crate) fn init() {\n   |               ^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "polyhal",
      "pkg": "polyhal-boot",
      "count": 13,
      "raw_reports": [
        {
          "file": "polyhal/src/pagetable/aarch64.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n  --> polyhal/src/pagetable/aarch64.rs:15:32\n   |\n15 |         self.0 = (ppn << 10) | flags.bits() as usize;\n   |                                ^^^^^^^^^^^^^^^^^^^^^ help: try: `flags.bits()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n   = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n",
              "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n  --> polyhal/src/pagetable/aarch64.rs:40:28\n   |\n40 |         Self(paddr.raw() | flags.bits() as usize)\n   |                            ^^^^^^^^^^^^^^^^^^^^^ help: try: `flags.bits()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n",
              "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> polyhal/src/pagetable/aarch64.rs:65:1\n   |\n65 | impl Into<MappingFlags> for PTEFlags {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: `#[warn(clippy::from_over_into)]` on by default\nhelp: replace the `Into` implementation with `From<pagetable::aarch64::PTEFlags>`\n   |\n65 ~ impl From<PTEFlags> for MappingFlags {\n66 ~     fn from(val: PTEFlags) -> Self {\n67 ~         if val.is_empty() {\n68 |             return MappingFlags::empty();\n...\n71 |\n72 ~         if !val.contains(PTEFlags::AP_RO) {\n73 |             flags |= MappingFlags::W;\n74 |         }\n75 ~         if !val.contains(PTEFlags::UXN) || !val.contains(PTEFlags::PXN) {\n76 |             flags |= MappingFlags::X;\n77 |         }\n78 ~         if val.contains(PTEFlags::AP_EL0) {\n79 |             flags |= MappingFlags::U;\n80 |         }\n81 ~         if val.contains(PTEFlags::AF) {\n82 |             flags |= MappingFlags::A;\n83 |         }\n84 ~         if !val.contains(PTEFlags::NG) {\n   |\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/kcontext/aarch64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal/src/components/kcontext/aarch64.rs:127:1\n    |\n127 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal/src/components/kcontext/aarch64.rs:143:1\n    |\n143 | / pub unsafe extern \"C\" fn context_switch_pt(\n144 | |     from: *mut KContext,\n145 | |     to: *const KContext,\n146 | |     pt_token: PageTable,\n147 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/polyhal/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── polyhal-trap 0.2.4\n│       │   └── example 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── example 0.1.0\n│       └── example 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\n\n{\n  \"database\": {\n    \"advisory-count\": 752,\n    \"last-commit\": \"1273f0099ce6882659ff64b852c8fdb5f8cdd5b9\",\n    \"last-updated\": \"2025-04-10T14:29:37+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 54\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal-boot, checker=Lockbud\n// toolchain=nightly-2024-07-15, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-boot\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none \n// timestamp=2025-04-20 4:45:08.814533505 +08:00:00\n[2025-04-19T20:45:00Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-04-19T20:45:00Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling polyhal v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:128:5\n    |\n128 | /     core::arch::asm!(\n129 | |         // Save Kernel Context.\n130 | |         save_callee_regs!(),\n...   |\n135 | |         options(noreturn)\n136 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:160:5\n    |\n160 | /     core::arch::asm!(\n161 | |         // Save Kernel Context.\n162 | |         save_callee_regs!(),\n...   |\n174 | |         options(noreturn)\n175 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:182:9\n    |\n182 | /         core::arch::asm!(\n183 | |             \"\n184 | |                 mrs      x0, tpidr_el1\n185 | |                 ret\n186 | |             \",\n187 | |             options(noreturn)\n188 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `unsafe_attributes` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(unsafe_attributes)]\n  |            ^^^^^^^^^^^^^^^^^\n\nwarning: the feature `const_option` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> polyhal/src/lib.rs:11:46\n   |\n11 | #![cfg_attr(target_arch = \"aarch64\", feature(const_option))]\n   |                                              ^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> polyhal/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> polyhal/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nwarning: `polyhal` (lib) generated 3 warnings\nerror: could not compile `polyhal` (lib) due to 5 previous errors; 3 warnings emitted\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal-boot, checker=Rapx\n// toolchain=nightly-2024-07-15, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-boot\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target aarch64-unknown-none \n// timestamp=2025-04-20 4:46:37.307717 +08:00:00\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.94\n   Compiling unicode-ident v1.0.18\n    Checking tock-registers v0.8.1\n    Checking scopeguard v1.2.0\n    Checking arm_gicv2 v0.1.0\n    Checking arm_pl011 v0.1.0\n    Checking aarch64-cpu v9.4.0\n    Checking log v0.4.26\n    Checking cfg-if v1.0.0\n   Compiling lock_api v0.4.12\n   Compiling polyhal v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal)\n    Checking bitflags v2.9.0\n   Compiling quote v1.0.40\n   Compiling syn v2.0.100\n    Checking spin v0.10.0\n    Checking arrayvec v0.7.6\n    Checking lazyinit v0.2.1\n    Checking fdt-parser v0.4.10\n   Compiling polyhal-macro v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-macro)\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:128:5\n    |\n128 | /     core::arch::asm!(\n129 | |         // Save Kernel Context.\n130 | |         save_callee_regs!(),\n131 | |         // Restore Kernel Context.\n...   |\n135 | |         options(noreturn)\n136 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:160:5\n    |\n160 | /     core::arch::asm!(\n161 | |         // Save Kernel Context.\n162 | |         save_callee_regs!(),\n163 | |         // Switch to new page table.\n...   |\n174 | |         options(noreturn)\n175 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:182:9\n    |\n182 | /         core::arch::asm!(\n183 | |             \"\n184 | |                 mrs      x0, tpidr_el1\n185 | |                 ret\n186 | |             \",\n187 | |             options(noreturn)\n188 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `unsafe_attributes` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(unsafe_attributes)]\n  |            ^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 2 warnings\nerror: could not compile `polyhal` (lib) due to 3 previous errors; 2 warnings emitted\n20:46:41|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal-boot, checker=SemverChecks\n// toolchain=nightly-2024-07-15, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-boot\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none \n// timestamp=2025-04-20 4:44:30.813600391 +08:00:00\n    Building polyhal-boot v0.2.4 (current)\nerror: running cargo-doc on crate 'polyhal-boot' failed with output:\n-----\n    Checking tock-registers v0.8.1\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling syn v2.0.100\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `tock-registers` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate polyhal-boot v0.2.4\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/polyhal/polyhal-boot --features graphic &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal-boot v0.2.4\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=polyhal-boot, checker=Outdated\ntoolchain=nightly-2024-07-15, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-boot\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-04-20 4:47:30.34484095 +08:00:00\n\nName            Project  Compat  Latest  Kind    Platform\n----            -------  ------  ------  ----    --------\naarch64-cpu     9.4.0    ---     10.0.0  Normal  cfg(target_arch = \"aarch64\")\nloongArch64     0.2.4    0.2.5   0.2.5   Normal  cfg(target_arch = \"loongarch64\")\ntock-registers  0.8.1    ---     0.9.0   Normal  cfg(target_arch = \"aarch64\")\nx86_64          0.14.12  ---     0.15.2  Normal  cfg(target_arch = \"x86_64\")\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=polyhal-boot, checker=SemverChecks\ntoolchain=nightly-2024-07-15, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-boot\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none \ntimestamp=2025-04-20 4:44:33.253825443 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building polyhal-boot v0.2.4 (current)\nerror: running cargo-doc on crate 'polyhal-boot' failed with output:\n-----\n    Checking tock-registers v0.8.1\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.12\n   Compiling syn v2.0.100\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `tock-registers` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate polyhal-boot v0.2.4\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/polyhal/polyhal-boot --features graphic &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal-boot v0.2.4\n"
            ]
          }
        },
        {
          "file": "polyhal/src/arch/aarch64/psci.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: empty `loop {}` wastes CPU cycles\n  --> polyhal/src/arch/aarch64/psci.rs:93:5\n   |\n93 | /     loop {\n94 | |         // crate::arch::halt();\n95 | |     }\n   | |_____^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/irq/aarch64.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: function `init` is never used\n  --> polyhal/src/components/irq/aarch64.rs:30:15\n   |\n30 | pub(crate) fn init() {\n   |               ^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "polyhal",
      "pkg": "example",
      "count": 7,
      "raw_reports": [
        {
          "file": "/home/runner/check/batch_1/Byte-OS/polyhal/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── polyhal-trap 0.2.4\n│       │   └── example 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── example 0.1.0\n│       └── example 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\n\n{\n  \"database\": {\n    \"advisory-count\": 752,\n    \"last-commit\": \"1273f0099ce6882659ff64b852c8fdb5f8cdd5b9\",\n    \"last-updated\": \"2025-04-10T14:29:37+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 54\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=example, checker=Lockbud\n// toolchain=nightly-2024-07-15, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none \n// timestamp=2025-04-20 4:45:00.059612782 +08:00:00\n   Compiling scopeguard v1.2.0\n   Compiling tock-registers v0.8.1\n   Compiling lock_api v0.4.12\n   Compiling log v0.4.26\n   Compiling bitflags v2.9.0\n   Compiling arm_gicv2 v0.1.0\n[2025-04-19T20:45:00Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-04-19T20:45:00Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling arm_pl011 v0.1.0\n   Compiling aarch64-cpu v9.4.0\n   Compiling spin v0.10.0\n   Compiling polyhal v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal)\n   Compiling arrayvec v0.7.6\n   Compiling lazyinit v0.2.1\n   Compiling cfg-if v1.0.0\n   Compiling fdt-parser v0.4.10\n   Compiling byteorder v1.5.0\n   Compiling spin v0.9.8\n   Compiling zerocopy v0.7.35\n   Compiling example v0.1.0 (/home/runner/check/batch_1/Byte-OS/polyhal/example)\n   Compiling buddy_system_allocator v0.11.0\n   Compiling virtio-drivers v0.7.5\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:128:5\n    |\n128 | /     core::arch::asm!(\n129 | |         // Save Kernel Context.\n130 | |         save_callee_regs!(),\n...   |\n135 | |         options(noreturn)\n136 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:160:5\n    |\n160 | /     core::arch::asm!(\n161 | |         // Save Kernel Context.\n162 | |         save_callee_regs!(),\n...   |\n174 | |         options(noreturn)\n175 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:182:9\n    |\n182 | /         core::arch::asm!(\n183 | |             \"\n184 | |                 mrs      x0, tpidr_el1\n185 | |                 ret\n186 | |             \",\n187 | |             options(noreturn)\n188 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `unsafe_attributes` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(unsafe_attributes)]\n  |            ^^^^^^^^^^^^^^^^^\n\nwarning: the feature `const_option` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> polyhal/src/lib.rs:11:46\n   |\n11 | #![cfg_attr(target_arch = \"aarch64\", feature(const_option))]\n   |                                              ^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> polyhal/src/utils/addr.rs:68:33\n   |\n68 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> polyhal/src/utils/addr.rs:144:33\n    |\n144 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nwarning: `polyhal` (lib) generated 3 warnings\nerror: could not compile `polyhal` (lib) due to 5 previous errors; 3 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=example, checker=Rapx\n// toolchain=nightly-2024-07-15, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target aarch64-unknown-none \n// timestamp=2025-04-20 4:45:39.695428525 +08:00:00\n   Compiling proc-macro2 v1.0.94\n   Compiling autocfg v1.4.0\n   Compiling unicode-ident v1.0.18\n    Checking scopeguard v1.2.0\n    Checking tock-registers v0.8.1\n    Checking log v0.4.26\n    Checking bitflags v2.9.0\n    Checking arm_pl011 v0.1.0\n    Checking arm_gicv2 v0.1.0\n    Checking aarch64-cpu v9.4.0\n    Checking arrayvec v0.7.6\n   Compiling lock_api v0.4.12\n   Compiling polyhal v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal)\n   Compiling quote v1.0.40\n   Compiling syn v2.0.100\n    Checking spin v0.10.0\n    Checking lazyinit v0.2.1\n    Checking fdt-parser v0.4.10\n    Checking cfg-if v1.0.0\n    Checking byteorder v1.5.0\n    Checking spin v0.9.8\n   Compiling example v0.1.0 (/home/runner/check/batch_1/Byte-OS/polyhal/example)\n    Checking buddy_system_allocator v0.11.0\n   Compiling polyhal-macro v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-macro)\n   Compiling zerocopy-derive v0.7.35\n   Compiling enumn v0.1.14\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:128:5\n    |\n128 | /     core::arch::asm!(\n129 | |         // Save Kernel Context.\n130 | |         save_callee_regs!(),\n131 | |         // Restore Kernel Context.\n...   |\n135 | |         options(noreturn)\n136 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:160:5\n    |\n160 | /     core::arch::asm!(\n161 | |         // Save Kernel Context.\n162 | |         save_callee_regs!(),\n163 | |         // Switch to new page table.\n...   |\n174 | |         options(noreturn)\n175 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/aarch64.rs:182:9\n    |\n182 | /         core::arch::asm!(\n183 | |             \"\n184 | |                 mrs      x0, tpidr_el1\n185 | |                 ret\n186 | |             \",\n187 | |             options(noreturn)\n188 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `unsafe_attributes` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(unsafe_attributes)]\n  |            ^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 2 warnings\nerror: could not compile `polyhal` (lib) due to 3 previous errors; 2 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n20:45:44|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=example, checker=Outdated\ntoolchain=nightly-2024-07-15, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-04-20 4:47:26.263906622 +08:00:00\n\nName            Project  Compat  Latest  Kind    Platform\n----            -------  ------  ------  ----    --------\nlog             0.4.26   0.4.27  0.4.27  Normal  ---\nvirtio-drivers  0.7.5    ---     0.10.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "example/src/main.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: empty `loop {}` wastes CPU cycles\n  --> example/src/main.rs:96:5\n   |\n96 |     loop {}\n   |     ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "example/src/pci.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unneeded `return` statement\n  --> example/src/pci.rs:14:85\n   |\n14 |               enumerate_pci((pci_addr.address as usize | VIRT_ADDR_START) as *mut u8);\n   |  _____________________________________________________________________________________^\n15 | |             return;\n   | |__________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n14 -             enumerate_pci((pci_addr.address as usize | VIRT_ADDR_START) as *mut u8);\n15 -             return;\n14 +             enumerate_pci((pci_addr.address as usize | VIRT_ADDR_START) as *mut u8);\n   |\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/irq/aarch64.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: function `init` is never used\n  --> polyhal/src/components/irq/aarch64.rs:30:15\n   |\n30 | pub(crate) fn init() {\n   |               ^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "polyhal",
      "pkg": "polyhal-macro",
      "count": 1,
      "raw_reports": [
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=polyhal-macro, checker=Outdated\ntoolchain=nightly-2024-07-15, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-macro\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-04-20 4:47:32.325114548 +08:00:00\n\nName         Project  Compat  Latest  Kind    Platform\n----         -------  ------  ------  ----    --------\nproc-macro2  1.0.94   1.0.95  1.0.95  Normal  ---\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Outdated",
    "Geiger",
    "Unformatted"
  ]
}