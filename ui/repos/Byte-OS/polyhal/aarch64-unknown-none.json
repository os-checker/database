{"repo":{"user":"Byte-OS","repo":"polyhal"},"data":[{"user":"Byte-OS","repo":"polyhal","pkg":"polyhal","count":18,"raw_reports":[{"file":"src/components/pagetable/aarch64.rs","count":4,"kinds":{"Clippy(Warn)":["warning: operator precedence can trip the unwary\n   --> src/components/pagetable/aarch64.rs:206:10\n    |\n206 |         (self.0 >> 9 * n) & 0x1ff\n    |          ^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `self.0 >> (9 * n)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n    = note: `#[warn(clippy::precedence)]` on by default\n\n","warning: casting to the same type is unnecessary (`usize` -> `usize`)\n  --> src/components/pagetable/aarch64.rs:17:32\n   |\n17 |         self.0 = (ppn << 10) | flags.bits() as usize;\n   |                                ^^^^^^^^^^^^^^^^^^^^^ help: try: `flags.bits()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n   = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n","warning: casting to the same type is unnecessary (`usize` -> `usize`)\n  --> src/components/pagetable/aarch64.rs:42:30\n   |\n42 |         Self(ppn.to_addr() | flags.bits() as usize)\n   |                              ^^^^^^^^^^^^^^^^^^^^^ help: try: `flags.bits()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n","warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/components/pagetable/aarch64.rs:67:1\n   |\n67 | impl Into<MappingFlags> for PTEFlags {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: `#[warn(clippy::from_over_into)]` on by default\nhelp: replace the `Into` implementation with `From<components::pagetable::aarch64::PTEFlags>`\n   |\n67 ~ impl From<PTEFlags> for MappingFlags {\n68 ~     fn from(val: PTEFlags) -> Self {\n69 ~         if val.is_empty() {\n70 |             return MappingFlags::empty();\n ...\n73 | \n74 ~         if !val.contains(PTEFlags::AP_RO) {\n75 |             flags |= MappingFlags::W;\n76 |         }\n77 ~         if !val.contains(PTEFlags::UXN) || !val.contains(PTEFlags::PXN) {\n78 |             flags |= MappingFlags::X;\n79 |         }\n80 ~         if val.contains(PTEFlags::AP_EL0) {\n81 |             flags |= MappingFlags::U;\n82 |         }\n83 ~         if val.contains(PTEFlags::AF) {\n84 |             flags |= MappingFlags::A;\n85 |         }\n86 ~         if !val.contains(PTEFlags::NG) {\n   |\n\n"]}},{"file":"src/components/pagetable/mod.rs","count":3,"kinds":{"Clippy(Warn)":["warning: name `PTE` contains a capitalized acronym\n  --> src/components/pagetable/mod.rs:18:19\n   |\n18 | pub(crate) struct PTE(pub usize);\n   |                   ^^^ help: consider making the acronym lowercase, except the initial letter: `Pte`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n   = note: `#[warn(clippy::upper_case_acronyms)]` on by default\n\n","warning: `assert!(true)` will be optimized out by the compiler\n  --> src/components/pagetable/mod.rs:52:9\n   |\n52 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: remove it\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n   = note: `#[warn(clippy::assertions_on_constants)]` on by default\n\n","warning: `assert!(true)` will be optimized out by the compiler\n   --> src/components/pagetable/mod.rs:105:9\n    |\n105 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n\n"]}},{"file":"src/components/kcontext/aarch64.rs","count":2,"kinds":{"Clippy(Warn)":["warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/aarch64.rs:127:1\n    |\n127 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n","warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/aarch64.rs:143:1\n    |\n143 | / pub unsafe extern \"C\" fn context_switch_pt(\n144 | |     from: *mut KContext,\n145 | |     to: *const KContext,\n146 | |     pt_token: PageTable,\n147 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"]}},{"file":"(virtual) semver-checks","count":1,"kinds":{"Cargo":["// pkg_name=polyhal, checker=SemverChecks\n// toolchain=nightly-2023-12-01, target=aarch64-unknown-none\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal\n// cmd=cargo +nightly-2024-12-24-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none\n    Building polyhal v0.1.3 (current)\nerror: running cargo-doc on crate 'polyhal' failed with output:\n-----\nerror: output of --print=file-names missing when learning about target-specific information from rustc\ncommand was: `/home/runner/.rustup/toolchains/nightly-2024-12-24-x86_64-unknown-linux-gnu/bin/rustc - --crate-name ___ --print=file-names --cap-lints=allow --target aarch64-unknown-none --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro --print=sysroot --print=split-debuginfo --print=crate-name --print=cfg`\n\n--- stdout\n___\nlib___.rlib\nlib___.a\n/home/runner/.rustup/toolchains/nightly-2024-12-24-x86_64-unknown-linux-gnu\noff\n___\ndebug_assertions\nfmt_debug=\"full\"\noverflow_checks\npanic=\"abort\"\nproc_macro\nrelocation_model=\"static\"\ntarget_abi=\"\"\ntarget_arch=\"aarch64\"\ntarget_endian=\"little\"\ntarget_env=\"\"\ntarget_feature=\"neon\"\ntarget_has_atomic\ntarget_has_atomic=\"128\"\ntarget_has_atomic=\"16\"\ntarget_has_atomic=\"32\"\ntarget_has_atomic=\"64\"\ntarget_has_atomic=\"8\"\ntarget_has_atomic=\"ptr\"\ntarget_has_atomic_equal_alignment=\"128\"\ntarget_has_atomic_equal_alignment=\"16\"\ntarget_has_atomic_equal_alignment=\"32\"\ntarget_has_atomic_equal_alignment=\"64\"\ntarget_has_atomic_equal_alignment=\"8\"\ntarget_has_atomic_equal_alignment=\"ptr\"\ntarget_has_atomic_load_store\ntarget_has_atomic_load_store=\"128\"\ntarget_has_atomic_load_store=\"16\"\ntarget_has_atomic_load_store=\"32\"\ntarget_has_atomic_load_store=\"64\"\ntarget_has_atomic_load_store=\"8\"\ntarget_has_atomic_load_store=\"ptr\"\ntarget_os=\"none\"\ntarget_pointer_width=\"64\"\ntarget_vendor=\"unknown\"\nub_checks\n\n\n-----\n\nerror: failed to build rustdoc for crate polyhal v0.1.3\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/polyhal --features boot,default,graphic,logger,trap &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal v0.1.3\n"]}},{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-11-22T11:31:21Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.21/src/lib.rs:1408:11: 1408:39 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.21/src/lib.rs:1411:13: 1411:55 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T11:31:21Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}},{"file":"[outdated direct dependencies]","count":1,"kinds":{"Outdated":["pkg=polyhal, checker=Outdated\ntoolchain=nightly-2023-12-01, target=aarch64-unknown-none\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal\ncmd=cargo +nightly-2024-12-24-x86_64-unknown-linux-gnu outdated -R --exit-code=2\n\nName                    Project  Compat   Latest  Kind         Platform\n----                    -------  ------   ------  ----         --------\naarch64-cpu             9.4.0    ---      10.0.0  Normal       cfg(target_arch = \"aarch64\")\nbitflags                2.5.0    2.6.0    2.6.0   Normal       ---\nbuddy_system_allocator  0.9.1    ---      0.11.0  Development  ---\nlog                     0.4.21   0.4.22   0.4.22  Normal       ---\nraw-cpuid               11.0.1   11.2.0   11.2.0  Normal       cfg(target_arch = \"x86_64\")\nriscv                   0.11.1   ---      0.12.1  Normal       cfg(target_arch = \"riscv64\")\nsbi-rt                  0.0.2    ---      0.0.3   Normal       cfg(target_arch = \"riscv64\")\ntock-registers          0.8.1    ---      0.9.0   Normal       cfg(target_arch = \"aarch64\")\nx86_64                  0.14.12  0.14.13  0.15.2  Normal       cfg(target_arch = \"x86_64\")\n"]}},{"file":"[semver checks]","count":1,"kinds":{"Semver Violation":["pkg=polyhal, checker=SemverChecks\ntoolchain=nightly-2023-12-01, target=aarch64-unknown-none\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal\ncmd=cargo +nightly-2024-12-24-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none\n\n\nstdout:\n\nstderr:\n    Building polyhal v0.1.3 (current)\nerror: running cargo-doc on crate 'polyhal' failed with output:\n-----\nerror: output of --print=file-names missing when learning about target-specific information from rustc\ncommand was: `/home/runner/.rustup/toolchains/nightly-2024-12-24-x86_64-unknown-linux-gnu/bin/rustc - --crate-name ___ --print=file-names --cap-lints=allow --target aarch64-unknown-none --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro --print=sysroot --print=split-debuginfo --print=crate-name --print=cfg`\n\n--- stdout\n___\nlib___.rlib\nlib___.a\n/home/runner/.rustup/toolchains/nightly-2024-12-24-x86_64-unknown-linux-gnu\noff\n___\ndebug_assertions\nfmt_debug=\"full\"\noverflow_checks\npanic=\"abort\"\nproc_macro\nrelocation_model=\"static\"\ntarget_abi=\"\"\ntarget_arch=\"aarch64\"\ntarget_endian=\"little\"\ntarget_env=\"\"\ntarget_feature=\"neon\"\ntarget_has_atomic\ntarget_has_atomic=\"128\"\ntarget_has_atomic=\"16\"\ntarget_has_atomic=\"32\"\ntarget_has_atomic=\"64\"\ntarget_has_atomic=\"8\"\ntarget_has_atomic=\"ptr\"\ntarget_has_atomic_equal_alignment=\"128\"\ntarget_has_atomic_equal_alignment=\"16\"\ntarget_has_atomic_equal_alignment=\"32\"\ntarget_has_atomic_equal_alignment=\"64\"\ntarget_has_atomic_equal_alignment=\"8\"\ntarget_has_atomic_equal_alignment=\"ptr\"\ntarget_has_atomic_load_store\ntarget_has_atomic_load_store=\"128\"\ntarget_has_atomic_load_store=\"16\"\ntarget_has_atomic_load_store=\"32\"\ntarget_has_atomic_load_store=\"64\"\ntarget_has_atomic_load_store=\"8\"\ntarget_has_atomic_load_store=\"ptr\"\ntarget_os=\"none\"\ntarget_pointer_width=\"64\"\ntarget_vendor=\"unknown\"\nub_checks\n\n\n-----\n\nerror: failed to build rustdoc for crate polyhal v0.1.3\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/polyhal --features boot,default,graphic,logger,trap &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal v0.1.3\n"]}},{"file":"example/Cargo.lock","count":1,"kinds":{"Audit":["    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 664 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (44 crate dependencies)\nCrate:     critical-section\nVersion:   1.1.2\nWarning:   yanked\nDependency tree:\ncritical-section 1.1.2\n└── riscv 0.11.1\n    └── polyhal 0.1.3\n        └── example 0.1.0\n\nwarning: 1 allowed warning found\n\n{\n  \"database\": {\n    \"advisory-count\": 664,\n    \"last-commit\": \"f3460e5ed91658ab94fa41908cfa44991f9f4f02\",\n    \"last-updated\": \"2024-11-01T08:31:51-04:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 44\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"yanked\": [\n      {\n        \"kind\": \"yanked\",\n        \"package\": {\n          \"name\": \"critical-section\",\n          \"version\": \"1.1.2\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"7059fff8937831a9ae6f0fe4d658ffabf58f2ca96aa9dec1c889f936f705f216\",\n          \"replace\": null\n        },\n        \"advisory\": null,\n        \"affected\": null,\n        \"versions\": null\n      }\n    ]\n  }\n}"]}},{"file":"src/components/arch/aarch64/psci.rs","count":1,"kinds":{"Clippy(Warn)":["warning: empty `loop {}` wastes CPU cycles\n   --> src/components/arch/aarch64/psci.rs:98:5\n    |\n98  | /     loop {\n99  | |         // crate::arch::halt();\n100 | |     }\n    | |_____^\n    |\n    = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n    = note: `#[warn(clippy::empty_loop)]` on by default\n\n"]}},{"file":"src/components/boot/mod.rs","count":1,"kinds":{"Unformatted":["file: /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/mod.rs (original lines from 43 to 43)\n-/// \n+///\n"]}},{"file":"src/components/common.rs","count":1,"kinds":{"Unformatted":["file: /home/runner/check/batch_1/Byte-OS/polyhal/src/components/common.rs (original lines from 73 to 74)\n-/// \n-/// Display information when booting \n+///\n+/// Display information when booting\n"]}},{"file":"src/utils/mutex_no_irq.rs","count":1,"kinds":{"Clippy(Warn)":["warning: unsafe function's docs miss `# Safety` section\n  --> src/utils/mutex_no_irq.rs:59:5\n   |\n59 |     pub unsafe fn force_unlock(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"]}}]},{"user":"Byte-OS","repo":"polyhal","pkg":"example","count":8,"raw_reports":[{"file":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/macros.rs","count":1,"kinds":{"Clippy(Warn)":["warning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"]}},{"file":"(virtual) lockbud","count":1,"kinds":{"Cargo":["// pkg_name=example, checker=Lockbud\n// toolchain=nightly-2023-12-01, target=aarch64-unknown-none\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target aarch64-unknown-none\n   Compiling scopeguard v1.2.0\n   Compiling tock-registers v0.8.1\n   Compiling lock_api v0.4.11\n   Compiling bitflags v2.6.0\n   Compiling log v0.4.22\n   Compiling byteorder v1.5.0\n   Compiling aarch64-cpu v9.4.0\n[2024-11-22T11:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T11:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling zerocopy v0.7.35\n   Compiling arm_gicv2 v0.1.0\n   Compiling spin v0.9.8\n   Compiling arm_pl011 v0.1.0\n   Compiling cfg-if v1.0.0\n   Compiling fdt v0.1.5\n   Compiling buddy_system_allocator v0.9.1\n   Compiling virtio-drivers v0.7.5\n   Compiling polyhal v0.1.3 (/home/runner/check/batch_1/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\nwarning: field `0` is never read\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/percpu/mod.rs:15:19\n   |\n15 | struct PerCPUDATA([u8; PAGE_SIZE]);\n   |        ---------- ^^^^^^^^^^^^^^^\n   |        |\n   |        field in this struct\n   |\n   = help: consider removing this field\n   = note: `#[warn(dead_code)]` on by default\n\nwarning: creating a shared reference to mutable static is discouraged\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/aarch64.rs:87:23\n   |\n87 |     let root_paddr = (BOOT_PT_L1.0.as_ptr() as usize & 0xFFFF_FFFF_F000) as _;\n   |                       ^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n   = note: `#[warn(static_mut_refs)]` on by default\n\nwarning: creating a shared reference to mutable static is discouraged\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/aarch64.rs:231:9\n    |\n231 |         BOOT_PT_L1.0.as_ptr() as usize & !VIRT_ADDR_START\n    |         ^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\nwarning: creating a shared reference to mutable static is discouraged\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/common.rs:10:19\n   |\n10 | pub(crate) static CPU_ID: usize = 0;\n   |                   ^^^^^^ shared reference to mutable static\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\nwarning: `polyhal` (lib) generated 11 warnings\n   Compiling example v0.1.0 (/home/runner/check/batch_1/Byte-OS/polyhal/example)\nwarning: the feature `panic_info_message` has been stable since 1.81.0 and no longer requires an attribute to enable\n --> src/main.rs:3:12\n  |\n3 | #![feature(panic_info_message)]\n  |            ^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0599]: no method named `unwrap` found for struct `core::panic::PanicMessage` in the current scope\n   --> src/main.rs:136:28\n    |\n136 |             info.message().unwrap()\n    |                            ^^^^^^ method not found in `PanicMessage<'_>`\n\nerror[E0599]: no method named `unwrap` found for struct `core::panic::PanicMessage` in the current scope\n   --> src/main.rs:139:61\n    |\n139 |         log::error!(\"[kernel] Panicked: {}\", info.message().unwrap());\n    |                                                             ^^^^^^ method not found in `PanicMessage<'_>`\n\nFor more information about this error, try `rustc --explain E0599`.\nwarning: `example` (bin \"example\") generated 2 warnings\nerror: could not compile `example` (bin \"example\") due to 2 previous errors; 2 warnings emitted\n"]}},{"file":"Cargo.lock","count":1,"kinds":{"Audit":["    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 664 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (44 crate dependencies)\nCrate:     critical-section\nVersion:   1.1.2\nWarning:   yanked\nDependency tree:\ncritical-section 1.1.2\n└── riscv 0.11.1\n    └── polyhal 0.1.3\n        └── example 0.1.0\n\nwarning: 1 allowed warning found\n\n{\n  \"database\": {\n    \"advisory-count\": 664,\n    \"last-commit\": \"f3460e5ed91658ab94fa41908cfa44991f9f4f02\",\n    \"last-updated\": \"2024-11-01T08:31:51-04:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 44\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"yanked\": [\n      {\n        \"kind\": \"yanked\",\n        \"package\": {\n          \"name\": \"critical-section\",\n          \"version\": \"1.1.2\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"7059fff8937831a9ae6f0fe4d658ffabf58f2ca96aa9dec1c889f936f705f216\",\n          \"replace\": null\n        },\n        \"advisory\": null,\n        \"affected\": null,\n        \"versions\": null\n      }\n    ]\n  }\n}"]}},{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-11-22T11:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T11:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}},{"file":"[outdated direct dependencies]","count":1,"kinds":{"Outdated":["pkg=example, checker=Outdated\ntoolchain=nightly-2023-12-01, target=aarch64-unknown-none\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\ncmd=cargo +nightly-2024-12-24-x86_64-unknown-linux-gnu outdated -R --exit-code=2\n\nName                    Project  Compat  Latest  Kind    Platform\n----                    -------  ------  ------  ----    --------\nbuddy_system_allocator  0.9.1    ---     0.11.0  Normal  ---\nvirtio-drivers          0.7.5    ---     0.8.0   Normal  ---\n"]}},{"file":"src/frame.rs","count":1,"kinds":{"Clippy(Warn)":["warning: redundant closure\n --> src/frame.rs:6:15\n  |\n6 |     Lazy::new(|| LockedFrameAllocator::new());\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `LockedFrameAllocator::new`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n"]}},{"file":"src/main.rs","count":1,"kinds":{"Clippy(Warn)":["warning: empty `loop {}` wastes CPU cycles\n  --> src/main.rs:70:9\n   |\n70 |         loop {}\n   |         ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n"]}},{"file":"src/pci.rs","count":1,"kinds":{"Clippy(Warn)":["warning: unneeded `return` statement\n  --> src/pci.rs:14:94\n   |\n14 |               enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |  ______________________________________________________________________________________________^\n15 | |             return;\n   | |__________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n14 -             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n15 -             return;\n14 +             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |\n\n"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Semver Violation","Audit","Mirai","Rap","Rudra","Lockbud(Probably)","Lockbud(Possibly)","Outdated","Geiger","Unformatted"]}