{"repo":{"user":"Byte-OS","repo":"polyhal"},"data":[{"user":"Byte-OS","repo":"polyhal","pkg":"polyhal","count":26,"raw_reports":[{"file":"src/utils/mutex_no_irq.rs","count":9,"kinds":{"Clippy(Warn)":["warning: unsafe function's docs miss `# Safety` section\n  --> src/utils/mutex_no_irq.rs:59:5\n   |\n59 |     pub unsafe fn force_unlock(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n","warning: the following explicit lifetimes could be elided: 'b\n  --> src/utils/mutex_no_irq.rs:87:14\n   |\n87 |     fn deref<'b>(&'b self) -> &'b T {\n   |              ^^   ^^           ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n   = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n   |\n87 -     fn deref<'b>(&'b self) -> &'b T {\n87 +     fn deref(&self) -> &T {\n   |\n\n","warning: the following explicit lifetimes could be elided: 'b\n  --> src/utils/mutex_no_irq.rs:87:14\n   |\n87 |     fn deref<'b>(&'b self) -> &'b T {\n   |              ^^   ^^           ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n   = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n   |\n87 -     fn deref<'b>(&'b self) -> &'b T {\n87 +     fn deref(&self) -> &T {\n   |\n\n","warning: the following explicit lifetimes could be elided: 'b\n  --> src/utils/mutex_no_irq.rs:87:14\n   |\n87 |     fn deref<'b>(&'b self) -> &'b T {\n   |              ^^   ^^           ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n   = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n   |\n87 -     fn deref<'b>(&'b self) -> &'b T {\n87 +     fn deref(&self) -> &T {\n   |\n\n","warning: deref which would be done by auto-deref\n  --> src/utils/mutex_no_irq.rs:88:9\n   |\n88 |         &*(self.guard)\n   |         ^^^^^^^^^^^^^^ help: try: `&(self.guard)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref\n   = note: `#[warn(clippy::explicit_auto_deref)]` on by default\n\n","warning: the following explicit lifetimes could be elided: 'b\n  --> src/utils/mutex_no_irq.rs:93:18\n   |\n93 |     fn deref_mut<'b>(&'b mut self) -> &'b mut T {\n   |                  ^^   ^^               ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n   |\n93 -     fn deref_mut<'b>(&'b mut self) -> &'b mut T {\n93 +     fn deref_mut(&mut self) -> &mut T {\n   |\n\n","warning: the following explicit lifetimes could be elided: 'b\n  --> src/utils/mutex_no_irq.rs:93:18\n   |\n93 |     fn deref_mut<'b>(&'b mut self) -> &'b mut T {\n   |                  ^^   ^^               ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n   |\n93 -     fn deref_mut<'b>(&'b mut self) -> &'b mut T {\n93 +     fn deref_mut(&mut self) -> &mut T {\n   |\n\n","warning: the following explicit lifetimes could be elided: 'b\n  --> src/utils/mutex_no_irq.rs:93:18\n   |\n93 |     fn deref_mut<'b>(&'b mut self) -> &'b mut T {\n   |                  ^^   ^^               ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n   |\n93 -     fn deref_mut<'b>(&'b mut self) -> &'b mut T {\n93 +     fn deref_mut(&mut self) -> &mut T {\n   |\n\n","warning: deref which would be done by auto-deref\n  --> src/utils/mutex_no_irq.rs:94:9\n   |\n94 |         &mut *(self.guard)\n   |         ^^^^^^^^^^^^^^^^^^ help: try: `&mut (self.guard)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref\n\n"]}},{"file":"src/components/pagetable/loongarch64.rs","count":3,"kinds":{"Clippy(Warn)":["warning: operator precedence can trip the unwary\n   --> src/components/pagetable/loongarch64.rs:178:10\n    |\n178 |         (self.0 >> 9 * n) & 0x1ff\n    |          ^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `self.0 >> (9 * n)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n    = note: `#[warn(clippy::precedence)]` on by default\n\n","warning: casting to the same type is unnecessary (`usize` -> `usize`)\n  --> src/components/pagetable/loongarch64.rs:36:30\n   |\n36 |         Self(ppn.to_addr() | flags.bits() as usize)\n   |                              ^^^^^^^^^^^^^^^^^^^^^ help: try: `flags.bits()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n   = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n","warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/components/pagetable/loongarch64.rs:58:1\n   |\n58 | impl Into<MappingFlags> for PTEFlags {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: `#[warn(clippy::from_over_into)]` on by default\nhelp: replace the `Into` implementation with `From<components::pagetable::loongarch64::PTEFlags>`\n   |\n58 ~ impl From<PTEFlags> for MappingFlags {\n59 ~     fn from(val: PTEFlags) -> Self {\n60 |         let mut flags = MappingFlags::empty();\n61 ~         if val.contains(PTEFlags::W) {\n62 |             flags |= MappingFlags::W;\n63 |         }\n64 | \n65 ~         if val.contains(PTEFlags::D) {\n66 |             flags |= MappingFlags::D;\n ...\n72 | \n73 ~         if val.contains(PTEFlags::PLV_USER) {\n   |\n\n"]}},{"file":"src/components/pagetable/mod.rs","count":3,"kinds":{"Clippy(Warn)":["warning: name `PTE` contains a capitalized acronym\n  --> src/components/pagetable/mod.rs:18:19\n   |\n18 | pub(crate) struct PTE(pub usize);\n   |                   ^^^ help: consider making the acronym lowercase, except the initial letter: `Pte`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n   = note: `#[warn(clippy::upper_case_acronyms)]` on by default\n\n","warning: `assert!(true)` will be optimized out by the compiler\n  --> src/components/pagetable/mod.rs:52:9\n   |\n52 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: remove it\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n   = note: `#[warn(clippy::assertions_on_constants)]` on by default\n\n","warning: `assert!(true)` will be optimized out by the compiler\n   --> src/components/pagetable/mod.rs:105:9\n    |\n105 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n\n"]}},{"file":"src/components/kcontext/loongarch64.rs","count":2,"kinds":{"Clippy(Warn)":["warning: unsafe function's docs miss `# Safety` section\n  --> src/components/kcontext/loongarch64.rs:92:1\n   |\n92 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n   = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n","warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/loongarch64.rs:135:1\n    |\n135 | / pub unsafe extern \"C\" fn context_switch_pt(\n136 | |     from: *mut KContext,\n137 | |     to: *const KContext,\n138 | |     pt_token: PageTable,\n139 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"]}},{"file":"src/time.rs","count":2,"kinds":{"Clippy(Warn)":["warning: digits grouped inconsistently by underscores\n  --> src/time.rs:52:18\n   |\n52 |         self.0 * 1000_000 / Self::get_freq()\n   |                  ^^^^^^^^ help: consider: `1_000_000`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\n   = note: `#[warn(clippy::inconsistent_digit_grouping)]` on by default\n\n","warning: digits grouped inconsistently by underscores\n  --> src/time.rs:58:18\n   |\n58 |         self.0 * 1000_000_000 / Self::get_freq()\n   |                  ^^^^^^^^^^^^ help: consider: `1_000_000_000`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\n\n"]}},{"file":"src/addr.rs","count":1,"kinds":{"Clippy(Warn)":["warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/addr.rs:218:43\n    |\n218 |         self.get_buffer().copy_from_slice(&ppn.get_buffer());\n    |                                           ^^^^^^^^^^^^^^^^^ help: change this to: `ppn.get_buffer()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n    = note: `#[warn(clippy::needless_borrow)]` on by default\n\n"]}},{"file":"src/components/arch/loongarch64.rs","count":1,"kinds":{"Clippy(Warn)":["warning: calls to `push` immediately after creation\n  --> src/components/arch/loongarch64.rs:9:9\n   |\n9  | /         let mut mem_area = Vec::new();\n10 | |         // This is just temporary solution until we find a better way to detect memory areas.\n11 | |         mem_area.push((VIRT_ADDR_START | 0x9000_0000, 0x2000_0000));\n   | |____________________________________________________________________^ help: consider using the `vec![]` macro: `let mem_area = vec![..];`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#vec_init_then_push\n   = note: `#[warn(clippy::vec_init_then_push)]` on by default\n\n"]}},{"file":"src/components/consts/mod.rs","count":1,"kinds":{"Clippy(Warn)":["warning: unnecessary `pub(self)`\n  --> src/components/consts/mod.rs:14:1\n   |\n14 | pub(self) trait ConfigTrait {\n   | ^^^^^^^^^ help: remove it\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pub_self\n   = note: `#[warn(clippy::needless_pub_self)]` on by default\n\n"]}},{"file":"src/components/debug_console/mod.rs","count":1,"kinds":{"Clippy(Warn)":["warning: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `slice`\n  --> src/components/debug_console/mod.rs:53:22\n   |\n53 |         s.as_bytes().into_iter().for_each(|x| Self::putchar(*x));\n   |                      ^^^^^^^^^ help: call directly: `iter`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#into_iter_on_ref\n   = note: `#[warn(clippy::into_iter_on_ref)]` on by default\n\n"]}},{"file":"src/components/mod.rs","count":1,"kinds":{"Clippy(Warn)":["warning: unnecessary `pub(self)`\n  --> src/components/mod.rs:23:1\n   |\n23 | pub(self) use polyhal_macro::define_arch_mods;\n   | ^^^^^^^^^ help: remove it\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pub_self\n\n"]}},{"file":"src/components/timer/loongarch64.rs","count":1,"kinds":{"Clippy(Warn)":["warning: redundant closure\n --> src/components/timer/loongarch64.rs:8:38\n  |\n8 | static FREQ: Lazy<usize> = Lazy::new(|| get_timer_freq());\n  |                                      ^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `get_timer_freq`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n"]}},{"file":"src/lib.rs","count":1,"kinds":{"Clippy(Warn)":["warning: unused `#[macro_use]` import\n   --> src/lib.rs:148:1\n    |\n148 | #[macro_use]\n    | ^^^^^^^^^^^^\n    |\n    = note: `#[warn(unused_imports)]` on by default\n\n"]}}]},{"user":"Byte-OS","repo":"polyhal","pkg":"example","count":6,"raw_reports":[{"file":"src/frame.rs","count":2,"kinds":{"Clippy(Warn)":["warning: function `add_frame_range` is never used\n --> src/frame.rs:8:8\n  |\n8 | pub fn add_frame_range(mm_start: usize, mm_end: usize) {\n  |        ^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(dead_code)]` on by default\n\n","warning: redundant closure\n --> src/frame.rs:6:15\n  |\n6 |     Lazy::new(|| LockedFrameAllocator::new());\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `LockedFrameAllocator::new`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n"]}},{"file":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/macros.rs","count":1,"kinds":{"Clippy(Warn)":["warning: unreachable statement\n  --> src/main.rs:87:5\n   |\n81 | /     loop {\n82 | |         if let Some(c) = DebugConsole::getchar() {\n83 | |             DebugConsole::putchar(c);\n84 | |         }\n85 | |     }\n   | |_____- any code following this expression is unreachable\n86 |\n87 |       log::info!(\"Run END. Shutdown successfully.\");\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n   |\n   = note: `#[warn(unreachable_code)]` on by default\n   = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"]}},{"file":"(virtual) lockbud","count":1,"kinds":{"Cargo":["// pkg_name=example, checker=Lockbud\n// toolchain=nightly-2023-12-01, target=loongarch64-unknown-none\n// pkg_dir=/home/runner/check/repos-default/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target loongarch64-unknown-none\n    Blocking waiting for file lock on package cache\n    Blocking waiting for file lock on package cache\n    Blocking waiting for file lock on package cache\n    Blocking waiting for file lock on package cache\n   Compiling lock_api v0.4.11\n   Compiling scopeguard v1.2.0\n   Compiling log v0.4.22\n   Compiling bitflags v1.3.2\n   Compiling byteorder v1.5.0\n   Compiling bitflags v2.6.0\n   Compiling bit_field v0.10.2\n   Compiling zerocopy v0.7.35\n   Compiling cfg-if v1.0.0\n   Compiling fdt v0.1.5\n   Compiling spin v0.9.8\n   Compiling loongArch64 v0.2.2\n   Compiling buddy_system_allocator v0.9.1\n   Compiling polyhal v0.1.3 (/home/runner/check/repos-default/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/repos-default/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/repos-default/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/repos-default/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/repos-default/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n --> /home/runner/check/repos-default/Byte-OS/polyhal/src/components/debug_console/loongarch64.rs:5:11\n  |\n5 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n --> /home/runner/check/repos-default/Byte-OS/polyhal/src/components/debug_console/loongarch64.rs:7:7\n  |\n7 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/repos-default/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\n   Compiling virtio-drivers v0.7.5\nwarning: field `0` is never read\n  --> /home/runner/check/repos-default/Byte-OS/polyhal/src/components/irq/mod.rs:35:22\n   |\n35 | pub struct IRQVector(pub(crate) usize);\n   |            --------- ^^^^^^^^^^^^^^^^\n   |            |\n   |            field in this struct\n   |\n   = note: `IRQVector` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n   = note: `#[warn(dead_code)]` on by default\nhelp: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\n   |\n35 | pub struct IRQVector(());\n   |                      ~~\n\nwarning: field `0` is never read\n  --> /home/runner/check/repos-default/Byte-OS/polyhal/src/components/percpu/mod.rs:15:19\n   |\n15 | struct PerCPUDATA([u8; PAGE_SIZE]);\n   |        ---------- ^^^^^^^^^^^^^^^\n   |        |\n   |        field in this struct\n   |\nhelp: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\n   |\n15 | struct PerCPUDATA(());\n   |                   ~~\n\nwarning: `polyhal` (lib) generated 9 warnings\n   Compiling example v0.1.0 (/home/runner/check/repos-default/Byte-OS/polyhal/example)\nwarning: unreachable statement\n  --> src/main.rs:87:5\n   |\n81 | /     loop {\n82 | |         if let Some(c) = DebugConsole::getchar() {\n83 | |             DebugConsole::putchar(c);\n84 | |         }\n85 | |     }\n   | |_____- any code following this expression is unreachable\n86 |\n87 |       log::info!(\"Run END. Shutdown successfully.\");\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n   |\n   = note: `#[warn(unreachable_code)]` on by default\n   = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nwarning: unused variable: `addr`\n  --> src/pci.rs:64:18\n   |\n64 |     if let Some((addr, size)) = bar_info.memory_address_size() {\n   |                  ^^^^ help: if this is intentional, prefix it with an underscore: `_addr`\n   |\n   = note: `#[warn(unused_variables)]` on by default\n\nwarning: function `add_frame_range` is never used\n --> src/frame.rs:8:8\n  |\n8 | pub fn add_frame_range(mm_start: usize, mm_end: usize) {\n  |        ^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(dead_code)]` on by default\n\nerror: linking with `rust-lld` failed: exit status: 1\n  |\n  = note: LC_ALL=\"C\" PATH=\"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin:/snap/bin:/home/runner/.local/bin:/opt/pipx_bin:/home/runner/.cargo/bin:/home/runner/.config/composer/vendor/bin:/usr/local/.ghcup/bin:/home/runner/.dotnet/tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\" VSLANG=\"1033\" \"rust-lld\" \"-flavor\" \"gnu\" \"/tmp/rustcSDqcwG/symbols.o\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/example-f118389b34ec08e4.example.5d864317cbd9665c-cgu.0.rcgu.o\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/example-f118389b34ec08e4.example.5d864317cbd9665c-cgu.1.rcgu.o\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/example-f118389b34ec08e4.example.5d864317cbd9665c-cgu.2.rcgu.o\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/example-f118389b34ec08e4.cixb0jmfkqacvio94g9fupbne.rcgu.o\" \"--as-needed\" \"-L\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps\" \"-L\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/debug/deps\" \"-L\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib\" \"-Bstatic\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libvirtio_drivers-c71b4244ead45a74.rlib\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libzerocopy-b65a73bda5dd105a.rlib\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libbyteorder-a6608e82b803455e.rlib\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libpolyhal-310f4b2de309e3d2.rlib\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libloongArch64-63ff8d9558004182.rlib\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libbitflags-7d4c229935312c2e.rlib\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libbit_field-f205bae68304904b.rlib\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libcfg_if-e5b2c08080a8d0bd.rlib\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libbitflags-a49aa3b7c7494a35.rlib\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libfdt-45db0bc4944b4493.rlib\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/liblog-531edc9e0960d321.rlib\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libbuddy_system_allocator-0f74cc2c33704f4a.rlib\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/liballoc-cf622d6ac0c1207e.rlib\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libspin-e73be5f20d839958.rlib\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/liblock_api-cb5b9691a0c0d257.rlib\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libscopeguard-e4c379832e03342e.rlib\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/librustc_std_workspace_core-3b1e26e39e9a51e8.rlib\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcore-d6c82fdbb3df4fe1.rlib\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib\" \"-Bdynamic\" \"--eh-frame-hdr\" \"-z\" \"noexecstack\" \"-L\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib\" \"-o\" \"/home/runner/check/repos-default/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/example-f118389b34ec08e4\" \"--gc-sections\" \"-Tlinker/linker-loongarch64.ld\"\n  = note: rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-absvdi2.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-absvsi2.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-absvti2.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-addtf3.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-addvdi3.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-addvsi3.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-addvti3.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-clzdi2.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-clzsi2.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-clzti2.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-cmpdi2.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-cmpti2.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-ctzdi2.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-ctzsi2.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-ctzti2.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-divdc3.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-divsc3.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-divtf3.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-extenddftf2.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-extendhfsf2.o) is incompatible with /tmp/rustcSDqcwG/symbols.o\n          rust-lld: error: too many errors emitted, stopping now (use --error-limit=0 to see all errors)\n          \n\nwarning: `example` (bin \"example\") generated 3 warnings\nerror: could not compile `example` (bin \"example\") due to 1 previous error; 3 warnings emitted\n"]}},{"file":"src/main.rs","count":1,"kinds":{"Clippy(Warn)":["warning: unneeded `return` statement\n  --> src/main.rs:36:23\n   |\n36 |         Breakpoint => return,\n   |                       ^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: replace `return` with a unit value\n   |\n36 |         Breakpoint => (),\n   |                       ~~\n\n"]}},{"file":"src/pci.rs","count":1,"kinds":{"Clippy(Warn)":["warning: unused variable: `addr`\n  --> src/pci.rs:64:18\n   |\n64 |     if let Some((addr, size)) = bar_info.memory_address_size() {\n   |                  ^^^^ help: if this is intentional, prefix it with an underscore: `_addr`\n   |\n   = note: `#[warn(unused_variables)]` on by default\n\n"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Lockbud(Probably)","Lockbud(Possibly)","Unformatted"]}