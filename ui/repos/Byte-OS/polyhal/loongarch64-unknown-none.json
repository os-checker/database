{
  "repo": {
    "user": "Byte-OS",
    "repo": "polyhal"
  },
  "data": [
    {
      "user": "Byte-OS",
      "repo": "polyhal",
      "pkg": "polyhal-trap",
      "count": 23,
      "raw_reports": [
        {
          "file": "polyhal-trap/src/trap/loongarch64/unaligned.rs",
          "features": "",
          "count": 5,
          "kinds": {
            "Clippy(Warn)": [
              "warning: the loop variable `i` is used to index `bytes`\n   --> polyhal-trap/src/trap/loongarch64/unaligned.rs:131:14\n    |\n131 |     for i in 0..n {\n    |              ^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\n    = note: `#[warn(clippy::needless_range_loop)]` on by default\nhelp: consider using an iterator and enumerate()\n    |\n131 |     for (i, <item>) in bytes.iter().enumerate().take(n) {\n    |         ~~~~~~~~~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
              "warning: unneeded late initialization\n   --> polyhal-trap/src/trap/loongarch64/unaligned.rs:139:5\n    |\n139 |     let addr: u64;\n    |     ^^^^^^^^^^^^^^ created here\n...\n154 |     addr = badv::read().vaddr() as u64;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ initialised here\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init\n    = note: `#[warn(clippy::needless_late_init)]` on by default\nhelp: move the declaration `addr` here\n    |\n139 ~     \n140 |     let rd: usize;\n...\n153 |     }\n154 ~     let addr: u64 = badv::read().vaddr() as u64;\n    |\n\n",
              "warning: unneeded late initialization\n   --> polyhal-trap/src/trap/loongarch64/unaligned.rs:139:5\n    |\n139 |     let addr: u64;\n    |     ^^^^^^^^^^^^^^ created here\n...\n154 |     addr = badv::read().vaddr() as u64;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ initialised here\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init\n    = note: `#[warn(clippy::needless_late_init)]` on by default\nhelp: move the declaration `addr` here\n    |\n139 ~     \n140 |     let rd: usize;\n...\n153 |     }\n154 ~     let addr: u64 = badv::read().vaddr() as u64;\n    |\n\n",
              "warning: unneeded late initialization\n   --> polyhal-trap/src/trap/loongarch64/unaligned.rs:140:5\n    |\n140 |     let rd: usize;\n    |     ^^^^^^^^^^^^^^ created here\n...\n156 |     rd = (la_inst & 0x1f) as usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ initialised here\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init\nhelp: move the declaration `rd` here\n    |\n140 ~     \n141 |\n...\n155 |     // debug!(\"badv is {:#x}\", addr);\n156 ~     let rd: usize = (la_inst & 0x1f) as usize;\n    |\n\n",
              "warning: unneeded late initialization\n   --> polyhal-trap/src/trap/loongarch64/unaligned.rs:140:5\n    |\n140 |     let rd: usize;\n    |     ^^^^^^^^^^^^^^ created here\n...\n156 |     rd = (la_inst & 0x1f) as usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ initialised here\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init\nhelp: move the declaration `rd` here\n    |\n140 ~     \n141 |\n...\n155 |     // debug!(\"badv is {:#x}\", addr);\n156 ~     let rd: usize = (la_inst & 0x1f) as usize;\n    |\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/pagetable/loongarch64.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "polyhal-trap/src/trap/loongarch64.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal-trap/src/trap/loongarch64.rs:108:1\n    |\n108 | pub unsafe extern \"C\" fn user_vec() {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal-trap/src/trap/loongarch64.rs:189:1\n    |\n189 | pub unsafe extern \"C\" fn trap_vector_base() {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal-trap/src/trap/loongarch64.rs:221:1\n    |\n221 | pub unsafe extern \"C\" fn tlb_fill() {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/kcontext/loongarch64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal/src/components/kcontext/loongarch64.rs:134:1\n    |\n134 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal/src/components/kcontext/loongarch64.rs:150:1\n    |\n150 | / pub unsafe extern \"C\" fn context_switch_pt(\n151 | |     from: *mut KContext,\n152 | |     to: *const KContext,\n153 | |     pt_token: PageTable,\n154 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/debug_console/loongarch64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:6:11\n  |\n6 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
              "warning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:8:7\n  |\n8 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/polyhal/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── polyhal-trap 0.2.4\n│       │   └── example 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── example 0.1.0\n│       └── example 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\n\n{\n  \"database\": {\n    \"advisory-count\": 752,\n    \"last-commit\": \"1273f0099ce6882659ff64b852c8fdb5f8cdd5b9\",\n    \"last-updated\": \"2025-04-10T14:29:37+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 54\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal-trap, checker=Lockbud\n// toolchain=nightly-2024-07-15, target=loongarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-trap\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target loongarch64-unknown-none \n// timestamp=2025-04-20 4:45:11.160920094 +08:00:00\n[2025-04-19T20:44:48Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-04-19T20:44:48Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling polyhal v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal)\nwarning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:6:11\n  |\n6 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `docsrs`, `feature`, and `test` and 30 more\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:8:7\n  |\n8 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:135:5\n    |\n135 | /     core::arch::asm!(\n136 | |         // Save Kernel Context.\n137 | |         save_callee_regs!(),\n...   |\n142 | |         options(noreturn)\n143 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:167:5\n    |\n167 | /     core::arch::asm!(\n168 | |         // Save Kernel Context.\n169 | |         save_callee_regs!(),\n...   |\n181 | |         options(noreturn)\n182 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:188:9\n    |\n188 | /         asm!(\n189 | |             \"\n190 | |                 move    $a0, $tp\n191 | |                 ret\n192 | |             \",\n193 | |             options(noreturn)\n194 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `unsafe_attributes` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(unsafe_attributes)]\n  |            ^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 4 warnings\nerror: could not compile `polyhal` (lib) due to 3 previous errors; 4 warnings emitted\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal-trap, checker=Rapx\n// toolchain=nightly-2024-07-15, target=loongarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-trap\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target loongarch64-unknown-none \n// timestamp=2025-04-20 4:47:00.090379366 +08:00:00\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.94\n   Compiling unicode-ident v1.0.18\n    Checking scopeguard v1.2.0\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n    Checking cfg-if v1.0.0\n    Checking loongArch64 v0.2.4\n    Checking lazyinit v0.2.1\n    Checking log v0.4.26\n    Checking arrayvec v0.7.6\n   Compiling lock_api v0.4.12\n   Compiling polyhal v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal)\n    Checking bitflags v2.9.0\n    Checking ns16550a v0.5.0\n   Compiling quote v1.0.40\n    Checking fdt-parser v0.4.10\n   Compiling syn v2.0.100\n    Checking spin v0.10.0\n   Compiling polyhal-macro v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-macro)\nwarning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:6:11\n  |\n6 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:8:7\n  |\n8 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:135:5\n    |\n135 | /     core::arch::asm!(\n136 | |         // Save Kernel Context.\n137 | |         save_callee_regs!(),\n138 | |         // Restore Kernel Context.\n...   |\n142 | |         options(noreturn)\n143 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:167:5\n    |\n167 | /     core::arch::asm!(\n168 | |         // Save Kernel Context.\n169 | |         save_callee_regs!(),\n170 | |         // Switch to new page table.\n...   |\n181 | |         options(noreturn)\n182 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:188:9\n    |\n188 | /         asm!(\n189 | |             \"\n190 | |                 move    $a0, $tp\n191 | |                 ret\n192 | |             \",\n193 | |             options(noreturn)\n194 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `unsafe_attributes` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(unsafe_attributes)]\n  |            ^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 4 warnings\nerror: could not compile `polyhal` (lib) due to 3 previous errors; 4 warnings emitted\n20:47:04|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal-trap, checker=SemverChecks\n// toolchain=nightly-2024-07-15, target=loongarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-trap\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target loongarch64-unknown-none \n// timestamp=2025-04-20 4:44:33.958953899 +08:00:00\n    Building polyhal-trap v0.2.4 (current)\nerror: running cargo-doc on crate 'polyhal-trap' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling lock_api v0.4.12\n    Checking scopeguard v1.2.0\n   Compiling polyhal v0.2.4\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `loongarch64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add loongarch64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate polyhal-trap v0.2.4\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/polyhal/polyhal-trap &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal-trap v0.2.4\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=polyhal-trap, checker=Outdated\ntoolchain=nightly-2024-07-15, target=loongarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-trap\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-04-20 4:47:32.996359364 +08:00:00\n\nName            Project  Compat  Latest  Kind    Platform\n----            -------  ------  ------  ----    --------\naarch64-cpu     9.4.0    ---     10.0.0  Normal  cfg(target_arch = \"aarch64\")\nlog             0.4.26   0.4.27  0.4.27  Normal  ---\nloongArch64     0.2.4    0.2.5   0.2.5   Normal  cfg(target_arch = \"loongarch64\")\ntock-registers  0.8.1    ---     0.9.0   Normal  cfg(target_arch = \"aarch64\")\nx86_64          0.14.12  ---     0.15.2  Normal  cfg(target_arch = \"x86_64\")\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=polyhal-trap, checker=SemverChecks\ntoolchain=nightly-2024-07-15, target=loongarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-trap\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target loongarch64-unknown-none \ntimestamp=2025-04-20 4:44:34.378622198 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building polyhal-trap v0.2.4 (current)\nerror: running cargo-doc on crate 'polyhal-trap' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling lock_api v0.4.12\n    Checking scopeguard v1.2.0\n   Compiling polyhal v0.2.4\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `loongarch64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add loongarch64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate polyhal-trap v0.2.4\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/polyhal/polyhal-trap &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal-trap v0.2.4\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/irq/mod.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: field `0` is never read\n  --> polyhal/src/components/irq/mod.rs:35:22\n   |\n35 | pub struct IRQVector(usize);\n   |            --------- ^^^^^\n   |            |\n   |            field in this struct\n   |\n   = help: consider removing this field\n   = note: `IRQVector` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n   = note: `#[warn(dead_code)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/timer/loongarch64.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: redundant closure\n --> polyhal/src/components/timer/loongarch64.rs:8:38\n  |\n8 | static FREQ: Lazy<usize> = Lazy::new(|| get_timer_freq());\n  |                                      ^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `get_timer_freq`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "polyhal",
      "pkg": "polyhal",
      "count": 15,
      "raw_reports": [
        {
          "file": "polyhal/src/pagetable/loongarch64.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/kcontext/loongarch64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal/src/components/kcontext/loongarch64.rs:134:1\n    |\n134 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal/src/components/kcontext/loongarch64.rs:150:1\n    |\n150 | / pub unsafe extern \"C\" fn context_switch_pt(\n151 | |     from: *mut KContext,\n152 | |     to: *const KContext,\n153 | |     pt_token: PageTable,\n154 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/debug_console/loongarch64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:6:11\n  |\n6 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
              "warning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:8:7\n  |\n8 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/polyhal/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── polyhal-trap 0.2.4\n│       │   └── example 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── example 0.1.0\n│       └── example 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\n\n{\n  \"database\": {\n    \"advisory-count\": 752,\n    \"last-commit\": \"1273f0099ce6882659ff64b852c8fdb5f8cdd5b9\",\n    \"last-updated\": \"2025-04-10T14:29:37+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 54\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal, checker=Lockbud\n// toolchain=nightly-2024-07-15, target=loongarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target loongarch64-unknown-none \n// timestamp=2025-04-20 4:45:07.210525638 +08:00:00\n   Compiling polyhal v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal)\n[2025-04-19T20:44:48Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-04-19T20:44:48Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\nwarning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:6:11\n  |\n6 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `docsrs`, `feature`, and `test` and 30 more\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:8:7\n  |\n8 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:135:5\n    |\n135 | /     core::arch::asm!(\n136 | |         // Save Kernel Context.\n137 | |         save_callee_regs!(),\n...   |\n142 | |         options(noreturn)\n143 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:167:5\n    |\n167 | /     core::arch::asm!(\n168 | |         // Save Kernel Context.\n169 | |         save_callee_regs!(),\n...   |\n181 | |         options(noreturn)\n182 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:188:9\n    |\n188 | /         asm!(\n189 | |             \"\n190 | |                 move    $a0, $tp\n191 | |                 ret\n192 | |             \",\n193 | |             options(noreturn)\n194 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `unsafe_attributes` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(unsafe_attributes)]\n  |            ^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 4 warnings\nerror: could not compile `polyhal` (lib) due to 3 previous errors; 4 warnings emitted\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal, checker=Rapx\n// toolchain=nightly-2024-07-15, target=loongarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target loongarch64-unknown-none \n// timestamp=2025-04-20 4:45:49.496696465 +08:00:00\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.94\n   Compiling unicode-ident v1.0.18\n    Checking scopeguard v1.2.0\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n    Checking bitflags v2.9.0\n    Checking loongArch64 v0.2.4\n    Checking cfg-if v1.0.0\n    Checking ns16550a v0.5.0\n   Compiling lock_api v0.4.12\n   Compiling polyhal v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal)\n    Checking log v0.4.26\n    Checking lazyinit v0.2.1\n    Checking fdt-parser v0.4.10\n    Checking arrayvec v0.7.6\n   Compiling quote v1.0.40\n   Compiling syn v2.0.100\n    Checking spin v0.10.0\n   Compiling polyhal-macro v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-macro)\nwarning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:6:11\n  |\n6 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:8:7\n  |\n8 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:135:5\n    |\n135 | /     core::arch::asm!(\n136 | |         // Save Kernel Context.\n137 | |         save_callee_regs!(),\n138 | |         // Restore Kernel Context.\n...   |\n142 | |         options(noreturn)\n143 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:167:5\n    |\n167 | /     core::arch::asm!(\n168 | |         // Save Kernel Context.\n169 | |         save_callee_regs!(),\n170 | |         // Switch to new page table.\n...   |\n181 | |         options(noreturn)\n182 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:188:9\n    |\n188 | /         asm!(\n189 | |             \"\n190 | |                 move    $a0, $tp\n191 | |                 ret\n192 | |             \",\n193 | |             options(noreturn)\n194 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `unsafe_attributes` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(unsafe_attributes)]\n  |            ^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 4 warnings\nerror: could not compile `polyhal` (lib) due to 3 previous errors; 4 warnings emitted\n20:45:53|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal, checker=SemverChecks\n// toolchain=nightly-2024-07-15, target=loongarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target loongarch64-unknown-none \n// timestamp=2025-04-20 4:44:22.62608271 +08:00:00\n    Building polyhal v0.2.4 (current)\nerror: running cargo-doc on crate 'polyhal' failed with output:\n-----\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `loongarch64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add loongarch64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate polyhal v0.2.4\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/polyhal/polyhal --features boot,default,graphic,logger,trap &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal v0.2.4\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=polyhal, checker=Outdated\ntoolchain=nightly-2024-07-15, target=loongarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-04-20 4:47:26.929615029 +08:00:00\n\nName            Project  Compat  Latest  Kind    Platform\n----            -------  ------  ------  ----    --------\naarch64-cpu     9.4.0    ---     10.0.0  Normal  cfg(target_arch = \"aarch64\")\nfdt-parser      0.4.10   0.4.13  0.4.13  Normal  ---\nlog             0.4.26   0.4.27  0.4.27  Normal  ---\nloongArch64     0.2.4    0.2.5   0.2.5   Normal  cfg(target_arch = \"loongarch64\")\nsbi-rt          0.0.2    ---     0.0.3   Normal  cfg(target_arch = \"riscv64\")\ntock-registers  0.8.1    ---     0.9.0   Normal  cfg(target_arch = \"aarch64\")\nx2apic          0.4.3    ---     0.5.0   Normal  cfg(target_arch = \"x86_64\")\nx86_64          0.14.12  ---     0.15.2  Normal  cfg(target_arch = \"x86_64\")\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=polyhal, checker=SemverChecks\ntoolchain=nightly-2024-07-15, target=loongarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target loongarch64-unknown-none \ntimestamp=2025-04-20 4:44:23.300272274 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building polyhal v0.2.4 (current)\nerror: running cargo-doc on crate 'polyhal' failed with output:\n-----\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `loongarch64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add loongarch64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate polyhal v0.2.4\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/polyhal/polyhal --features boot,default,graphic,logger,trap &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal v0.2.4\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/irq/mod.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: field `0` is never read\n  --> polyhal/src/components/irq/mod.rs:35:22\n   |\n35 | pub struct IRQVector(usize);\n   |            --------- ^^^^^\n   |            |\n   |            field in this struct\n   |\n   = help: consider removing this field\n   = note: `IRQVector` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n   = note: `#[warn(dead_code)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/timer/loongarch64.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: redundant closure\n --> polyhal/src/components/timer/loongarch64.rs:8:38\n  |\n8 | static FREQ: Lazy<usize> = Lazy::new(|| get_timer_freq());\n  |                                      ^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `get_timer_freq`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "polyhal",
      "pkg": "polyhal-boot",
      "count": 15,
      "raw_reports": [
        {
          "file": "polyhal/src/pagetable/loongarch64.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/kcontext/loongarch64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal/src/components/kcontext/loongarch64.rs:134:1\n    |\n134 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal/src/components/kcontext/loongarch64.rs:150:1\n    |\n150 | / pub unsafe extern \"C\" fn context_switch_pt(\n151 | |     from: *mut KContext,\n152 | |     to: *const KContext,\n153 | |     pt_token: PageTable,\n154 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/debug_console/loongarch64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:6:11\n  |\n6 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
              "warning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:8:7\n  |\n8 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/polyhal/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── polyhal-trap 0.2.4\n│       │   └── example 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── example 0.1.0\n│       └── example 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\n\n{\n  \"database\": {\n    \"advisory-count\": 752,\n    \"last-commit\": \"1273f0099ce6882659ff64b852c8fdb5f8cdd5b9\",\n    \"last-updated\": \"2025-04-10T14:29:37+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 54\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal-boot, checker=Lockbud\n// toolchain=nightly-2024-07-15, target=loongarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-boot\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target loongarch64-unknown-none \n// timestamp=2025-04-20 4:45:07.419519951 +08:00:00\n[2025-04-19T20:44:48Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-04-19T20:44:48Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling polyhal v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal)\nwarning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:6:11\n  |\n6 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `docsrs`, `feature`, and `test` and 30 more\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:8:7\n  |\n8 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:135:5\n    |\n135 | /     core::arch::asm!(\n136 | |         // Save Kernel Context.\n137 | |         save_callee_regs!(),\n...   |\n142 | |         options(noreturn)\n143 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:167:5\n    |\n167 | /     core::arch::asm!(\n168 | |         // Save Kernel Context.\n169 | |         save_callee_regs!(),\n...   |\n181 | |         options(noreturn)\n182 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:188:9\n    |\n188 | /         asm!(\n189 | |             \"\n190 | |                 move    $a0, $tp\n191 | |                 ret\n192 | |             \",\n193 | |             options(noreturn)\n194 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `unsafe_attributes` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(unsafe_attributes)]\n  |            ^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 4 warnings\nerror: could not compile `polyhal` (lib) due to 3 previous errors; 4 warnings emitted\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal-boot, checker=Rapx\n// toolchain=nightly-2024-07-15, target=loongarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-boot\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target loongarch64-unknown-none \n// timestamp=2025-04-20 4:46:17.845128577 +08:00:00\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.94\n   Compiling unicode-ident v1.0.18\n    Checking scopeguard v1.2.0\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n    Checking log v0.4.26\n    Checking loongArch64 v0.2.4\n    Checking cfg-if v1.0.0\n    Checking fdt-parser v0.4.10\n   Compiling lock_api v0.4.12\n   Compiling polyhal v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal)\n    Checking ns16550a v0.5.0\n    Checking arrayvec v0.7.6\n    Checking bitflags v2.9.0\n   Compiling quote v1.0.40\n    Checking lazyinit v0.2.1\n   Compiling syn v2.0.100\n    Checking spin v0.10.0\n   Compiling polyhal-macro v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-macro)\nwarning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:6:11\n  |\n6 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:8:7\n  |\n8 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:135:5\n    |\n135 | /     core::arch::asm!(\n136 | |         // Save Kernel Context.\n137 | |         save_callee_regs!(),\n138 | |         // Restore Kernel Context.\n...   |\n142 | |         options(noreturn)\n143 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:167:5\n    |\n167 | /     core::arch::asm!(\n168 | |         // Save Kernel Context.\n169 | |         save_callee_regs!(),\n170 | |         // Switch to new page table.\n...   |\n181 | |         options(noreturn)\n182 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:188:9\n    |\n188 | /         asm!(\n189 | |             \"\n190 | |                 move    $a0, $tp\n191 | |                 ret\n192 | |             \",\n193 | |             options(noreturn)\n194 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `unsafe_attributes` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(unsafe_attributes)]\n  |            ^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 4 warnings\nerror: could not compile `polyhal` (lib) due to 3 previous errors; 4 warnings emitted\n20:46:22|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal-boot, checker=SemverChecks\n// toolchain=nightly-2024-07-15, target=loongarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-boot\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target loongarch64-unknown-none \n// timestamp=2025-04-20 4:44:28.001462891 +08:00:00\n    Building polyhal-boot v0.2.4 (current)\nerror: running cargo-doc on crate 'polyhal-boot' failed with output:\n-----\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `loongarch64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add loongarch64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate polyhal-boot v0.2.4\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/polyhal/polyhal-boot --features graphic &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal-boot v0.2.4\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=polyhal-boot, checker=Outdated\ntoolchain=nightly-2024-07-15, target=loongarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-boot\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-04-20 4:47:28.996592194 +08:00:00\n\nName            Project  Compat  Latest  Kind    Platform\n----            -------  ------  ------  ----    --------\naarch64-cpu     9.4.0    ---     10.0.0  Normal  cfg(target_arch = \"aarch64\")\nloongArch64     0.2.4    0.2.5   0.2.5   Normal  cfg(target_arch = \"loongarch64\")\ntock-registers  0.8.1    ---     0.9.0   Normal  cfg(target_arch = \"aarch64\")\nx86_64          0.14.12  ---     0.15.2  Normal  cfg(target_arch = \"x86_64\")\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=polyhal-boot, checker=SemverChecks\ntoolchain=nightly-2024-07-15, target=loongarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-boot\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target loongarch64-unknown-none \ntimestamp=2025-04-20 4:44:28.662447099 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building polyhal-boot v0.2.4 (current)\nerror: running cargo-doc on crate 'polyhal-boot' failed with output:\n-----\n   Compiling autocfg v1.4.0\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking scopeguard v1.2.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `loongarch64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add loongarch64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `scopeguard` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate polyhal-boot v0.2.4\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/polyhal/polyhal-boot --features graphic &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal-boot v0.2.4\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/irq/mod.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: field `0` is never read\n  --> polyhal/src/components/irq/mod.rs:35:22\n   |\n35 | pub struct IRQVector(usize);\n   |            --------- ^^^^^\n   |            |\n   |            field in this struct\n   |\n   = help: consider removing this field\n   = note: `IRQVector` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n   = note: `#[warn(dead_code)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/timer/loongarch64.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: redundant closure\n --> polyhal/src/components/timer/loongarch64.rs:8:38\n  |\n8 | static FREQ: Lazy<usize> = Lazy::new(|| get_timer_freq());\n  |                                      ^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `get_timer_freq`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "polyhal",
      "pkg": "example",
      "count": 12,
      "raw_reports": [
        {
          "file": "polyhal/src/pagetable/loongarch64.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/debug_console/loongarch64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:6:11\n  |\n6 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
              "warning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:8:7\n  |\n8 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/polyhal/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.4.3\n│   └── polyhal 0.2.4\n│       ├── polyhal-trap 0.2.4\n│       │   └── example 0.1.0\n│       ├── polyhal-boot 0.2.4\n│       │   └── example 0.1.0\n│       └── example 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.2.4\n│   ├── polyhal-boot 0.2.4\n│   └── polyhal 0.2.4\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.2.4\n    ├── polyhal-boot 0.2.4\n    └── polyhal 0.2.4\n\n\n{\n  \"database\": {\n    \"advisory-count\": 752,\n    \"last-commit\": \"1273f0099ce6882659ff64b852c8fdb5f8cdd5b9\",\n    \"last-updated\": \"2025-04-10T14:29:37+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 54\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=example, checker=Lockbud\n// toolchain=nightly-2024-07-15, target=loongarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target loongarch64-unknown-none \n// timestamp=2025-04-20 4:44:48.456079947 +08:00:00\n   Compiling proc-macro2 v1.0.94\n   Compiling unicode-ident v1.0.18\n   Compiling autocfg v1.4.0\n   Compiling scopeguard v1.2.0\n   Compiling bitflags v1.3.2\n   Compiling log v0.4.26\n   Compiling bitflags v2.9.0\n[2025-04-19T20:44:48Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-04-19T20:44:48Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling bit_field v0.10.2\n   Compiling cfg-if v1.0.0\n   Compiling arrayvec v0.7.6\n   Compiling loongArch64 v0.2.4\n   Compiling lazyinit v0.2.1\n   Compiling ns16550a v0.5.0\n   Compiling lock_api v0.4.12\n   Compiling polyhal v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal)\n   Compiling fdt-parser v0.4.10\n   Compiling quote v1.0.40\n   Compiling spin v0.10.0\n   Compiling syn v2.0.100\n   Compiling byteorder v1.5.0\n   Compiling spin v0.9.8\n   Compiling example v0.1.0 (/home/runner/check/batch_1/Byte-OS/polyhal/example)\n   Compiling buddy_system_allocator v0.11.0\n   Compiling polyhal-macro v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-macro)\n   Compiling zerocopy-derive v0.7.35\n   Compiling enumn v0.1.14\nwarning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:6:11\n  |\n6 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `docsrs`, `feature`, and `test` and 30 more\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:8:7\n  |\n8 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:135:5\n    |\n135 | /     core::arch::asm!(\n136 | |         // Save Kernel Context.\n137 | |         save_callee_regs!(),\n...   |\n142 | |         options(noreturn)\n143 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:167:5\n    |\n167 | /     core::arch::asm!(\n168 | |         // Save Kernel Context.\n169 | |         save_callee_regs!(),\n...   |\n181 | |         options(noreturn)\n182 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:188:9\n    |\n188 | /         asm!(\n189 | |             \"\n190 | |                 move    $a0, $tp\n191 | |                 ret\n192 | |             \",\n193 | |             options(noreturn)\n194 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `unsafe_attributes` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(unsafe_attributes)]\n  |            ^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 4 warnings\nerror: could not compile `polyhal` (lib) due to 3 previous errors; 4 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=example, checker=Rapx\n// toolchain=nightly-2024-07-15, target=loongarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target loongarch64-unknown-none \n// timestamp=2025-04-20 4:45:16.654456355 +08:00:00\n   Compiling proc-macro2 v1.0.94\n   Compiling autocfg v1.4.0\n   Compiling unicode-ident v1.0.18\n    Checking scopeguard v1.2.0\n    Checking bit_field v0.10.2\n    Checking bitflags v2.9.0\n    Checking log v0.4.26\n    Checking bitflags v1.3.2\n    Checking loongArch64 v0.2.4\n    Checking arrayvec v0.7.6\n   Compiling lock_api v0.4.12\n   Compiling polyhal v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal)\n    Checking cfg-if v1.0.0\n    Checking lazyinit v0.2.1\n    Checking ns16550a v0.5.0\n   Compiling quote v1.0.40\n    Checking fdt-parser v0.4.10\n   Compiling syn v2.0.100\n    Checking spin v0.10.0\n    Checking byteorder v1.5.0\n    Checking spin v0.9.8\n   Compiling example v0.1.0 (/home/runner/check/batch_1/Byte-OS/polyhal/example)\n    Checking buddy_system_allocator v0.11.0\n   Compiling polyhal-macro v0.2.4 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-macro)\n   Compiling zerocopy-derive v0.7.35\n   Compiling enumn v0.1.14\nwarning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:6:11\n  |\n6 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:8:7\n  |\n8 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:135:5\n    |\n135 | /     core::arch::asm!(\n136 | |         // Save Kernel Context.\n137 | |         save_callee_regs!(),\n138 | |         // Restore Kernel Context.\n...   |\n142 | |         options(noreturn)\n143 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:167:5\n    |\n167 | /     core::arch::asm!(\n168 | |         // Save Kernel Context.\n169 | |         save_callee_regs!(),\n170 | |         // Switch to new page table.\n...   |\n181 | |         options(noreturn)\n182 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> polyhal/src/components/kcontext/loongarch64.rs:188:9\n    |\n188 | /         asm!(\n189 | |             \"\n190 | |                 move    $a0, $tp\n191 | |                 ret\n192 | |             \",\n193 | |             options(noreturn)\n194 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `unsafe_attributes` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(unsafe_attributes)]\n  |            ^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 4 warnings\nerror: could not compile `polyhal` (lib) due to 3 previous errors; 4 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n20:45:21|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=example, checker=Outdated\ntoolchain=nightly-2024-07-15, target=loongarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-04-20 4:47:24.953156478 +08:00:00\n\nName            Project  Compat  Latest  Kind    Platform\n----            -------  ------  ------  ----    --------\nlog             0.4.26   0.4.27  0.4.27  Normal  ---\nvirtio-drivers  0.7.5    ---     0.10.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "example/src/main.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: empty `loop {}` wastes CPU cycles\n  --> example/src/main.rs:96:5\n   |\n96 |     loop {}\n   |     ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "example/src/pci.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unneeded `return` statement\n  --> example/src/pci.rs:14:85\n   |\n14 |               enumerate_pci((pci_addr.address as usize | VIRT_ADDR_START) as *mut u8);\n   |  _____________________________________________________________________________________^\n15 | |             return;\n   | |__________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n14 -             enumerate_pci((pci_addr.address as usize | VIRT_ADDR_START) as *mut u8);\n15 -             return;\n14 +             enumerate_pci((pci_addr.address as usize | VIRT_ADDR_START) as *mut u8);\n   |\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/irq/mod.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: field `0` is never read\n  --> polyhal/src/components/irq/mod.rs:35:22\n   |\n35 | pub struct IRQVector(usize);\n   |            --------- ^^^^^\n   |            |\n   |            field in this struct\n   |\n   = help: consider removing this field\n   = note: `IRQVector` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n   = note: `#[warn(dead_code)]` on by default\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "polyhal",
      "pkg": "polyhal-macro",
      "count": 1,
      "raw_reports": [
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=polyhal-macro, checker=Outdated\ntoolchain=nightly-2024-07-15, target=loongarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-macro\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-04-20 4:47:30.998706961 +08:00:00\n\nName         Project  Compat  Latest  Kind    Platform\n----         -------  ------  ------  ----    --------\nproc-macro2  1.0.94   1.0.95  1.0.95  Normal  ---\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Outdated",
    "Geiger",
    "Unformatted"
  ]
}