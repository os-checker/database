{
  "repo": {
    "user": "Byte-OS",
    "repo": "polyhal"
  },
  "data": [
    {
      "user": "Byte-OS",
      "repo": "polyhal",
      "pkg": "polyhal",
      "count": 29,
      "raw_reports": [
        {
          "file": "polyhal/src/components/mem/loongarch64.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning: constant `CRWRW` is never used\n  --> polyhal/src/components/mem/loongarch64.rs:13:7\n   |\n13 | const CRWRW: usize = 0b00000;\n   |       ^^^^^\n\n",
              "warning: constant `ORWRW` is never used\n  --> polyhal/src/components/mem/loongarch64.rs:16:7\n   |\n16 | const ORWRW: usize = 0b10000;\n   |       ^^^^^\n\n",
              "warning: associated functions `complete_sync` and `ordering_sync` are never used\n  --> polyhal/src/components/mem/loongarch64.rs:24:12\n   |\n22 | impl Barrier {\n   | ------------ associated functions in this implementation\n23 |     #[inline]\n24 |     pub fn complete_sync() {\n   |            ^^^^^^^^^^^^^\n...\n29 |     pub fn ordering_sync() {\n   |            ^^^^^^^^^^^^^\n\n",
              "warning: associated functions `complete_sync` and `ordering_sync` are never used\n  --> polyhal/src/components/mem/loongarch64.rs:24:12\n   |\n22 | impl Barrier {\n   | ------------ associated functions in this implementation\n23 |     #[inline]\n24 |     pub fn complete_sync() {\n   |            ^^^^^^^^^^^^^\n...\n29 |     pub fn ordering_sync() {\n   |            ^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/utils/mutex_no_irq.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning: the following explicit lifetimes could be elided: 'a\n  --> polyhal/src/utils/mutex_no_irq.rs:89:6\n   |\n89 | impl<'a, T: ?Sized> Deref for MutexNoIrqGuard<'a, T> {\n   |      ^^                                       ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n   = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n   |\n89 - impl<'a, T: ?Sized> Deref for MutexNoIrqGuard<'a, T> {\n89 + impl<T: ?Sized> Deref for MutexNoIrqGuard<'_, T> {\n   |\n\n",
              "warning: the following explicit lifetimes could be elided: 'a\n  --> polyhal/src/utils/mutex_no_irq.rs:89:6\n   |\n89 | impl<'a, T: ?Sized> Deref for MutexNoIrqGuard<'a, T> {\n   |      ^^                                       ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n   = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n   |\n89 - impl<'a, T: ?Sized> Deref for MutexNoIrqGuard<'a, T> {\n89 + impl<T: ?Sized> Deref for MutexNoIrqGuard<'_, T> {\n   |\n\n",
              "warning: the following explicit lifetimes could be elided: 'a\n  --> polyhal/src/utils/mutex_no_irq.rs:97:6\n   |\n97 | impl<'a, T: ?Sized> DerefMut for MutexNoIrqGuard<'a, T> {\n   |      ^^                                          ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n   |\n97 - impl<'a, T: ?Sized> DerefMut for MutexNoIrqGuard<'a, T> {\n97 + impl<T: ?Sized> DerefMut for MutexNoIrqGuard<'_, T> {\n   |\n\n",
              "warning: the following explicit lifetimes could be elided: 'a\n  --> polyhal/src/utils/mutex_no_irq.rs:97:6\n   |\n97 | impl<'a, T: ?Sized> DerefMut for MutexNoIrqGuard<'a, T> {\n   |      ^^                                          ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n   |\n97 - impl<'a, T: ?Sized> DerefMut for MutexNoIrqGuard<'a, T> {\n97 + impl<T: ?Sized> DerefMut for MutexNoIrqGuard<'_, T> {\n   |\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/kcontext/loongarch64.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unused import: `core::mem::offset_of`\n --> polyhal/src/components/kcontext/loongarch64.rs:1:5\n  |\n1 | use core::mem::offset_of;\n  |     ^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal/src/components/kcontext/loongarch64.rs:289:1\n    |\n289 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal/src/components/kcontext/loongarch64.rs:304:1\n    |\n304 | / pub unsafe extern \"C\" fn context_switch_pt(\n305 | |     from: *mut KContext,\n306 | |     to: *const KContext,\n307 | |     pt_token: PageTable,\n308 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/mem.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: creating a mutable reference to mutable static is discouraged\n  --> polyhal/src/mem.rs:69:30\n   |\n69 |         for (start, size) in MEM_AREA.iter_mut() {\n   |                              ^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n   = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives\n   = note: `#[warn(static_mut_refs)]` on by default\n\n",
              "warning: creating a shared reference to mutable static is discouraged\n   --> polyhal/src/mem.rs:130:14\n    |\n130 |     unsafe { MEM_AREA.iter() }\n    |              ^^^^^^^^^^^^^^^ shared reference to mutable static\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\n",
              "warning: creating a mutable reference to mutable static is discouraged\n   --> polyhal/src/mem.rs:176:13\n    |\n176 |             MEM_AREA.push((start, end - start));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/pagetable/loongarch64.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/debug_console/loongarch64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:6:11\n  |\n6 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `docsrs`, `feature`, and `test` and 30 more\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
              "warning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:8:7\n  |\n8 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/polyhal/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── polyhal-trap 0.3.2\n│       │   └── example 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── example 0.1.0\n│       └── example 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 62\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) clippy",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal, checker=Clippy\n// toolchain=nightly-2025-02-01, target=loongarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal\n// cmd=cargo clippy --target loongarch64-unknown-none  --no-deps\n// timestamp=2025-05-25 12:43:21.468651879 +08:00:00\n   Compiling polyhal v0.3.2 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal)\nerror: could not compile `polyhal` (lib) due to 2 previous errors; 18 warnings emitted\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:45:40Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:45:40Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=polyhal, checker=Outdated\ntoolchain=nightly-2025-02-01, target=loongarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-25 12:49:27.525897108 +08:00:00\n\nName            Project  Compat  Latest  Kind    Platform\n----            -------  ------  ------  ----    --------\naarch64-cpu     9.4.0    ---     10.0.0  Normal  cfg(target_arch = \"aarch64\")\nbitflags        2.9.0    2.9.1   2.9.1   Normal  ---\nfdt-parser      0.4.10   0.4.16  0.4.16  Normal  ---\nlog             0.4.26   0.4.27  0.4.27  Normal  ---\nloongArch64     0.2.4    0.2.5   0.2.5   Normal  cfg(target_arch = \"loongarch64\")\nsbi-rt          0.0.2    ---     0.0.3   Normal  cfg(target_arch = \"riscv64\")\ntock-registers  0.8.1    ---     0.9.0   Normal  cfg(target_arch = \"aarch64\")\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/irq/mod.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: field `0` is never read\n  --> polyhal/src/components/irq/mod.rs:35:22\n   |\n35 | pub struct IRQVector(usize);\n   |            --------- ^^^^^\n   |            |\n   |            field in this struct\n   |\n   = help: consider removing this field\n   = note: `IRQVector` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n   = note: `#[warn(dead_code)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/mem/mod.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: struct `Barrier` is never constructed\n --> polyhal/src/components/mem/mod.rs:8:12\n  |\n8 | pub struct Barrier;\n  |            ^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/percpu/mod.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Error)": [
              "error: this public function might dereference a raw pointer but is not marked `unsafe`\n  --> polyhal/src/components/percpu/mod.rs:35:49\n   |\n35 |         copy_nonoverlapping(start as *const u8, dst, size);\n   |                                                 ^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref\n   = note: `#[deny(clippy::not_unsafe_ptr_arg_deref)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/timer/loongarch64.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: redundant closure\n --> polyhal/src/components/timer/loongarch64.rs:8:38\n  |\n8 | static FREQ: Lazy<usize> = Lazy::new(|| get_timer_freq());\n  |                                      ^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `get_timer_freq`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/utils/macros.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: empty line after doc comment\n --> polyhal/src/utils/macros.rs:5:1\n  |\n5 | / /// bit!(39) instead of 1 << 39.\n6 | |\n  | |_^\n7 |   #[macro_export]\n8 |   macro_rules! bit {\n  |   ---------------- the comment documents this macro\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n  = note: `#[warn(clippy::empty_line_after_doc_comments)]` on by default\n  = help: if the empty line is unintentional remove it\nhelp: if the comment should document the parent module use an inner doc comment\n  |\n1 ~ //! bit macro will generate the number through a shift value.\n2 ~ //!\n3 ~ //! Here is an example.\n4 ~ //! You can use bit!(0) instead of 1 << 0.\n5 ~ //! bit!(39) instead of 1 << 39.\n  |\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/utils/percpu.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Error)": [
              "error: mutable borrow from immutable input(s)\n  --> polyhal/src/utils/percpu.rs:21:30\n   |\n21 |     pub fn ref_mut(&self) -> &mut T {\n   |                              ^^^^^^\n   |\nnote: immutable borrow here\n  --> polyhal/src/utils/percpu.rs:21:20\n   |\n21 |     pub fn ref_mut(&self) -> &mut T {\n   |                    ^^^^^\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mut_from_ref\n   = note: `#[deny(clippy::mut_from_ref)]` on by default\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "polyhal",
      "pkg": "polyhal-trap",
      "count": 26,
      "raw_reports": [
        {
          "file": "polyhal-trap/src/trap/loongarch64/unaligned.rs",
          "features": "",
          "count": 5,
          "kinds": {
            "Clippy(Warn)": [
              "warning: the loop variable `i` is used to index `bytes`\n   --> polyhal-trap/src/trap/loongarch64/unaligned.rs:111:14\n    |\n111 |     for i in 0..n {\n    |              ^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\n    = note: `#[warn(clippy::needless_range_loop)]` on by default\nhelp: consider using an iterator and enumerate()\n    |\n111 |     for (i, <item>) in bytes.iter().enumerate().take(n) {\n    |         ~~~~~~~~~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
              "warning: unneeded late initialization\n   --> polyhal-trap/src/trap/loongarch64/unaligned.rs:119:5\n    |\n119 |     let addr: u64;\n    |     ^^^^^^^^^^^^^^ created here\n...\n134 |     addr = badv::read().vaddr() as u64;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ initialised here\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init\n    = note: `#[warn(clippy::needless_late_init)]` on by default\nhelp: move the declaration `addr` here\n    |\n119 ~     \n120 |     let rd: usize;\n...\n133 |     }\n134 ~     let addr: u64 = badv::read().vaddr() as u64;\n    |\n\n",
              "warning: unneeded late initialization\n   --> polyhal-trap/src/trap/loongarch64/unaligned.rs:119:5\n    |\n119 |     let addr: u64;\n    |     ^^^^^^^^^^^^^^ created here\n...\n134 |     addr = badv::read().vaddr() as u64;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ initialised here\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init\n    = note: `#[warn(clippy::needless_late_init)]` on by default\nhelp: move the declaration `addr` here\n    |\n119 ~     \n120 |     let rd: usize;\n...\n133 |     }\n134 ~     let addr: u64 = badv::read().vaddr() as u64;\n    |\n\n",
              "warning: unneeded late initialization\n   --> polyhal-trap/src/trap/loongarch64/unaligned.rs:120:5\n    |\n120 |     let rd: usize;\n    |     ^^^^^^^^^^^^^^ created here\n...\n136 |     rd = (la_inst & 0x1f) as usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ initialised here\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init\nhelp: move the declaration `rd` here\n    |\n120 ~     \n121 |\n...\n135 |     // debug!(\"badv is {:#x}\", addr);\n136 ~     let rd: usize = (la_inst & 0x1f) as usize;\n    |\n\n",
              "warning: unneeded late initialization\n   --> polyhal-trap/src/trap/loongarch64/unaligned.rs:120:5\n    |\n120 |     let rd: usize;\n    |     ^^^^^^^^^^^^^^ created here\n...\n136 |     rd = (la_inst & 0x1f) as usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ initialised here\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init\nhelp: move the declaration `rd` here\n    |\n120 ~     \n121 |\n...\n135 |     // debug!(\"badv is {:#x}\", addr);\n136 ~     let rd: usize = (la_inst & 0x1f) as usize;\n    |\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/mem/loongarch64.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning: constant `CRWRW` is never used\n  --> polyhal/src/components/mem/loongarch64.rs:13:7\n   |\n13 | const CRWRW: usize = 0b00000;\n   |       ^^^^^\n\n",
              "warning: constant `ORWRW` is never used\n  --> polyhal/src/components/mem/loongarch64.rs:16:7\n   |\n16 | const ORWRW: usize = 0b10000;\n   |       ^^^^^\n\n",
              "warning: associated functions `complete_sync` and `ordering_sync` are never used\n  --> polyhal/src/components/mem/loongarch64.rs:24:12\n   |\n22 | impl Barrier {\n   | ------------ associated functions in this implementation\n23 |     #[inline]\n24 |     pub fn complete_sync() {\n   |            ^^^^^^^^^^^^^\n...\n29 |     pub fn ordering_sync() {\n   |            ^^^^^^^^^^^^^\n\n",
              "warning: associated functions `complete_sync` and `ordering_sync` are never used\n  --> polyhal/src/components/mem/loongarch64.rs:24:12\n   |\n22 | impl Barrier {\n   | ------------ associated functions in this implementation\n23 |     #[inline]\n24 |     pub fn complete_sync() {\n   |            ^^^^^^^^^^^^^\n...\n29 |     pub fn ordering_sync() {\n   |            ^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/mem.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: creating a mutable reference to mutable static is discouraged\n  --> polyhal/src/mem.rs:69:30\n   |\n69 |         for (start, size) in MEM_AREA.iter_mut() {\n   |                              ^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n   = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives\n   = note: `#[warn(static_mut_refs)]` on by default\n\n",
              "warning: creating a shared reference to mutable static is discouraged\n   --> polyhal/src/mem.rs:130:14\n    |\n130 |     unsafe { MEM_AREA.iter() }\n    |              ^^^^^^^^^^^^^^^ shared reference to mutable static\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\n",
              "warning: creating a mutable reference to mutable static is discouraged\n   --> polyhal/src/mem.rs:176:13\n    |\n176 |             MEM_AREA.push((start, end - start));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/pagetable/loongarch64.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "polyhal-trap/src/trap/loongarch64.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> polyhal-trap/src/trap/loongarch64.rs:16:1\n   |\n16 | pub unsafe extern \"C\" fn user_vec() {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n   = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> polyhal-trap/src/trap/loongarch64.rs:97:1\n   |\n97 | pub unsafe extern \"C\" fn trap_vector_base() {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n   --> polyhal-trap/src/trap/loongarch64.rs:129:1\n    |\n129 | pub unsafe extern \"C\" fn tlb_fill() {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/debug_console/loongarch64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:6:11\n  |\n6 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `docsrs`, `feature`, and `test` and 30 more\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
              "warning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:8:7\n  |\n8 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/polyhal/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── polyhal-trap 0.3.2\n│       │   └── example 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── example 0.1.0\n│       └── example 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 62\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:45:40Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:45:40Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=polyhal-trap, checker=Outdated\ntoolchain=nightly-2025-02-01, target=loongarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-trap\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-25 12:49:34.666838004 +08:00:00\n\nName            Project  Compat  Latest  Kind    Platform\n----            -------  ------  ------  ----    --------\naarch64-cpu     9.4.0    ---     10.0.0  Normal  cfg(target_arch = \"aarch64\")\nbitflags        2.9.0    2.9.1   2.9.1   Normal  ---\nlog             0.4.26   0.4.27  0.4.27  Normal  ---\nloongArch64     0.2.4    0.2.5   0.2.5   Normal  cfg(target_arch = \"loongarch64\")\ntock-registers  0.8.1    ---     0.9.0   Normal  cfg(target_arch = \"aarch64\")\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/irq/mod.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: field `0` is never read\n  --> polyhal/src/components/irq/mod.rs:35:22\n   |\n35 | pub struct IRQVector(usize);\n   |            --------- ^^^^^\n   |            |\n   |            field in this struct\n   |\n   = help: consider removing this field\n   = note: `IRQVector` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n   = note: `#[warn(dead_code)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/kcontext/loongarch64.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unused import: `core::mem::offset_of`\n --> polyhal/src/components/kcontext/loongarch64.rs:1:5\n  |\n1 | use core::mem::offset_of;\n  |     ^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/mem/mod.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: struct `Barrier` is never constructed\n --> polyhal/src/components/mem/mod.rs:8:12\n  |\n8 | pub struct Barrier;\n  |            ^^^^^^^\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "polyhal",
      "pkg": "example",
      "count": 22,
      "raw_reports": [
        {
          "file": "polyhal/src/components/mem/loongarch64.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning: constant `CRWRW` is never used\n  --> polyhal/src/components/mem/loongarch64.rs:13:7\n   |\n13 | const CRWRW: usize = 0b00000;\n   |       ^^^^^\n\n",
              "warning: constant `ORWRW` is never used\n  --> polyhal/src/components/mem/loongarch64.rs:16:7\n   |\n16 | const ORWRW: usize = 0b10000;\n   |       ^^^^^\n\n",
              "warning: associated functions `complete_sync` and `ordering_sync` are never used\n  --> polyhal/src/components/mem/loongarch64.rs:24:12\n   |\n22 | impl Barrier {\n   | ------------ associated functions in this implementation\n23 |     #[inline]\n24 |     pub fn complete_sync() {\n   |            ^^^^^^^^^^^^^\n...\n29 |     pub fn ordering_sync() {\n   |            ^^^^^^^^^^^^^\n\n",
              "warning: associated functions `complete_sync` and `ordering_sync` are never used\n  --> polyhal/src/components/mem/loongarch64.rs:24:12\n   |\n22 | impl Barrier {\n   | ------------ associated functions in this implementation\n23 |     #[inline]\n24 |     pub fn complete_sync() {\n   |            ^^^^^^^^^^^^^\n...\n29 |     pub fn ordering_sync() {\n   |            ^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/mem.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: creating a mutable reference to mutable static is discouraged\n  --> polyhal/src/mem.rs:69:30\n   |\n69 |         for (start, size) in MEM_AREA.iter_mut() {\n   |                              ^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n   = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives\n   = note: `#[warn(static_mut_refs)]` on by default\n\n",
              "warning: creating a shared reference to mutable static is discouraged\n   --> polyhal/src/mem.rs:130:14\n    |\n130 |     unsafe { MEM_AREA.iter() }\n    |              ^^^^^^^^^^^^^^^ shared reference to mutable static\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\n",
              "warning: creating a mutable reference to mutable static is discouraged\n   --> polyhal/src/mem.rs:176:13\n    |\n176 |             MEM_AREA.push((start, end - start));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/pagetable/loongarch64.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/debug_console/loongarch64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:6:11\n  |\n6 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `docsrs`, `feature`, and `test` and 30 more\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
              "warning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:8:7\n  |\n8 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/polyhal/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── polyhal-trap 0.3.2\n│       │   └── example 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── example 0.1.0\n│       └── example 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 62\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:45:40Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:45:40Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=example, checker=Outdated\ntoolchain=nightly-2025-02-01, target=loongarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-25 12:49:24.925667245 +08:00:00\n\nName            Project  Compat  Latest  Kind    Platform\n----            -------  ------  ------  ----    --------\nlog             0.4.26   0.4.27  0.4.27  Normal  ---\nvirtio-drivers  0.7.5    ---     0.11.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "example/src/allocator.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: creating a shared reference to mutable static is discouraged\n  --> example/src/allocator.rs:14:19\n   |\n14 |             .init(HEAP_SPACE.as_ptr() as usize, KERNEL_HEAP_SIZE);\n   |                   ^^^^^^^^^^^^^^^^^^^ shared reference to mutable static\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n   = note: `#[warn(static_mut_refs)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "example/src/frame.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: manually reimplementing `div_ceil`\n  --> example/src/frame.rs:12:9\n   |\n12 |         (_end as usize + PAGE_SIZE - 1) / PAGE_SIZE\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.div_ceil()`: `(_end as usize).div_ceil(PAGE_SIZE)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil\n   = note: `#[warn(clippy::manual_div_ceil)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "example/src/main.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: empty `loop {}` wastes CPU cycles\n   --> example/src/main.rs:113:5\n    |\n113 |     loop {}\n    |     ^^^^^^^\n    |\n    = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n    = note: `#[warn(clippy::empty_loop)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "example/src/pci.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unneeded `return` statement\n  --> example/src/pci.rs:14:85\n   |\n14 |               enumerate_pci((pci_addr.address as usize | VIRT_ADDR_START) as *mut u8);\n   |  _____________________________________________________________________________________^\n15 | |             return;\n   | |__________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n14 -             enumerate_pci((pci_addr.address as usize | VIRT_ADDR_START) as *mut u8);\n15 -             return;\n14 +             enumerate_pci((pci_addr.address as usize | VIRT_ADDR_START) as *mut u8);\n   |\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/irq/mod.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: field `0` is never read\n  --> polyhal/src/components/irq/mod.rs:35:22\n   |\n35 | pub struct IRQVector(usize);\n   |            --------- ^^^^^\n   |            |\n   |            field in this struct\n   |\n   = help: consider removing this field\n   = note: `IRQVector` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n   = note: `#[warn(dead_code)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/kcontext/loongarch64.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unused import: `core::mem::offset_of`\n --> polyhal/src/components/kcontext/loongarch64.rs:1:5\n  |\n1 | use core::mem::offset_of;\n  |     ^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/mem/mod.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: struct `Barrier` is never constructed\n --> polyhal/src/components/mem/mod.rs:8:12\n  |\n8 | pub struct Barrier;\n  |            ^^^^^^^\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "polyhal",
      "pkg": "polyhal-boot",
      "count": 18,
      "raw_reports": [
        {
          "file": "polyhal/src/components/mem/loongarch64.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning: constant `CRWRW` is never used\n  --> polyhal/src/components/mem/loongarch64.rs:13:7\n   |\n13 | const CRWRW: usize = 0b00000;\n   |       ^^^^^\n\n",
              "warning: constant `ORWRW` is never used\n  --> polyhal/src/components/mem/loongarch64.rs:16:7\n   |\n16 | const ORWRW: usize = 0b10000;\n   |       ^^^^^\n\n",
              "warning: associated functions `complete_sync` and `ordering_sync` are never used\n  --> polyhal/src/components/mem/loongarch64.rs:24:12\n   |\n22 | impl Barrier {\n   | ------------ associated functions in this implementation\n23 |     #[inline]\n24 |     pub fn complete_sync() {\n   |            ^^^^^^^^^^^^^\n...\n29 |     pub fn ordering_sync() {\n   |            ^^^^^^^^^^^^^\n\n",
              "warning: associated functions `complete_sync` and `ordering_sync` are never used\n  --> polyhal/src/components/mem/loongarch64.rs:24:12\n   |\n22 | impl Barrier {\n   | ------------ associated functions in this implementation\n23 |     #[inline]\n24 |     pub fn complete_sync() {\n   |            ^^^^^^^^^^^^^\n...\n29 |     pub fn ordering_sync() {\n   |            ^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/mem.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: creating a mutable reference to mutable static is discouraged\n  --> polyhal/src/mem.rs:69:30\n   |\n69 |         for (start, size) in MEM_AREA.iter_mut() {\n   |                              ^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n   = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives\n   = note: `#[warn(static_mut_refs)]` on by default\n\n",
              "warning: creating a shared reference to mutable static is discouraged\n   --> polyhal/src/mem.rs:130:14\n    |\n130 |     unsafe { MEM_AREA.iter() }\n    |              ^^^^^^^^^^^^^^^ shared reference to mutable static\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\n",
              "warning: creating a mutable reference to mutable static is discouraged\n   --> polyhal/src/mem.rs:176:13\n    |\n176 |             MEM_AREA.push((start, end - start));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/pagetable/loongarch64.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: associated constants `VADDR_BITS`, `USER_VADDR_END`, and `KERNEL_VADDR_START` are never used\n   --> polyhal/src/pagetable/loongarch64.rs:117:22\n    |\n111 | impl PageTable {\n    | -------------- associated constants in this implementation\n...\n117 |     pub(crate) const VADDR_BITS: usize = 39;\n    |                      ^^^^^^^^^^\n118 |     pub(crate) const USER_VADDR_END: usize = (1 << Self::VADDR_BITS) - 1;\n    |                      ^^^^^^^^^^^^^^\n119 |     pub(crate) const KERNEL_VADDR_START: usize = !Self::USER_VADDR_END;\n    |                      ^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/debug_console/loongarch64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:6:11\n  |\n6 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `docsrs`, `feature`, and `test` and 30 more\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
              "warning: unexpected `cfg` condition name: `board`\n --> polyhal/src/debug_console/loongarch64.rs:8:7\n  |\n8 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_1/Byte-OS/polyhal/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x2apic 0.5.0\n│   └── polyhal 0.3.2\n│       ├── polyhal-trap 0.3.2\n│       │   └── example 0.1.0\n│       ├── polyhal-boot 0.3.2\n│       │   └── example 0.1.0\n│       └── example 0.1.0\n├── riscv 0.13.0\n│   ├── polyhal-trap 0.3.2\n│   ├── polyhal-boot 0.3.2\n│   └── polyhal 0.3.2\n└── multiboot 0.8.0\n    ├── polyhal-trap 0.3.2\n    ├── polyhal-boot 0.3.2\n    └── polyhal 0.3.2\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 62\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-25T04:45:40Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.26/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-25T04:45:40Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=polyhal-boot, checker=Outdated\ntoolchain=nightly-2025-02-01, target=loongarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-boot\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-25 12:49:29.927850602 +08:00:00\n\nName            Project  Compat  Latest  Kind    Platform\n----            -------  ------  ------  ----    --------\naarch64-cpu     9.4.0    ---     10.0.0  Normal  cfg(target_arch = \"aarch64\")\nloongArch64     0.2.4    0.2.5   0.2.5   Normal  cfg(target_arch = \"loongarch64\")\ntock-registers  0.8.1    ---     0.9.0   Normal  cfg(target_arch = \"aarch64\")\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/irq/mod.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: field `0` is never read\n  --> polyhal/src/components/irq/mod.rs:35:22\n   |\n35 | pub struct IRQVector(usize);\n   |            --------- ^^^^^\n   |            |\n   |            field in this struct\n   |\n   = help: consider removing this field\n   = note: `IRQVector` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n   = note: `#[warn(dead_code)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/kcontext/loongarch64.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unused import: `core::mem::offset_of`\n --> polyhal/src/components/kcontext/loongarch64.rs:1:5\n  |\n1 | use core::mem::offset_of;\n  |     ^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "polyhal/src/components/mem/mod.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: struct `Barrier` is never constructed\n --> polyhal/src/components/mem/mod.rs:8:12\n  |\n8 | pub struct Barrier;\n  |            ^^^^^^^\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "polyhal",
      "pkg": "polyhal-macro",
      "count": 1,
      "raw_reports": [
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=polyhal-macro, checker=Outdated\ntoolchain=nightly-2025-02-01, target=loongarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-macro\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-25 12:49:32.290082128 +08:00:00\n\nName         Project  Compat   Latest   Kind    Platform\n----         -------  ------   ------   ----    --------\nproc-macro2  1.0.94   1.0.95   1.0.95   Normal  ---\nsyn          2.0.100  2.0.101  2.0.101  Normal  ---\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Outdated",
    "Geiger",
    "Unformatted"
  ]
}