{"repo":{"user":"Byte-OS","repo":"polyhal"},"data":[{"user":"Byte-OS","repo":"polyhal","pkg":"polyhal","count":17,"raw_reports":[{"file":"src/components/pagetable/mod.rs","count":3,"kinds":{"Clippy(Warn)":["warning: name `PTE` contains a capitalized acronym\n  --> src/components/pagetable/mod.rs:18:19\n   |\n18 | pub(crate) struct PTE(pub usize);\n   |                   ^^^ help: consider making the acronym lowercase, except the initial letter: `Pte`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n   = note: `#[warn(clippy::upper_case_acronyms)]` on by default\n\n","warning: `assert!(true)` will be optimized out by the compiler\n  --> src/components/pagetable/mod.rs:52:9\n   |\n52 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: remove it\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n   = note: `#[warn(clippy::assertions_on_constants)]` on by default\n\n","warning: `assert!(true)` will be optimized out by the compiler\n   --> src/components/pagetable/mod.rs:105:9\n    |\n105 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n\n"]}},{"file":"src/components/kcontext/loongarch64.rs","count":2,"kinds":{"Clippy(Warn)":["warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/loongarch64.rs:134:1\n    |\n134 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n","warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/loongarch64.rs:150:1\n    |\n150 | / pub unsafe extern \"C\" fn context_switch_pt(\n151 | |     from: *mut KContext,\n152 | |     to: *const KContext,\n153 | |     pt_token: PageTable,\n154 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"]}},{"file":"(virtual) rap","count":1,"kinds":{"Cargo":["// pkg_name=polyhal, checker=Rap\n// toolchain=nightly-2023-12-01, target=loongarch64-unknown-none\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal\n// cmd=cargo +nightly-2024-10-12 rap -F -M -- --target loongarch64-unknown-none\n// timestamp=2024-12-29 5:47:43.812263196 +08:00:00\n   Compiling proc-macro2 v1.0.79\n   Compiling autocfg v1.2.0\n   Compiling unicode-ident v1.0.12\n    Checking scopeguard v1.2.0\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n    Checking log v0.4.21\n    Checking loongArch64 v0.2.4\n    Checking cfg-if v1.0.0\n   Compiling lock_api v0.4.11\n    Checking bitflags v2.5.0\n    Checking fdt v0.1.5\n   Compiling quote v1.0.35\n   Compiling syn v2.0.58\n    Checking spin v0.9.8\n   Compiling polyhal-macro v0.1.3 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-macro)\n    Checking polyhal v0.1.3 (/home/runner/check/batch_1/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused import: `DebugConsole`\n --> src/components/boot/loongarch64.rs:6:48\n  |\n6 |         debug_console::{display_info, println, DebugConsole},\n  |                                                ^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n --> src/components/debug_console/loongarch64.rs:5:11\n  |\n5 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n --> src/components/debug_console/loongarch64.rs:7:7\n  |\n7 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> src/components/boot/loongarch64.rs:22:5\n   |\n22 | /     core::arch::asm!(\"\n23 | |         ori         $t0, $zero, 0x1     # CSR_DMW1_PLV0\n24 | |         lu52i.d     $t0, $t0, -2048     # UC, PLV0, 0x8000 xxxx xxxx xxxx\n25 | |         csrwr       $t0, 0x180          # LOONGARCH_CSR_DMWIN0\n...  |\n62 | |         options(noreturn),\n63 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> src/components/boot/loongarch64.rs:73:5\n   |\n73 | /     core::arch::asm!(\n74 | |         \"\n75 | |         ori          $t0, $zero, 0x1     # CSR_DMW1_PLV0\n76 | |         lu52i.d      $t0, $t0, -2048     # UC, PLV0, 0x8000 xxxx xxxx xxxx\n...  |\n92 | |         entry = sym _rust_secondary_main,\n93 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/loongarch64.rs:135:5\n    |\n135 | /     core::arch::asm!(\n136 | |         // Save Kernel Context.\n137 | |         save_callee_regs!(),\n138 | |         // Restore Kernel Context.\n...   |\n142 | |         options(noreturn)\n143 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/loongarch64.rs:167:5\n    |\n167 | /     core::arch::asm!(\n168 | |         // Save Kernel Context.\n169 | |         save_callee_regs!(),\n170 | |         // Switch to new page table.\n...   |\n181 | |         options(noreturn)\n182 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/loongarch64.rs:188:9\n    |\n188 | /         asm!(\n189 | |             \"\n190 | |                 move    $a0, $tp\n191 | |                 ret\n192 | |             \",\n193 | |             options(noreturn)\n194 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 11 warnings\nerror: could not compile `polyhal` (lib) due to 5 previous errors; 11 warnings emitted\n21:47:47|RAP|ERROR|: Finished with non-zero exit code.\n"]}},{"file":"(virtual) semver-checks","count":1,"kinds":{"Cargo":["// pkg_name=polyhal, checker=SemverChecks\n// toolchain=nightly-2023-12-01, target=loongarch64-unknown-none\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal\n// cmd=cargo +nightly-2024-12-26-x86_64-unknown-linux-gnu semver-checks --target loongarch64-unknown-none\n// timestamp=2024-12-29 5:46:18.51656417 +08:00:00\n    Building polyhal v0.1.3 (current)\nerror: running cargo-doc on crate 'polyhal' failed with output:\n-----\nerror: output of --print=file-names missing when learning about target-specific information from rustc\ncommand was: `/home/runner/.rustup/toolchains/nightly-2024-12-26-x86_64-unknown-linux-gnu/bin/rustc - --crate-name ___ --print=file-names --cap-lints=allow --target loongarch64-unknown-none --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro --print=sysroot --print=split-debuginfo --print=crate-name --print=cfg`\n\n--- stdout\n___\nlib___.rlib\nlib___.a\n/home/runner/.rustup/toolchains/nightly-2024-12-26-x86_64-unknown-linux-gnu\noff\n___\ndebug_assertions\nfmt_debug=\"full\"\noverflow_checks\npanic=\"abort\"\nproc_macro\nrelocation_model=\"static\"\ntarget_abi=\"\"\ntarget_arch=\"loongarch64\"\ntarget_endian=\"little\"\ntarget_env=\"\"\ntarget_feature=\"d\"\ntarget_feature=\"f\"\ntarget_feature=\"ual\"\ntarget_has_atomic\ntarget_has_atomic=\"16\"\ntarget_has_atomic=\"32\"\ntarget_has_atomic=\"64\"\ntarget_has_atomic=\"8\"\ntarget_has_atomic=\"ptr\"\ntarget_has_atomic_equal_alignment=\"16\"\ntarget_has_atomic_equal_alignment=\"32\"\ntarget_has_atomic_equal_alignment=\"64\"\ntarget_has_atomic_equal_alignment=\"8\"\ntarget_has_atomic_equal_alignment=\"ptr\"\ntarget_has_atomic_load_store\ntarget_has_atomic_load_store=\"16\"\ntarget_has_atomic_load_store=\"32\"\ntarget_has_atomic_load_store=\"64\"\ntarget_has_atomic_load_store=\"8\"\ntarget_has_atomic_load_store=\"ptr\"\ntarget_os=\"none\"\ntarget_pointer_width=\"64\"\ntarget_vendor=\"unknown\"\nub_checks\n\n\n-----\n\nerror: failed to build rustdoc for crate polyhal v0.1.3\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/polyhal --features boot,default,graphic,logger,trap &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal v0.1.3\n"]}},{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-12-28T21:46:56Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.21/src/lib.rs:1408:11: 1408:39 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.21/src/lib.rs:1411:13: 1411:55 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-12-28T21:46:56Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}},{"file":"[outdated direct dependencies]","count":1,"kinds":{"Outdated":["pkg=polyhal, checker=Outdated\ntoolchain=nightly-2023-12-01, target=loongarch64-unknown-none\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal\ncmd=cargo +nightly-2024-12-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\n\nName                    Project  Compat   Latest  Kind         Platform\n----                    -------  ------   ------  ----         --------\naarch64-cpu             9.4.0    ---      10.0.0  Normal       cfg(target_arch = \"aarch64\")\nbitflags                2.5.0    2.6.0    2.6.0   Normal       ---\nbuddy_system_allocator  0.9.1    ---      0.11.0  Development  ---\nlog                     0.4.21   0.4.22   0.4.22  Normal       ---\nraw-cpuid               11.0.1   11.2.0   11.2.0  Normal       cfg(target_arch = \"x86_64\")\nriscv                   0.11.1   ---      0.12.1  Normal       cfg(target_arch = \"riscv64\")\nsbi-rt                  0.0.2    ---      0.0.3   Normal       cfg(target_arch = \"riscv64\")\ntock-registers          0.8.1    ---      0.9.0   Normal       cfg(target_arch = \"aarch64\")\nx86_64                  0.14.12  0.14.13  0.15.2  Normal       cfg(target_arch = \"x86_64\")\n"]}},{"file":"[semver checks]","count":1,"kinds":{"Semver Violation":["pkg=polyhal, checker=SemverChecks\ntoolchain=nightly-2023-12-01, target=loongarch64-unknown-none\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal\ncmd=cargo +nightly-2024-12-26-x86_64-unknown-linux-gnu semver-checks --target loongarch64-unknown-none\n\n\nstdout:\n\nstderr:\n    Building polyhal v0.1.3 (current)\nerror: running cargo-doc on crate 'polyhal' failed with output:\n-----\nerror: output of --print=file-names missing when learning about target-specific information from rustc\ncommand was: `/home/runner/.rustup/toolchains/nightly-2024-12-26-x86_64-unknown-linux-gnu/bin/rustc - --crate-name ___ --print=file-names --cap-lints=allow --target loongarch64-unknown-none --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro --print=sysroot --print=split-debuginfo --print=crate-name --print=cfg`\n\n--- stdout\n___\nlib___.rlib\nlib___.a\n/home/runner/.rustup/toolchains/nightly-2024-12-26-x86_64-unknown-linux-gnu\noff\n___\ndebug_assertions\nfmt_debug=\"full\"\noverflow_checks\npanic=\"abort\"\nproc_macro\nrelocation_model=\"static\"\ntarget_abi=\"\"\ntarget_arch=\"loongarch64\"\ntarget_endian=\"little\"\ntarget_env=\"\"\ntarget_feature=\"d\"\ntarget_feature=\"f\"\ntarget_feature=\"ual\"\ntarget_has_atomic\ntarget_has_atomic=\"16\"\ntarget_has_atomic=\"32\"\ntarget_has_atomic=\"64\"\ntarget_has_atomic=\"8\"\ntarget_has_atomic=\"ptr\"\ntarget_has_atomic_equal_alignment=\"16\"\ntarget_has_atomic_equal_alignment=\"32\"\ntarget_has_atomic_equal_alignment=\"64\"\ntarget_has_atomic_equal_alignment=\"8\"\ntarget_has_atomic_equal_alignment=\"ptr\"\ntarget_has_atomic_load_store\ntarget_has_atomic_load_store=\"16\"\ntarget_has_atomic_load_store=\"32\"\ntarget_has_atomic_load_store=\"64\"\ntarget_has_atomic_load_store=\"8\"\ntarget_has_atomic_load_store=\"ptr\"\ntarget_os=\"none\"\ntarget_pointer_width=\"64\"\ntarget_vendor=\"unknown\"\nub_checks\n\n\n-----\n\nerror: failed to build rustdoc for crate polyhal v0.1.3\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_1/Byte-OS/polyhal --features boot,default,graphic,logger,trap &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal v0.1.3\n"]}},{"file":"example/Cargo.lock","count":1,"kinds":{"Audit":["    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 722 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (44 crate dependencies)\nCrate:     critical-section\nVersion:   1.1.2\nWarning:   yanked\nDependency tree:\ncritical-section 1.1.2\n└── riscv 0.11.1\n    └── polyhal 0.1.3\n        └── example 0.1.0\n\nwarning: 1 allowed warning found\n\n{\n  \"database\": {\n    \"advisory-count\": 722,\n    \"last-commit\": \"3c6d3186ab06737d1defd2b5ae556d0ecd161603\",\n    \"last-updated\": \"2024-12-28T17:54:04Z\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 44\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"yanked\": [\n      {\n        \"kind\": \"yanked\",\n        \"package\": {\n          \"name\": \"critical-section\",\n          \"version\": \"1.1.2\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"7059fff8937831a9ae6f0fe4d658ffabf58f2ca96aa9dec1c889f936f705f216\",\n          \"replace\": null\n        },\n        \"advisory\": null,\n        \"affected\": null,\n        \"versions\": null\n      }\n    ]\n  }\n}"]}},{"file":"src/components/boot/loongarch64.rs","count":1,"kinds":{"Clippy(Warn)":["warning: unused import: `DebugConsole`\n --> src/components/boot/loongarch64.rs:6:48\n  |\n6 |         debug_console::{display_info, println, DebugConsole},\n  |                                                ^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n"]}},{"file":"src/components/boot/mod.rs","count":1,"kinds":{"Unformatted":["file: /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/mod.rs (original lines from 43 to 43)\n-/// \n+///\n"]}},{"file":"src/components/common.rs","count":1,"kinds":{"Unformatted":["file: /home/runner/check/batch_1/Byte-OS/polyhal/src/components/common.rs (original lines from 73 to 74)\n-/// \n-/// Display information when booting \n+///\n+/// Display information when booting\n"]}},{"file":"src/components/multicore/loongarch64.rs","count":1,"kinds":{"Clippy(Warn)":["warning: casting function pointer `crate::components::boot::_start_secondary` to `u64`\n --> src/components/multicore/loongarch64.rs:5:19\n  |\n5 |     csr_mail_send(crate::components::boot::_start_secondary as _, hart_id, 0);\n  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::components::boot::_start_secondary as usize`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n  = note: `#[warn(clippy::fn_to_numeric_cast)]` on by default\n\n"]}},{"file":"src/components/timer/loongarch64.rs","count":1,"kinds":{"Clippy(Warn)":["warning: redundant closure\n --> src/components/timer/loongarch64.rs:8:38\n  |\n8 | static FREQ: Lazy<usize> = Lazy::new(|| get_timer_freq());\n  |                                      ^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `get_timer_freq`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n"]}},{"file":"src/utils/mutex_no_irq.rs","count":1,"kinds":{"Clippy(Warn)":["warning: unsafe function's docs miss `# Safety` section\n  --> src/utils/mutex_no_irq.rs:59:5\n   |\n59 |     pub unsafe fn force_unlock(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"]}}]},{"user":"Byte-OS","repo":"polyhal","pkg":"example","count":9,"raw_reports":[{"file":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/macros.rs","count":1,"kinds":{"Clippy(Warn)":["warning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"]}},{"file":"(virtual) lockbud","count":1,"kinds":{"Cargo":["// pkg_name=example, checker=Lockbud\n// toolchain=nightly-2023-12-01, target=loongarch64-unknown-none\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target loongarch64-unknown-none\n// timestamp=2024-12-29 5:46:24.208090661 +08:00:00\n   Compiling proc-macro2 v1.0.79\n   Compiling unicode-ident v1.0.12\n   Compiling autocfg v1.2.0\n   Compiling scopeguard v1.2.0\n   Compiling bitflags v1.3.2\n   Compiling bitflags v2.6.0\n   Compiling log v0.4.22\n[2024-12-28T21:46:24Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-12-28T21:46:24Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling byteorder v1.5.0\n   Compiling bit_field v0.10.2\n   Compiling loongArch64 v0.2.4\n   Compiling fdt v0.1.5\n   Compiling lock_api v0.4.11\n   Compiling quote v1.0.35\n   Compiling syn v2.0.58\n   Compiling cfg-if v1.0.0\n   Compiling spin v0.9.8\n   Compiling buddy_system_allocator v0.9.1\n   Compiling zerocopy-derive v0.7.35\n   Compiling enumn v0.1.14\n   Compiling polyhal-macro v0.1.3\n   Compiling polyhal v0.1.3 (/home/runner/check/batch_1/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/debug_console/loongarch64.rs:5:11\n  |\n5 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/debug_console/loongarch64.rs:7:7\n  |\n7 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\nwarning: field `0` is never read\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/irq/mod.rs:35:22\n   |\n35 | pub struct IRQVector(pub(crate) usize);\n   |            --------- ^^^^^^^^^^^^^^^^\n   |            |\n   |            field in this struct\n   |\n   = help: consider removing this field\n   = note: `IRQVector` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n   = note: `#[warn(dead_code)]` on by default\n\nwarning: field `0` is never read\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/percpu/mod.rs:15:19\n   |\n15 | struct PerCPUDATA([u8; PAGE_SIZE]);\n   |        ---------- ^^^^^^^^^^^^^^^\n   |        |\n   |        field in this struct\n   |\n   = help: consider removing this field\n\nwarning: creating a shared reference to mutable static is discouraged\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/common.rs:10:19\n   |\n10 | pub(crate) static CPU_ID: usize = 0;\n   |                   ^^^^^^ shared reference to mutable static\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n   = note: `#[warn(static_mut_refs)]` on by default\n\n   Compiling zerocopy v0.7.35\nwarning: `polyhal` (lib) generated 12 warnings\n   Compiling virtio-drivers v0.7.5\n   Compiling example v0.1.0 (/home/runner/check/batch_1/Byte-OS/polyhal/example)\nwarning: the feature `panic_info_message` has been stable since 1.81.0 and no longer requires an attribute to enable\n --> src/main.rs:3:12\n  |\n3 | #![feature(panic_info_message)]\n  |            ^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0599]: no method named `unwrap` found for struct `core::panic::PanicMessage` in the current scope\n   --> src/main.rs:136:28\n    |\n136 |             info.message().unwrap()\n    |                            ^^^^^^ method not found in `PanicMessage<'_>`\n\nerror[E0599]: no method named `unwrap` found for struct `core::panic::PanicMessage` in the current scope\n   --> src/main.rs:139:61\n    |\n139 |         log::error!(\"[kernel] Panicked: {}\", info.message().unwrap());\n    |                                                             ^^^^^^ method not found in `PanicMessage<'_>`\n\nFor more information about this error, try `rustc --explain E0599`.\nwarning: `example` (bin \"example\") generated 2 warnings\nerror: could not compile `example` (bin \"example\") due to 2 previous errors; 2 warnings emitted\n"]}},{"file":"(virtual) rap","count":1,"kinds":{"Cargo":["// pkg_name=example, checker=Rap\n// toolchain=nightly-2023-12-01, target=loongarch64-unknown-none\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2024-10-12 rap -F -M -- --target loongarch64-unknown-none\n// timestamp=2024-12-29 5:47:01.44444616 +08:00:00\n   Compiling proc-macro2 v1.0.79\n   Compiling unicode-ident v1.0.12\n   Compiling autocfg v1.2.0\n    Checking scopeguard v1.2.0\n    Checking bitflags v2.6.0\n    Checking byteorder v1.5.0\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n    Checking log v0.4.22\n    Checking loongArch64 v0.2.4\n   Compiling lock_api v0.4.11\n    Checking cfg-if v1.0.0\n    Checking fdt v0.1.5\n   Compiling quote v1.0.35\n   Compiling syn v2.0.58\n    Checking spin v0.9.8\n    Checking buddy_system_allocator v0.9.1\n   Compiling zerocopy-derive v0.7.35\n   Compiling enumn v0.1.14\n   Compiling polyhal-macro v0.1.3\n    Checking polyhal v0.1.3 (/home/runner/check/batch_1/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/debug_console/loongarch64.rs:5:11\n  |\n5 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/debug_console/loongarch64.rs:7:7\n  |\n7 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/loongarch64.rs:22:5\n   |\n22 | /     core::arch::asm!(\"\n23 | |         ori         $t0, $zero, 0x1     # CSR_DMW1_PLV0\n24 | |         lu52i.d     $t0, $t0, -2048     # UC, PLV0, 0x8000 xxxx xxxx xxxx\n25 | |         csrwr       $t0, 0x180          # LOONGARCH_CSR_DMWIN0\n...  |\n62 | |         options(noreturn),\n63 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/loongarch64.rs:73:5\n   |\n73 | /     core::arch::asm!(\n74 | |         \"\n75 | |         ori          $t0, $zero, 0x1     # CSR_DMW1_PLV0\n76 | |         lu52i.d      $t0, $t0, -2048     # UC, PLV0, 0x8000 xxxx xxxx xxxx\n...  |\n92 | |         entry = sym _rust_secondary_main,\n93 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/loongarch64.rs:135:5\n    |\n135 | /     core::arch::asm!(\n136 | |         // Save Kernel Context.\n137 | |         save_callee_regs!(),\n138 | |         // Restore Kernel Context.\n...   |\n142 | |         options(noreturn)\n143 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/loongarch64.rs:167:5\n    |\n167 | /     core::arch::asm!(\n168 | |         // Save Kernel Context.\n169 | |         save_callee_regs!(),\n170 | |         // Switch to new page table.\n...   |\n181 | |         options(noreturn)\n182 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/loongarch64.rs:188:9\n    |\n188 | /         asm!(\n189 | |             \"\n190 | |                 move    $a0, $tp\n191 | |                 ret\n192 | |             \",\n193 | |             options(noreturn)\n194 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/loongarch64.rs:109:5\n    |\n109 | /     core::arch::asm!(\n110 | |         \"\n111 | |             csrrd   $sp,  KSAVE_CTX\n112 | |             SAVE_REGS\n...   |\n132 | |         options(noreturn)\n133 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/loongarch64.rs:140:9\n    |\n140 | /         asm!(\n141 | |             r\"\n142 | |                 addi.d  $sp,  $sp, -13*8\n143 | |                 st.d    $ra,  $sp, 0*8\n...   |\n165 | |             options(noreturn)\n166 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/loongarch64.rs:190:5\n    |\n190 | /     core::arch::asm!(\n191 | |         \"\n192 | |             .balign 4096\n193 | |                 // Check whether it was from user privilege.\n...   |\n216 | |         options(noreturn)\n217 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/loongarch64.rs:222:5\n    |\n222 | /     core::arch::asm!(\n223 | |         \"\n224 | |         .equ LA_CSR_PGDL,          0x19    /* Page table base address when VA[47] = 0 */\n225 | |         .equ LA_CSR_PGDH,          0x1a    /* Page table base address when VA[47] = 1 */\n...   |\n245 | |         options(noreturn)\n246 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/loongarch64/unaligned.rs:61:5\n   |\n61 | /     core::arch::asm!(\n62 | |         \"\n63 | |             beqz    $a2, 5f\n...  |\n95 | |         options(noreturn)\n96 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/loongarch64/unaligned.rs:101:5\n    |\n101 | /     core::arch::asm!(\n102 | |         \"\n103 | |         beqz    $a2, 3f\n...   |\n121 | |         options(noreturn)\n122 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 10 warnings\nerror: could not compile `polyhal` (lib) due to 11 previous errors; 10 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n21:47:05|RAP|ERROR|: Finished with non-zero exit code.\n"]}},{"file":"Cargo.lock","count":1,"kinds":{"Audit":["    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 722 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (44 crate dependencies)\nCrate:     critical-section\nVersion:   1.1.2\nWarning:   yanked\nDependency tree:\ncritical-section 1.1.2\n└── riscv 0.11.1\n    └── polyhal 0.1.3\n        └── example 0.1.0\n\nwarning: 1 allowed warning found\n\n{\n  \"database\": {\n    \"advisory-count\": 722,\n    \"last-commit\": \"3c6d3186ab06737d1defd2b5ae556d0ecd161603\",\n    \"last-updated\": \"2024-12-28T17:54:04Z\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 44\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"yanked\": [\n      {\n        \"kind\": \"yanked\",\n        \"package\": {\n          \"name\": \"critical-section\",\n          \"version\": \"1.1.2\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"7059fff8937831a9ae6f0fe4d658ffabf58f2ca96aa9dec1c889f936f705f216\",\n          \"replace\": null\n        },\n        \"advisory\": null,\n        \"affected\": null,\n        \"versions\": null\n      }\n    ]\n  }\n}"]}},{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-12-28T21:46:24Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-12-28T21:46:24Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}},{"file":"[outdated direct dependencies]","count":1,"kinds":{"Outdated":["pkg=example, checker=Outdated\ntoolchain=nightly-2023-12-01, target=loongarch64-unknown-none\npkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\ncmd=cargo +nightly-2024-12-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\n\nName                    Project  Compat  Latest  Kind    Platform\n----                    -------  ------  ------  ----    --------\nbuddy_system_allocator  0.9.1    ---     0.11.0  Normal  ---\nvirtio-drivers          0.7.5    ---     0.8.0   Normal  ---\n"]}},{"file":"src/frame.rs","count":1,"kinds":{"Clippy(Warn)":["warning: redundant closure\n --> src/frame.rs:6:15\n  |\n6 |     Lazy::new(|| LockedFrameAllocator::new());\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `LockedFrameAllocator::new`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n"]}},{"file":"src/main.rs","count":1,"kinds":{"Clippy(Warn)":["warning: empty `loop {}` wastes CPU cycles\n  --> src/main.rs:70:9\n   |\n70 |         loop {}\n   |         ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n"]}},{"file":"src/pci.rs","count":1,"kinds":{"Clippy(Warn)":["warning: unneeded `return` statement\n  --> src/pci.rs:14:94\n   |\n14 |               enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |  ______________________________________________________________________________________________^\n15 | |             return;\n   | |__________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n14 -             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n15 -             return;\n14 +             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |\n\n"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Semver Violation","Audit","Mirai","Rap","Rudra","Lockbud(Probably)","Lockbud(Possibly)","Outdated","Geiger","Unformatted"]}