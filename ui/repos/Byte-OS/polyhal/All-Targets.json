{
  "repo": {
    "user": "Byte-OS",
    "repo": "polyhal"
  },
  "data": [
    {
      "user": "Byte-OS",
      "repo": "polyhal",
      "pkg": "polyhal",
      "count": 87,
      "raw_reports": [
        {
          "file": "src/components/pagetable/mod.rs",
          "features": "",
          "count": 12,
          "kinds": {
            "Clippy(Warn)": [
              "warning: name `PTE` contains a capitalized acronym\n  --> src/components/pagetable/mod.rs:18:19\n   |\n18 | pub(crate) struct PTE(pub usize);\n   |                   ^^^ help: consider making the acronym lowercase, except the initial letter: `Pte`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n   = note: `#[warn(clippy::upper_case_acronyms)]` on by default\n\n",
              "warning: `assert!(true)` will be optimized out by the compiler\n  --> src/components/pagetable/mod.rs:52:9\n   |\n52 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: remove it\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n   = note: `#[warn(clippy::assertions_on_constants)]` on by default\n\n",
              "warning: `assert!(true)` will be optimized out by the compiler\n   --> src/components/pagetable/mod.rs:105:9\n    |\n105 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n\n",
              "warning: name `PTE` contains a capitalized acronym\n  --> src/components/pagetable/mod.rs:18:19\n   |\n18 | pub(crate) struct PTE(pub usize);\n   |                   ^^^ help: consider making the acronym lowercase, except the initial letter: `Pte`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n   = note: `#[warn(clippy::upper_case_acronyms)]` on by default\n\n",
              "warning: `assert!(true)` will be optimized out by the compiler\n  --> src/components/pagetable/mod.rs:52:9\n   |\n52 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: remove it\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n   = note: `#[warn(clippy::assertions_on_constants)]` on by default\n\n",
              "warning: `assert!(true)` will be optimized out by the compiler\n   --> src/components/pagetable/mod.rs:105:9\n    |\n105 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n\n",
              "warning: name `PTE` contains a capitalized acronym\n  --> src/components/pagetable/mod.rs:18:19\n   |\n18 | pub(crate) struct PTE(pub usize);\n   |                   ^^^ help: consider making the acronym lowercase, except the initial letter: `Pte`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n   = note: `#[warn(clippy::upper_case_acronyms)]` on by default\n\n",
              "warning: `assert!(true)` will be optimized out by the compiler\n  --> src/components/pagetable/mod.rs:52:9\n   |\n52 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: remove it\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n   = note: `#[warn(clippy::assertions_on_constants)]` on by default\n\n",
              "warning: `assert!(true)` will be optimized out by the compiler\n   --> src/components/pagetable/mod.rs:105:9\n    |\n105 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n\n",
              "warning: name `PTE` contains a capitalized acronym\n  --> src/components/pagetable/mod.rs:18:19\n   |\n18 | pub(crate) struct PTE(pub usize);\n   |                   ^^^ help: consider making the acronym lowercase, except the initial letter: `Pte`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n   = note: `#[warn(clippy::upper_case_acronyms)]` on by default\n\n",
              "warning: `assert!(true)` will be optimized out by the compiler\n  --> src/components/pagetable/mod.rs:52:9\n   |\n52 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: remove it\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n   = note: `#[warn(clippy::assertions_on_constants)]` on by default\n\n",
              "warning: `assert!(true)` will be optimized out by the compiler\n   --> src/components/pagetable/mod.rs:105:9\n    |\n105 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n\n"
            ]
          }
        },
        {
          "file": "src/components/common.rs",
          "features": "",
          "count": 6,
          "kinds": {
            "Clippy(Warn)": [
              "warning: function `parse_dtb_info` is never used\n  --> src/components/common.rs:77:15\n   |\n77 | pub(crate) fn parse_dtb_info() {\n   |               ^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n",
              "warning: function `parse_dtb_info` is never used\n  --> src/components/common.rs:77:15\n   |\n77 | pub(crate) fn parse_dtb_info() {\n   |               ^^^^^^^^^^^^^^\n\n"
            ],
            "Unformatted": [
              "file: /home/runner/check/batch_2/Byte-OS/polyhal/src/components/common.rs (original lines from 73 to 74)\n-/// \n-/// Display information when booting \n+///\n+/// Display information when booting\n",
              "file: /home/runner/check/batch_2/Byte-OS/polyhal/src/components/common.rs (original lines from 73 to 74)\n-/// \n-/// Display information when booting \n+///\n+/// Display information when booting\n",
              "file: /home/runner/check/batch_2/Byte-OS/polyhal/src/components/common.rs (original lines from 73 to 74)\n-/// \n-/// Display information when booting \n+///\n+/// Display information when booting\n",
              "file: /home/runner/check/batch_2/Byte-OS/polyhal/src/components/common.rs (original lines from 73 to 74)\n-/// \n-/// Display information when booting \n+///\n+/// Display information when booting\n"
            ]
          }
        },
        {
          "file": "src/components/arch/x86_64/idt.rs",
          "features": "",
          "count": 5,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unused imports: `Entry`, `HandlerFunc`\n --> src/components/arch/x86_64/idt.rs:2:31\n  |\n2 | use x86_64::structures::idt::{Entry, HandlerFunc, InterruptDescriptorTable};\n  |                               ^^^^^  ^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n",
              "warning: unused imports: `Entry`, `HandlerFunc`\n --> src/components/arch/x86_64/idt.rs:2:31\n  |\n2 | use x86_64::structures::idt::{Entry, HandlerFunc, InterruptDescriptorTable};\n  |                               ^^^^^  ^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n",
              "warning: variable does not need to be mutable\n  --> src/components/arch/x86_64/idt.rs:22:13\n   |\n22 |         let mut idt = Self(InterruptDescriptorTable::new());\n   |             ----^^^\n   |             |\n   |             help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\n",
              "warning: constant `NUM_INT` is never used\n --> src/components/arch/x86_64/idt.rs:4:7\n  |\n4 | const NUM_INT: usize = 256;\n  |       ^^^^^^^\n  |\n  = note: `#[warn(dead_code)]` on by default\n\n",
              "warning: returning the result of a `let` binding from a block\n  --> src/components/arch/x86_64/idt.rs:35:9\n   |\n22 |         let mut idt = Self(InterruptDescriptorTable::new());\n   |         ---------------------------------------------------- unnecessary `let` binding\n...\n35 |         idt\n   |         ^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n   = note: `#[warn(clippy::let_and_return)]` on by default\nhelp: return the expression directly\n   |\n22 ~         \n23 | \n ...\n34 |         }\n35 ~         Self(InterruptDescriptorTable::new())\n   |\n\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 4,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal, checker=Lockbud\n// toolchain=nightly-2023-12-01, target=loongarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target loongarch64-unknown-none \n// timestamp=2025-03-07 21:52:35.90642762 +08:00:00\n   Compiling lock_api v0.4.11\n   Compiling scopeguard v1.2.0\n   Compiling bit_field v0.10.2\n   Compiling bitflags v1.3.2\n   Compiling bitflags v2.5.0\n   Compiling log v0.4.21\n   Compiling loongArch64 v0.2.4\n[2025-03-07T13:52:36Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.21/src/lib.rs:1408:11: 1408:39 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.21/src/lib.rs:1411:13: 1411:55 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-03-07T13:52:36Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling cfg-if v1.0.0\n   Compiling fdt v0.1.5\n   Compiling spin v0.9.8\n   Compiling polyhal v0.1.3 (/home/runner/check/batch_1/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `docsrs`, `feature`, and `test` and 30 more\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused import: `DebugConsole`\n --> src/components/boot/loongarch64.rs:6:48\n  |\n6 |         debug_console::{display_info, println, DebugConsole},\n  |                                                ^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n --> src/components/debug_console/loongarch64.rs:5:11\n  |\n5 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n --> src/components/debug_console/loongarch64.rs:7:7\n  |\n7 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> src/components/boot/loongarch64.rs:22:5\n   |\n22 | /     core::arch::asm!(\"\n23 | |         ori         $t0, $zero, 0x1     # CSR_DMW1_PLV0\n24 | |         lu52i.d     $t0, $t0, -2048     # UC, PLV0, 0x8000 xxxx xxxx xxxx\n25 | |         csrwr       $t0, 0x180          # LOONGARCH_CSR_DMWIN0\n...  |\n62 | |         options(noreturn),\n63 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> src/components/boot/loongarch64.rs:73:5\n   |\n73 | /     core::arch::asm!(\n74 | |         \"\n75 | |         ori          $t0, $zero, 0x1     # CSR_DMW1_PLV0\n76 | |         lu52i.d      $t0, $t0, -2048     # UC, PLV0, 0x8000 xxxx xxxx xxxx\n...  |\n92 | |         entry = sym _rust_secondary_main,\n93 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/loongarch64.rs:135:5\n    |\n135 | /     core::arch::asm!(\n136 | |         // Save Kernel Context.\n137 | |         save_callee_regs!(),\n...   |\n142 | |         options(noreturn)\n143 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/loongarch64.rs:167:5\n    |\n167 | /     core::arch::asm!(\n168 | |         // Save Kernel Context.\n169 | |         save_callee_regs!(),\n...   |\n181 | |         options(noreturn)\n182 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/loongarch64.rs:188:9\n    |\n188 | /         asm!(\n189 | |             \"\n190 | |                 move    $a0, $tp\n191 | |                 ret\n192 | |             \",\n193 | |             options(noreturn)\n194 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 11 warnings\nerror: could not compile `polyhal` (lib) due to 5 previous errors; 11 warnings emitted\n",
              "// pkg_name=polyhal, checker=Lockbud\n// toolchain=nightly-2023-12-01, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-none \n// timestamp=2025-03-07 21:52:33.226470771 +08:00:00\n   Compiling paste v1.0.14\n   Compiling rustversion v1.0.15\n   Compiling bitflags v2.5.0\n   Compiling bit_field v0.10.2\n   Compiling bitflags v1.3.2\n   Compiling raw-cpuid v10.7.0\n   Compiling lock_api v0.4.11\n   Compiling scopeguard v1.2.0\n   Compiling x86 v0.52.0\n   Compiling volatile v0.4.6\n   Compiling bit v0.1.1\n   Compiling spin v0.9.8\n   Compiling multiboot v0.8.0\n   Compiling raw-cpuid v11.0.1\n   Compiling x86_64 v0.14.12\n   Compiling cfg-if v1.0.0\n   Compiling log v0.4.21\n[2025-03-07T13:52:34Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.21/src/lib.rs:1408:11: 1408:39 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.21/src/lib.rs:1411:13: 1411:55 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-03-07T13:52:34Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\nerror[E0053]: method `steps_between` has an incompatible type for trait\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/x86_64-0.14.12/src/addr.rs:382:51\n    |\n382 |     fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n    |                                                   ^^^^^^^^^^^^^ expected `(usize, Option<usize>)`, found `core::option::Option<usize>`\n    |\n    = note: expected signature `fn(&addr::VirtAddr, &addr::VirtAddr) -> (usize, core::option::Option<usize>)`\n               found signature `fn(&addr::VirtAddr, &addr::VirtAddr) -> core::option::Option<usize>`\nhelp: change the output type to match the trait\n    |\n382 |     fn steps_between(start: &Self, end: &Self) -> (usize, core::option::Option<usize>) {\n    |                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `steps_between` has an incompatible type for trait\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/x86_64-0.14.12/src/structures/paging/page.rs:282:51\n    |\n282 |     fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n    |                                                   ^^^^^^^^^^^^^ expected `(usize, Option<usize>)`, found `core::option::Option<usize>`\n    |\n    = note: expected signature `fn(&structures::paging::page::Page<_>, &structures::paging::page::Page<_>) -> (usize, core::option::Option<usize>)`\n               found signature `fn(&structures::paging::page::Page<_>, &structures::paging::page::Page<_>) -> core::option::Option<usize>`\nhelp: change the output type to match the trait\n    |\n282 |     fn steps_between(start: &Self, end: &Self) -> (usize, core::option::Option<usize>) {\n    |                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n   Compiling fdt v0.1.5\nFor more information about this error, try `rustc --explain E0053`.\nerror: could not compile `x86_64` (lib) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=polyhal, checker=Lockbud\n// toolchain=nightly-2023-12-01, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none \n// timestamp=2025-03-07 21:52:31.089483751 +08:00:00\n   Compiling tock-registers v0.8.1\n   Compiling lock_api v0.4.11\n   Compiling scopeguard v1.2.0\n   Compiling cfg-if v1.0.0\n   Compiling fdt v0.1.5\n   Compiling bitflags v2.5.0\n   Compiling arm_gicv2 v0.1.0\n   Compiling aarch64-cpu v9.4.0\n   Compiling spin v0.9.8\n   Compiling arm_pl011 v0.1.0\n   Compiling log v0.4.21\n[2025-03-07T13:52:31Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.21/src/lib.rs:1408:11: 1408:39 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.21/src/lib.rs:1411:13: 1411:55 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-03-07T13:52:31Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling polyhal v0.1.3 (/home/runner/check/batch_1/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `docsrs`, `feature`, and `test` and 30 more\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/boot/aarch64.rs:115:5\n    |\n115 | /     core::arch::asm!(\"\n116 | |         mrs     x19, mpidr_el1\n117 | |         and     x19, x19, #0xffffff     // get current CPU id\n118 | |         mov     x20, x0                 // save DTB pointer\n...   |\n146 | |         options(noreturn),\n147 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/boot/aarch64.rs:154:5\n    |\n154 | /     core::arch::asm!(\"\n155 | |         mrs     x19, mpidr_el1\n156 | |         and     x19, x19, #0xffffff     // get current CPU id\n...   |\n173 | |         options(noreturn),\n174 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/aarch64.rs:128:5\n    |\n128 | /     core::arch::asm!(\n129 | |         // Save Kernel Context.\n130 | |         save_callee_regs!(),\n...   |\n135 | |         options(noreturn)\n136 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/aarch64.rs:160:5\n    |\n160 | /     core::arch::asm!(\n161 | |         // Save Kernel Context.\n162 | |         save_callee_regs!(),\n...   |\n174 | |         options(noreturn)\n175 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/aarch64.rs:182:9\n    |\n182 | /         core::arch::asm!(\n183 | |             \"\n184 | |                 mrs      x0, tpidr_el1\n185 | |                 ret\n186 | |             \",\n187 | |             options(noreturn)\n188 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_option` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> src/lib.rs:15:46\n   |\n15 | #![cfg_attr(target_arch = \"aarch64\", feature(const_option))]\n   |                                              ^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> src/addr.rs:52:33\n   |\n52 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> src/addr.rs:126:33\n    |\n126 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nwarning: `polyhal` (lib) generated 9 warnings\nerror: could not compile `polyhal` (lib) due to 7 previous errors; 9 warnings emitted\n",
              "// pkg_name=polyhal, checker=Lockbud\n// toolchain=nightly-2023-12-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-03-07 21:52:27.071607601 +08:00:00\n   Compiling proc-macro2 v1.0.79\n   Compiling unicode-ident v1.0.12\n   Compiling autocfg v1.2.0\n   Compiling scopeguard v1.2.0\n   Compiling riscv v0.11.1\n   Compiling static_assertions v1.1.0\n   Compiling sbi-spec v0.0.4\n   Compiling critical-section v1.1.2\n   Compiling embedded-hal v1.0.0\n   Compiling sbi-rt v0.0.2\n   Compiling bitflags v2.5.0\n   Compiling lock_api v0.4.11\n   Compiling fdt v0.1.5\n   Compiling quote v1.0.35\n   Compiling spin v0.9.8\n   Compiling syn v2.0.58\n   Compiling cfg-if v1.0.0\n   Compiling log v0.4.21\n[2025-03-07T13:52:28Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.21/src/lib.rs:1408:11: 1408:39 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.21/src/lib.rs:1411:13: 1411:55 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-03-07T13:52:28Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling polyhal-macro v0.1.3 (/home/runner/check/batch_1/Byte-OS/polyhal/polyhal-macro)\n   Compiling polyhal v0.1.3 (/home/runner/check/batch_1/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `docsrs`, `feature`, and `test` and 30 more\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> src/components/pagetable/riscv64.rs:23:15\n   |\n23 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> src/components/pagetable/riscv64.rs:39:19\n   |\n39 |         #[cfg(not(c906))]\n   |                   ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> src/components/pagetable/riscv64.rs:94:15\n   |\n94 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> src/components/pagetable/riscv64.rs:96:15\n   |\n96 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> src/components/pagetable/riscv64.rs:98:15\n   |\n98 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/components/pagetable/riscv64.rs:100:15\n    |\n100 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/components/pagetable/riscv64.rs:102:15\n    |\n102 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused macro definition: `PerCPUReservedOffset`\n  --> src/components/percpu/riscv64.rs:18:18\n   |\n18 | pub(crate) macro PerCPUReservedOffset($field: ident) {\n   |                  ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_macros)]` on by default\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> src/components/boot/riscv64.rs:39:5\n   |\n39 | /     core::arch::asm!(\n40 | |         // Chcek boot core\n41 | |         \"\n42 | |             beqz    a0, 2f\n...  |\n75 | |         options(noreturn),\n76 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/boot/riscv64.rs:85:5\n    |\n85  | /     core::arch::asm!(\n86  | |         // 1. Set Stack Pointer.\n87  | |         // sp = a1(given Stack Pointer.)\n88  | |         \"\n...   |\n115 | |         options(noreturn)\n116 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> src/addr.rs:52:33\n   |\n52 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> src/addr.rs:126:33\n    |\n126 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nwarning: `polyhal` (lib) generated 16 warnings\nerror: could not compile `polyhal` (lib) due to 7 previous errors; 16 warnings emitted\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 4,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal, checker=Rapx\n// toolchain=nightly-2023-12-01, target=loongarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target loongarch64-unknown-none \n// timestamp=2025-02-16 22:49:03.595483991 +08:00:00\n   Compiling proc-macro2 v1.0.79\n   Compiling unicode-ident v1.0.12\n   Compiling autocfg v1.2.0\n    Checking scopeguard v1.2.0\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n    Checking fdt v0.1.5\n    Checking loongArch64 v0.2.4\n    Checking cfg-if v1.0.0\n   Compiling lock_api v0.4.11\n    Checking log v0.4.21\n    Checking bitflags v2.5.0\n   Compiling quote v1.0.35\n   Compiling syn v2.0.58\n    Checking spin v0.9.8\n   Compiling polyhal-macro v0.1.3 (/home/runner/check/batch_2/Byte-OS/polyhal/polyhal-macro)\n    Checking polyhal v0.1.3 (/home/runner/check/batch_2/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused import: `DebugConsole`\n --> src/components/boot/loongarch64.rs:6:48\n  |\n6 |         debug_console::{display_info, println, DebugConsole},\n  |                                                ^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n --> src/components/debug_console/loongarch64.rs:5:11\n  |\n5 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n --> src/components/debug_console/loongarch64.rs:7:7\n  |\n7 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> src/components/boot/loongarch64.rs:22:5\n   |\n22 | /     core::arch::asm!(\"\n23 | |         ori         $t0, $zero, 0x1     # CSR_DMW1_PLV0\n24 | |         lu52i.d     $t0, $t0, -2048     # UC, PLV0, 0x8000 xxxx xxxx xxxx\n25 | |         csrwr       $t0, 0x180          # LOONGARCH_CSR_DMWIN0\n...  |\n62 | |         options(noreturn),\n63 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> src/components/boot/loongarch64.rs:73:5\n   |\n73 | /     core::arch::asm!(\n74 | |         \"\n75 | |         ori          $t0, $zero, 0x1     # CSR_DMW1_PLV0\n76 | |         lu52i.d      $t0, $t0, -2048     # UC, PLV0, 0x8000 xxxx xxxx xxxx\n...  |\n92 | |         entry = sym _rust_secondary_main,\n93 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/loongarch64.rs:135:5\n    |\n135 | /     core::arch::asm!(\n136 | |         // Save Kernel Context.\n137 | |         save_callee_regs!(),\n138 | |         // Restore Kernel Context.\n...   |\n142 | |         options(noreturn)\n143 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/loongarch64.rs:167:5\n    |\n167 | /     core::arch::asm!(\n168 | |         // Save Kernel Context.\n169 | |         save_callee_regs!(),\n170 | |         // Switch to new page table.\n...   |\n181 | |         options(noreturn)\n182 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/loongarch64.rs:188:9\n    |\n188 | /         asm!(\n189 | |             \"\n190 | |                 move    $a0, $tp\n191 | |                 ret\n192 | |             \",\n193 | |             options(noreturn)\n194 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 11 warnings\nerror: could not compile `polyhal` (lib) due to 5 previous errors; 11 warnings emitted\n14:49:07|RAP|ERROR|: Finished with non-zero exit code.\n",
              "// pkg_name=polyhal, checker=Rapx\n// toolchain=nightly-2023-12-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-02-16 22:48:49.506302392 +08:00:00\n   Compiling proc-macro2 v1.0.79\n   Compiling autocfg v1.2.0\n   Compiling unicode-ident v1.0.12\n   Compiling riscv v0.11.1\n    Checking static_assertions v1.1.0\n    Checking scopeguard v1.2.0\n    Checking sbi-spec v0.0.4\n    Checking embedded-hal v1.0.0\n    Checking critical-section v1.1.2\n    Checking sbi-rt v0.0.2\n   Compiling lock_api v0.4.11\n    Checking cfg-if v1.0.0\n    Checking bitflags v2.5.0\n    Checking fdt v0.1.5\n   Compiling quote v1.0.35\n   Compiling syn v2.0.58\n    Checking spin v0.9.8\n    Checking log v0.4.21\n   Compiling polyhal-macro v0.1.3 (/home/runner/check/batch_2/Byte-OS/polyhal/polyhal-macro)\n    Checking polyhal v0.1.3 (/home/runner/check/batch_2/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> src/components/pagetable/riscv64.rs:23:15\n   |\n23 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> src/components/pagetable/riscv64.rs:39:19\n   |\n39 |         #[cfg(not(c906))]\n   |                   ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> src/components/pagetable/riscv64.rs:94:15\n   |\n94 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> src/components/pagetable/riscv64.rs:96:15\n   |\n96 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> src/components/pagetable/riscv64.rs:98:15\n   |\n98 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/components/pagetable/riscv64.rs:100:15\n    |\n100 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/components/pagetable/riscv64.rs:102:15\n    |\n102 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused macro definition: `PerCPUReservedOffset`\n  --> src/components/percpu/riscv64.rs:18:18\n   |\n18 | pub(crate) macro PerCPUReservedOffset($field: ident) {\n   |                  ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_macros)]` on by default\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> src/components/boot/riscv64.rs:39:5\n   |\n39 | /     core::arch::asm!(\n40 | |         // Chcek boot core\n41 | |         \"\n42 | |             beqz    a0, 2f\n...  |\n75 | |         options(noreturn),\n76 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/boot/riscv64.rs:85:5\n    |\n85  | /     core::arch::asm!(\n86  | |         // 1. Set Stack Pointer.\n87  | |         // sp = a1(given Stack Pointer.)\n88  | |         \"\n...   |\n115 | |         options(noreturn)\n116 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n154 | |         // Restore Kernel Context.\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n186 | |         // Switch to new page table.\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 16 warnings\nerror: could not compile `polyhal` (lib) due to 5 previous errors; 16 warnings emitted\n14:48:53|RAP|ERROR|: Finished with non-zero exit code.\n",
              "// pkg_name=polyhal, checker=Rapx\n// toolchain=nightly-2023-12-01, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target aarch64-unknown-none \n// timestamp=2025-02-16 22:48:53.703921426 +08:00:00\n   Compiling proc-macro2 v1.0.79\n   Compiling autocfg v1.2.0\n   Compiling unicode-ident v1.0.12\n    Checking tock-registers v0.8.1\n    Checking scopeguard v1.2.0\n    Checking arm_pl011 v0.1.0\n    Checking arm_gicv2 v0.1.0\n    Checking aarch64-cpu v9.4.0\n    Checking bitflags v2.5.0\n   Compiling lock_api v0.4.11\n    Checking cfg-if v1.0.0\n    Checking fdt v0.1.5\n   Compiling quote v1.0.35\n   Compiling syn v2.0.58\n    Checking spin v0.9.8\n    Checking log v0.4.21\n   Compiling polyhal-macro v0.1.3 (/home/runner/check/batch_2/Byte-OS/polyhal/polyhal-macro)\n    Checking polyhal v0.1.3 (/home/runner/check/batch_2/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/boot/aarch64.rs:115:5\n    |\n115 | /     core::arch::asm!(\"\n116 | |         mrs     x19, mpidr_el1\n117 | |         and     x19, x19, #0xffffff     // get current CPU id\n118 | |         mov     x20, x0                 // save DTB pointer\n...   |\n146 | |         options(noreturn),\n147 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/boot/aarch64.rs:154:5\n    |\n154 | /     core::arch::asm!(\"\n155 | |         mrs     x19, mpidr_el1\n156 | |         and     x19, x19, #0xffffff     // get current CPU id\n...   |\n173 | |         options(noreturn),\n174 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/aarch64.rs:128:5\n    |\n128 | /     core::arch::asm!(\n129 | |         // Save Kernel Context.\n130 | |         save_callee_regs!(),\n131 | |         // Restore Kernel Context.\n...   |\n135 | |         options(noreturn)\n136 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/aarch64.rs:160:5\n    |\n160 | /     core::arch::asm!(\n161 | |         // Save Kernel Context.\n162 | |         save_callee_regs!(),\n163 | |         // Switch to new page table.\n...   |\n174 | |         options(noreturn)\n175 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/aarch64.rs:182:9\n    |\n182 | /         core::arch::asm!(\n183 | |             \"\n184 | |                 mrs      x0, tpidr_el1\n185 | |                 ret\n186 | |             \",\n187 | |             options(noreturn)\n188 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 8 warnings\nerror: could not compile `polyhal` (lib) due to 5 previous errors; 8 warnings emitted\n14:48:58|RAP|ERROR|: Finished with non-zero exit code.\n",
              "// pkg_name=polyhal, checker=Rapx\n// toolchain=nightly-2023-12-01, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-none \n// timestamp=2025-02-16 22:48:58.115313874 +08:00:00\n   Compiling proc-macro2 v1.0.79\n   Compiling unicode-ident v1.0.12\n   Compiling rustversion v1.0.15\n   Compiling autocfg v1.2.0\n   Compiling paste v1.0.14\n    Checking bit_field v0.10.2\n    Checking bitflags v2.5.0\n   Compiling lock_api v0.4.11\n    Checking bitflags v1.3.2\n    Checking raw-cpuid v10.7.0\n   Compiling quote v1.0.35\n   Compiling x86 v0.52.0\n    Checking scopeguard v1.2.0\n    Checking volatile v0.4.6\n    Checking x86_64 v0.14.12\n   Compiling syn v2.0.58\n    Checking bit v0.1.1\n    Checking spin v0.9.8\n    Checking multiboot v0.8.0\n    Checking raw-cpuid v11.0.1\n    Checking x2apic v0.4.3\n    Checking fdt v0.1.5\n    Checking cfg-if v1.0.0\n    Checking log v0.4.21\n   Compiling polyhal-macro v0.1.3 (/home/runner/check/batch_2/Byte-OS/polyhal/polyhal-macro)\n    Checking polyhal v0.1.3 (/home/runner/check/batch_2/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused imports: `Entry` and `HandlerFunc`\n --> src/components/arch/x86_64/idt.rs:2:31\n  |\n2 | use x86_64::structures::idt::{Entry, HandlerFunc, InterruptDescriptorTable};\n  |                               ^^^^^  ^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/x86_64.rs:150:5\n    |\n150 | /     core::arch::asm!(\n151 | |         // Save Kernel Context.\n152 | |         \"\n153 | |         pop     r8 \n...   |\n162 | |         options(noreturn)\n163 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> src/components/kcontext/x86_64.rs:187:5\n    |\n187 | /     core::arch::asm!(\n188 | |         // consume the return address(rip) in the stack\n189 | |         // for consistency with context_switch.\n190 | |         // and save page table to r9\n...   |\n207 | |         options(noreturn)\n208 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\nwarning: variable does not need to be mutable\n  --> src/components/arch/x86_64/idt.rs:22:13\n   |\n22 |         let mut idt = Self(InterruptDescriptorTable::new());\n   |             ----^^^\n   |             |\n   |             help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 10 warnings\nerror: could not compile `polyhal` (lib) due to 2 previous errors; 10 warnings emitted\n14:49:03|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 4,
          "kinds": {
            "Cargo": [
              "// pkg_name=polyhal, checker=SemverChecks\n// toolchain=nightly-2023-12-01, target=loongarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target loongarch64-unknown-none \n// timestamp=2025-02-16 22:47:34.611723026 +08:00:00\n    Building polyhal v0.1.3 (current)\n       Built [   3.579s] (current)\n     Parsing polyhal v0.1.3 (current)\nerror: unsupported rustdoc format v39 for file: /home/runner/check/batch_2/Byte-OS/polyhal/target/semver-checks/local-polyhal-0_1_3-797a1c6a7ad364fa/target/loongarch64-unknown-none/doc/polyhal.json\n",
              "// pkg_name=polyhal, checker=SemverChecks\n// toolchain=nightly-2023-12-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-02-16 22:47:43.564096812 +08:00:00\n    Building polyhal v0.1.3 (current)\n       Built [   0.704s] (current)\n     Parsing polyhal v0.1.3 (current)\nerror: unsupported rustdoc format v39 for file: /home/runner/check/batch_2/Byte-OS/polyhal/target/semver-checks/local-polyhal-0_1_3-797a1c6a7ad364fa/target/riscv64gc-unknown-none-elf/doc/polyhal.json\n",
              "// pkg_name=polyhal, checker=SemverChecks\n// toolchain=nightly-2023-12-01, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \n// timestamp=2025-03-07 17:21:44.532802256 +08:00:00\n    Building polyhal v0.1.3 (current)\n       Built [   2.338s] (current)\n     Parsing polyhal v0.1.3 (current)\n      Parsed [   0.009s] (current)\n    Building polyhal v0.1.3 (baseline)\nerror: running cargo-doc on crate 'polyhal' failed with output:\n-----\n   Compiling proc-macro2 v1.0.94\n   Compiling unicode-ident v1.0.18\n   Compiling autocfg v1.4.0\n   Compiling paste v1.0.15\n   Compiling rustversion v1.0.20\n    Checking bitflags v1.3.2\n    Checking bit_field v0.10.2\n    Checking bitflags v2.9.0\n    Checking raw-cpuid v10.7.0\n   Compiling lock_api v0.4.12\n   Compiling quote v1.0.39\n    Checking scopeguard v1.2.0\n   Compiling x86 v0.52.0\n    Checking volatile v0.4.6\n    Checking x86_64 v0.14.13\n   Compiling syn v2.0.99\n    Checking bit v0.1.1\n    Checking multiboot v0.8.0\n    Checking spin v0.9.8\n    Checking raw-cpuid v11.5.0\n    Checking x2apic v0.4.3\n    Checking cfg-if v1.0.0\n    Checking fdt v0.1.5\n    Checking log v0.4.26\n   Compiling polyhal-macro v0.1.3\n Documenting polyhal v0.1.3\nerror[E0252]: the name `init_early` is defined multiple times\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.1.3/src/components/debug_console/x86_64.rs:18:16\n   |\n15 | pub(crate) use vga_text::init as init_early;\n   |                ---------------------------- previous import of the value `init_early` here\n...\n18 | pub(crate) use graphic::init as init_early;\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `init_early` reimported here\n   |\n   = note: `init_early` must be defined only once in the value namespace of this module\nhelp: you can use `as` to change the binding name of the import\n   |\n18 | pub(crate) use graphic::init as other_init_early;\n   |                              ~~~~~~~~~~~~~~~~~~~\n\nFor more information about this error, try `rustc --explain E0252`.\nerror: could not document `polyhal`\n\n-----\n\nerror: failed to build rustdoc for crate polyhal v0.1.3\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add polyhal@=0.1.3 --features boot,default,graphic,kcontext,logger,multicore,trap,vga_text &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal v0.1.3\n",
              "// pkg_name=polyhal, checker=SemverChecks\n// toolchain=nightly-2023-12-01, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none \n// timestamp=2025-02-16 22:47:38.939906672 +08:00:00\n    Building polyhal v0.1.3 (current)\n       Built [   1.743s] (current)\n     Parsing polyhal v0.1.3 (current)\nerror: unsupported rustdoc format v39 for file: /home/runner/check/batch_2/Byte-OS/polyhal/target/semver-checks/local-polyhal-0_1_3-797a1c6a7ad364fa/target/aarch64-unknown-none/doc/polyhal.json\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 4,
          "kinds": {
            "Outdated": [
              "pkg=polyhal, checker=Outdated\ntoolchain=nightly-2023-12-01, target=loongarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-02-16 22:49:20.557077503 +08:00:00\n\nName                    Project  Compat   Latest  Kind         Platform\n----                    -------  ------   ------  ----         --------\naarch64-cpu             9.4.0    ---      10.0.0  Normal       cfg(target_arch = \"aarch64\")\nbitflags                2.5.0    2.8.0    2.8.0   Normal       ---\nbuddy_system_allocator  0.9.1    ---      0.11.0  Development  ---\nlog                     0.4.21   0.4.25   0.4.25  Normal       ---\nraw-cpuid               11.0.1   11.3.0   11.3.0  Normal       cfg(target_arch = \"x86_64\")\nriscv                   0.11.1   ---      0.12.1  Normal       cfg(target_arch = \"riscv64\")\nsbi-rt                  0.0.2    ---      0.0.3   Normal       cfg(target_arch = \"riscv64\")\ntock-registers          0.8.1    ---      0.9.0   Normal       cfg(target_arch = \"aarch64\")\nx2apic                  0.4.3    ---      0.5.0   Normal       cfg(target_arch = \"x86_64\")\nx86_64                  0.14.12  0.14.13  0.15.2  Normal       cfg(target_arch = \"x86_64\")\n",
              "pkg=polyhal, checker=Outdated\ntoolchain=nightly-2023-12-01, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-02-16 22:49:19.780899768 +08:00:00\n\nName                    Project  Compat   Latest  Kind         Platform\n----                    -------  ------   ------  ----         --------\naarch64-cpu             9.4.0    ---      10.0.0  Normal       cfg(target_arch = \"aarch64\")\nbitflags                2.5.0    2.8.0    2.8.0   Normal       ---\nbuddy_system_allocator  0.9.1    ---      0.11.0  Development  ---\nlog                     0.4.21   0.4.25   0.4.25  Normal       ---\nraw-cpuid               11.0.1   11.3.0   11.3.0  Normal       cfg(target_arch = \"x86_64\")\nriscv                   0.11.1   ---      0.12.1  Normal       cfg(target_arch = \"riscv64\")\nsbi-rt                  0.0.2    ---      0.0.3   Normal       cfg(target_arch = \"riscv64\")\ntock-registers          0.8.1    ---      0.9.0   Normal       cfg(target_arch = \"aarch64\")\nx2apic                  0.4.3    ---      0.5.0   Normal       cfg(target_arch = \"x86_64\")\nx86_64                  0.14.12  0.14.13  0.15.2  Normal       cfg(target_arch = \"x86_64\")\n",
              "pkg=polyhal, checker=Outdated\ntoolchain=nightly-2023-12-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-02-16 22:49:20.038959598 +08:00:00\n\nName                    Project  Compat   Latest  Kind         Platform\n----                    -------  ------   ------  ----         --------\naarch64-cpu             9.4.0    ---      10.0.0  Normal       cfg(target_arch = \"aarch64\")\nbitflags                2.5.0    2.8.0    2.8.0   Normal       ---\nbuddy_system_allocator  0.9.1    ---      0.11.0  Development  ---\nlog                     0.4.21   0.4.25   0.4.25  Normal       ---\nraw-cpuid               11.0.1   11.3.0   11.3.0  Normal       cfg(target_arch = \"x86_64\")\nriscv                   0.11.1   ---      0.12.1  Normal       cfg(target_arch = \"riscv64\")\nsbi-rt                  0.0.2    ---      0.0.3   Normal       cfg(target_arch = \"riscv64\")\ntock-registers          0.8.1    ---      0.9.0   Normal       cfg(target_arch = \"aarch64\")\nx2apic                  0.4.3    ---      0.5.0   Normal       cfg(target_arch = \"x86_64\")\nx86_64                  0.14.12  0.14.13  0.15.2  Normal       cfg(target_arch = \"x86_64\")\n",
              "pkg=polyhal, checker=Outdated\ntoolchain=nightly-2023-12-01, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-02-16 22:49:20.291078056 +08:00:00\n\nName                    Project  Compat   Latest  Kind         Platform\n----                    -------  ------   ------  ----         --------\naarch64-cpu             9.4.0    ---      10.0.0  Normal       cfg(target_arch = \"aarch64\")\nbitflags                2.5.0    2.8.0    2.8.0   Normal       ---\nbuddy_system_allocator  0.9.1    ---      0.11.0  Development  ---\nlog                     0.4.21   0.4.25   0.4.25  Normal       ---\nraw-cpuid               11.0.1   11.3.0   11.3.0  Normal       cfg(target_arch = \"x86_64\")\nriscv                   0.11.1   ---      0.12.1  Normal       cfg(target_arch = \"riscv64\")\nsbi-rt                  0.0.2    ---      0.0.3   Normal       cfg(target_arch = \"riscv64\")\ntock-registers          0.8.1    ---      0.9.0   Normal       cfg(target_arch = \"aarch64\")\nx2apic                  0.4.3    ---      0.5.0   Normal       cfg(target_arch = \"x86_64\")\nx86_64                  0.14.12  0.14.13  0.15.2  Normal       cfg(target_arch = \"x86_64\")\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 4,
          "kinds": {
            "Semver Violation": [
              "pkg=polyhal, checker=SemverChecks\ntoolchain=nightly-2023-12-01, target=loongarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target loongarch64-unknown-none \ntimestamp=2025-03-07 17:21:38.643939786 +08:00:00\n\n\nstdout:\n\n--- failure feature_missing: package feature removed or renamed ---\n\nDescription:\nA feature has been removed from this package's Cargo.toml. This will break downstream crates which enable that feature.\n        ref: https://doc.rust-lang.org/cargo/reference/semver.html#cargo-feature-remove\n       impl: https://github.com/obi1kenobi/cargo-semver-checks/tree/v0.39.0/src/lints/feature_missing.ron\n\nFailed in:\n  feature kcontext in the package's Cargo.toml\n  feature multicore in the package's Cargo.toml\n  feature vga_text in the package's Cargo.toml\n\n--- failure function_missing: pub fn removed or renamed ---\n\nDescription:\nA publicly-visible function cannot be imported by its prior path. A `pub use` may have been removed, or the function itself may have been renamed or removed entirely.\n        ref: https://doc.rust-lang.org/cargo/reference/semver.html#item-remove\n       impl: https://github.com/obi1kenobi/cargo-semver-checks/tree/v0.39.0/src/lints/function_missing.ron\n\nFailed in:\n  function polyhal::trap::enable_external_irq, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.1.3/src/components/trap/loongarch64.rs:183\n\n--- failure struct_missing: pub struct removed or renamed ---\n\nDescription:\nA publicly-visible struct cannot be imported by its prior path. A `pub use` may have been removed, or the struct itself may have been renamed or removed entirely.\n        ref: https://doc.rust-lang.org/cargo/reference/semver.html#item-remove\n       impl: https://github.com/obi1kenobi/cargo-semver-checks/tree/v0.39.0/src/lints/struct_missing.ron\n\nFailed in:\n  struct polyhal::instruction::Instruction, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.1.3/src/components/instruction/mod.rs:11\n  struct polyhal::multicore::MultiCore, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.1.3/src/components/multicore/mod.rs:18\n\nstderr:\n    Building polyhal v0.1.3 (current)\n       Built [   3.501s] (current)\n     Parsing polyhal v0.1.3 (current)\n      Parsed [   0.007s] (current)\n    Building polyhal v0.1.3 (baseline)\n       Built [   3.501s] (baseline)\n     Parsing polyhal v0.1.3 (baseline)\n      Parsed [   0.006s] (baseline)\n    Checking polyhal v0.1.3 -> v0.1.3 (no change)\n     Checked [   0.035s] 148 checks: 145 pass, 3 fail, 0 warn, 0 skip\n\n     Summary semver requires new major version: 3 major and 0 minor checks failed\n    Finished [   7.642s] polyhal\n",
              "pkg=polyhal, checker=SemverChecks\ntoolchain=nightly-2023-12-01, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none \ntimestamp=2025-03-07 17:21:44.531770622 +08:00:00\n\n\nstdout:\n\n--- failure feature_missing: package feature removed or renamed ---\n\nDescription:\nA feature has been removed from this package's Cargo.toml. This will break downstream crates which enable that feature.\n        ref: https://doc.rust-lang.org/cargo/reference/semver.html#cargo-feature-remove\n       impl: https://github.com/obi1kenobi/cargo-semver-checks/tree/v0.39.0/src/lints/feature_missing.ron\n\nFailed in:\n  feature multicore in the package's Cargo.toml\n  feature kcontext in the package's Cargo.toml\n  feature vga_text in the package's Cargo.toml\n\n--- failure struct_missing: pub struct removed or renamed ---\n\nDescription:\nA publicly-visible struct cannot be imported by its prior path. A `pub use` may have been removed, or the struct itself may have been renamed or removed entirely.\n        ref: https://doc.rust-lang.org/cargo/reference/semver.html#item-remove\n       impl: https://github.com/obi1kenobi/cargo-semver-checks/tree/v0.39.0/src/lints/struct_missing.ron\n\nFailed in:\n  struct polyhal::instruction::Instruction, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.1.3/src/components/instruction/mod.rs:11\n  struct polyhal::multicore::MultiCore, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.1.3/src/components/multicore/mod.rs:18\n\nstderr:\n    Building polyhal v0.1.3 (current)\n       Built [   1.717s] (current)\n     Parsing polyhal v0.1.3 (current)\n      Parsed [   0.007s] (current)\n    Building polyhal v0.1.3 (baseline)\n       Built [   3.657s] (baseline)\n     Parsing polyhal v0.1.3 (baseline)\n      Parsed [   0.007s] (baseline)\n    Checking polyhal v0.1.3 -> v0.1.3 (no change)\n     Checked [   0.037s] 148 checks: 146 pass, 2 fail, 0 warn, 0 skip\n\n     Summary semver requires new major version: 2 major and 0 minor checks failed\n    Finished [   5.745s] polyhal\n",
              "pkg=polyhal, checker=SemverChecks\ntoolchain=nightly-2023-12-01, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \ntimestamp=2025-03-07 17:21:51.665692384 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building polyhal v0.1.3 (current)\n       Built [   2.338s] (current)\n     Parsing polyhal v0.1.3 (current)\n      Parsed [   0.009s] (current)\n    Building polyhal v0.1.3 (baseline)\nerror: running cargo-doc on crate 'polyhal' failed with output:\n-----\n   Compiling proc-macro2 v1.0.94\n   Compiling unicode-ident v1.0.18\n   Compiling autocfg v1.4.0\n   Compiling paste v1.0.15\n   Compiling rustversion v1.0.20\n    Checking bitflags v1.3.2\n    Checking bit_field v0.10.2\n    Checking bitflags v2.9.0\n    Checking raw-cpuid v10.7.0\n   Compiling lock_api v0.4.12\n   Compiling quote v1.0.39\n    Checking scopeguard v1.2.0\n   Compiling x86 v0.52.0\n    Checking volatile v0.4.6\n    Checking x86_64 v0.14.13\n   Compiling syn v2.0.99\n    Checking bit v0.1.1\n    Checking multiboot v0.8.0\n    Checking spin v0.9.8\n    Checking raw-cpuid v11.5.0\n    Checking x2apic v0.4.3\n    Checking cfg-if v1.0.0\n    Checking fdt v0.1.5\n    Checking log v0.4.26\n   Compiling polyhal-macro v0.1.3\n Documenting polyhal v0.1.3\nerror[E0252]: the name `init_early` is defined multiple times\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.1.3/src/components/debug_console/x86_64.rs:18:16\n   |\n15 | pub(crate) use vga_text::init as init_early;\n   |                ---------------------------- previous import of the value `init_early` here\n...\n18 | pub(crate) use graphic::init as init_early;\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `init_early` reimported here\n   |\n   = note: `init_early` must be defined only once in the value namespace of this module\nhelp: you can use `as` to change the binding name of the import\n   |\n18 | pub(crate) use graphic::init as other_init_early;\n   |                              ~~~~~~~~~~~~~~~~~~~\n\nFor more information about this error, try `rustc --explain E0252`.\nerror: could not document `polyhal`\n\n-----\n\nerror: failed to build rustdoc for crate polyhal v0.1.3\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add polyhal@=0.1.3 --features boot,default,graphic,kcontext,logger,multicore,trap,vga_text &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate polyhal v0.1.3\n",
              "pkg=polyhal, checker=SemverChecks\ntoolchain=nightly-2023-12-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-03-07 17:21:53.490484237 +08:00:00\n\n\nstdout:\n\n--- failure feature_missing: package feature removed or renamed ---\n\nDescription:\nA feature has been removed from this package's Cargo.toml. This will break downstream crates which enable that feature.\n        ref: https://doc.rust-lang.org/cargo/reference/semver.html#cargo-feature-remove\n       impl: https://github.com/obi1kenobi/cargo-semver-checks/tree/v0.39.0/src/lints/feature_missing.ron\n\nFailed in:\n  feature kcontext in the package's Cargo.toml\n  feature multicore in the package's Cargo.toml\n  feature vga_text in the package's Cargo.toml\n\n--- failure pub_module_level_const_missing: pub module-level const is missing ---\n\nDescription:\nA public const is missing or renamed\n        ref: https://doc.rust-lang.org/cargo/reference/semver.html#item-remove\n       impl: https://github.com/obi1kenobi/cargo-semver-checks/tree/v0.39.0/src/lints/pub_module_level_const_missing.ron\n\nFailed in:\n  MULTI_CORE_AREA in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.1.3/src/components/consts/riscv64.rs:10\n  MULTI_CORE_AREA_SIZE in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.1.3/src/components/consts/riscv64.rs:11\n\n--- failure struct_missing: pub struct removed or renamed ---\n\nDescription:\nA publicly-visible struct cannot be imported by its prior path. A `pub use` may have been removed, or the struct itself may have been renamed or removed entirely.\n        ref: https://doc.rust-lang.org/cargo/reference/semver.html#item-remove\n       impl: https://github.com/obi1kenobi/cargo-semver-checks/tree/v0.39.0/src/lints/struct_missing.ron\n\nFailed in:\n  struct polyhal::multicore::MultiCore, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.1.3/src/components/multicore/mod.rs:18\n  struct polyhal::instruction::Instruction, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/polyhal-0.1.3/src/components/instruction/mod.rs:11\n\nstderr:\n    Building polyhal v0.1.3 (current)\n       Built [   0.686s] (current)\n     Parsing polyhal v0.1.3 (current)\n      Parsed [   0.007s] (current)\n    Building polyhal v0.1.3 (baseline)\n       Built [   0.693s] (baseline)\n     Parsing polyhal v0.1.3 (baseline)\n      Parsed [   0.006s] (baseline)\n    Checking polyhal v0.1.3 -> v0.1.3 (no change)\n     Checked [   0.036s] 148 checks: 145 pass, 3 fail, 0 warn, 0 skip\n\n     Summary semver requires new major version: 3 major and 0 minor checks failed\n    Finished [   1.716s] polyhal\n"
            ]
          }
        },
        {
          "file": "example/Cargo.lock",
          "features": "",
          "count": 4,
          "kinds": {
            "Audit": [
              "    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 732 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (44 crate dependencies)\nCrate:     critical-section\nVersion:   1.1.2\nWarning:   yanked\nDependency tree:\ncritical-section 1.1.2\n└── riscv 0.11.1\n    └── polyhal 0.1.3\n        └── example 0.1.0\n\nwarning: 1 allowed warning found\n\n{\n  \"database\": {\n    \"advisory-count\": 732,\n    \"last-commit\": \"ddccfe8aced779f7b54d27bbe7e122ecb1dda33a\",\n    \"last-updated\": \"2025-02-14T08:11:43Z\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 44\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"yanked\": [\n      {\n        \"kind\": \"yanked\",\n        \"package\": {\n          \"name\": \"critical-section\",\n          \"version\": \"1.1.2\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"7059fff8937831a9ae6f0fe4d658ffabf58f2ca96aa9dec1c889f936f705f216\",\n          \"replace\": null\n        },\n        \"advisory\": null,\n        \"affected\": null,\n        \"versions\": null\n      }\n    ]\n  }\n}",
              "    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 732 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (44 crate dependencies)\nCrate:     critical-section\nVersion:   1.1.2\nWarning:   yanked\nDependency tree:\ncritical-section 1.1.2\n└── riscv 0.11.1\n    └── polyhal 0.1.3\n        └── example 0.1.0\n\nwarning: 1 allowed warning found\n\n{\n  \"database\": {\n    \"advisory-count\": 732,\n    \"last-commit\": \"ddccfe8aced779f7b54d27bbe7e122ecb1dda33a\",\n    \"last-updated\": \"2025-02-14T08:11:43Z\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 44\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"yanked\": [\n      {\n        \"kind\": \"yanked\",\n        \"package\": {\n          \"name\": \"critical-section\",\n          \"version\": \"1.1.2\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"7059fff8937831a9ae6f0fe4d658ffabf58f2ca96aa9dec1c889f936f705f216\",\n          \"replace\": null\n        },\n        \"advisory\": null,\n        \"affected\": null,\n        \"versions\": null\n      }\n    ]\n  }\n}",
              "    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 732 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (44 crate dependencies)\nCrate:     critical-section\nVersion:   1.1.2\nWarning:   yanked\nDependency tree:\ncritical-section 1.1.2\n└── riscv 0.11.1\n    └── polyhal 0.1.3\n        └── example 0.1.0\n\nwarning: 1 allowed warning found\n\n{\n  \"database\": {\n    \"advisory-count\": 732,\n    \"last-commit\": \"ddccfe8aced779f7b54d27bbe7e122ecb1dda33a\",\n    \"last-updated\": \"2025-02-14T08:11:43Z\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 44\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"yanked\": [\n      {\n        \"kind\": \"yanked\",\n        \"package\": {\n          \"name\": \"critical-section\",\n          \"version\": \"1.1.2\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"7059fff8937831a9ae6f0fe4d658ffabf58f2ca96aa9dec1c889f936f705f216\",\n          \"replace\": null\n        },\n        \"advisory\": null,\n        \"affected\": null,\n        \"versions\": null\n      }\n    ]\n  }\n}",
              "    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 732 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (44 crate dependencies)\nCrate:     critical-section\nVersion:   1.1.2\nWarning:   yanked\nDependency tree:\ncritical-section 1.1.2\n└── riscv 0.11.1\n    └── polyhal 0.1.3\n        └── example 0.1.0\n\nwarning: 1 allowed warning found\n\n{\n  \"database\": {\n    \"advisory-count\": 732,\n    \"last-commit\": \"ddccfe8aced779f7b54d27bbe7e122ecb1dda33a\",\n    \"last-updated\": \"2025-02-14T08:11:43Z\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 44\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"yanked\": [\n      {\n        \"kind\": \"yanked\",\n        \"package\": {\n          \"name\": \"critical-section\",\n          \"version\": \"1.1.2\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"7059fff8937831a9ae6f0fe4d658ffabf58f2ca96aa9dec1c889f936f705f216\",\n          \"replace\": null\n        },\n        \"advisory\": null,\n        \"affected\": null,\n        \"versions\": null\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "src/components/boot/mod.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/mod.rs (original lines from 43 to 43)\n-/// \n+///\n",
              "file: /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/mod.rs (original lines from 43 to 43)\n-/// \n+///\n",
              "file: /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/mod.rs (original lines from 43 to 43)\n-/// \n+///\n",
              "file: /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/mod.rs (original lines from 43 to 43)\n-/// \n+///\n"
            ]
          }
        },
        {
          "file": "src/components/pagetable/aarch64.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning: operator precedence can trip the unwary\n   --> src/components/pagetable/aarch64.rs:206:10\n    |\n206 |         (self.0 >> 9 * n) & 0x1ff\n    |          ^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `self.0 >> (9 * n)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n    = note: `#[warn(clippy::precedence)]` on by default\n\n",
              "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n  --> src/components/pagetable/aarch64.rs:17:32\n   |\n17 |         self.0 = (ppn << 10) | flags.bits() as usize;\n   |                                ^^^^^^^^^^^^^^^^^^^^^ help: try: `flags.bits()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n   = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n",
              "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n  --> src/components/pagetable/aarch64.rs:42:30\n   |\n42 |         Self(ppn.to_addr() | flags.bits() as usize)\n   |                              ^^^^^^^^^^^^^^^^^^^^^ help: try: `flags.bits()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n",
              "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/components/pagetable/aarch64.rs:67:1\n   |\n67 | impl Into<MappingFlags> for PTEFlags {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: `#[warn(clippy::from_over_into)]` on by default\nhelp: replace the `Into` implementation with `From<components::pagetable::aarch64::PTEFlags>`\n   |\n67 ~ impl From<PTEFlags> for MappingFlags {\n68 ~     fn from(val: PTEFlags) -> Self {\n69 ~         if val.is_empty() {\n70 |             return MappingFlags::empty();\n ...\n73 | \n74 ~         if !val.contains(PTEFlags::AP_RO) {\n75 |             flags |= MappingFlags::W;\n76 |         }\n77 ~         if !val.contains(PTEFlags::UXN) || !val.contains(PTEFlags::PXN) {\n78 |             flags |= MappingFlags::X;\n79 |         }\n80 ~         if val.contains(PTEFlags::AP_EL0) {\n81 |             flags |= MappingFlags::U;\n82 |         }\n83 ~         if val.contains(PTEFlags::AF) {\n84 |             flags |= MappingFlags::A;\n85 |         }\n86 ~         if !val.contains(PTEFlags::NG) {\n   |\n\n"
            ]
          }
        },
        {
          "file": "src/utils/mutex_no_irq.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unsafe function's docs miss `# Safety` section\n  --> src/utils/mutex_no_irq.rs:59:5\n   |\n59 |     pub unsafe fn force_unlock(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning: unsafe function's docs miss `# Safety` section\n  --> src/utils/mutex_no_irq.rs:59:5\n   |\n59 |     pub unsafe fn force_unlock(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning: unsafe function's docs miss `# Safety` section\n  --> src/utils/mutex_no_irq.rs:59:5\n   |\n59 |     pub unsafe fn force_unlock(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning: unsafe function's docs miss `# Safety` section\n  --> src/utils/mutex_no_irq.rs:59:5\n   |\n59 |     pub unsafe fn force_unlock(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/components/boot/x86_64.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: transmute from an integer to a pointer\n  --> src/components/boot/x86_64.rs:65:19\n   |\n65 |         let ptr = mem::transmute(addr | VIRT_ADDR_START as u64);\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(addr | VIRT_ADDR_START as u64) as *const u8`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute\n   = note: `#[warn(clippy::useless_transmute)]` on by default\n\n",
              "warning: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> src/components/boot/x86_64.rs:145:5\n    |\n145 | //     CpuId::new().get_feature_info().map(|features| {\n146 | ||         // Add OSXSave flag to cr4 register if supported\n147 | ||         if features.has_xsave() {\n148 | ||             unsafe {\n...   ||\n156 | ||         }\n157 | ||     });\n    | ||______^- help: try: `if let Some(features) = CpuId::new().get_feature_info() { ... }`\n    |  |______|\n    | \n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn\n    = note: `#[warn(clippy::option_map_unit_fn)]` on by default\n\n",
              "warning: `filter` for `Some` followed by `unwrap`\n   --> src/components/boot/x86_64.rs:186:10\n    |\n186 |           .filter(Option::is_some)\n    |  __________^\n187 | |         .map(Option::unwrap)\n    | |____________________________^ help: consider using `flatten` instead: `flatten()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_filter_map\n    = note: `#[warn(clippy::option_filter_map)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "src/components/pagetable/x86_64.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: operator precedence can trip the unwary\n   --> src/components/pagetable/x86_64.rs:179:10\n    |\n179 |         (self.0 >> 9 * n) & 0x1ff\n    |          ^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `self.0 >> (9 * n)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n    = note: `#[warn(clippy::precedence)]` on by default\n\n",
              "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/components/pagetable/x86_64.rs:64:1\n   |\n64 | impl Into<MappingFlags> for PTEFlags {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: `#[warn(clippy::from_over_into)]` on by default\nhelp: replace the `Into` implementation with `From<components::pagetable::x86_64::PTEFlags>`\n   |\n64 ~ impl From<PTEFlags> for MappingFlags {\n65 ~     fn from(val: PTEFlags) -> Self {\n66 |         let mut res = MappingFlags::empty();\n67 ~         if val.contains(PTEFlags::RW) {\n68 |             res |= MappingFlags::W\n69 |         };\n70 ~         if val.contains(PTEFlags::US) {\n71 |             res |= MappingFlags::U\n72 |         };\n73 ~         if val.contains(PTEFlags::A) {\n74 |             res |= MappingFlags::A;\n75 |         }\n76 ~         if val.contains(PTEFlags::D) {\n77 |             res |= MappingFlags::D;\n78 |         }\n79 ~         if !val.contains(PTEFlags::XD) {\n   |\n\n",
              "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n   --> src/components/pagetable/x86_64.rs:136:58\n    |\n136 |         pml4[0x1ff] = PTE((_boot_mapping_pdpt as usize - VIRT_ADDR_START as usize) | 0x3);\n    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `VIRT_ADDR_START`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n    = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "src/components/kcontext/aarch64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/aarch64.rs:127:1\n    |\n127 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n",
              "warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/aarch64.rs:143:1\n    |\n143 | / pub unsafe extern \"C\" fn context_switch_pt(\n144 | |     from: *mut KContext,\n145 | |     to: *const KContext,\n146 | |     pt_token: PageTable,\n147 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/components/kcontext/loongarch64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/loongarch64.rs:134:1\n    |\n134 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n",
              "warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/loongarch64.rs:150:1\n    |\n150 | / pub unsafe extern \"C\" fn context_switch_pt(\n151 | |     from: *mut KContext,\n152 | |     to: *const KContext,\n153 | |     pt_token: PageTable,\n154 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/components/kcontext/riscv64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/riscv64.rs:150:1\n    |\n150 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n",
              "warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/riscv64.rs:166:1\n    |\n166 | / pub unsafe extern \"C\" fn context_switch_pt(\n167 | |     from: *mut KContext,\n168 | |     to: *const KContext,\n169 | |     pt_token: PageTable,\n170 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/components/kcontext/x86_64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/x86_64.rs:149:1\n    |\n149 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n",
              "warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/x86_64.rs:170:1\n    |\n170 | / pub unsafe extern \"C\" fn context_switch_pt(\n171 | |     from: *mut KContext,\n172 | |     to: *const KContext,\n173 | |     pt_token: PageTable,\n174 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/components/pagetable/riscv64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: operator precedence can trip the unwary\n   --> src/components/pagetable/riscv64.rs:205:10\n    |\n205 |         (self.0 >> 9 * n) & 0x1ff\n    |          ^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `self.0 >> (9 * n)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n    = note: `#[warn(clippy::precedence)]` on by default\n\n",
              "warning: unneeded `return` statement\n  --> src/components/pagetable/riscv64.rs:60:9\n   |\n60 | /         return self.flags().contains(PTEFlags::V)\n61 | |             && !(self.flags().contains(PTEFlags::R)\n62 | |                 || self.flags().contains(PTEFlags::W)\n63 | |                 || self.flags().contains(PTEFlags::X));\n   | |______________________________________________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n60 ~         self.flags().contains(PTEFlags::V)\n61 +             && !(self.flags().contains(PTEFlags::R)\n62 +                 || self.flags().contains(PTEFlags::W)\n63 ~                 || self.flags().contains(PTEFlags::X))\n   |\n\n"
            ]
          }
        },
        {
          "file": "src/components/percpu/riscv64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unused macro definition: `PerCPUReservedOffset`\n  --> src/components/percpu/riscv64.rs:18:18\n   |\n18 | pub(crate) macro PerCPUReservedOffset($field: ident) {\n   |                  ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_macros)]` on by default\n\n",
              "warning: struct `PerCPUReserved` is never constructed\n --> src/components/percpu/riscv64.rs:5:19\n  |\n5 | pub(crate) struct PerCPUReserved {\n  |                   ^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "src/components/trapframe/x86_64.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: methods `save` and `restore` are never used\n  --> src/components/trapframe/x86_64.rs:28:19\n   |\n26 | impl FxsaveArea {\n   | --------------- methods in this implementation\n27 |     #[inline]\n28 |     pub(crate) fn save(&mut self) {\n   |                   ^^^^\n...\n33 |     pub(crate) fn restore(&self) {\n   |                   ^^^^^^^\n\n",
              "warning: methods `save` and `restore` are never used\n  --> src/components/trapframe/x86_64.rs:28:19\n   |\n26 | impl FxsaveArea {\n   | --------------- methods in this implementation\n27 |     #[inline]\n28 |     pub(crate) fn save(&mut self) {\n   |                   ^^^^\n...\n33 |     pub(crate) fn restore(&self) {\n   |                   ^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "src/components/arch/aarch64/psci.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: empty `loop {}` wastes CPU cycles\n   --> src/components/arch/aarch64/psci.rs:98:5\n    |\n98  | /     loop {\n99  | |         // crate::arch::halt();\n100 | |     }\n    | |_____^\n    |\n    = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n    = note: `#[warn(clippy::empty_loop)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "src/components/arch/x86_64/gdt.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: redundant closure\n   --> src/components/arch/x86_64/gdt.rs:102:23\n    |\n102 |         tss.call_once(|| TaskStateSegment::new());\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `TaskStateSegment::new`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n    = note: `#[warn(clippy::redundant_closure)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "src/components/boot/loongarch64.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unused import: `DebugConsole`\n --> src/components/boot/loongarch64.rs:6:48\n  |\n6 |         debug_console::{display_info, println, DebugConsole},\n  |                                                ^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "src/components/instruction/x86_64/shutdown.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: empty `loop {}` wastes CPU cycles\n --> src/components/instruction/x86_64/shutdown.rs:6:5\n  |\n6 |     loop {}\n  |     ^^^^^^^\n  |\n  = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n  = note: `#[warn(clippy::empty_loop)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "src/components/multicore/loongarch64.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: casting function pointer `crate::components::boot::_start_secondary` to `u64`\n --> src/components/multicore/loongarch64.rs:5:19\n  |\n5 |     csr_mail_send(crate::components::boot::_start_secondary as _, hart_id, 0);\n  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::components::boot::_start_secondary as usize`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n  = note: `#[warn(clippy::fn_to_numeric_cast)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "src/components/timer/loongarch64.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: redundant closure\n --> src/components/timer/loongarch64.rs:8:38\n  |\n8 | static FREQ: Lazy<usize> = Lazy::new(|| get_timer_freq());\n  |                                      ^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `get_timer_freq`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "src/components/timer/x86_64.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: digits grouped inconsistently by underscores\n --> src/components/timer/x86_64.rs:6:34\n  |\n6 | static mut CPU_FREQ_MHZ: usize = 4000_000_000;\n  |                                  ^^^^^^^^^^^^ help: consider: `4_000_000_000`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\n  = note: `#[warn(clippy::inconsistent_digit_grouping)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "src/components/trapframe/riscv64.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: you should consider adding a `Default` implementation for `TrapFrame`\n  --> src/components/trapframe/riscv64.rs:64:5\n   |\n64 | /     pub fn new() -> Self {\n65 | |         TrapFrame {\n66 | |             x: [0usize; 32],\n67 | |             sstatus: sstatus::read(),\n...  |\n70 | |         }\n71 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n   = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n   |\n61 + impl Default for TrapFrame {\n62 +     fn default() -> Self {\n63 +         Self::new()\n64 +     }\n65 + }\n   |\n\n"
            ]
          }
        }
      ]
    },
    {
      "user": "Byte-OS",
      "repo": "polyhal",
      "pkg": "example",
      "count": 54,
      "raw_reports": [
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/macros.rs",
          "features": "",
          "count": 6,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 6,
          "kinds": {
            "Cargo": [
              "// pkg_name=example, checker=Lockbud\n// toolchain=nightly-2023-12-01, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-none \n// timestamp=2025-03-07 21:52:19.096956614 +08:00:00\n   Compiling rustversion v1.0.15\n   Compiling paste v1.0.14\n   Compiling bitflags v2.6.0\n   Compiling lock_api v0.4.11\n   Compiling scopeguard v1.2.0\n   Compiling bitflags v1.3.2\n   Compiling bit_field v0.10.2\n   Compiling raw-cpuid v10.7.0\n   Compiling volatile v0.4.6\n   Compiling x86 v0.52.0\n   Compiling spin v0.9.8\n   Compiling log v0.4.22\n   Compiling bit v0.1.1\n   Compiling byteorder v1.5.0\n[2025-03-07T13:52:20Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-03-07T13:52:20Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling multiboot v0.8.0\n   Compiling x86_64 v0.14.12\n   Compiling zerocopy v0.7.35\n   Compiling raw-cpuid v11.0.1\nerror[E0053]: method `steps_between` has an incompatible type for trait\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/x86_64-0.14.12/src/addr.rs:382:51\n    |\n382 |     fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n    |                                                   ^^^^^^^^^^^^^ expected `(usize, Option<usize>)`, found `core::option::Option<usize>`\n    |\n    = note: expected signature `fn(&addr::VirtAddr, &addr::VirtAddr) -> (usize, core::option::Option<usize>)`\n               found signature `fn(&addr::VirtAddr, &addr::VirtAddr) -> core::option::Option<usize>`\nhelp: change the output type to match the trait\n    |\n382 |     fn steps_between(start: &Self, end: &Self) -> (usize, core::option::Option<usize>) {\n    |                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `steps_between` has an incompatible type for trait\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/x86_64-0.14.12/src/structures/paging/page.rs:282:51\n    |\n282 |     fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n    |                                                   ^^^^^^^^^^^^^ expected `(usize, Option<usize>)`, found `core::option::Option<usize>`\n    |\n    = note: expected signature `fn(&structures::paging::page::Page<_>, &structures::paging::page::Page<_>) -> (usize, core::option::Option<usize>)`\n               found signature `fn(&structures::paging::page::Page<_>, &structures::paging::page::Page<_>) -> core::option::Option<usize>`\nhelp: change the output type to match the trait\n    |\n282 |     fn steps_between(start: &Self, end: &Self) -> (usize, core::option::Option<usize>) {\n    |                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n   Compiling fdt v0.1.5\nFor more information about this error, try `rustc --explain E0053`.\nerror: could not compile `x86_64` (lib) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=example, checker=Lockbud\n// toolchain=nightly-2023-12-01, target=riscv64imac-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64imac-unknown-none-elf \n// timestamp=2025-03-07 21:52:16.931675835 +08:00:00\n   Compiling scopeguard v1.2.0\n   Compiling static_assertions v1.1.0\n   Compiling lock_api v0.4.11\n   Compiling riscv v0.11.1\n   Compiling critical-section v1.1.2\n   Compiling sbi-spec v0.0.4\n   Compiling embedded-hal v1.0.0\n   Compiling byteorder v1.5.0\n   Compiling log v0.4.22\n   Compiling bitflags v2.6.0\n   Compiling zerocopy v0.7.35\n[2025-03-07T13:52:17Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-03-07T13:52:17Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling spin v0.9.8\n   Compiling sbi-rt v0.0.2\n   Compiling fdt v0.1.5\n   Compiling cfg-if v1.0.0\n   Compiling buddy_system_allocator v0.9.1\n   Compiling polyhal v0.1.3 (/home/runner/check/batch_1/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `docsrs`, `feature`, and `test` and 30 more\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:23:15\n   |\n23 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:39:19\n   |\n39 |         #[cfg(not(c906))]\n   |                   ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:94:15\n   |\n94 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:96:15\n   |\n96 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:98:15\n   |\n98 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:100:15\n    |\n100 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:102:15\n    |\n102 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused macro definition: `PerCPUReservedOffset`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/percpu/riscv64.rs:18:18\n   |\n18 | pub(crate) macro PerCPUReservedOffset($field: ident) {\n   |                  ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_macros)]` on by default\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/riscv64.rs:39:5\n   |\n39 | /     core::arch::asm!(\n40 | |         // Chcek boot core\n41 | |         \"\n42 | |             beqz    a0, 2f\n...  |\n75 | |         options(noreturn),\n76 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/riscv64.rs:85:5\n    |\n85  | /     core::arch::asm!(\n86  | |         // 1. Set Stack Pointer.\n87  | |         // sp = a1(given Stack Pointer.)\n88  | |         \"\n...   |\n115 | |         options(noreturn)\n116 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/riscv64.rs:139:5\n    |\n139 | /     asm!(\n140 | |         // 宏定义\n141 | |         r\"\n142 | |             .align 4\n...   |\n162 | |         options(noreturn)\n163 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/riscv64.rs:170:9\n    |\n170 | /         asm!(\n171 | |             r\"\n172 | |                 .align 4\n173 | |                 .altmacro\n...   |\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/riscv64.rs:219:5\n    |\n219 | /     asm!(\n220 | |         r\"\n221 | |         .altmacro\n222 | |     \",\n...   |\n259 | |         options(noreturn)\n260 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\n   Compiling virtio-drivers v0.7.5\nerror[E0308]: mismatched types\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:52:33\n   |\n52 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:126:33\n    |\n126 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nwarning: `polyhal` (lib) generated 16 warnings\nerror: could not compile `polyhal` (lib) due to 10 previous errors; 16 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=example, checker=Lockbud\n// toolchain=nightly-2023-12-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-03-07 21:52:14.676341662 +08:00:00\n   Compiling scopeguard v1.2.0\n   Compiling static_assertions v1.1.0\n   Compiling lock_api v0.4.11\n   Compiling riscv v0.11.1\n   Compiling sbi-spec v0.0.4\n   Compiling log v0.4.22\n   Compiling byteorder v1.5.0\n   Compiling embedded-hal v1.0.0\n[2025-03-07T13:52:14Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-03-07T13:52:14Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling bitflags v2.6.0\n   Compiling critical-section v1.1.2\n   Compiling spin v0.9.8\n   Compiling zerocopy v0.7.35\n   Compiling sbi-rt v0.0.2\n   Compiling fdt v0.1.5\n   Compiling cfg-if v1.0.0\n   Compiling buddy_system_allocator v0.9.1\n   Compiling polyhal v0.1.3 (/home/runner/check/batch_1/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `docsrs`, `feature`, and `test` and 30 more\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:23:15\n   |\n23 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:39:19\n   |\n39 |         #[cfg(not(c906))]\n   |                   ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:94:15\n   |\n94 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:96:15\n   |\n96 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:98:15\n   |\n98 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:100:15\n    |\n100 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:102:15\n    |\n102 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused macro definition: `PerCPUReservedOffset`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/percpu/riscv64.rs:18:18\n   |\n18 | pub(crate) macro PerCPUReservedOffset($field: ident) {\n   |                  ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_macros)]` on by default\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/riscv64.rs:39:5\n   |\n39 | /     core::arch::asm!(\n40 | |         // Chcek boot core\n41 | |         \"\n42 | |             beqz    a0, 2f\n...  |\n75 | |         options(noreturn),\n76 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/riscv64.rs:85:5\n    |\n85  | /     core::arch::asm!(\n86  | |         // 1. Set Stack Pointer.\n87  | |         // sp = a1(given Stack Pointer.)\n88  | |         \"\n...   |\n115 | |         options(noreturn)\n116 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/riscv64.rs:139:5\n    |\n139 | /     asm!(\n140 | |         // 宏定义\n141 | |         r\"\n142 | |             .align 4\n...   |\n162 | |         options(noreturn)\n163 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/riscv64.rs:170:9\n    |\n170 | /         asm!(\n171 | |             r\"\n172 | |                 .align 4\n173 | |                 .altmacro\n...   |\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/riscv64.rs:219:5\n    |\n219 | /     asm!(\n220 | |         r\"\n221 | |         .altmacro\n222 | |     \",\n...   |\n259 | |         options(noreturn)\n260 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:52:33\n   |\n52 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:126:33\n    |\n126 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\n   Compiling virtio-drivers v0.7.5\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nwarning: `polyhal` (lib) generated 16 warnings\nerror: could not compile `polyhal` (lib) due to 10 previous errors; 16 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=example, checker=Lockbud\n// toolchain=nightly-2023-12-01, target=loongarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target loongarch64-unknown-none \n// timestamp=2025-03-07 21:52:10.43029124 +08:00:00\n   Compiling proc-macro2 v1.0.79\n   Compiling unicode-ident v1.0.12\n   Compiling autocfg v1.2.0\n   Compiling scopeguard v1.2.0\n   Compiling bitflags v1.3.2\n   Compiling bitflags v2.6.0\n   Compiling bit_field v0.10.2\n   Compiling log v0.4.22\n   Compiling byteorder v1.5.0\n[2025-03-07T13:52:10Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-03-07T13:52:10Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling loongArch64 v0.2.4\n   Compiling lock_api v0.4.11\n   Compiling cfg-if v1.0.0\n   Compiling fdt v0.1.5\n   Compiling quote v1.0.35\n   Compiling spin v0.9.8\n   Compiling syn v2.0.58\n   Compiling buddy_system_allocator v0.9.1\n   Compiling zerocopy-derive v0.7.35\n   Compiling polyhal-macro v0.1.3\n   Compiling enumn v0.1.14\n   Compiling polyhal v0.1.3 (/home/runner/check/batch_1/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `docsrs`, `feature`, and `test` and 30 more\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/debug_console/loongarch64.rs:5:11\n  |\n5 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/debug_console/loongarch64.rs:7:7\n  |\n7 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/loongarch64.rs:22:5\n   |\n22 | /     core::arch::asm!(\"\n23 | |         ori         $t0, $zero, 0x1     # CSR_DMW1_PLV0\n24 | |         lu52i.d     $t0, $t0, -2048     # UC, PLV0, 0x8000 xxxx xxxx xxxx\n25 | |         csrwr       $t0, 0x180          # LOONGARCH_CSR_DMWIN0\n...  |\n62 | |         options(noreturn),\n63 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/loongarch64.rs:73:5\n   |\n73 | /     core::arch::asm!(\n74 | |         \"\n75 | |         ori          $t0, $zero, 0x1     # CSR_DMW1_PLV0\n76 | |         lu52i.d      $t0, $t0, -2048     # UC, PLV0, 0x8000 xxxx xxxx xxxx\n...  |\n92 | |         entry = sym _rust_secondary_main,\n93 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/loongarch64.rs:135:5\n    |\n135 | /     core::arch::asm!(\n136 | |         // Save Kernel Context.\n137 | |         save_callee_regs!(),\n...   |\n142 | |         options(noreturn)\n143 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/loongarch64.rs:167:5\n    |\n167 | /     core::arch::asm!(\n168 | |         // Save Kernel Context.\n169 | |         save_callee_regs!(),\n...   |\n181 | |         options(noreturn)\n182 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/loongarch64.rs:188:9\n    |\n188 | /         asm!(\n189 | |             \"\n190 | |                 move    $a0, $tp\n191 | |                 ret\n192 | |             \",\n193 | |             options(noreturn)\n194 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/loongarch64.rs:109:5\n    |\n109 | /     core::arch::asm!(\n110 | |         \"\n111 | |             csrrd   $sp,  KSAVE_CTX\n112 | |             SAVE_REGS\n...   |\n132 | |         options(noreturn)\n133 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/loongarch64.rs:140:9\n    |\n140 | /         asm!(\n141 | |             r\"\n142 | |                 addi.d  $sp,  $sp, -13*8\n143 | |                 st.d    $ra,  $sp, 0*8\n...   |\n165 | |             options(noreturn)\n166 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/loongarch64.rs:190:5\n    |\n190 | /     core::arch::asm!(\n191 | |         \"\n192 | |             .balign 4096\n...   |\n216 | |         options(noreturn)\n217 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/loongarch64.rs:222:5\n    |\n222 | /     core::arch::asm!(\n223 | |         \"\n224 | |         .equ LA_CSR_PGDL,          0x19    /* Page table base address when VA[47] = 0 */\n225 | |         .equ LA_CSR_PGDH,          0x1a    /* Page table base address when VA[47] = 1 */\n...   |\n245 | |         options(noreturn)\n246 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/loongarch64/unaligned.rs:61:5\n   |\n61 | /     core::arch::asm!(\n62 | |         \"\n63 | |             beqz    $a2, 5f\n...  |\n95 | |         options(noreturn)\n96 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/loongarch64/unaligned.rs:101:5\n    |\n101 | /     core::arch::asm!(\n102 | |         \"\n103 | |         beqz    $a2, 3f\n...   |\n121 | |         options(noreturn)\n122 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 10 warnings\nerror: could not compile `polyhal` (lib) due to 11 previous errors; 10 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=example, checker=Lockbud\n// toolchain=nightly-2023-12-01, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none \n// timestamp=2025-03-07 21:52:22.002319678 +08:00:00\n   Compiling tock-registers v0.8.1\n   Compiling scopeguard v1.2.0\n   Compiling lock_api v0.4.11\n   Compiling byteorder v1.5.0\n   Compiling log v0.4.22\n   Compiling bitflags v2.6.0\n   Compiling zerocopy v0.7.35\n[2025-03-07T13:52:22Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-03-07T13:52:22Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling arm_gicv2 v0.1.0\n   Compiling spin v0.9.8\n   Compiling aarch64-cpu v9.4.0\n   Compiling arm_pl011 v0.1.0\n   Compiling cfg-if v1.0.0\n   Compiling fdt v0.1.5\n   Compiling buddy_system_allocator v0.9.1\n   Compiling virtio-drivers v0.7.5\n   Compiling polyhal v0.1.3 (/home/runner/check/batch_1/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `docsrs`, `feature`, and `test` and 30 more\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/aarch64.rs:115:5\n    |\n115 | /     core::arch::asm!(\"\n116 | |         mrs     x19, mpidr_el1\n117 | |         and     x19, x19, #0xffffff     // get current CPU id\n118 | |         mov     x20, x0                 // save DTB pointer\n...   |\n146 | |         options(noreturn),\n147 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/aarch64.rs:154:5\n    |\n154 | /     core::arch::asm!(\"\n155 | |         mrs     x19, mpidr_el1\n156 | |         and     x19, x19, #0xffffff     // get current CPU id\n...   |\n173 | |         options(noreturn),\n174 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/aarch64.rs:128:5\n    |\n128 | /     core::arch::asm!(\n129 | |         // Save Kernel Context.\n130 | |         save_callee_regs!(),\n...   |\n135 | |         options(noreturn)\n136 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/aarch64.rs:160:5\n    |\n160 | /     core::arch::asm!(\n161 | |         // Save Kernel Context.\n162 | |         save_callee_regs!(),\n...   |\n174 | |         options(noreturn)\n175 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/aarch64.rs:182:9\n    |\n182 | /         core::arch::asm!(\n183 | |             \"\n184 | |                 mrs      x0, tpidr_el1\n185 | |                 ret\n186 | |             \",\n187 | |             options(noreturn)\n188 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/aarch64.rs:109:9\n    |\n109 | /         asm!(\n110 | |             r\"\n111 | |             sub     sp, sp, 18 * 8\n112 | |             stp     x8, x16, [sp]\n...   |\n147 | |             options(noreturn)\n148 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_option` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:15:46\n   |\n15 | #![cfg_attr(target_arch = \"aarch64\", feature(const_option))]\n   |                                              ^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:52:33\n   |\n52 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:126:33\n    |\n126 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nwarning: `polyhal` (lib) generated 9 warnings\nerror: could not compile `polyhal` (lib) due to 8 previous errors; 9 warnings emitted\n",
              "// pkg_name=example, checker=Lockbud\n// toolchain=nightly-2023-12-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none-softfloat \n// timestamp=2025-03-07 21:52:24.590617343 +08:00:00\n   Compiling tock-registers v0.8.1\n   Compiling scopeguard v1.2.0\n   Compiling lock_api v0.4.11\n   Compiling byteorder v1.5.0\n   Compiling log v0.4.22\n   Compiling bitflags v2.6.0\n   Compiling zerocopy v0.7.35\n[2025-03-07T13:52:24Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-03-07T13:52:24Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling arm_pl011 v0.1.0\n   Compiling spin v0.9.8\n   Compiling arm_gicv2 v0.1.0\n   Compiling aarch64-cpu v9.4.0\n   Compiling cfg-if v1.0.0\n   Compiling fdt v0.1.5\n   Compiling buddy_system_allocator v0.9.1\n   Compiling virtio-drivers v0.7.5\n   Compiling polyhal v0.1.3 (/home/runner/check/batch_1/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `docsrs`, `feature`, and `test` and 30 more\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/aarch64.rs:115:5\n    |\n115 | /     core::arch::asm!(\"\n116 | |         mrs     x19, mpidr_el1\n117 | |         and     x19, x19, #0xffffff     // get current CPU id\n118 | |         mov     x20, x0                 // save DTB pointer\n...   |\n146 | |         options(noreturn),\n147 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/aarch64.rs:154:5\n    |\n154 | /     core::arch::asm!(\"\n155 | |         mrs     x19, mpidr_el1\n156 | |         and     x19, x19, #0xffffff     // get current CPU id\n...   |\n173 | |         options(noreturn),\n174 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/aarch64.rs:128:5\n    |\n128 | /     core::arch::asm!(\n129 | |         // Save Kernel Context.\n130 | |         save_callee_regs!(),\n...   |\n135 | |         options(noreturn)\n136 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/aarch64.rs:160:5\n    |\n160 | /     core::arch::asm!(\n161 | |         // Save Kernel Context.\n162 | |         save_callee_regs!(),\n...   |\n174 | |         options(noreturn)\n175 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/kcontext/aarch64.rs:182:9\n    |\n182 | /         core::arch::asm!(\n183 | |             \"\n184 | |                 mrs      x0, tpidr_el1\n185 | |                 ret\n186 | |             \",\n187 | |             options(noreturn)\n188 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/trap/aarch64.rs:109:9\n    |\n109 | /         asm!(\n110 | |             r\"\n111 | |             sub     sp, sp, 18 * 8\n112 | |             stp     x8, x16, [sp]\n...   |\n147 | |             options(noreturn)\n148 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_option` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:15:46\n   |\n15 | #![cfg_attr(target_arch = \"aarch64\", feature(const_option))]\n   |                                              ^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0 and no longer requires an attribute to enable\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:52:33\n   |\n52 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n   |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n   |                  |\n   |                  arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*const u8`\n              found raw pointer `*const i8`\nnote: associated function defined here\n  --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nerror[E0308]: mismatched types\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:126:33\n    |\n126 |         unsafe { CStr::from_ptr(self.get_ptr::<i8>()) }\n    |                  -------------- ^^^^^^^^^^^^^^^^^^^^ expected `*const u8`, found `*const i8`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\n    = note: expected raw pointer `*const u8`\n               found raw pointer `*const i8`\nnote: associated function defined here\n   --> /rustc/854f22563c8daf92709fae18ee6aed52953835cd/library/core/src/ffi/c_str.rs:264:25\n\nSome errors have detailed explanations: E0308, E0787.\nFor more information about an error, try `rustc --explain E0308`.\nwarning: `polyhal` (lib) generated 9 warnings\nerror: could not compile `polyhal` (lib) due to 8 previous errors; 9 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 6,
          "kinds": {
            "Cargo": [
              "// pkg_name=example, checker=Rapx\n// toolchain=nightly-2023-12-01, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-none \n// timestamp=2025-02-16 22:48:38.87438477 +08:00:00\n   Compiling proc-macro2 v1.0.79\n   Compiling unicode-ident v1.0.12\n   Compiling autocfg v1.2.0\n   Compiling paste v1.0.14\n   Compiling rustversion v1.0.15\n    Checking bitflags v2.6.0\n    Checking scopeguard v1.2.0\n   Compiling lock_api v0.4.11\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n    Checking raw-cpuid v10.7.0\n   Compiling quote v1.0.35\n   Compiling syn v2.0.58\n    Checking volatile v0.4.6\n   Compiling x86 v0.52.0\n    Checking x86_64 v0.14.12\n    Checking spin v0.9.8\n    Checking bit v0.1.1\n    Checking byteorder v1.5.0\n    Checking log v0.4.22\n    Checking multiboot v0.8.0\n    Checking raw-cpuid v11.0.1\n    Checking x2apic v0.4.3\n    Checking fdt v0.1.5\n    Checking cfg-if v1.0.0\n    Checking buddy_system_allocator v0.9.1\n   Compiling zerocopy-derive v0.7.35\n   Compiling enumn v0.1.14\n   Compiling polyhal-macro v0.1.3\n    Checking polyhal v0.1.3 (/home/runner/check/batch_2/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/x86_64.rs:150:5\n    |\n150 | /     core::arch::asm!(\n151 | |         // Save Kernel Context.\n152 | |         \"\n153 | |         pop     r8 \n...   |\n162 | |         options(noreturn)\n163 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/x86_64.rs:187:5\n    |\n187 | /     core::arch::asm!(\n188 | |         // consume the return address(rip) in the stack\n189 | |         // for consistency with context_switch.\n190 | |         // and save page table to r9\n...   |\n207 | |         options(noreturn)\n208 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/x86_64.rs:106:5\n    |\n106 | /     asm!(\n107 | |         r\"\n108 | |             sub     rsp, 16                     # push fs_base, gs_base\n...   |\n149 | |         options(noreturn)\n150 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/x86_64.rs:156:5\n    |\n156 | /     asm!(\n157 | |         r\"\n158 | |             sub     rsp, 16\n...   |\n198 | |         options(noreturn)\n199 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/x86_64.rs:206:9\n    |\n206 | /         asm!(\n207 | |             // Save callee saved registers and cs and others.\n208 | |             r\"\n209 | |                 mov ecx, 0xC0000100\n...   |\n265 | |             options(noreturn)\n266 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/x86_64.rs:272:5\n    |\n272 | /     asm!(\n273 | |         \"\n274 | |             pop rcx\n275 | |             add rsp, 8\n...   |\n282 | |         options(noreturn)\n283 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/x86_64.rs:312:5\n    |\n312 | /     asm!(\n313 | |         r\"\n314 | |             swapgs\n315 | |             mov     gs:{PERCPU_USER_RSP_OFFSET}, rsp\n...   |\n374 | |         options(noreturn)\n375 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\n    Checking zerocopy v0.7.35\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 8 warnings\nerror: could not compile `polyhal` (lib) due to 7 previous errors; 8 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n14:48:44|RAP|ERROR|: Finished with non-zero exit code.\n",
              "// pkg_name=example, checker=Rapx\n// toolchain=nightly-2023-12-01, target=riscv64imac-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64imac-unknown-none-elf \n// timestamp=2025-02-16 22:48:34.011940011 +08:00:00\n   Compiling proc-macro2 v1.0.79\n   Compiling unicode-ident v1.0.12\n   Compiling autocfg v1.2.0\n    Checking scopeguard v1.2.0\n   Compiling riscv v0.11.1\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n    Checking log v0.4.22\n    Checking embedded-hal v1.0.0\n    Checking critical-section v1.1.2\n   Compiling lock_api v0.4.11\n    Checking bitflags v2.6.0\n    Checking byteorder v1.5.0\n    Checking sbi-rt v0.0.2\n   Compiling quote v1.0.35\n    Checking cfg-if v1.0.0\n   Compiling syn v2.0.58\n    Checking spin v0.9.8\n    Checking fdt v0.1.5\n    Checking buddy_system_allocator v0.9.1\n   Compiling zerocopy-derive v0.7.35\n   Compiling enumn v0.1.14\n   Compiling polyhal-macro v0.1.3\n    Checking polyhal v0.1.3 (/home/runner/check/batch_2/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:23:15\n   |\n23 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:39:19\n   |\n39 |         #[cfg(not(c906))]\n   |                   ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:94:15\n   |\n94 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:96:15\n   |\n96 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:98:15\n   |\n98 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:100:15\n    |\n100 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:102:15\n    |\n102 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused macro definition: `PerCPUReservedOffset`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/percpu/riscv64.rs:18:18\n   |\n18 | pub(crate) macro PerCPUReservedOffset($field: ident) {\n   |                  ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_macros)]` on by default\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/riscv64.rs:39:5\n   |\n39 | /     core::arch::asm!(\n40 | |         // Chcek boot core\n41 | |         \"\n42 | |             beqz    a0, 2f\n...  |\n75 | |         options(noreturn),\n76 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/riscv64.rs:85:5\n    |\n85  | /     core::arch::asm!(\n86  | |         // 1. Set Stack Pointer.\n87  | |         // sp = a1(given Stack Pointer.)\n88  | |         \"\n...   |\n115 | |         options(noreturn)\n116 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n154 | |         // Restore Kernel Context.\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n186 | |         // Switch to new page table.\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/riscv64.rs:139:5\n    |\n139 | /     asm!(\n140 | |         // 宏定义\n141 | |         r\"\n142 | |             .align 4\n...   |\n162 | |         options(noreturn)\n163 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/riscv64.rs:170:9\n    |\n170 | /         asm!(\n171 | |             r\"\n172 | |                 .align 4\n173 | |                 .altmacro\n...   |\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/riscv64.rs:219:5\n    |\n219 | /     asm!(\n220 | |         r\"\n221 | |         .altmacro\n222 | |     \",\n...   |\n259 | |         options(noreturn)\n260 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\n    Checking zerocopy v0.7.35\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 16 warnings\nerror: could not compile `polyhal` (lib) due to 8 previous errors; 16 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n14:48:38|RAP|ERROR|: Finished with non-zero exit code.\n",
              "// pkg_name=example, checker=Rapx\n// toolchain=nightly-2023-12-01, target=loongarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target loongarch64-unknown-none \n// timestamp=2025-02-16 22:48:19.827303689 +08:00:00\n   Compiling proc-macro2 v1.0.79\n   Compiling unicode-ident v1.0.12\n   Compiling autocfg v1.2.0\n    Checking scopeguard v1.2.0\n    Checking bitflags v1.3.2\n    Checking byteorder v1.5.0\n    Checking log v0.4.22\n    Checking bitflags v2.6.0\n    Checking bit_field v0.10.2\n   Compiling lock_api v0.4.11\n    Checking fdt v0.1.5\n    Checking loongArch64 v0.2.4\n    Checking cfg-if v1.0.0\n   Compiling quote v1.0.35\n   Compiling syn v2.0.58\n    Checking spin v0.9.8\n    Checking buddy_system_allocator v0.9.1\n   Compiling zerocopy-derive v0.7.35\n   Compiling enumn v0.1.14\n   Compiling polyhal-macro v0.1.3\n    Checking polyhal v0.1.3 (/home/runner/check/batch_2/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/debug_console/loongarch64.rs:5:11\n  |\n5 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/debug_console/loongarch64.rs:7:7\n  |\n7 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/loongarch64.rs:22:5\n   |\n22 | /     core::arch::asm!(\"\n23 | |         ori         $t0, $zero, 0x1     # CSR_DMW1_PLV0\n24 | |         lu52i.d     $t0, $t0, -2048     # UC, PLV0, 0x8000 xxxx xxxx xxxx\n25 | |         csrwr       $t0, 0x180          # LOONGARCH_CSR_DMWIN0\n...  |\n62 | |         options(noreturn),\n63 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/loongarch64.rs:73:5\n   |\n73 | /     core::arch::asm!(\n74 | |         \"\n75 | |         ori          $t0, $zero, 0x1     # CSR_DMW1_PLV0\n76 | |         lu52i.d      $t0, $t0, -2048     # UC, PLV0, 0x8000 xxxx xxxx xxxx\n...  |\n92 | |         entry = sym _rust_secondary_main,\n93 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/loongarch64.rs:135:5\n    |\n135 | /     core::arch::asm!(\n136 | |         // Save Kernel Context.\n137 | |         save_callee_regs!(),\n138 | |         // Restore Kernel Context.\n...   |\n142 | |         options(noreturn)\n143 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/loongarch64.rs:167:5\n    |\n167 | /     core::arch::asm!(\n168 | |         // Save Kernel Context.\n169 | |         save_callee_regs!(),\n170 | |         // Switch to new page table.\n...   |\n181 | |         options(noreturn)\n182 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/loongarch64.rs:188:9\n    |\n188 | /         asm!(\n189 | |             \"\n190 | |                 move    $a0, $tp\n191 | |                 ret\n192 | |             \",\n193 | |             options(noreturn)\n194 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/loongarch64.rs:109:5\n    |\n109 | /     core::arch::asm!(\n110 | |         \"\n111 | |             csrrd   $sp,  KSAVE_CTX\n112 | |             SAVE_REGS\n...   |\n132 | |         options(noreturn)\n133 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/loongarch64.rs:140:9\n    |\n140 | /         asm!(\n141 | |             r\"\n142 | |                 addi.d  $sp,  $sp, -13*8\n143 | |                 st.d    $ra,  $sp, 0*8\n...   |\n165 | |             options(noreturn)\n166 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/loongarch64.rs:190:5\n    |\n190 | /     core::arch::asm!(\n191 | |         \"\n192 | |             .balign 4096\n193 | |                 // Check whether it was from user privilege.\n...   |\n216 | |         options(noreturn)\n217 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/loongarch64.rs:222:5\n    |\n222 | /     core::arch::asm!(\n223 | |         \"\n224 | |         .equ LA_CSR_PGDL,          0x19    /* Page table base address when VA[47] = 0 */\n225 | |         .equ LA_CSR_PGDH,          0x1a    /* Page table base address when VA[47] = 1 */\n...   |\n245 | |         options(noreturn)\n246 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/loongarch64/unaligned.rs:61:5\n   |\n61 | /     core::arch::asm!(\n62 | |         \"\n63 | |             beqz    $a2, 5f\n...  |\n95 | |         options(noreturn)\n96 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/loongarch64/unaligned.rs:101:5\n    |\n101 | /     core::arch::asm!(\n102 | |         \"\n103 | |         beqz    $a2, 3f\n...   |\n121 | |         options(noreturn)\n122 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\n    Checking zerocopy v0.7.35\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 10 warnings\nerror: could not compile `polyhal` (lib) due to 11 previous errors; 10 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n14:48:24|RAP|ERROR|: Finished with non-zero exit code.\n",
              "// pkg_name=example, checker=Rapx\n// toolchain=nightly-2023-12-01, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target aarch64-unknown-none \n// timestamp=2025-02-16 22:48:44.630944946 +08:00:00\n   Compiling proc-macro2 v1.0.79\n   Compiling unicode-ident v1.0.12\n   Compiling autocfg v1.2.0\n    Checking scopeguard v1.2.0\n    Checking tock-registers v0.8.1\n    Checking log v0.4.22\n    Checking bitflags v2.6.0\n    Checking byteorder v1.5.0\n    Checking arm_gicv2 v0.1.0\n   Compiling lock_api v0.4.11\n    Checking arm_pl011 v0.1.0\n    Checking aarch64-cpu v9.4.0\n    Checking fdt v0.1.5\n   Compiling quote v1.0.35\n   Compiling syn v2.0.58\n    Checking spin v0.9.8\n    Checking cfg-if v1.0.0\n    Checking buddy_system_allocator v0.9.1\n   Compiling zerocopy-derive v0.7.35\n   Compiling polyhal-macro v0.1.3\n   Compiling enumn v0.1.14\n    Checking polyhal v0.1.3 (/home/runner/check/batch_2/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/aarch64.rs:115:5\n    |\n115 | /     core::arch::asm!(\"\n116 | |         mrs     x19, mpidr_el1\n117 | |         and     x19, x19, #0xffffff     // get current CPU id\n118 | |         mov     x20, x0                 // save DTB pointer\n...   |\n146 | |         options(noreturn),\n147 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/aarch64.rs:154:5\n    |\n154 | /     core::arch::asm!(\"\n155 | |         mrs     x19, mpidr_el1\n156 | |         and     x19, x19, #0xffffff     // get current CPU id\n...   |\n173 | |         options(noreturn),\n174 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/aarch64.rs:128:5\n    |\n128 | /     core::arch::asm!(\n129 | |         // Save Kernel Context.\n130 | |         save_callee_regs!(),\n131 | |         // Restore Kernel Context.\n...   |\n135 | |         options(noreturn)\n136 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/aarch64.rs:160:5\n    |\n160 | /     core::arch::asm!(\n161 | |         // Save Kernel Context.\n162 | |         save_callee_regs!(),\n163 | |         // Switch to new page table.\n...   |\n174 | |         options(noreturn)\n175 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/aarch64.rs:182:9\n    |\n182 | /         core::arch::asm!(\n183 | |             \"\n184 | |                 mrs      x0, tpidr_el1\n185 | |                 ret\n186 | |             \",\n187 | |             options(noreturn)\n188 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/aarch64.rs:109:9\n    |\n109 | /         asm!(\n110 | |             r\"\n111 | |             sub     sp, sp, 18 * 8\n112 | |             stp     x8, x16, [sp]\n...   |\n147 | |             options(noreturn)\n148 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\n    Checking zerocopy v0.7.35\nwarning: `polyhal` (lib) generated 8 warnings\nerror: could not compile `polyhal` (lib) due to 6 previous errors; 8 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n14:48:49|RAP|ERROR|: Finished with non-zero exit code.\n",
              "// pkg_name=example, checker=Rapx\n// toolchain=nightly-2023-12-01, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-02-16 22:48:29.177390364 +08:00:00\n   Compiling proc-macro2 v1.0.79\n   Compiling unicode-ident v1.0.12\n   Compiling autocfg v1.2.0\n    Checking scopeguard v1.2.0\n   Compiling riscv v0.11.1\n    Checking static_assertions v1.1.0\n    Checking sbi-spec v0.0.4\n    Checking byteorder v1.5.0\n    Checking critical-section v1.1.2\n    Checking log v0.4.22\n    Checking bitflags v2.6.0\n   Compiling lock_api v0.4.11\n    Checking embedded-hal v1.0.0\n    Checking sbi-rt v0.0.2\n    Checking cfg-if v1.0.0\n   Compiling quote v1.0.35\n   Compiling syn v2.0.58\n    Checking spin v0.9.8\n    Checking fdt v0.1.5\n    Checking buddy_system_allocator v0.9.1\n   Compiling zerocopy-derive v0.7.35\n   Compiling polyhal-macro v0.1.3\n   Compiling enumn v0.1.14\n    Checking polyhal v0.1.3 (/home/runner/check/batch_2/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:23:15\n   |\n23 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:39:19\n   |\n39 |         #[cfg(not(c906))]\n   |                   ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:94:15\n   |\n94 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:96:15\n   |\n96 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:98:15\n   |\n98 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:100:15\n    |\n100 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:102:15\n    |\n102 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused macro definition: `PerCPUReservedOffset`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/percpu/riscv64.rs:18:18\n   |\n18 | pub(crate) macro PerCPUReservedOffset($field: ident) {\n   |                  ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_macros)]` on by default\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/riscv64.rs:39:5\n   |\n39 | /     core::arch::asm!(\n40 | |         // Chcek boot core\n41 | |         \"\n42 | |             beqz    a0, 2f\n...  |\n75 | |         options(noreturn),\n76 | |     )\n   | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/riscv64.rs:85:5\n    |\n85  | /     core::arch::asm!(\n86  | |         // 1. Set Stack Pointer.\n87  | |         // sp = a1(given Stack Pointer.)\n88  | |         \"\n...   |\n115 | |         options(noreturn)\n116 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:151:5\n    |\n151 | /     core::arch::asm!(\n152 | |         // Save Kernel Context.\n153 | |         save_callee_regs!(),\n154 | |         // Restore Kernel Context.\n...   |\n158 | |         options(noreturn)\n159 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:183:5\n    |\n183 | /     core::arch::asm!(\n184 | |         // Save Kernel Context.\n185 | |         save_callee_regs!(),\n186 | |         // Switch to new page table.\n...   |\n198 | |         options(noreturn)\n199 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/riscv64.rs:205:9\n    |\n205 | /         asm!(\n206 | |             \"\n207 | |                 mv      a0, tp\n208 | |                 ret\n209 | |             \",\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/riscv64.rs:139:5\n    |\n139 | /     asm!(\n140 | |         // 宏定义\n141 | |         r\"\n142 | |             .align 4\n...   |\n162 | |         options(noreturn)\n163 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/riscv64.rs:170:9\n    |\n170 | /         asm!(\n171 | |             r\"\n172 | |                 .align 4\n173 | |                 .altmacro\n...   |\n210 | |             options(noreturn)\n211 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/riscv64.rs:219:5\n    |\n219 | /     asm!(\n220 | |         r\"\n221 | |         .altmacro\n222 | |     \",\n...   |\n259 | |         options(noreturn)\n260 | |     );\n    | |_____^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\n    Checking zerocopy v0.7.35\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 16 warnings\nerror: could not compile `polyhal` (lib) due to 8 previous errors; 16 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n14:48:34|RAP|ERROR|: Finished with non-zero exit code.\n",
              "// pkg_name=example, checker=Rapx\n// toolchain=nightly-2023-12-01, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target aarch64-unknown-none-softfloat \n// timestamp=2025-02-16 22:48:24.513601238 +08:00:00\n   Compiling proc-macro2 v1.0.79\n   Compiling unicode-ident v1.0.12\n   Compiling autocfg v1.2.0\n    Checking scopeguard v1.2.0\n    Checking tock-registers v0.8.1\n    Checking log v0.4.22\n    Checking bitflags v2.6.0\n    Checking byteorder v1.5.0\n    Checking arm_pl011 v0.1.0\n   Compiling lock_api v0.4.11\n    Checking arm_gicv2 v0.1.0\n    Checking aarch64-cpu v9.4.0\n    Checking cfg-if v1.0.0\n    Checking fdt v0.1.5\n   Compiling quote v1.0.35\n   Compiling syn v2.0.58\n    Checking spin v0.9.8\n    Checking buddy_system_allocator v0.9.1\n   Compiling zerocopy-derive v0.7.35\n   Compiling enumn v0.1.14\n   Compiling polyhal-macro v0.1.3\n    Checking polyhal v0.1.3 (/home/runner/check/batch_2/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/aarch64.rs:115:5\n    |\n115 | /     core::arch::asm!(\"\n116 | |         mrs     x19, mpidr_el1\n117 | |         and     x19, x19, #0xffffff     // get current CPU id\n118 | |         mov     x20, x0                 // save DTB pointer\n...   |\n146 | |         options(noreturn),\n147 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/boot/aarch64.rs:154:5\n    |\n154 | /     core::arch::asm!(\"\n155 | |         mrs     x19, mpidr_el1\n156 | |         and     x19, x19, #0xffffff     // get current CPU id\n...   |\n173 | |         options(noreturn),\n174 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/aarch64.rs:128:5\n    |\n128 | /     core::arch::asm!(\n129 | |         // Save Kernel Context.\n130 | |         save_callee_regs!(),\n131 | |         // Restore Kernel Context.\n...   |\n135 | |         options(noreturn)\n136 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/aarch64.rs:160:5\n    |\n160 | /     core::arch::asm!(\n161 | |         // Save Kernel Context.\n162 | |         save_callee_regs!(),\n163 | |         // Switch to new page table.\n...   |\n174 | |         options(noreturn)\n175 | |     )\n    | |_____^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/kcontext/aarch64.rs:182:9\n    |\n182 | /         core::arch::asm!(\n183 | |             \"\n184 | |                 mrs      x0, tpidr_el1\n185 | |                 ret\n186 | |             \",\n187 | |             options(noreturn)\n188 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nerror[E0787]: the `asm!` macro is not allowed in naked functions\n   --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/trap/aarch64.rs:109:9\n    |\n109 | /         asm!(\n110 | |             r\"\n111 | |             sub     sp, sp, 18 * 8\n112 | |             stp     x8, x16, [sp]\n...   |\n147 | |             options(noreturn)\n148 | |         )\n    | |_________^ consider using the `naked_asm!` macro instead\n\nwarning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:4:12\n  |\n4 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: the feature `const_mut_refs` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:11:12\n   |\n11 | #![feature(const_mut_refs)]\n   |            ^^^^^^^^^^^^^^\n\nwarning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:12:12\n   |\n12 | #![feature(const_slice_from_raw_parts_mut)]\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0787`.\nwarning: `polyhal` (lib) generated 8 warnings\nerror: could not compile `polyhal` (lib) due to 6 previous errors; 8 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n14:48:29|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "Cargo.lock",
          "features": "",
          "count": 6,
          "kinds": {
            "Audit": [
              "    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 732 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (44 crate dependencies)\nCrate:     critical-section\nVersion:   1.1.2\nWarning:   yanked\nDependency tree:\ncritical-section 1.1.2\n└── riscv 0.11.1\n    └── polyhal 0.1.3\n        └── example 0.1.0\n\nwarning: 1 allowed warning found\n\n{\n  \"database\": {\n    \"advisory-count\": 732,\n    \"last-commit\": \"ddccfe8aced779f7b54d27bbe7e122ecb1dda33a\",\n    \"last-updated\": \"2025-02-14T08:11:43Z\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 44\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"yanked\": [\n      {\n        \"kind\": \"yanked\",\n        \"package\": {\n          \"name\": \"critical-section\",\n          \"version\": \"1.1.2\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"7059fff8937831a9ae6f0fe4d658ffabf58f2ca96aa9dec1c889f936f705f216\",\n          \"replace\": null\n        },\n        \"advisory\": null,\n        \"affected\": null,\n        \"versions\": null\n      }\n    ]\n  }\n}",
              "    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 732 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (44 crate dependencies)\nCrate:     critical-section\nVersion:   1.1.2\nWarning:   yanked\nDependency tree:\ncritical-section 1.1.2\n└── riscv 0.11.1\n    └── polyhal 0.1.3\n        └── example 0.1.0\n\nwarning: 1 allowed warning found\n\n{\n  \"database\": {\n    \"advisory-count\": 732,\n    \"last-commit\": \"ddccfe8aced779f7b54d27bbe7e122ecb1dda33a\",\n    \"last-updated\": \"2025-02-14T08:11:43Z\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 44\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"yanked\": [\n      {\n        \"kind\": \"yanked\",\n        \"package\": {\n          \"name\": \"critical-section\",\n          \"version\": \"1.1.2\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"7059fff8937831a9ae6f0fe4d658ffabf58f2ca96aa9dec1c889f936f705f216\",\n          \"replace\": null\n        },\n        \"advisory\": null,\n        \"affected\": null,\n        \"versions\": null\n      }\n    ]\n  }\n}",
              "    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 732 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (44 crate dependencies)\nCrate:     critical-section\nVersion:   1.1.2\nWarning:   yanked\nDependency tree:\ncritical-section 1.1.2\n└── riscv 0.11.1\n    └── polyhal 0.1.3\n        └── example 0.1.0\n\nwarning: 1 allowed warning found\n\n{\n  \"database\": {\n    \"advisory-count\": 732,\n    \"last-commit\": \"ddccfe8aced779f7b54d27bbe7e122ecb1dda33a\",\n    \"last-updated\": \"2025-02-14T08:11:43Z\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 44\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"yanked\": [\n      {\n        \"kind\": \"yanked\",\n        \"package\": {\n          \"name\": \"critical-section\",\n          \"version\": \"1.1.2\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"7059fff8937831a9ae6f0fe4d658ffabf58f2ca96aa9dec1c889f936f705f216\",\n          \"replace\": null\n        },\n        \"advisory\": null,\n        \"affected\": null,\n        \"versions\": null\n      }\n    ]\n  }\n}",
              "    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 732 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (44 crate dependencies)\nCrate:     critical-section\nVersion:   1.1.2\nWarning:   yanked\nDependency tree:\ncritical-section 1.1.2\n└── riscv 0.11.1\n    └── polyhal 0.1.3\n        └── example 0.1.0\n\nwarning: 1 allowed warning found\n\n{\n  \"database\": {\n    \"advisory-count\": 732,\n    \"last-commit\": \"ddccfe8aced779f7b54d27bbe7e122ecb1dda33a\",\n    \"last-updated\": \"2025-02-14T08:11:43Z\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 44\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"yanked\": [\n      {\n        \"kind\": \"yanked\",\n        \"package\": {\n          \"name\": \"critical-section\",\n          \"version\": \"1.1.2\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"7059fff8937831a9ae6f0fe4d658ffabf58f2ca96aa9dec1c889f936f705f216\",\n          \"replace\": null\n        },\n        \"advisory\": null,\n        \"affected\": null,\n        \"versions\": null\n      }\n    ]\n  }\n}",
              "    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 732 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (44 crate dependencies)\nCrate:     critical-section\nVersion:   1.1.2\nWarning:   yanked\nDependency tree:\ncritical-section 1.1.2\n└── riscv 0.11.1\n    └── polyhal 0.1.3\n        └── example 0.1.0\n\nwarning: 1 allowed warning found\n\n{\n  \"database\": {\n    \"advisory-count\": 732,\n    \"last-commit\": \"ddccfe8aced779f7b54d27bbe7e122ecb1dda33a\",\n    \"last-updated\": \"2025-02-14T08:11:43Z\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 44\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"yanked\": [\n      {\n        \"kind\": \"yanked\",\n        \"package\": {\n          \"name\": \"critical-section\",\n          \"version\": \"1.1.2\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"7059fff8937831a9ae6f0fe4d658ffabf58f2ca96aa9dec1c889f936f705f216\",\n          \"replace\": null\n        },\n        \"advisory\": null,\n        \"affected\": null,\n        \"versions\": null\n      }\n    ]\n  }\n}",
              "    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 732 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (44 crate dependencies)\nCrate:     critical-section\nVersion:   1.1.2\nWarning:   yanked\nDependency tree:\ncritical-section 1.1.2\n└── riscv 0.11.1\n    └── polyhal 0.1.3\n        └── example 0.1.0\n\nwarning: 1 allowed warning found\n\n{\n  \"database\": {\n    \"advisory-count\": 732,\n    \"last-commit\": \"ddccfe8aced779f7b54d27bbe7e122ecb1dda33a\",\n    \"last-updated\": \"2025-02-14T08:11:43Z\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 44\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"yanked\": [\n      {\n        \"kind\": \"yanked\",\n        \"package\": {\n          \"name\": \"critical-section\",\n          \"version\": \"1.1.2\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"7059fff8937831a9ae6f0fe4d658ffabf58f2ca96aa9dec1c889f936f705f216\",\n          \"replace\": null\n        },\n        \"advisory\": null,\n        \"affected\": null,\n        \"versions\": null\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 6,
          "kinds": {
            "Outdated": [
              "pkg=example, checker=Outdated\ntoolchain=nightly-2023-12-01, target=riscv64imac-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal/example\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-02-16 22:49:17.886283927 +08:00:00\n\nName                    Project  Compat  Latest  Kind    Platform\n----                    -------  ------  ------  ----    --------\nbuddy_system_allocator  0.9.1    ---     0.11.0  Normal  ---\nlog                     0.4.22   0.4.25  0.4.25  Normal  ---\nvirtio-drivers          0.7.5    ---     0.9.0   Normal  ---\n",
              "pkg=example, checker=Outdated\ntoolchain=nightly-2023-12-01, target=loongarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal/example\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-02-16 22:49:18.180271422 +08:00:00\n\nName                    Project  Compat  Latest  Kind    Platform\n----                    -------  ------  ------  ----    --------\nbuddy_system_allocator  0.9.1    ---     0.11.0  Normal  ---\nlog                     0.4.22   0.4.25  0.4.25  Normal  ---\nvirtio-drivers          0.7.5    ---     0.9.0   Normal  ---\n",
              "pkg=example, checker=Outdated\ntoolchain=nightly-2023-12-01, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal/example\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-02-16 22:49:19.513649067 +08:00:00\n\nName                    Project  Compat  Latest  Kind    Platform\n----                    -------  ------  ------  ----    --------\nbuddy_system_allocator  0.9.1    ---     0.11.0  Normal  ---\nlog                     0.4.22   0.4.25  0.4.25  Normal  ---\nvirtio-drivers          0.7.5    ---     0.9.0   Normal  ---\n",
              "pkg=example, checker=Outdated\ntoolchain=nightly-2023-12-01, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal/example\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-02-16 22:49:19.043889803 +08:00:00\n\nName                    Project  Compat  Latest  Kind    Platform\n----                    -------  ------  ------  ----    --------\nbuddy_system_allocator  0.9.1    ---     0.11.0  Normal  ---\nlog                     0.4.22   0.4.25  0.4.25  Normal  ---\nvirtio-drivers          0.7.5    ---     0.9.0   Normal  ---\n",
              "pkg=example, checker=Outdated\ntoolchain=nightly-2023-12-01, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal/example\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-02-16 22:49:18.749019733 +08:00:00\n\nName                    Project  Compat  Latest  Kind    Platform\n----                    -------  ------  ------  ----    --------\nbuddy_system_allocator  0.9.1    ---     0.11.0  Normal  ---\nlog                     0.4.22   0.4.25  0.4.25  Normal  ---\nvirtio-drivers          0.7.5    ---     0.9.0   Normal  ---\n",
              "pkg=example, checker=Outdated\ntoolchain=nightly-2023-12-01, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_2/Byte-OS/polyhal/example\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-02-16 22:49:18.463168621 +08:00:00\n\nName                    Project  Compat  Latest  Kind    Platform\n----                    -------  ------  ------  ----    --------\nbuddy_system_allocator  0.9.1    ---     0.11.0  Normal  ---\nlog                     0.4.22   0.4.25  0.4.25  Normal  ---\nvirtio-drivers          0.7.5    ---     0.9.0   Normal  ---\n"
            ]
          }
        },
        {
          "file": "src/frame.rs",
          "features": "",
          "count": 6,
          "kinds": {
            "Clippy(Warn)": [
              "warning: redundant closure\n --> src/frame.rs:6:15\n  |\n6 |     Lazy::new(|| LockedFrameAllocator::new());\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `LockedFrameAllocator::new`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n",
              "warning: redundant closure\n --> src/frame.rs:6:15\n  |\n6 |     Lazy::new(|| LockedFrameAllocator::new());\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `LockedFrameAllocator::new`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n",
              "warning: redundant closure\n --> src/frame.rs:6:15\n  |\n6 |     Lazy::new(|| LockedFrameAllocator::new());\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `LockedFrameAllocator::new`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n",
              "warning: redundant closure\n --> src/frame.rs:6:15\n  |\n6 |     Lazy::new(|| LockedFrameAllocator::new());\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `LockedFrameAllocator::new`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n",
              "warning: redundant closure\n --> src/frame.rs:6:15\n  |\n6 |     Lazy::new(|| LockedFrameAllocator::new());\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `LockedFrameAllocator::new`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n",
              "warning: redundant closure\n --> src/frame.rs:6:15\n  |\n6 |     Lazy::new(|| LockedFrameAllocator::new());\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `LockedFrameAllocator::new`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "src/main.rs",
          "features": "",
          "count": 6,
          "kinds": {
            "Clippy(Warn)": [
              "warning: empty `loop {}` wastes CPU cycles\n  --> src/main.rs:70:9\n   |\n70 |         loop {}\n   |         ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n",
              "warning: empty `loop {}` wastes CPU cycles\n  --> src/main.rs:70:9\n   |\n70 |         loop {}\n   |         ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n",
              "warning: empty `loop {}` wastes CPU cycles\n  --> src/main.rs:70:9\n   |\n70 |         loop {}\n   |         ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n",
              "warning: empty `loop {}` wastes CPU cycles\n  --> src/main.rs:70:9\n   |\n70 |         loop {}\n   |         ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n",
              "warning: empty `loop {}` wastes CPU cycles\n  --> src/main.rs:70:9\n   |\n70 |         loop {}\n   |         ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n",
              "warning: empty `loop {}` wastes CPU cycles\n  --> src/main.rs:70:9\n   |\n70 |         loop {}\n   |         ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "src/pci.rs",
          "features": "",
          "count": 5,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unneeded `return` statement\n  --> src/pci.rs:14:94\n   |\n14 |               enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |  ______________________________________________________________________________________________^\n15 | |             return;\n   | |__________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n14 -             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n15 -             return;\n14 +             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/pci.rs:14:94\n   |\n14 |               enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |  ______________________________________________________________________________________________^\n15 | |             return;\n   | |__________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n14 -             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n15 -             return;\n14 +             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/pci.rs:14:94\n   |\n14 |               enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |  ______________________________________________________________________________________________^\n15 | |             return;\n   | |__________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n14 -             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n15 -             return;\n14 +             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/pci.rs:14:94\n   |\n14 |               enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |  ______________________________________________________________________________________________^\n15 | |             return;\n   | |__________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n14 -             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n15 -             return;\n14 +             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/pci.rs:14:94\n   |\n14 |               enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |  ______________________________________________________________________________________________^\n15 | |             return;\n   | |__________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n14 -             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n15 -             return;\n14 +             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_2/Byte-OS/polyhal/src/components/percpu/riscv64.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unused macro definition: `PerCPUReservedOffset`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/percpu/riscv64.rs:18:18\n   |\n18 | pub(crate) macro PerCPUReservedOffset($field: ident) {\n   |                  ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_macros)]` on by default\n\n",
              "warning: struct `PerCPUReserved` is never constructed\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/percpu/riscv64.rs:5:19\n  |\n5 | pub(crate) struct PerCPUReserved {\n  |                   ^^^^^^^^^^^^^^\n\n",
              "warning: unused macro definition: `PerCPUReservedOffset`\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/percpu/riscv64.rs:18:18\n   |\n18 | pub(crate) macro PerCPUReservedOffset($field: ident) {\n   |                  ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_macros)]` on by default\n\n",
              "warning: struct `PerCPUReserved` is never constructed\n --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/percpu/riscv64.rs:5:19\n  |\n5 | pub(crate) struct PerCPUReserved {\n  |                   ^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_2/Byte-OS/polyhal/src/components/common.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: function `parse_dtb_info` is never used\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/common.rs:77:15\n   |\n77 | pub(crate) fn parse_dtb_info() {\n   |               ^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n",
              "warning: function `parse_dtb_info` is never used\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/common.rs:77:15\n   |\n77 | pub(crate) fn parse_dtb_info() {\n   |               ^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n",
              "warning: function `parse_dtb_info` is never used\n  --> /home/runner/check/batch_2/Byte-OS/polyhal/src/components/common.rs:77:15\n   |\n77 | pub(crate) fn parse_dtb_info() {\n   |               ^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Outdated",
    "Geiger",
    "Unformatted"
  ]
}