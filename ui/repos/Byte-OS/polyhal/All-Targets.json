{"repo":{"user":"Byte-OS","repo":"polyhal"},"data":[{"user":"Byte-OS","repo":"polyhal","pkg":"polyhal","count":67,"raw_reports":[{"file":"src/components/pagetable/mod.rs","count":12,"kinds":{"Clippy(Warn)":["warning: name `PTE` contains a capitalized acronym\n  --> src/components/pagetable/mod.rs:18:19\n   |\n18 | pub(crate) struct PTE(pub usize);\n   |                   ^^^ help: consider making the acronym lowercase, except the initial letter: `Pte`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n   = note: `#[warn(clippy::upper_case_acronyms)]` on by default\n\n","warning: `assert!(true)` will be optimized out by the compiler\n  --> src/components/pagetable/mod.rs:52:9\n   |\n52 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: remove it\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n   = note: `#[warn(clippy::assertions_on_constants)]` on by default\n\n","warning: `assert!(true)` will be optimized out by the compiler\n   --> src/components/pagetable/mod.rs:105:9\n    |\n105 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n\n","warning: name `PTE` contains a capitalized acronym\n  --> src/components/pagetable/mod.rs:18:19\n   |\n18 | pub(crate) struct PTE(pub usize);\n   |                   ^^^ help: consider making the acronym lowercase, except the initial letter: `Pte`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n   = note: `#[warn(clippy::upper_case_acronyms)]` on by default\n\n","warning: `assert!(true)` will be optimized out by the compiler\n  --> src/components/pagetable/mod.rs:52:9\n   |\n52 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: remove it\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n   = note: `#[warn(clippy::assertions_on_constants)]` on by default\n\n","warning: `assert!(true)` will be optimized out by the compiler\n   --> src/components/pagetable/mod.rs:105:9\n    |\n105 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n\n","warning: name `PTE` contains a capitalized acronym\n  --> src/components/pagetable/mod.rs:18:19\n   |\n18 | pub(crate) struct PTE(pub usize);\n   |                   ^^^ help: consider making the acronym lowercase, except the initial letter: `Pte`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n   = note: `#[warn(clippy::upper_case_acronyms)]` on by default\n\n","warning: `assert!(true)` will be optimized out by the compiler\n  --> src/components/pagetable/mod.rs:52:9\n   |\n52 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: remove it\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n   = note: `#[warn(clippy::assertions_on_constants)]` on by default\n\n","warning: `assert!(true)` will be optimized out by the compiler\n   --> src/components/pagetable/mod.rs:105:9\n    |\n105 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n\n","warning: name `PTE` contains a capitalized acronym\n  --> src/components/pagetable/mod.rs:18:19\n   |\n18 | pub(crate) struct PTE(pub usize);\n   |                   ^^^ help: consider making the acronym lowercase, except the initial letter: `Pte`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n   = note: `#[warn(clippy::upper_case_acronyms)]` on by default\n\n","warning: `assert!(true)` will be optimized out by the compiler\n  --> src/components/pagetable/mod.rs:52:9\n   |\n52 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: remove it\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n   = note: `#[warn(clippy::assertions_on_constants)]` on by default\n\n","warning: `assert!(true)` will be optimized out by the compiler\n   --> src/components/pagetable/mod.rs:105:9\n    |\n105 |         assert!(Self::PAGE_LEVEL >= 3, \"Just level >= 3 supported currently\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n\n"]}},{"file":"src/components/common.rs","count":6,"kinds":{"Clippy(Warn)":["warning: function `parse_dtb_info` is never used\n  --> src/components/common.rs:77:15\n   |\n77 | pub(crate) fn parse_dtb_info() {\n   |               ^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n","warning: function `parse_dtb_info` is never used\n  --> src/components/common.rs:77:15\n   |\n77 | pub(crate) fn parse_dtb_info() {\n   |               ^^^^^^^^^^^^^^\n\n"],"Unformatted":["file: /home/runner/check/batch_1/Byte-OS/polyhal/src/components/common.rs (original lines from 73 to 74)\n-/// \n-/// Display information when booting \n+///\n+/// Display information when booting\n","file: /home/runner/check/batch_1/Byte-OS/polyhal/src/components/common.rs (original lines from 73 to 74)\n-/// \n-/// Display information when booting \n+///\n+/// Display information when booting\n","file: /home/runner/check/batch_1/Byte-OS/polyhal/src/components/common.rs (original lines from 73 to 74)\n-/// \n-/// Display information when booting \n+///\n+/// Display information when booting\n","file: /home/runner/check/batch_1/Byte-OS/polyhal/src/components/common.rs (original lines from 73 to 74)\n-/// \n-/// Display information when booting \n+///\n+/// Display information when booting\n"]}},{"file":"src/components/arch/x86_64/idt.rs","count":5,"kinds":{"Clippy(Warn)":["warning: unused imports: `Entry`, `HandlerFunc`\n --> src/components/arch/x86_64/idt.rs:2:31\n  |\n2 | use x86_64::structures::idt::{Entry, HandlerFunc, InterruptDescriptorTable};\n  |                               ^^^^^  ^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n","warning: unused imports: `Entry`, `HandlerFunc`\n --> src/components/arch/x86_64/idt.rs:2:31\n  |\n2 | use x86_64::structures::idt::{Entry, HandlerFunc, InterruptDescriptorTable};\n  |                               ^^^^^  ^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n","warning: variable does not need to be mutable\n  --> src/components/arch/x86_64/idt.rs:22:13\n   |\n22 |         let mut idt = Self(InterruptDescriptorTable::new());\n   |             ----^^^\n   |             |\n   |             help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\n","warning: constant `NUM_INT` is never used\n --> src/components/arch/x86_64/idt.rs:4:7\n  |\n4 | const NUM_INT: usize = 256;\n  |       ^^^^^^^\n  |\n  = note: `#[warn(dead_code)]` on by default\n\n","warning: returning the result of a `let` binding from a block\n  --> src/components/arch/x86_64/idt.rs:35:9\n   |\n22 |         let mut idt = Self(InterruptDescriptorTable::new());\n   |         ---------------------------------------------------- unnecessary `let` binding\n...\n35 |         idt\n   |         ^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n   = note: `#[warn(clippy::let_and_return)]` on by default\nhelp: return the expression directly\n   |\n22 ~         \n23 | \n ...\n34 |         }\n35 ~         Self(InterruptDescriptorTable::new())\n   |\n\n"]}},{"file":"Not supported to display yet.","count":4,"kinds":{"Lockbud(Possibly)":["[2024-10-05T03:39:23Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.21/src/lib.rs:1408:11: 1408:39 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.21/src/lib.rs:1411:13: 1411:55 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-05T03:39:23Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }","[2024-10-05T03:39:28Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.21/src/lib.rs:1408:11: 1408:39 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.21/src/lib.rs:1411:13: 1411:55 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-05T03:39:28Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }","[2024-10-05T03:39:30Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.21/src/lib.rs:1408:11: 1408:39 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.21/src/lib.rs:1411:13: 1411:55 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-05T03:39:30Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }","[2024-10-05T03:39:33Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.21/src/lib.rs:1408:11: 1408:39 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.21/src/lib.rs:1411:13: 1411:55 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-05T03:39:33Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}},{"file":"src/components/boot/mod.rs","count":4,"kinds":{"Unformatted":["file: /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/mod.rs (original lines from 43 to 43)\n-/// \n+///\n","file: /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/mod.rs (original lines from 43 to 43)\n-/// \n+///\n","file: /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/mod.rs (original lines from 43 to 43)\n-/// \n+///\n","file: /home/runner/check/batch_1/Byte-OS/polyhal/src/components/boot/mod.rs (original lines from 43 to 43)\n-/// \n+///\n"]}},{"file":"src/components/pagetable/aarch64.rs","count":4,"kinds":{"Clippy(Warn)":["warning: operator precedence can trip the unwary\n   --> src/components/pagetable/aarch64.rs:206:10\n    |\n206 |         (self.0 >> 9 * n) & 0x1ff\n    |          ^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `self.0 >> (9 * n)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n    = note: `#[warn(clippy::precedence)]` on by default\n\n","warning: casting to the same type is unnecessary (`usize` -> `usize`)\n  --> src/components/pagetable/aarch64.rs:17:32\n   |\n17 |         self.0 = (ppn << 10) | flags.bits() as usize;\n   |                                ^^^^^^^^^^^^^^^^^^^^^ help: try: `flags.bits()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n   = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n","warning: casting to the same type is unnecessary (`usize` -> `usize`)\n  --> src/components/pagetable/aarch64.rs:42:30\n   |\n42 |         Self(ppn.to_addr() | flags.bits() as usize)\n   |                              ^^^^^^^^^^^^^^^^^^^^^ help: try: `flags.bits()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n","warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/components/pagetable/aarch64.rs:67:1\n   |\n67 | impl Into<MappingFlags> for PTEFlags {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: `#[warn(clippy::from_over_into)]` on by default\nhelp: replace the `Into` implementation with `From<components::pagetable::aarch64::PTEFlags>`\n   |\n67 ~ impl From<PTEFlags> for MappingFlags {\n68 ~     fn from(val: PTEFlags) -> Self {\n69 ~         if val.is_empty() {\n70 |             return MappingFlags::empty();\n ...\n73 | \n74 ~         if !val.contains(PTEFlags::AP_RO) {\n75 |             flags |= MappingFlags::W;\n76 |         }\n77 ~         if !val.contains(PTEFlags::UXN) || !val.contains(PTEFlags::PXN) {\n78 |             flags |= MappingFlags::X;\n79 |         }\n80 ~         if val.contains(PTEFlags::AP_EL0) {\n81 |             flags |= MappingFlags::U;\n82 |         }\n83 ~         if val.contains(PTEFlags::AF) {\n84 |             flags |= MappingFlags::A;\n85 |         }\n86 ~         if !val.contains(PTEFlags::NG) {\n   |\n\n"]}},{"file":"src/utils/mutex_no_irq.rs","count":4,"kinds":{"Clippy(Warn)":["warning: unsafe function's docs miss `# Safety` section\n  --> src/utils/mutex_no_irq.rs:59:5\n   |\n59 |     pub unsafe fn force_unlock(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n","warning: unsafe function's docs miss `# Safety` section\n  --> src/utils/mutex_no_irq.rs:59:5\n   |\n59 |     pub unsafe fn force_unlock(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n","warning: unsafe function's docs miss `# Safety` section\n  --> src/utils/mutex_no_irq.rs:59:5\n   |\n59 |     pub unsafe fn force_unlock(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n","warning: unsafe function's docs miss `# Safety` section\n  --> src/utils/mutex_no_irq.rs:59:5\n   |\n59 |     pub unsafe fn force_unlock(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"]}},{"file":"src/components/boot/x86_64.rs","count":3,"kinds":{"Clippy(Warn)":["warning: transmute from an integer to a pointer\n  --> src/components/boot/x86_64.rs:65:19\n   |\n65 |         let ptr = mem::transmute(addr | VIRT_ADDR_START as u64);\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(addr | VIRT_ADDR_START as u64) as *const u8`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute\n   = note: `#[warn(clippy::useless_transmute)]` on by default\n\n","warning: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> src/components/boot/x86_64.rs:145:5\n    |\n145 | //     CpuId::new().get_feature_info().map(|features| {\n146 | ||         // Add OSXSave flag to cr4 register if supported\n147 | ||         if features.has_xsave() {\n148 | ||             unsafe {\n...   ||\n156 | ||         }\n157 | ||     });\n    | ||______^- help: try: `if let Some(features) = CpuId::new().get_feature_info() { ... }`\n    |  |______|\n    | \n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn\n    = note: `#[warn(clippy::option_map_unit_fn)]` on by default\n\n","warning: `filter` for `Some` followed by `unwrap`\n   --> src/components/boot/x86_64.rs:186:10\n    |\n186 |           .filter(Option::is_some)\n    |  __________^\n187 | |         .map(Option::unwrap)\n    | |____________________________^ help: consider using `flatten` instead: `flatten()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_filter_map\n    = note: `#[warn(clippy::option_filter_map)]` on by default\n\n"]}},{"file":"src/components/pagetable/x86_64.rs","count":3,"kinds":{"Clippy(Warn)":["warning: operator precedence can trip the unwary\n   --> src/components/pagetable/x86_64.rs:179:10\n    |\n179 |         (self.0 >> 9 * n) & 0x1ff\n    |          ^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `self.0 >> (9 * n)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n    = note: `#[warn(clippy::precedence)]` on by default\n\n","warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/components/pagetable/x86_64.rs:64:1\n   |\n64 | impl Into<MappingFlags> for PTEFlags {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: `#[warn(clippy::from_over_into)]` on by default\nhelp: replace the `Into` implementation with `From<components::pagetable::x86_64::PTEFlags>`\n   |\n64 ~ impl From<PTEFlags> for MappingFlags {\n65 ~     fn from(val: PTEFlags) -> Self {\n66 |         let mut res = MappingFlags::empty();\n67 ~         if val.contains(PTEFlags::RW) {\n68 |             res |= MappingFlags::W\n69 |         };\n70 ~         if val.contains(PTEFlags::US) {\n71 |             res |= MappingFlags::U\n72 |         };\n73 ~         if val.contains(PTEFlags::A) {\n74 |             res |= MappingFlags::A;\n75 |         }\n76 ~         if val.contains(PTEFlags::D) {\n77 |             res |= MappingFlags::D;\n78 |         }\n79 ~         if !val.contains(PTEFlags::XD) {\n   |\n\n","warning: casting to the same type is unnecessary (`usize` -> `usize`)\n   --> src/components/pagetable/x86_64.rs:136:58\n    |\n136 |         pml4[0x1ff] = PTE((_boot_mapping_pdpt as usize - VIRT_ADDR_START as usize) | 0x3);\n    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `VIRT_ADDR_START`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n    = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n"]}},{"file":"src/components/kcontext/aarch64.rs","count":2,"kinds":{"Clippy(Warn)":["warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/aarch64.rs:127:1\n    |\n127 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n","warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/aarch64.rs:143:1\n    |\n143 | / pub unsafe extern \"C\" fn context_switch_pt(\n144 | |     from: *mut KContext,\n145 | |     to: *const KContext,\n146 | |     pt_token: PageTable,\n147 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"]}},{"file":"src/components/kcontext/loongarch64.rs","count":2,"kinds":{"Clippy(Warn)":["warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/loongarch64.rs:134:1\n    |\n134 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n","warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/loongarch64.rs:150:1\n    |\n150 | / pub unsafe extern \"C\" fn context_switch_pt(\n151 | |     from: *mut KContext,\n152 | |     to: *const KContext,\n153 | |     pt_token: PageTable,\n154 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"]}},{"file":"src/components/kcontext/riscv64.rs","count":2,"kinds":{"Clippy(Warn)":["warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/riscv64.rs:150:1\n    |\n150 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n","warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/riscv64.rs:166:1\n    |\n166 | / pub unsafe extern \"C\" fn context_switch_pt(\n167 | |     from: *mut KContext,\n168 | |     to: *const KContext,\n169 | |     pt_token: PageTable,\n170 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"]}},{"file":"src/components/kcontext/x86_64.rs","count":2,"kinds":{"Clippy(Warn)":["warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/x86_64.rs:149:1\n    |\n149 | pub unsafe extern \"C\" fn context_switch(from: *mut KContext, to: *const KContext) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n","warning: unsafe function's docs miss `# Safety` section\n   --> src/components/kcontext/x86_64.rs:170:1\n    |\n170 | / pub unsafe extern \"C\" fn context_switch_pt(\n171 | |     from: *mut KContext,\n172 | |     to: *const KContext,\n173 | |     pt_token: PageTable,\n174 | | ) {\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"]}},{"file":"src/components/pagetable/riscv64.rs","count":2,"kinds":{"Clippy(Warn)":["warning: operator precedence can trip the unwary\n   --> src/components/pagetable/riscv64.rs:205:10\n    |\n205 |         (self.0 >> 9 * n) & 0x1ff\n    |          ^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `self.0 >> (9 * n)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n    = note: `#[warn(clippy::precedence)]` on by default\n\n","warning: unneeded `return` statement\n  --> src/components/pagetable/riscv64.rs:60:9\n   |\n60 | /         return self.flags().contains(PTEFlags::V)\n61 | |             && !(self.flags().contains(PTEFlags::R)\n62 | |                 || self.flags().contains(PTEFlags::W)\n63 | |                 || self.flags().contains(PTEFlags::X));\n   | |______________________________________________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n60 ~         self.flags().contains(PTEFlags::V)\n61 +             && !(self.flags().contains(PTEFlags::R)\n62 +                 || self.flags().contains(PTEFlags::W)\n63 ~                 || self.flags().contains(PTEFlags::X))\n   |\n\n"]}},{"file":"src/components/percpu/riscv64.rs","count":2,"kinds":{"Clippy(Warn)":["warning: unused macro definition: `PerCPUReservedOffset`\n  --> src/components/percpu/riscv64.rs:18:18\n   |\n18 | pub(crate) macro PerCPUReservedOffset($field: ident) {\n   |                  ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_macros)]` on by default\n\n","warning: struct `PerCPUReserved` is never constructed\n --> src/components/percpu/riscv64.rs:5:19\n  |\n5 | pub(crate) struct PerCPUReserved {\n  |                   ^^^^^^^^^^^^^^\n\n"]}},{"file":"src/components/trapframe/x86_64.rs","count":2,"kinds":{"Clippy(Warn)":["warning: methods `save` and `restore` are never used\n  --> src/components/trapframe/x86_64.rs:28:19\n   |\n26 | impl FxsaveArea {\n   | --------------- methods in this implementation\n27 |     #[inline]\n28 |     pub(crate) fn save(&mut self) {\n   |                   ^^^^\n...\n33 |     pub(crate) fn restore(&self) {\n   |                   ^^^^^^^\n\n","warning: methods `save` and `restore` are never used\n  --> src/components/trapframe/x86_64.rs:28:19\n   |\n26 | impl FxsaveArea {\n   | --------------- methods in this implementation\n27 |     #[inline]\n28 |     pub(crate) fn save(&mut self) {\n   |                   ^^^^\n...\n33 |     pub(crate) fn restore(&self) {\n   |                   ^^^^^^^\n\n"]}},{"file":"src/components/arch/aarch64/psci.rs","count":1,"kinds":{"Clippy(Warn)":["warning: empty `loop {}` wastes CPU cycles\n   --> src/components/arch/aarch64/psci.rs:98:5\n    |\n98  | /     loop {\n99  | |         // crate::arch::halt();\n100 | |     }\n    | |_____^\n    |\n    = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n    = note: `#[warn(clippy::empty_loop)]` on by default\n\n"]}},{"file":"src/components/arch/x86_64/gdt.rs","count":1,"kinds":{"Clippy(Warn)":["warning: redundant closure\n   --> src/components/arch/x86_64/gdt.rs:102:23\n    |\n102 |         tss.call_once(|| TaskStateSegment::new());\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `TaskStateSegment::new`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n    = note: `#[warn(clippy::redundant_closure)]` on by default\n\n"]}},{"file":"src/components/boot/loongarch64.rs","count":1,"kinds":{"Clippy(Warn)":["warning: unused import: `DebugConsole`\n --> src/components/boot/loongarch64.rs:6:48\n  |\n6 |         debug_console::{display_info, println, DebugConsole},\n  |                                                ^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n"]}},{"file":"src/components/instruction/x86_64/shutdown.rs","count":1,"kinds":{"Clippy(Warn)":["warning: empty `loop {}` wastes CPU cycles\n --> src/components/instruction/x86_64/shutdown.rs:6:5\n  |\n6 |     loop {}\n  |     ^^^^^^^\n  |\n  = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n  = note: `#[warn(clippy::empty_loop)]` on by default\n\n"]}},{"file":"src/components/multicore/loongarch64.rs","count":1,"kinds":{"Clippy(Warn)":["warning: casting function pointer `crate::components::boot::_start_secondary` to `u64`\n --> src/components/multicore/loongarch64.rs:5:19\n  |\n5 |     csr_mail_send(crate::components::boot::_start_secondary as _, hart_id, 0);\n  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::components::boot::_start_secondary as usize`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n  = note: `#[warn(clippy::fn_to_numeric_cast)]` on by default\n\n"]}},{"file":"src/components/timer/loongarch64.rs","count":1,"kinds":{"Clippy(Warn)":["warning: redundant closure\n --> src/components/timer/loongarch64.rs:8:38\n  |\n8 | static FREQ: Lazy<usize> = Lazy::new(|| get_timer_freq());\n  |                                      ^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `get_timer_freq`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n"]}},{"file":"src/components/timer/x86_64.rs","count":1,"kinds":{"Clippy(Warn)":["warning: digits grouped inconsistently by underscores\n --> src/components/timer/x86_64.rs:6:34\n  |\n6 | static mut CPU_FREQ_MHZ: usize = 4000_000_000;\n  |                                  ^^^^^^^^^^^^ help: consider: `4_000_000_000`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\n  = note: `#[warn(clippy::inconsistent_digit_grouping)]` on by default\n\n"]}},{"file":"src/components/trapframe/riscv64.rs","count":1,"kinds":{"Clippy(Warn)":["warning: you should consider adding a `Default` implementation for `TrapFrame`\n  --> src/components/trapframe/riscv64.rs:64:5\n   |\n64 | /     pub fn new() -> Self {\n65 | |         TrapFrame {\n66 | |             x: [0usize; 32],\n67 | |             sstatus: sstatus::read(),\n...  |\n70 | |         }\n71 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n   = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n   |\n61 + impl Default for TrapFrame {\n62 +     fn default() -> Self {\n63 +         Self::new()\n64 +     }\n65 + }\n   |\n\n"]}}]},{"user":"Byte-OS","repo":"polyhal","pkg":"example","count":39,"raw_reports":[{"file":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/macros.rs","count":6,"kinds":{"Clippy(Warn)":["warning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","warning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","warning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","warning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","warning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","warning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"]}},{"file":"Not supported to display yet.","count":6,"kinds":{"Lockbud(Possibly)":["[2024-10-05T03:38:49Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-05T03:38:49Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }","[2024-10-05T03:38:56Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-05T03:38:56Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }","[2024-10-05T03:38:58Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-05T03:38:58Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }","[2024-10-05T03:39:01Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-05T03:39:01Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }","[2024-10-05T03:39:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-05T03:39:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }","[2024-10-05T03:39:09Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-05T03:39:09Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}},{"file":"src/frame.rs","count":6,"kinds":{"Clippy(Warn)":["warning: redundant closure\n --> src/frame.rs:6:15\n  |\n6 |     Lazy::new(|| LockedFrameAllocator::new());\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `LockedFrameAllocator::new`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n","warning: redundant closure\n --> src/frame.rs:6:15\n  |\n6 |     Lazy::new(|| LockedFrameAllocator::new());\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `LockedFrameAllocator::new`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n","warning: redundant closure\n --> src/frame.rs:6:15\n  |\n6 |     Lazy::new(|| LockedFrameAllocator::new());\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `LockedFrameAllocator::new`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n","warning: redundant closure\n --> src/frame.rs:6:15\n  |\n6 |     Lazy::new(|| LockedFrameAllocator::new());\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `LockedFrameAllocator::new`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n","warning: redundant closure\n --> src/frame.rs:6:15\n  |\n6 |     Lazy::new(|| LockedFrameAllocator::new());\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `LockedFrameAllocator::new`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n","warning: redundant closure\n --> src/frame.rs:6:15\n  |\n6 |     Lazy::new(|| LockedFrameAllocator::new());\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `LockedFrameAllocator::new`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n  = note: `#[warn(clippy::redundant_closure)]` on by default\n\n"]}},{"file":"src/main.rs","count":6,"kinds":{"Clippy(Warn)":["warning: empty `loop {}` wastes CPU cycles\n  --> src/main.rs:70:9\n   |\n70 |         loop {}\n   |         ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n","warning: empty `loop {}` wastes CPU cycles\n  --> src/main.rs:70:9\n   |\n70 |         loop {}\n   |         ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n","warning: empty `loop {}` wastes CPU cycles\n  --> src/main.rs:70:9\n   |\n70 |         loop {}\n   |         ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n","warning: empty `loop {}` wastes CPU cycles\n  --> src/main.rs:70:9\n   |\n70 |         loop {}\n   |         ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n","warning: empty `loop {}` wastes CPU cycles\n  --> src/main.rs:70:9\n   |\n70 |         loop {}\n   |         ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n","warning: empty `loop {}` wastes CPU cycles\n  --> src/main.rs:70:9\n   |\n70 |         loop {}\n   |         ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n"]}},{"file":"src/pci.rs","count":5,"kinds":{"Clippy(Warn)":["warning: unneeded `return` statement\n  --> src/pci.rs:14:94\n   |\n14 |               enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |  ______________________________________________________________________________________________^\n15 | |             return;\n   | |__________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n14 -             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n15 -             return;\n14 +             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |\n\n","warning: unneeded `return` statement\n  --> src/pci.rs:14:94\n   |\n14 |               enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |  ______________________________________________________________________________________________^\n15 | |             return;\n   | |__________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n14 -             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n15 -             return;\n14 +             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |\n\n","warning: unneeded `return` statement\n  --> src/pci.rs:14:94\n   |\n14 |               enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |  ______________________________________________________________________________________________^\n15 | |             return;\n   | |__________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n14 -             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n15 -             return;\n14 +             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |\n\n","warning: unneeded `return` statement\n  --> src/pci.rs:14:94\n   |\n14 |               enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |  ______________________________________________________________________________________________^\n15 | |             return;\n   | |__________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n14 -             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n15 -             return;\n14 +             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |\n\n","warning: unneeded `return` statement\n  --> src/pci.rs:14:94\n   |\n14 |               enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |  ______________________________________________________________________________________________^\n15 | |             return;\n   | |__________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n14 -             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n15 -             return;\n14 +             enumerate_pci((pci_addr.starting_address as usize | VIRT_ADDR_START) as *mut u8);\n   |\n\n"]}},{"file":"/home/runner/check/batch_1/Byte-OS/polyhal/src/components/percpu/riscv64.rs","count":4,"kinds":{"Clippy(Warn)":["warning: unused macro definition: `PerCPUReservedOffset`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/percpu/riscv64.rs:18:18\n   |\n18 | pub(crate) macro PerCPUReservedOffset($field: ident) {\n   |                  ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_macros)]` on by default\n\n","warning: struct `PerCPUReserved` is never constructed\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/percpu/riscv64.rs:5:19\n  |\n5 | pub(crate) struct PerCPUReserved {\n  |                   ^^^^^^^^^^^^^^\n\n","warning: unused macro definition: `PerCPUReservedOffset`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/percpu/riscv64.rs:18:18\n   |\n18 | pub(crate) macro PerCPUReservedOffset($field: ident) {\n   |                  ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_macros)]` on by default\n\n","warning: struct `PerCPUReserved` is never constructed\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/percpu/riscv64.rs:5:19\n  |\n5 | pub(crate) struct PerCPUReserved {\n  |                   ^^^^^^^^^^^^^^\n\n"]}},{"file":"/home/runner/check/batch_1/Byte-OS/polyhal/src/components/common.rs","count":3,"kinds":{"Clippy(Warn)":["warning: function `parse_dtb_info` is never used\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/common.rs:77:15\n   |\n77 | pub(crate) fn parse_dtb_info() {\n   |               ^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n","warning: function `parse_dtb_info` is never used\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/common.rs:77:15\n   |\n77 | pub(crate) fn parse_dtb_info() {\n   |               ^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n","warning: function `parse_dtb_info` is never used\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/common.rs:77:15\n   |\n77 | pub(crate) fn parse_dtb_info() {\n   |               ^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n"]}},{"file":"(virtual) lockbud","count":3,"kinds":{"Cargo":["// pkg_name=example, checker=Lockbud\n// toolchain=nightly-2023-12-01, target=loongarch64-unknown-none\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target loongarch64-unknown-none\n   Compiling scopeguard v1.2.0\n   Compiling bitflags v2.6.0\n   Compiling lock_api v0.4.11\n   Compiling log v0.4.22\n   Compiling byteorder v1.5.0\n[2024-10-05T03:38:56Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-05T03:38:56Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling bit_field v0.10.2\n   Compiling bitflags v1.3.2\n   Compiling zerocopy v0.7.35\n   Compiling cfg-if v1.0.0\n   Compiling fdt v0.1.5\n   Compiling loongArch64 v0.2.4\n   Compiling spin v0.9.8\n   Compiling buddy_system_allocator v0.9.1\n   Compiling polyhal v0.1.3 (/home/runner/check/batch_1/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/debug_console/loongarch64.rs:5:11\n  |\n5 | #[cfg(not(board = \"2k1000\"))]\n  |           ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/debug_console/loongarch64.rs:7:7\n  |\n7 | #[cfg(board = \"2k1000\")]\n  |       ^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\n   Compiling virtio-drivers v0.7.5\nwarning: field `0` is never read\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/irq/mod.rs:35:22\n   |\n35 | pub struct IRQVector(pub(crate) usize);\n   |            --------- ^^^^^^^^^^^^^^^^\n   |            |\n   |            field in this struct\n   |\n   = note: `IRQVector` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n   = note: `#[warn(dead_code)]` on by default\nhelp: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\n   |\n35 | pub struct IRQVector(());\n   |                      ~~\n\nwarning: field `0` is never read\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/percpu/mod.rs:15:19\n   |\n15 | struct PerCPUDATA([u8; PAGE_SIZE]);\n   |        ---------- ^^^^^^^^^^^^^^^\n   |        |\n   |        field in this struct\n   |\nhelp: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\n   |\n15 | struct PerCPUDATA(());\n   |                   ~~\n\nwarning: `polyhal` (lib) generated 9 warnings\n   Compiling example v0.1.0 (/home/runner/check/batch_1/Byte-OS/polyhal/example)\nwarning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: linking with `rust-lld` failed: exit status: 1\n  |\n  = note: LC_ALL=\"C\" PATH=\"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin:/snap/bin:/home/runner/.local/bin:/opt/pipx_bin:/home/runner/.cargo/bin:/home/runner/.config/composer/vendor/bin:/usr/local/.ghcup/bin:/home/runner/.dotnet/tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\" VSLANG=\"1033\" \"rust-lld\" \"-flavor\" \"gnu\" \"/tmp/rustcjwOwxm/symbols.o\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/example-121b3f177e864c39.example.8dc5fc612147e823-cgu.0.rcgu.o\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/example-121b3f177e864c39.example.8dc5fc612147e823-cgu.1.rcgu.o\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/example-121b3f177e864c39.example.8dc5fc612147e823-cgu.2.rcgu.o\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/example-121b3f177e864c39.example.8dc5fc612147e823-cgu.3.rcgu.o\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/example-121b3f177e864c39.0j66n1yuqvma5gajh2eqaju2e.rcgu.o\" \"--as-needed\" \"-L\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps\" \"-L\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/debug/deps\" \"-L\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib\" \"-Bstatic\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libvirtio_drivers-c71b4244ead45a74.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libzerocopy-b65a73bda5dd105a.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libbyteorder-a6608e82b803455e.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libpolyhal-0ae174ba426b0f7c.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libloongArch64-5e6a7ff73e9045d6.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libbitflags-7d4c229935312c2e.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libbit_field-f205bae68304904b.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libcfg_if-e5b2c08080a8d0bd.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libbitflags-a49aa3b7c7494a35.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libfdt-45db0bc4944b4493.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/liblog-531edc9e0960d321.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libbuddy_system_allocator-0f74cc2c33704f4a.rlib\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/liballoc-cf622d6ac0c1207e.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libspin-e73be5f20d839958.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/liblock_api-cb5b9691a0c0d257.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/libscopeguard-e4c379832e03342e.rlib\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/librustc_std_workspace_core-3b1e26e39e9a51e8.rlib\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcore-d6c82fdbb3df4fe1.rlib\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib\" \"-Bdynamic\" \"--eh-frame-hdr\" \"-z\" \"noexecstack\" \"-L\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib\" \"-o\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/loongarch64-unknown-none/debug/deps/example-121b3f177e864c39\" \"--gc-sections\" \"-Tlinker/linker-loongarch64.ld\"\n  = note: rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-absvdi2.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-absvsi2.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-absvti2.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-addtf3.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-addvdi3.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-addvsi3.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-addvti3.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-clzdi2.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-clzsi2.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-clzti2.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-cmpdi2.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-cmpti2.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-ctzdi2.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-ctzsi2.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-ctzti2.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-divdc3.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-divsc3.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-divtf3.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-extenddftf2.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: /home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/loongarch64-unknown-none/lib/libcompiler_builtins-1c0eeb3885babbe8.rlib(45c91108d938afe8-extendhfsf2.o) is incompatible with /tmp/rustcjwOwxm/symbols.o\n          rust-lld: error: too many errors emitted, stopping now (use --error-limit=0 to see all errors)\n          \n\nwarning: `example` (bin \"example\") generated 1 warning\nerror: could not compile `example` (bin \"example\") due to 1 previous error; 1 warning emitted\n","// pkg_name=example, checker=Lockbud\n// toolchain=nightly-2023-12-01, target=riscv64imac-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64imac-unknown-none-elf\n   Compiling scopeguard v1.2.0\n   Compiling static_assertions v1.1.0\n   Compiling lock_api v0.4.11\n   Compiling riscv v0.11.1\n   Compiling byteorder v1.5.0\n   Compiling sbi-spec v0.0.4\n   Compiling critical-section v1.1.2\n   Compiling embedded-hal v1.0.0\n   Compiling log v0.4.22\n   Compiling bitflags v2.6.0\n[2024-10-05T03:39:01Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-05T03:39:01Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling spin v0.9.8\n   Compiling zerocopy v0.7.35\n   Compiling sbi-rt v0.0.2\n   Compiling fdt v0.1.5\n   Compiling cfg-if v1.0.0\n   Compiling buddy_system_allocator v0.9.1\n   Compiling polyhal v0.1.3 (/home/runner/check/batch_1/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:23:15\n   |\n23 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:39:19\n   |\n39 |         #[cfg(not(c906))]\n   |                   ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:94:15\n   |\n94 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:96:15\n   |\n96 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:98:15\n   |\n98 |         #[cfg(c906)]\n   |               ^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:100:15\n    |\n100 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/pagetable/riscv64.rs:102:15\n    |\n102 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unused macro definition: `PerCPUReservedOffset`\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/percpu/riscv64.rs:18:18\n   |\n18 | pub(crate) macro PerCPUReservedOffset($field: ident) {\n   |                  ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_macros)]` on by default\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\n   Compiling virtio-drivers v0.7.5\nwarning: function `parse_dtb_info` is never used\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/common.rs:77:15\n   |\n77 | pub(crate) fn parse_dtb_info() {\n   |               ^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\nwarning: field `0` is never read\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/percpu/mod.rs:15:19\n   |\n15 | struct PerCPUDATA([u8; PAGE_SIZE]);\n   |        ---------- ^^^^^^^^^^^^^^^\n   |        |\n   |        field in this struct\n   |\nhelp: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\n   |\n15 | struct PerCPUDATA(());\n   |                   ~~\n\nwarning: struct `PerCPUReserved` is never constructed\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/percpu/riscv64.rs:5:19\n  |\n5 | pub(crate) struct PerCPUReserved {\n  |                   ^^^^^^^^^^^^^^\n\nwarning: `polyhal` (lib) generated 16 warnings\n   Compiling example v0.1.0 (/home/runner/check/batch_1/Byte-OS/polyhal/example)\nwarning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: linking with `rust-lld` failed: exit status: 1\n  |\n  = note: LC_ALL=\"C\" PATH=\"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin:/snap/bin:/home/runner/.local/bin:/opt/pipx_bin:/home/runner/.cargo/bin:/home/runner/.config/composer/vendor/bin:/usr/local/.ghcup/bin:/home/runner/.dotnet/tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\" VSLANG=\"1033\" \"rust-lld\" \"-flavor\" \"gnu\" \"/tmp/rustcqWe9KK/symbols.o\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/example-166f30c3a7110a42.example.54a2e95f759bcc61-cgu.0.rcgu.o\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/example-166f30c3a7110a42.example.54a2e95f759bcc61-cgu.1.rcgu.o\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/example-166f30c3a7110a42.example.54a2e95f759bcc61-cgu.2.rcgu.o\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/example-166f30c3a7110a42.example.54a2e95f759bcc61-cgu.3.rcgu.o\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/example-166f30c3a7110a42.8cs86yaczhouw8hb7461y288f.rcgu.o\" \"--as-needed\" \"-L\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps\" \"-L\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/debug/deps\" \"-L\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/riscv64imac-unknown-none-elf/lib\" \"-Bstatic\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libvirtio_drivers-fcf6b8727f2597cf.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libzerocopy-89aac2adc9889c54.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libbyteorder-f161e0329d454c3f.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libpolyhal-b82d72bda98f2e93.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libsbi_rt-35b66abd80ea6e3f.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libsbi_spec-7b28f0ef5d1e6a3b.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libriscv-771469dbdf56ac8a.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libcritical_section-c695224287528485.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libembedded_hal-11918fc9ddc2f56a.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libcfg_if-dfe8e9d3ebb4e29e.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libbitflags-e84e155992e8f5f5.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libfdt-ff9e0fb5d8925713.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/liblog-f2956d8a6b25dda3.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libbuddy_system_allocator-41816819844669f8.rlib\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/riscv64imac-unknown-none-elf/lib/liballoc-fa0aa15e8a57a9a2.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libspin-d535143e1fe0a006.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/liblock_api-61fbf0ef368d8f11.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libscopeguard-332589bf2fdf0e23.rlib\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/riscv64imac-unknown-none-elf/lib/librustc_std_workspace_core-ee495ab958ee9151.rlib\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/riscv64imac-unknown-none-elf/lib/libcore-11e6a2c34a93b553.rlib\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/riscv64imac-unknown-none-elf/lib/libcompiler_builtins-b9e192a8d71bed31.rlib\" \"-Bdynamic\" \"-z\" \"noexecstack\" \"-L\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/riscv64imac-unknown-none-elf/lib\" \"-o\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/example-166f30c3a7110a42\" \"--gc-sections\"\n  = note: rust-lld: error: undefined symbol: _sbss\n          >>> referenced by mod.rs:31 (src/components/boot/mod.rs:31)\n          >>>               polyhal-b82d72bda98f2e93.polyhal.55454159a88f41e1-cgu.3.rcgu.o:(polyhal::components::boot::clear_bss::h92565a4b5164178c) in archive /home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libpolyhal-b82d72bda98f2e93.rlib\n          >>> referenced by mod.rs:0 (src/components/boot/mod.rs:0)\n          >>>               polyhal-b82d72bda98f2e93.polyhal.55454159a88f41e1-cgu.3.rcgu.o:(polyhal::components::boot::clear_bss::h92565a4b5164178c) in archive /home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libpolyhal-b82d72bda98f2e93.rlib\n          \n          rust-lld: error: undefined symbol: _ebss\n          >>> referenced by mod.rs:31 (src/components/boot/mod.rs:31)\n          >>>               polyhal-b82d72bda98f2e93.polyhal.55454159a88f41e1-cgu.3.rcgu.o:(polyhal::components::boot::clear_bss::h92565a4b5164178c) in archive /home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libpolyhal-b82d72bda98f2e93.rlib\n          >>> referenced by mod.rs:0 (src/components/boot/mod.rs:0)\n          >>>               polyhal-b82d72bda98f2e93.polyhal.55454159a88f41e1-cgu.3.rcgu.o:(polyhal::components::boot::clear_bss::h92565a4b5164178c) in archive /home/runner/check/batch_1/Byte-OS/polyhal/example/target/riscv64imac-unknown-none-elf/debug/deps/libpolyhal-b82d72bda98f2e93.rlib\n          \n\nwarning: `example` (bin \"example\") generated 1 warning\nerror: could not compile `example` (bin \"example\") due to 1 previous error; 1 warning emitted\n","// pkg_name=example, checker=Lockbud\n// toolchain=nightly-2023-12-01, target=aarch64-unknown-none\n// pkg_dir=/home/runner/check/batch_1/Byte-OS/polyhal/example\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target aarch64-unknown-none\n   Compiling scopeguard v1.2.0\n   Compiling tock-registers v0.8.1\n   Compiling lock_api v0.4.11\n   Compiling bitflags v2.6.0\n   Compiling log v0.4.22\n   Compiling byteorder v1.5.0\n[2024-10-05T03:39:09Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-05T03:39:09Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling arm_gicv2 v0.1.0\n   Compiling spin v0.9.8\n   Compiling zerocopy v0.7.35\n   Compiling aarch64-cpu v9.4.0\n   Compiling arm_pl011 v0.1.0\n   Compiling cfg-if v1.0.0\n   Compiling fdt v0.1.5\n   Compiling buddy_system_allocator v0.9.1\n   Compiling virtio-drivers v0.7.5\n   Compiling polyhal v0.1.3 (/home/runner/check/batch_1/Byte-OS/polyhal)\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:219:15\n    |\n219 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, `windows`\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:224:15\n    |\n224 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `board`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:240:15\n    |\n240 |         #[cfg(board = \"2k1000\")]\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(board, values(\"2k1000\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(board, values(\\\"2k1000\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `c906`\n   --> /home/runner/check/batch_1/Byte-OS/polyhal/src/addr.rs:244:15\n    |\n244 |         #[cfg(c906)]\n    |               ^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(c906)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(c906)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: the feature `offset_of` has been stable since 1.77.0 and no longer requires an attribute to enable\n --> /home/runner/check/batch_1/Byte-OS/polyhal/src/lib.rs:8:12\n  |\n8 | #![feature(offset_of)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: field `0` is never read\n  --> /home/runner/check/batch_1/Byte-OS/polyhal/src/components/percpu/mod.rs:15:19\n   |\n15 | struct PerCPUDATA([u8; PAGE_SIZE]);\n   |        ---------- ^^^^^^^^^^^^^^^\n   |        |\n   |        field in this struct\n   |\n   = note: `#[warn(dead_code)]` on by default\nhelp: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\n   |\n15 | struct PerCPUDATA(());\n   |                   ~~\n\nwarning: `polyhal` (lib) generated 6 warnings\n   Compiling example v0.1.0 (/home/runner/check/batch_1/Byte-OS/polyhal/example)\nwarning: unreachable statement\n   --> src/main.rs:123:5\n    |\n117 | /     loop {\n118 | |         if let Some(c) = DebugConsole::getchar() {\n119 | |             DebugConsole::putchar(c);\n120 | |         }\n121 | |     }\n    | |_____- any code following this expression is unreachable\n122 |\n123 |       log::info!(\"Run END. Shutdown successfully.\");\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n    = note: this warning originates in the macro `$crate::log` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: linking with `rust-lld` failed: exit status: 1\n  |\n  = note: LC_ALL=\"C\" PATH=\"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin:/snap/bin:/home/runner/.local/bin:/opt/pipx_bin:/home/runner/.cargo/bin:/home/runner/.config/composer/vendor/bin:/usr/local/.ghcup/bin:/home/runner/.dotnet/tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\" VSLANG=\"1033\" \"rust-lld\" \"-flavor\" \"gnu\" \"--fix-cortex-a53-843419\" \"/tmp/rustcXhB9k3/symbols.o\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/example-d907036488dfe776.example.fc76498f651afcb6-cgu.0.rcgu.o\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/example-d907036488dfe776.example.fc76498f651afcb6-cgu.1.rcgu.o\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/example-d907036488dfe776.example.fc76498f651afcb6-cgu.2.rcgu.o\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/example-d907036488dfe776.akb5dy9rebmqq3j0xs823ur96.rcgu.o\" \"--as-needed\" \"-L\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps\" \"-L\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/debug/deps\" \"-L\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/aarch64-unknown-none/lib\" \"-Bstatic\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libvirtio_drivers-7205d20d3c85167f.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libzerocopy-00f6727730b34584.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libbyteorder-6251f93bd70992ab.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libpolyhal-bdfcbb516c1c83c9.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libarm_gicv2-9c3e5d2b8b907842.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libarm_pl011-c5b8dedabc130c76.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libaarch64_cpu-ad3948c631827945.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libtock_registers-871317267119ad1e.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libcfg_if-51d5ccf19a0009d3.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libbitflags-a5ce44a6c55cc69a.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libfdt-80c4b13ca541a733.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/liblog-fdc3a78364d41b4d.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libbuddy_system_allocator-1b5fa0b34d369ebb.rlib\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/aarch64-unknown-none/lib/liballoc-dfa46a1477c2b5e1.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libspin-892e798bcf4d11e9.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/liblock_api-b34245d8f1f66b77.rlib\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libscopeguard-890219094bd4fd6e.rlib\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/aarch64-unknown-none/lib/librustc_std_workspace_core-97b04805942f7790.rlib\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/aarch64-unknown-none/lib/libcore-9af6731f468db4d1.rlib\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/aarch64-unknown-none/lib/libcompiler_builtins-ba9ccc0c4e3e7a25.rlib\" \"-Bdynamic\" \"--eh-frame-hdr\" \"-z\" \"noexecstack\" \"-L\" \"/home/runner/.rustup/toolchains/nightly-2024-05-21-x86_64-unknown-linux-gnu/lib/rustlib/aarch64-unknown-none/lib\" \"-o\" \"/home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/example-d907036488dfe776\" \"--gc-sections\"\n  = note: rust-lld: error: undefined symbol: _sbss\n          >>> referenced by mod.rs:31 (src/components/boot/mod.rs:31)\n          >>>               polyhal-bdfcbb516c1c83c9.polyhal.21a99f55058bbda5-cgu.2.rcgu.o:(polyhal::components::boot::clear_bss::h87753ff3f9dda8b0) in archive /home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libpolyhal-bdfcbb516c1c83c9.rlib\n          >>> referenced by mod.rs:31 (src/components/boot/mod.rs:31)\n          >>>               polyhal-bdfcbb516c1c83c9.polyhal.21a99f55058bbda5-cgu.2.rcgu.o:(polyhal::components::boot::clear_bss::h87753ff3f9dda8b0) in archive /home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libpolyhal-bdfcbb516c1c83c9.rlib\n          >>> referenced by mod.rs:31 (src/components/boot/mod.rs:31)\n          >>>               polyhal-bdfcbb516c1c83c9.polyhal.21a99f55058bbda5-cgu.2.rcgu.o:(polyhal::components::boot::clear_bss::h87753ff3f9dda8b0) in archive /home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libpolyhal-bdfcbb516c1c83c9.rlib\n          >>> referenced 1 more times\n          \n          rust-lld: error: undefined symbol: _ebss\n          >>> referenced by mod.rs:31 (src/components/boot/mod.rs:31)\n          >>>               polyhal-bdfcbb516c1c83c9.polyhal.21a99f55058bbda5-cgu.2.rcgu.o:(polyhal::components::boot::clear_bss::h87753ff3f9dda8b0) in archive /home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libpolyhal-bdfcbb516c1c83c9.rlib\n          >>> referenced by mod.rs:31 (src/components/boot/mod.rs:31)\n          >>>               polyhal-bdfcbb516c1c83c9.polyhal.21a99f55058bbda5-cgu.2.rcgu.o:(polyhal::components::boot::clear_bss::h87753ff3f9dda8b0) in archive /home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libpolyhal-bdfcbb516c1c83c9.rlib\n          >>> referenced by mod.rs:31 (src/components/boot/mod.rs:31)\n          >>>               polyhal-bdfcbb516c1c83c9.polyhal.21a99f55058bbda5-cgu.2.rcgu.o:(polyhal::components::boot::clear_bss::h87753ff3f9dda8b0) in archive /home/runner/check/batch_1/Byte-OS/polyhal/example/target/aarch64-unknown-none/debug/deps/libpolyhal-bdfcbb516c1c83c9.rlib\n          >>> referenced 1 more times\n          \n\nwarning: `example` (bin \"example\") generated 1 warning\nerror: could not compile `example` (bin \"example\") due to 1 previous error; 1 warning emitted\n"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Mirai","Lockbud(Probably)","Lockbud(Possibly)","Unformatted"]}