{
  "repo": {
    "user": "arceos-hypervisor",
    "repo": "axvm"
  },
  "data": [
    {
      "user": "arceos-hypervisor",
      "repo": "axvm",
      "pkg": "axvm",
      "count": 81,
      "raw_reports": [
        {
          "file": "/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs",
          "features": "",
          "count": 15,
          "kinds": {
            "Clippy(Error)": [
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
            ],
            "Mirai": [
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs",
          "features": "",
          "count": 12,
          "kinds": {
            "Clippy(Error)": [
              "error[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n110 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\n",
              "error[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> EPTEntry`\n               found signature `fn(PhysAddr) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 -     fn new_table(paddr: HostPhysAddr) -> Self {\n117 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\n",
              "error[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&EPTEntry) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 -     fn paddr(&self) -> HostPhysAddr {\n121 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\n",
              "error[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut EPTEntry, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n127 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\n",
              "error[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n110 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\n",
              "error[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> EPTEntry`\n               found signature `fn(PhysAddr) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 -     fn new_table(paddr: HostPhysAddr) -> Self {\n117 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\n",
              "error[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&EPTEntry) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 -     fn paddr(&self) -> HostPhysAddr {\n121 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\n",
              "error[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut EPTEntry, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n127 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\n"
            ],
            "Mirai": [
              "error[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 |     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
              "error[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> EPTEntry`\n               found signature `fn(PhysAddr) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 |     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
              "error[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&EPTEntry) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 |     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
              "error[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut EPTEntry, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 |     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs",
          "features": "",
          "count": 5,
          "kinds": {
            "Mirai": [
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
            ],
            "Clippy(Error)": [
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs",
          "features": "",
          "count": 5,
          "kinds": {
            "Mirai": [
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
            ],
            "Clippy(Error)": [
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Error)": [
              "error[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:161:24\n    |\n161 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> A64PTEHV`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> A64PTEHV`\nhelp: change the parameter type to match the trait\n    |\n161 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n161 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\n",
              "error[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:168:25\n    |\n168 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> A64PTEHV`\n               found signature `fn(PhysAddr) -> A64PTEHV`\nhelp: change the parameter type to match the trait\n    |\n168 -     fn new_table(paddr: HostPhysAddr) -> Self {\n168 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\n",
              "error[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:172:24\n    |\n172 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&A64PTEHV) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&A64PTEHV) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n172 -     fn paddr(&self) -> HostPhysAddr {\n172 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\n",
              "error[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:178:36\n    |\n178 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut A64PTEHV, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut A64PTEHV, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n178 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n178 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\n"
            ]
          }
        },
        {
          "file": "(virtual) clippy",
          "features": "",
          "count": 4,
          "kinds": {
            "Cargo": [
              "// pkg_name=axvm, checker=Clippy\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo clippy --target x86_64-unknown-none  --no-deps\n// timestamp=2025-06-28 14:53:33.040178056 +08:00:00\n    Checking cfg-if v1.0.1\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n    Checking bitflags v2.9.1\n   Compiling x86 v0.52.0\n    Checking raw-cpuid v10.7.0\n   Compiling serde v1.0.219\n   Compiling serde_derive v1.0.219\n    Checking volatile v0.4.6\n    Checking log v0.4.27\n    Checking x86_64 v0.15.2\n   Compiling axerrno v0.1.0\n    Checking memory_addr v0.4.0\n    Checking memory_addr v0.3.2\n    Checking memory_set v0.3.2\n   Compiling zerocopy v0.8.26\n    Checking lazyinit v0.2.2\n    Checking numeric-enum-macro v0.2.0\n   Compiling toml_edit v0.22.27\n    Checking page_table_entry v0.5.4\n   Compiling ahash v0.8.12\n    Checking const-random v0.1.18\n    Checking page_table_multiarch v0.5.4\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=axvm, checker=Clippy\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu  --no-deps\n// timestamp=2025-06-28 14:53:28.2217892 +08:00:00\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking cfg-if v1.0.1\n    Checking bit_field v0.10.2\n   Compiling rustversion v1.0.21\n    Checking bitflags v1.3.2\n   Compiling x86 v0.52.0\n   Compiling libc v0.2.174\n   Compiling serde v1.0.219\n    Checking bitflags v2.9.1\n   Compiling crunchy v0.2.4\n    Checking raw-cpuid v10.7.0\n    Checking volatile v0.4.6\n   Compiling axerrno v0.1.0\n   Compiling quote v1.0.40\n   Compiling syn v2.0.104\n   Compiling tiny-keccak v2.0.2\n    Checking log v0.4.27\n    Checking x86_64 v0.15.2\n    Checking memory_addr v0.4.0\n   Compiling getrandom v0.2.16\n    Checking page_table_entry v0.5.4\n   Compiling version_check v0.9.5\n   Compiling hashbrown v0.15.4\n    Checking memory_addr v0.3.2\n   Compiling equivalent v1.0.2\n   Compiling zerocopy v0.8.26\n   Compiling once_cell v1.21.3\n   Compiling const-random-macro v0.1.16\n   Compiling indexmap v2.10.0\n   Compiling ahash v0.8.12\n    Checking memory_set v0.3.2\n    Checking page_table_multiarch v0.5.4\n   Compiling winnow v0.7.11\n    Checking lazyinit v0.2.2\n   Compiling toml_datetime v0.6.11\n   Compiling autocfg v1.5.0\n    Checking numeric-enum-macro v0.2.0\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=axvm, checker=Clippy\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo clippy --target aarch64-unknown-none  --no-deps\n// timestamp=2025-06-28 14:53:41.187039087 +08:00:00\n    Checking cfg-if v1.0.1\n    Checking tock-registers v0.9.0\n    Checking log v0.4.27\n   Compiling axerrno v0.1.0\n   Compiling serde v1.0.219\n    Checking bitflags v2.9.1\n    Checking memory_addr v0.4.0\n    Checking aarch64-cpu v10.0.0\n   Compiling zerocopy v0.8.26\n    Checking memory_addr v0.3.2\n    Checking const-random v0.1.18\n    Checking memory_set v0.3.2\n   Compiling ahash v0.8.12\n    Checking bit_field v0.10.2\n    Checking numeric-enum-macro v0.2.0\n    Checking lazyinit v0.2.2\n    Checking once_cell v1.21.3\n    Checking allocator-api2 v0.2.21\n    Checking equivalent v1.0.2\n    Checking hashbrown v0.15.4\n   Compiling lock_api v0.4.13\n    Checking indexmap v2.10.0\n    Checking hashbrown v0.14.5\n   Compiling proc-macro-crate v3.3.0\n    Checking winnow v0.6.26\n    Checking serde_spanned v0.6.6 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n    Checking toml_datetime v0.6.6 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n   Compiling percpu v0.2.0\n   Compiling axvisor_api_proc v0.1.0 (https://github.com/arceos-hypervisor/axvisor_api.git#51471087)\n    Checking page_table_entry v0.5.4\n   Compiling percpu_macros v0.2.0\n    Checking page_table_multiarch v0.5.4\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=axvm, checker=Clippy\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo clippy --target riscv64gc-unknown-none-elf  --no-deps\n// timestamp=2025-06-28 14:53:36.51375461 +08:00:00\n    Checking cfg-if v1.0.1\n    Checking log v0.4.27\n   Compiling paste v1.0.15\n   Compiling riscv v0.14.0\n   Compiling axerrno v0.1.0\n   Compiling serde v1.0.219\n   Compiling memchr v2.7.5\n    Checking critical-section v1.2.0\n    Checking riscv-pac v0.2.0\n    Checking embedded-hal v1.0.0\n    Checking memory_addr v0.4.0\n    Checking bitflags v2.9.1\n   Compiling zerocopy v0.8.26\n    Checking page_table_entry v0.5.4\n   Compiling regex-syntax v0.8.5\n   Compiling aho-corasick v1.1.3\n    Checking memory_addr v0.3.2\n    Checking bit_field v0.10.2\n   Compiling semver-parser v0.7.0\n   Compiling semver v0.9.0\n    Checking memory_set v0.3.2\n    Checking page_table_multiarch v0.5.4\n   Compiling regex-automata v0.4.9\n   Compiling ahash v0.8.12\n    Checking const-random v0.1.18\n    Checking lazyinit v0.2.2\n    Checking once_cell v1.21.3\n    Checking numeric-enum-macro v0.2.0\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror: could not compile `axaddrspace` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 4,
          "kinds": {
            "Cargo": [
              "// pkg_name=axvm, checker=Lockbud\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-linux-gnu \n// timestamp=2025-06-28 14:54:42.884701626 +08:00:00\n   Compiling cfg-if v1.0.1\n   Compiling bit_field v0.10.2\n   Compiling bitflags v1.3.2\n   Compiling bitflags v2.9.1\n   Compiling x86 v0.52.0\n   Compiling raw-cpuid v10.7.0\n   Compiling serde v1.0.219\n   Compiling volatile v0.4.6\n   Compiling log v0.4.27\n   Compiling axerrno v0.1.0\n   Compiling x86_64 v0.15.2\n[2025-06-28T06:54:43Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:54:43Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling memory_addr v0.4.0\n[2025-06-28T06:54:26Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"lazy::LazyUsize::unsync_init\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:36:23: 36:43 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:39:13: 39:39 (#0)\",\n            \"dep_kind\": \"Both\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:54:26Z WARN  lockbud::callbacks] crate getrandom contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling memory_addr v0.3.2\n   Compiling zerocopy v0.8.26\n   Compiling memory_set v0.3.2\n   Compiling lazyinit v0.2.2\n   Compiling numeric-enum-macro v0.2.0\n   Compiling ahash v0.8.12\n   Compiling const-random v0.1.18\n   Compiling page_table_entry v0.5.4\n   Compiling once_cell v1.21.3\n   Compiling lock_api v0.4.13\n   Compiling allocator-api2 v0.2.21\n   Compiling scopeguard v1.2.0\n   Compiling hashbrown v0.15.4\n   Compiling page_table_multiarch v0.5.4\n   Compiling axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> npt::arch::x86_64::EPTEntry`\n               found signature `fn(memory_addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> npt::arch::x86_64::EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 |     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> npt::arch::x86_64::EPTEntry`\n               found signature `fn(memory_addr::PhysAddr) -> npt::arch::x86_64::EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 |     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(&npt::arch::x86_64::EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&npt::arch::x86_64::EPTEntry) -> memory_addr::PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 |     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(&mut npt::arch::x86_64::EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut npt::arch::x86_64::EPTEntry, memory_addr::PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 |     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `memory_addr::PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `core::option::Option<memory_addr::PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `core::option::Option<(memory_addr::PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n   Compiling equivalent v1.0.2\n   Compiling toml_datetime v0.6.6 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=axvm, checker=Lockbud\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none \n// timestamp=2025-06-28 14:54:37.796434259 +08:00:00\n   Compiling cfg-if v1.0.1\n   Compiling tock-registers v0.9.0\n   Compiling log v0.4.27\n[2025-06-28T06:54:26Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"lazy::LazyUsize::unsync_init\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:36:23: 36:43 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:39:13: 39:39 (#0)\",\n            \"dep_kind\": \"Both\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:54:26Z WARN  lockbud::callbacks] crate getrandom contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling serde v1.0.219\n   Compiling axerrno v0.1.0\n   Compiling bitflags v2.9.1\n   Compiling memory_addr v0.4.0\n   Compiling aarch64-cpu v10.0.0\n[2025-06-28T06:54:38Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:54:38Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling zerocopy v0.8.26\n   Compiling memory_addr v0.3.2\n   Compiling memory_set v0.3.2\n   Compiling const-random v0.1.18\n   Compiling ahash v0.8.12\n   Compiling once_cell v1.21.3\n   Compiling lazyinit v0.2.2\n   Compiling bit_field v0.10.2\n   Compiling numeric-enum-macro v0.2.0\n   Compiling allocator-api2 v0.2.21\n   Compiling equivalent v1.0.2\n   Compiling hashbrown v0.15.4\n   Compiling lock_api v0.4.13\n   Compiling indexmap v2.10.0\n   Compiling hashbrown v0.14.5\n   Compiling proc-macro-crate v3.3.0\n   Compiling page_table_entry v0.5.4\n   Compiling toml_datetime v0.6.6 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n   Compiling page_table_multiarch v0.5.4\n   Compiling serde_spanned v0.6.6 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n   Compiling axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\n   Compiling percpu v0.2.0\n   Compiling winnow v0.6.26\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:161:24\n    |\n161 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> npt::arch::aarch64::A64PTEHV`\n               found signature `fn(memory_addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> npt::arch::aarch64::A64PTEHV`\nhelp: change the parameter type to match the trait\n    |\n161 |     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:168:25\n    |\n168 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> npt::arch::aarch64::A64PTEHV`\n               found signature `fn(memory_addr::PhysAddr) -> npt::arch::aarch64::A64PTEHV`\nhelp: change the parameter type to match the trait\n    |\n168 |     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:172:24\n    |\n172 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(&npt::arch::aarch64::A64PTEHV) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&npt::arch::aarch64::A64PTEHV) -> memory_addr::PhysAddr`\nhelp: change the output type to match the trait\n    |\n172 |     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:178:36\n    |\n178 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(&mut npt::arch::aarch64::A64PTEHV, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut npt::arch::aarch64::A64PTEHV, memory_addr::PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n178 |     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `memory_addr::PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n   Compiling axvisor_api_proc v0.1.0 (https://github.com/arceos-hypervisor/axvisor_api.git#51471087)\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `core::option::Option<memory_addr::PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `core::option::Option<(memory_addr::PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=axvm, checker=Lockbud\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-06-28 14:54:29.541060463 +08:00:00\n   Compiling cfg-if v1.0.1\n   Compiling paste v1.0.15\n   Compiling log v0.4.27\n   Compiling riscv v0.14.0\n   Compiling serde v1.0.219\n[2025-06-28T06:54:26Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"lazy::LazyUsize::unsync_init\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:36:23: 36:43 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:39:13: 39:39 (#0)\",\n            \"dep_kind\": \"Both\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:54:26Z WARN  lockbud::callbacks] crate getrandom contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling axerrno v0.1.0\n   Compiling serde_derive v1.0.219\n[2025-06-28T06:54:29Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:54:29Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling critical-section v1.2.0\n   Compiling autocfg v1.5.0\n   Compiling bitflags v2.9.1\n   Compiling memory_addr v0.4.0\n   Compiling embedded-hal v1.0.0\n   Compiling riscv-pac v0.2.0\n   Compiling memchr v2.7.5\n   Compiling zerocopy v0.8.26\n   Compiling page_table_entry v0.5.4\n   Compiling bit_field v0.10.2\n   Compiling aho-corasick v1.1.3\n   Compiling regex-syntax v0.8.5\n   Compiling memory_addr v0.3.2\n   Compiling semver-parser v0.7.0\n   Compiling semver v0.9.0\n   Compiling memory_set v0.3.2\n   Compiling page_table_multiarch v0.5.4\n   Compiling const-random v0.1.18\n   Compiling ahash v0.8.12\n   Compiling regex-automata v0.4.9\n   Compiling once_cell v1.21.3\n   Compiling lazyinit v0.2.2\n   Compiling numeric-enum-macro v0.2.0\n   Compiling toml_edit v0.22.27\n   Compiling axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `memory_addr::PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `core::option::Option<memory_addr::PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `core::option::Option<(memory_addr::PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `axaddrspace` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=axvm, checker=Lockbud\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-none \n// timestamp=2025-06-28 14:54:23.426904612 +08:00:00\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling cfg-if v1.0.1\n   Compiling bit_field v0.10.2\n   Compiling rustversion v1.0.21\n   Compiling x86 v0.52.0\n   Compiling serde v1.0.219\n   Compiling crunchy v0.2.4\n   Compiling bitflags v1.3.2\n   Compiling bitflags v2.9.1\n   Compiling libc v0.2.174\n   Compiling raw-cpuid v10.7.0\n   Compiling volatile v0.4.6\n   Compiling quote v1.0.40\n   Compiling syn v2.0.104\n   Compiling log v0.4.27\n   Compiling tiny-keccak v2.0.2\n   Compiling axerrno v0.1.0\n[2025-06-28T06:54:24Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:54:24Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling x86_64 v0.15.2\n   Compiling memory_addr v0.4.0\n   Compiling getrandom v0.2.16\n[2025-06-28T06:54:26Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"lazy::LazyUsize::unsync_init\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:36:23: 36:43 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:39:13: 39:39 (#0)\",\n            \"dep_kind\": \"Both\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:54:26Z WARN  lockbud::callbacks] crate getrandom contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling page_table_entry v0.5.4\n   Compiling once_cell v1.21.3\n   Compiling hashbrown v0.15.4\n   Compiling version_check v0.9.5\n   Compiling zerocopy v0.8.26\n   Compiling equivalent v1.0.2\n   Compiling memory_addr v0.3.2\n   Compiling ahash v0.8.12\n   Compiling memory_set v0.3.2\n   Compiling indexmap v2.10.0\n   Compiling const-random-macro v0.1.16\n   Compiling page_table_multiarch v0.5.4\n   Compiling toml_datetime v0.6.11\n   Compiling numeric-enum-macro v0.2.0\n   Compiling lazyinit v0.2.2\n   Compiling winnow v0.7.11\n   Compiling axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> npt::arch::x86_64::EPTEntry`\n               found signature `fn(memory_addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> npt::arch::x86_64::EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 |     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> npt::arch::x86_64::EPTEntry`\n               found signature `fn(memory_addr::PhysAddr) -> npt::arch::x86_64::EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 |     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(&npt::arch::x86_64::EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&npt::arch::x86_64::EPTEntry) -> memory_addr::PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 |     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(&mut npt::arch::x86_64::EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut npt::arch::x86_64::EPTEntry, memory_addr::PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 |     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `memory_addr::PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `core::option::Option<memory_addr::PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `core::option::Option<(memory_addr::PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 4,
          "kinds": {
            "Cargo": [
              "// pkg_name=axvm, checker=SemverChecks\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none \n// timestamp=2025-06-28 14:54:09.143075537 +08:00:00\n    Building axvm v0.1.0 (current)\nerror: running cargo-doc on crate 'axvm' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking cfg-if v1.0.1\n   Compiling crunchy v0.2.4\n   Compiling libc v0.2.174\n   Compiling tiny-keccak v2.0.2\n    Checking tock-registers v0.9.0\n    Checking log v0.4.27\n   Compiling serde v1.0.219\n   Compiling axerrno v0.1.0\n    Checking aarch64-cpu v10.0.0\n   Compiling quote v1.0.40\n   Compiling syn v2.0.104\n    Checking bitflags v2.9.1\n   Compiling getrandom v0.2.16\n   Compiling zerocopy v0.8.26\n   Compiling once_cell v1.21.3\n   Compiling version_check v0.9.5\n    Checking memory_addr v0.4.0\n   Compiling const-random-macro v0.1.16\n   Compiling ahash v0.8.12\n   Compiling equivalent v1.0.2\n   Compiling hashbrown v0.15.4\n    Checking memory_addr v0.3.2\n    Checking memory_set v0.3.2\n    Checking const-random v0.1.18\n   Compiling indexmap v2.10.0\n    Checking page_table_entry v0.5.4\n    Checking bit_field v0.10.2\n   Compiling toml_datetime v0.6.11\n    Checking page_table_multiarch v0.5.4\n    Checking numeric-enum-macro v0.2.0\n   Compiling winnow v0.7.11\n    Checking lazyinit v0.2.2\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:161:24\n    |\n161 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> A64PTEHV`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> A64PTEHV`\nhelp: change the parameter type to match the trait\n    |\n161 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n161 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:168:25\n    |\n168 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> A64PTEHV`\n               found signature `fn(PhysAddr) -> A64PTEHV`\nhelp: change the parameter type to match the trait\n    |\n168 -     fn new_table(paddr: HostPhysAddr) -> Self {\n168 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:172:24\n    |\n172 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&A64PTEHV) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&A64PTEHV) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n172 -     fn paddr(&self) -> HostPhysAddr {\n172 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:178:36\n    |\n178 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut A64PTEHV, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut A64PTEHV, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n178 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n178 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate axvm v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_2/arceos-hypervisor/axvm --features default,vmx &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axvm v0.1.0\n",
              "// pkg_name=axvm, checker=SemverChecks\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \n// timestamp=2025-06-28 14:53:51.656663864 +08:00:00\n    Building axvm v0.1.0 (current)\nerror: running cargo-doc on crate 'axvm' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking cfg-if v1.0.1\n   Compiling rustversion v1.0.21\n    Checking bit_field v0.10.2\n   Compiling serde v1.0.219\n   Compiling libc v0.2.174\n    Checking bitflags v1.3.2\n   Compiling crunchy v0.2.4\n   Compiling x86 v0.52.0\n    Checking bitflags v2.9.1\n    Checking raw-cpuid v10.7.0\n    Checking volatile v0.4.6\n   Compiling tiny-keccak v2.0.2\n   Compiling quote v1.0.40\n   Compiling syn v2.0.104\n   Compiling axerrno v0.1.0\n    Checking log v0.4.27\n    Checking x86_64 v0.15.2\n    Checking memory_addr v0.4.0\n   Compiling getrandom v0.2.16\n    Checking page_table_entry v0.5.4\n   Compiling version_check v0.9.5\n   Compiling equivalent v1.0.2\n    Checking memory_addr v0.3.2\n   Compiling hashbrown v0.15.4\n   Compiling once_cell v1.21.3\n   Compiling zerocopy v0.8.26\n   Compiling ahash v0.8.12\n   Compiling const-random-macro v0.1.16\n    Checking memory_set v0.3.2\n   Compiling indexmap v2.10.0\n    Checking page_table_multiarch v0.5.4\n    Checking numeric-enum-macro v0.2.0\n    Checking lazyinit v0.2.2\n   Compiling toml_datetime v0.6.11\n   Compiling winnow v0.7.11\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n110 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> EPTEntry`\n               found signature `fn(PhysAddr) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 -     fn new_table(paddr: HostPhysAddr) -> Self {\n117 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&EPTEntry) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 -     fn paddr(&self) -> HostPhysAddr {\n121 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut EPTEntry, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n127 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate axvm v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_2/arceos-hypervisor/axvm --features default,vmx &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axvm v0.1.0\n",
              "// pkg_name=axvm, checker=SemverChecks\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \n// timestamp=2025-06-28 14:53:44.673737082 +08:00:00\n    Building axvm v0.1.0 (current)\nerror: running cargo-doc on crate 'axvm' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking cfg-if v1.0.1\n    Checking bit_field v0.10.2\n   Compiling rustversion v1.0.21\n    Checking bitflags v1.3.2\n   Compiling libc v0.2.174\n   Compiling x86 v0.52.0\n   Compiling serde v1.0.219\n   Compiling crunchy v0.2.4\n    Checking bitflags v2.9.1\n    Checking raw-cpuid v10.7.0\n   Compiling tiny-keccak v2.0.2\n    Checking volatile v0.4.6\n   Compiling axerrno v0.1.0\n   Compiling quote v1.0.40\n   Compiling syn v2.0.104\n    Checking log v0.4.27\n    Checking x86_64 v0.15.2\n    Checking memory_addr v0.4.0\n   Compiling getrandom v0.2.16\n    Checking page_table_entry v0.5.4\n   Compiling once_cell v1.21.3\n   Compiling equivalent v1.0.2\n   Compiling version_check v0.9.5\n   Compiling zerocopy v0.8.26\n   Compiling hashbrown v0.15.4\n    Checking memory_addr v0.3.2\n    Checking memory_set v0.3.2\n   Compiling ahash v0.8.12\n   Compiling const-random-macro v0.1.16\n    Checking page_table_multiarch v0.5.4\n   Compiling indexmap v2.10.0\n    Checking lazyinit v0.2.2\n   Compiling toml_datetime v0.6.11\n    Checking numeric-enum-macro v0.2.0\n   Compiling winnow v0.7.11\n   Compiling autocfg v1.5.0\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n110 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> EPTEntry`\n               found signature `fn(PhysAddr) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 -     fn new_table(paddr: HostPhysAddr) -> Self {\n117 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&EPTEntry) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 -     fn paddr(&self) -> HostPhysAddr {\n121 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut EPTEntry, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n127 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n   Compiling lock_api v0.4.13\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate axvm v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_2/arceos-hypervisor/axvm --features default,vmx &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axvm v0.1.0\n",
              "// pkg_name=axvm, checker=SemverChecks\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-06-28 14:53:58.453974761 +08:00:00\n    Building axvm v0.1.0 (current)\nerror: running cargo-doc on crate 'axvm' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking cfg-if v1.0.1\n   Compiling crunchy v0.2.4\n   Compiling libc v0.2.174\n   Compiling tiny-keccak v2.0.2\n    Checking log v0.4.27\n   Compiling paste v1.0.15\n   Compiling riscv v0.14.0\n   Compiling axerrno v0.1.0\n   Compiling serde v1.0.219\n   Compiling quote v1.0.40\n   Compiling syn v2.0.104\n   Compiling getrandom v0.2.16\n    Checking memory_addr v0.4.0\n    Checking critical-section v1.2.0\n    Checking embedded-hal v1.0.0\n    Checking riscv-pac v0.2.0\n   Compiling zerocopy v0.8.26\n   Compiling version_check v0.9.5\n   Compiling once_cell v1.21.3\n   Compiling autocfg v1.5.0\n    Checking bitflags v2.9.1\n   Compiling memchr v2.7.5\n    Checking page_table_entry v0.5.4\n   Compiling ahash v0.8.12\n   Compiling const-random-macro v0.1.16\n   Compiling aho-corasick v1.1.3\n   Compiling equivalent v1.0.2\n   Compiling semver-parser v0.7.0\n    Checking bit_field v0.10.2\n   Compiling hashbrown v0.15.4\n   Compiling regex-syntax v0.8.5\n    Checking memory_addr v0.3.2\n    Checking memory_set v0.3.2\n   Compiling indexmap v2.10.0\n    Checking page_table_multiarch v0.5.4\n   Compiling semver v0.9.0\n    Checking const-random v0.1.18\n   Compiling regex-automata v0.4.9\n   Compiling winnow v0.7.11\n    Checking lazyinit v0.2.2\n    Checking numeric-enum-macro v0.2.0\n   Compiling toml_datetime v0.6.11\n   Compiling serde_derive v1.0.219\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `axaddrspace` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate axvm v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_2/arceos-hypervisor/axvm --features default,vmx &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axvm v0.1.0\n"
            ]
          }
        },
        {
          "file": "(virtual) udeps",
          "features": "",
          "count": 4,
          "kinds": {
            "Cargo": [
              "// pkg_name=axvm, checker=Udeps\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target x86_64-unknown-linux-gnu \n// timestamp=2025-06-28 14:55:07.191078112 +08:00:00\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking cfg-if v1.0.1\n   Compiling rustversion v1.0.21\n    Checking bit_field v0.10.2\n    Checking bitflags v2.9.1\n   Compiling crunchy v0.2.4\n    Checking bitflags v1.3.2\n   Compiling x86 v0.52.0\n   Compiling serde v1.0.219\n   Compiling libc v0.2.174\n    Checking raw-cpuid v10.7.0\n   Compiling tiny-keccak v2.0.2\n   Compiling quote v1.0.40\n   Compiling syn v2.0.104\n    Checking volatile v0.4.6\n   Compiling axerrno v0.1.0\n    Checking log v0.4.27\n    Checking x86_64 v0.15.2\n    Checking memory_addr v0.4.0\n   Compiling getrandom v0.2.16\n    Checking page_table_entry v0.5.4\n    Checking memory_addr v0.3.2\n   Compiling version_check v0.9.5\n   Compiling hashbrown v0.15.4\n   Compiling zerocopy v0.8.26\n   Compiling once_cell v1.21.3\n   Compiling equivalent v1.0.2\n   Compiling const-random-macro v0.1.16\n   Compiling ahash v0.8.12\n   Compiling indexmap v2.10.0\n    Checking memory_set v0.3.2\n    Checking page_table_multiarch v0.5.4\n   Compiling winnow v0.7.11\n    Checking lazyinit v0.2.2\n    Checking numeric-enum-macro v0.2.0\n   Compiling autocfg v1.5.0\n   Compiling toml_datetime v0.6.11\n   Compiling lock_api v0.4.13\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\n    Checking const-random v0.1.18\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n110 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> EPTEntry`\n               found signature `fn(PhysAddr) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 -     fn new_table(paddr: HostPhysAddr) -> Self {\n117 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&EPTEntry) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 -     fn paddr(&self) -> HostPhysAddr {\n121 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut EPTEntry, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n127 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=axvm, checker=Udeps\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target x86_64-unknown-none \n// timestamp=2025-06-28 14:55:12.467221281 +08:00:00\n    Checking cfg-if v1.0.1\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n    Checking bitflags v2.9.1\n   Compiling x86 v0.52.0\n    Checking raw-cpuid v10.7.0\n   Compiling serde v1.0.219\n   Compiling serde_derive v1.0.219\n    Checking log v0.4.27\n    Checking volatile v0.4.6\n    Checking x86_64 v0.15.2\n   Compiling axerrno v0.1.0\n    Checking memory_addr v0.4.0\n    Checking memory_addr v0.3.2\n    Checking memory_set v0.3.2\n   Compiling zerocopy v0.8.26\n    Checking lazyinit v0.2.2\n    Checking numeric-enum-macro v0.2.0\n   Compiling toml_edit v0.22.27\n    Checking page_table_entry v0.5.4\n    Checking page_table_multiarch v0.5.4\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n110 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> EPTEntry`\n               found signature `fn(PhysAddr) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 -     fn new_table(paddr: HostPhysAddr) -> Self {\n117 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&EPTEntry) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 -     fn paddr(&self) -> HostPhysAddr {\n121 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut EPTEntry, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n127 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=axvm, checker=Udeps\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target riscv64gc-unknown-none-elf \n// timestamp=2025-06-28 14:55:15.837398119 +08:00:00\n    Checking cfg-if v1.0.1\n    Checking log v0.4.27\n   Compiling paste v1.0.15\n   Compiling riscv v0.14.0\n   Compiling axerrno v0.1.0\n   Compiling serde v1.0.219\n    Checking memory_addr v0.4.0\n    Checking critical-section v1.2.0\n    Checking embedded-hal v1.0.0\n   Compiling memchr v2.7.5\n    Checking bitflags v2.9.1\n    Checking riscv-pac v0.2.0\n    Checking page_table_entry v0.5.4\n   Compiling zerocopy v0.8.26\n   Compiling regex-syntax v0.8.5\n   Compiling aho-corasick v1.1.3\n    Checking memory_addr v0.3.2\n   Compiling semver-parser v0.7.0\n    Checking bit_field v0.10.2\n   Compiling semver v0.9.0\n    Checking memory_set v0.3.2\n    Checking page_table_multiarch v0.5.4\n   Compiling regex-automata v0.4.9\n    Checking const-random v0.1.18\n   Compiling ahash v0.8.12\n    Checking numeric-enum-macro v0.2.0\n    Checking once_cell v1.21.3\n    Checking lazyinit v0.2.2\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\n   Compiling rustc_version v0.2.3\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `axaddrspace` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=axvm, checker=Udeps\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target aarch64-unknown-none \n// timestamp=2025-06-28 14:55:20.494323155 +08:00:00\n    Checking cfg-if v1.0.1\n    Checking log v0.4.27\n    Checking tock-registers v0.9.0\n   Compiling serde v1.0.219\n   Compiling axerrno v0.1.0\n    Checking memory_addr v0.4.0\n    Checking bitflags v2.9.1\n    Checking aarch64-cpu v10.0.0\n   Compiling zerocopy v0.8.26\n    Checking memory_addr v0.3.2\n    Checking memory_set v0.3.2\n    Checking const-random v0.1.18\n   Compiling ahash v0.8.12\n    Checking bit_field v0.10.2\n    Checking once_cell v1.21.3\n    Checking numeric-enum-macro v0.2.0\n    Checking lazyinit v0.2.2\n    Checking allocator-api2 v0.2.21\n    Checking equivalent v1.0.2\n    Checking hashbrown v0.15.4\n    Checking indexmap v2.10.0\n   Compiling proc-macro-crate v3.3.0\n    Checking hashbrown v0.14.5\n    Checking serde_spanned v0.6.6 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n    Checking toml_datetime v0.6.6 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n    Checking winnow v0.6.26\n   Compiling percpu v0.2.0\n   Compiling axvisor_api_proc v0.1.0 (https://github.com/arceos-hypervisor/axvisor_api.git#51471087)\n   Compiling lock_api v0.4.13\n   Compiling crate_interface v0.1.4\n    Checking page_table_entry v0.5.4\n    Checking page_table_multiarch v0.5.4\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:161:24\n    |\n161 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> A64PTEHV`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> A64PTEHV`\nhelp: change the parameter type to match the trait\n    |\n161 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n161 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:168:25\n    |\n168 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> A64PTEHV`\n               found signature `fn(PhysAddr) -> A64PTEHV`\nhelp: change the parameter type to match the trait\n    |\n168 -     fn new_table(paddr: HostPhysAddr) -> Self {\n168 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:172:24\n    |\n172 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&A64PTEHV) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&A64PTEHV) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n172 -     fn paddr(&self) -> HostPhysAddr {\n172 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:178:36\n    |\n178 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut A64PTEHV, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut A64PTEHV, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n178 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n178 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n   Compiling percpu_macros v0.2.0\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "Cargo.lock",
          "features": "",
          "count": 4,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x86_vlapic 0.1.0\n│   └── x86_vcpu 0.1.0\n│       └── axvm 0.1.0\n├── x86_vcpu 0.1.0\n└── riscv 0.14.0\n    └── page_table_multiarch 0.5.4\n        ├── axvm 0.1.0\n        └── axaddrspace 0.1.0\n            ├── x86_vlapic 0.1.0\n            ├── x86_vcpu 0.1.0\n            ├── riscv_vcpu 0.1.0\n            │   └── axvm 0.1.0\n            ├── axvm 0.1.0\n            ├── axvisor_api 0.1.0\n            │   ├── x86_vlapic 0.1.0\n            │   ├── x86_vcpu 0.1.0\n            │   ├── riscv_vcpu 0.1.0\n            │   └── axvcpu 0.1.0\n            │       ├── x86_vcpu 0.1.0\n            │       ├── riscv_vcpu 0.1.0\n            │       ├── axvm 0.1.0\n            │       └── arm_vcpu 0.1.0\n            │           └── axvm 0.1.0\n            ├── axvcpu 0.1.0\n            ├── axdevice_base 0.1.0\n            │   ├── x86_vlapic 0.1.0\n            │   ├── x86_vcpu 0.1.0\n            │   └── axdevice 0.1.0\n            │       └── axvm 0.1.0\n            ├── axdevice 0.1.0\n            └── arm_vcpu 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 787,\n    \"last-commit\": \"7573f55ba337263f61167dbb0ea926cdc7c8eb5d\",\n    \"last-updated\": \"2025-06-17T11:04:25+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 100\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}",
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x86_vlapic 0.1.0\n│   └── x86_vcpu 0.1.0\n│       └── axvm 0.1.0\n├── x86_vcpu 0.1.0\n└── riscv 0.14.0\n    └── page_table_multiarch 0.5.4\n        ├── axvm 0.1.0\n        └── axaddrspace 0.1.0\n            ├── x86_vlapic 0.1.0\n            ├── x86_vcpu 0.1.0\n            ├── riscv_vcpu 0.1.0\n            │   └── axvm 0.1.0\n            ├── axvm 0.1.0\n            ├── axvisor_api 0.1.0\n            │   ├── x86_vlapic 0.1.0\n            │   ├── x86_vcpu 0.1.0\n            │   ├── riscv_vcpu 0.1.0\n            │   └── axvcpu 0.1.0\n            │       ├── x86_vcpu 0.1.0\n            │       ├── riscv_vcpu 0.1.0\n            │       ├── axvm 0.1.0\n            │       └── arm_vcpu 0.1.0\n            │           └── axvm 0.1.0\n            ├── axvcpu 0.1.0\n            ├── axdevice_base 0.1.0\n            │   ├── x86_vlapic 0.1.0\n            │   ├── x86_vcpu 0.1.0\n            │   └── axdevice 0.1.0\n            │       └── axvm 0.1.0\n            ├── axdevice 0.1.0\n            └── arm_vcpu 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 787,\n    \"last-commit\": \"7573f55ba337263f61167dbb0ea926cdc7c8eb5d\",\n    \"last-updated\": \"2025-06-17T11:04:25+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 100\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}",
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x86_vlapic 0.1.0\n│   └── x86_vcpu 0.1.0\n│       └── axvm 0.1.0\n├── x86_vcpu 0.1.0\n└── riscv 0.14.0\n    └── page_table_multiarch 0.5.4\n        ├── axvm 0.1.0\n        └── axaddrspace 0.1.0\n            ├── x86_vlapic 0.1.0\n            ├── x86_vcpu 0.1.0\n            ├── riscv_vcpu 0.1.0\n            │   └── axvm 0.1.0\n            ├── axvm 0.1.0\n            ├── axvisor_api 0.1.0\n            │   ├── x86_vlapic 0.1.0\n            │   ├── x86_vcpu 0.1.0\n            │   ├── riscv_vcpu 0.1.0\n            │   └── axvcpu 0.1.0\n            │       ├── x86_vcpu 0.1.0\n            │       ├── riscv_vcpu 0.1.0\n            │       ├── axvm 0.1.0\n            │       └── arm_vcpu 0.1.0\n            │           └── axvm 0.1.0\n            ├── axvcpu 0.1.0\n            ├── axdevice_base 0.1.0\n            │   ├── x86_vlapic 0.1.0\n            │   ├── x86_vcpu 0.1.0\n            │   └── axdevice 0.1.0\n            │       └── axvm 0.1.0\n            ├── axdevice 0.1.0\n            └── arm_vcpu 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 787,\n    \"last-commit\": \"7573f55ba337263f61167dbb0ea926cdc7c8eb5d\",\n    \"last-updated\": \"2025-06-17T11:04:25+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 100\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}",
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x86_vlapic 0.1.0\n│   └── x86_vcpu 0.1.0\n│       └── axvm 0.1.0\n├── x86_vcpu 0.1.0\n└── riscv 0.14.0\n    └── page_table_multiarch 0.5.4\n        ├── axvm 0.1.0\n        └── axaddrspace 0.1.0\n            ├── x86_vlapic 0.1.0\n            ├── x86_vcpu 0.1.0\n            ├── riscv_vcpu 0.1.0\n            │   └── axvm 0.1.0\n            ├── axvm 0.1.0\n            ├── axvisor_api 0.1.0\n            │   ├── x86_vlapic 0.1.0\n            │   ├── x86_vcpu 0.1.0\n            │   ├── riscv_vcpu 0.1.0\n            │   └── axvcpu 0.1.0\n            │       ├── x86_vcpu 0.1.0\n            │       ├── riscv_vcpu 0.1.0\n            │       ├── axvm 0.1.0\n            │       └── arm_vcpu 0.1.0\n            │           └── axvm 0.1.0\n            ├── axvcpu 0.1.0\n            ├── axdevice_base 0.1.0\n            │   ├── x86_vlapic 0.1.0\n            │   ├── x86_vcpu 0.1.0\n            │   └── axdevice 0.1.0\n            │       └── axvm 0.1.0\n            ├── axdevice 0.1.0\n            └── arm_vcpu 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 787,\n    \"last-commit\": \"7573f55ba337263f61167dbb0ea926cdc7c8eb5d\",\n    \"last-updated\": \"2025-06-17T11:04:25+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 100\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[Lockbud] deadlock detection",
          "features": "",
          "count": 4,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-06-28T06:54:43Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:54:43Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n[2025-06-28T06:54:26Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"lazy::LazyUsize::unsync_init\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:36:23: 36:43 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:39:13: 39:39 (#0)\",\n            \"dep_kind\": \"Both\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:54:26Z WARN  lockbud::callbacks] crate getrandom contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }",
              "[2025-06-28T06:54:26Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"lazy::LazyUsize::unsync_init\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:36:23: 36:43 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:39:13: 39:39 (#0)\",\n            \"dep_kind\": \"Both\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:54:26Z WARN  lockbud::callbacks] crate getrandom contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n[2025-06-28T06:54:29Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:54:29Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }",
              "[2025-06-28T06:54:26Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"lazy::LazyUsize::unsync_init\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:36:23: 36:43 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:39:13: 39:39 (#0)\",\n            \"dep_kind\": \"Both\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:54:26Z WARN  lockbud::callbacks] crate getrandom contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n[2025-06-28T06:54:38Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:54:38Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }",
              "[2025-06-28T06:54:24Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:54:24Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n[2025-06-28T06:54:26Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"lazy::LazyUsize::unsync_init\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:36:23: 36:43 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:39:13: 39:39 (#0)\",\n            \"dep_kind\": \"Both\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:54:26Z WARN  lockbud::callbacks] crate getrandom contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[Udeps] Unused dependencies",
          "features": "",
          "count": 4,
          "kinds": {
            "Unused Deps": [
              "pkg=axvm, checker=Udeps\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target aarch64-unknown-none \ntimestamp=2025-06-28 14:55:24.010503548 +08:00:00\n\n\nstdout:\n\nstderr:\n    Checking cfg-if v1.0.1\n    Checking log v0.4.27\n    Checking tock-registers v0.9.0\n   Compiling serde v1.0.219\n   Compiling axerrno v0.1.0\n    Checking memory_addr v0.4.0\n    Checking bitflags v2.9.1\n    Checking aarch64-cpu v10.0.0\n   Compiling zerocopy v0.8.26\n    Checking memory_addr v0.3.2\n    Checking memory_set v0.3.2\n    Checking const-random v0.1.18\n   Compiling ahash v0.8.12\n    Checking bit_field v0.10.2\n    Checking once_cell v1.21.3\n    Checking numeric-enum-macro v0.2.0\n    Checking lazyinit v0.2.2\n    Checking allocator-api2 v0.2.21\n    Checking equivalent v1.0.2\n    Checking hashbrown v0.15.4\n    Checking indexmap v2.10.0\n   Compiling proc-macro-crate v3.3.0\n    Checking hashbrown v0.14.5\n    Checking serde_spanned v0.6.6 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n    Checking toml_datetime v0.6.6 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n    Checking winnow v0.6.26\n   Compiling percpu v0.2.0\n   Compiling axvisor_api_proc v0.1.0 (https://github.com/arceos-hypervisor/axvisor_api.git#51471087)\n   Compiling lock_api v0.4.13\n   Compiling crate_interface v0.1.4\n    Checking page_table_entry v0.5.4\n    Checking page_table_multiarch v0.5.4\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:161:24\n    |\n161 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> A64PTEHV`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> A64PTEHV`\nhelp: change the parameter type to match the trait\n    |\n161 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n161 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:168:25\n    |\n168 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> A64PTEHV`\n               found signature `fn(PhysAddr) -> A64PTEHV`\nhelp: change the parameter type to match the trait\n    |\n168 -     fn new_table(paddr: HostPhysAddr) -> Self {\n168 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:172:24\n    |\n172 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&A64PTEHV) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&A64PTEHV) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n172 -     fn paddr(&self) -> HostPhysAddr {\n172 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:178:36\n    |\n178 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut A64PTEHV, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut A64PTEHV, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n178 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n178 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n   Compiling percpu_macros v0.2.0\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "pkg=axvm, checker=Udeps\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target x86_64-unknown-linux-gnu \ntimestamp=2025-06-28 14:55:12.462947184 +08:00:00\n\n\nstdout:\n\nstderr:\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking cfg-if v1.0.1\n   Compiling rustversion v1.0.21\n    Checking bit_field v0.10.2\n    Checking bitflags v2.9.1\n   Compiling crunchy v0.2.4\n    Checking bitflags v1.3.2\n   Compiling x86 v0.52.0\n   Compiling serde v1.0.219\n   Compiling libc v0.2.174\n    Checking raw-cpuid v10.7.0\n   Compiling tiny-keccak v2.0.2\n   Compiling quote v1.0.40\n   Compiling syn v2.0.104\n    Checking volatile v0.4.6\n   Compiling axerrno v0.1.0\n    Checking log v0.4.27\n    Checking x86_64 v0.15.2\n    Checking memory_addr v0.4.0\n   Compiling getrandom v0.2.16\n    Checking page_table_entry v0.5.4\n    Checking memory_addr v0.3.2\n   Compiling version_check v0.9.5\n   Compiling hashbrown v0.15.4\n   Compiling zerocopy v0.8.26\n   Compiling once_cell v1.21.3\n   Compiling equivalent v1.0.2\n   Compiling const-random-macro v0.1.16\n   Compiling ahash v0.8.12\n   Compiling indexmap v2.10.0\n    Checking memory_set v0.3.2\n    Checking page_table_multiarch v0.5.4\n   Compiling winnow v0.7.11\n    Checking lazyinit v0.2.2\n    Checking numeric-enum-macro v0.2.0\n   Compiling autocfg v1.5.0\n   Compiling toml_datetime v0.6.11\n   Compiling lock_api v0.4.13\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\n    Checking const-random v0.1.18\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n110 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> EPTEntry`\n               found signature `fn(PhysAddr) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 -     fn new_table(paddr: HostPhysAddr) -> Self {\n117 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&EPTEntry) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 -     fn paddr(&self) -> HostPhysAddr {\n121 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut EPTEntry, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n127 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "pkg=axvm, checker=Udeps\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target x86_64-unknown-none \ntimestamp=2025-06-28 14:55:15.833995966 +08:00:00\n\n\nstdout:\n\nstderr:\n    Checking cfg-if v1.0.1\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n    Checking bitflags v2.9.1\n   Compiling x86 v0.52.0\n    Checking raw-cpuid v10.7.0\n   Compiling serde v1.0.219\n   Compiling serde_derive v1.0.219\n    Checking log v0.4.27\n    Checking volatile v0.4.6\n    Checking x86_64 v0.15.2\n   Compiling axerrno v0.1.0\n    Checking memory_addr v0.4.0\n    Checking memory_addr v0.3.2\n    Checking memory_set v0.3.2\n   Compiling zerocopy v0.8.26\n    Checking lazyinit v0.2.2\n    Checking numeric-enum-macro v0.2.0\n   Compiling toml_edit v0.22.27\n    Checking page_table_entry v0.5.4\n    Checking page_table_multiarch v0.5.4\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n110 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> EPTEntry`\n               found signature `fn(PhysAddr) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 -     fn new_table(paddr: HostPhysAddr) -> Self {\n117 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&EPTEntry) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 -     fn paddr(&self) -> HostPhysAddr {\n121 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut EPTEntry, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n127 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "pkg=axvm, checker=Udeps\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target riscv64gc-unknown-none-elf \ntimestamp=2025-06-28 14:55:20.492119261 +08:00:00\n\n\nstdout:\n\nstderr:\n    Checking cfg-if v1.0.1\n    Checking log v0.4.27\n   Compiling paste v1.0.15\n   Compiling riscv v0.14.0\n   Compiling axerrno v0.1.0\n   Compiling serde v1.0.219\n    Checking memory_addr v0.4.0\n    Checking critical-section v1.2.0\n    Checking embedded-hal v1.0.0\n   Compiling memchr v2.7.5\n    Checking bitflags v2.9.1\n    Checking riscv-pac v0.2.0\n    Checking page_table_entry v0.5.4\n   Compiling zerocopy v0.8.26\n   Compiling regex-syntax v0.8.5\n   Compiling aho-corasick v1.1.3\n    Checking memory_addr v0.3.2\n   Compiling semver-parser v0.7.0\n    Checking bit_field v0.10.2\n   Compiling semver v0.9.0\n    Checking memory_set v0.3.2\n    Checking page_table_multiarch v0.5.4\n   Compiling regex-automata v0.4.9\n    Checking const-random v0.1.18\n   Compiling ahash v0.8.12\n    Checking numeric-enum-macro v0.2.0\n    Checking once_cell v1.21.3\n    Checking lazyinit v0.2.2\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\n   Compiling rustc_version v0.2.3\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `axaddrspace` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 4,
          "kinds": {
            "Outdated": [
              "pkg=axvm, checker=Outdated\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-06-28 14:54:53.132381151 +08:00:00\n\nName         Project  Compat  Latest  Kind    Platform\n----         -------  ------  ------  ----    --------\nmemory_addr  0.3.2    ---     0.4.0   Normal  ---\nspin         0.9.8    ---     0.10.0  Normal  ---\n",
              "pkg=axvm, checker=Outdated\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-06-28 14:54:54.492680023 +08:00:00\n\nName         Project  Compat  Latest  Kind    Platform\n----         -------  ------  ------  ----    --------\nmemory_addr  0.3.2    ---     0.4.0   Normal  ---\nspin         0.9.8    ---     0.10.0  Normal  ---\n",
              "pkg=axvm, checker=Outdated\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-06-28 14:54:57.962338257 +08:00:00\n\nName         Project  Compat  Latest  Kind    Platform\n----         -------  ------  ------  ----    --------\nmemory_addr  0.3.2    ---     0.4.0   Normal  ---\nspin         0.9.8    ---     0.10.0  Normal  ---\n",
              "pkg=axvm, checker=Outdated\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-06-28 14:55:02.490542553 +08:00:00\n\nName         Project  Compat  Latest  Kind    Platform\n----         -------  ------  ------  ----    --------\nmemory_addr  0.3.2    ---     0.4.0   Normal  ---\nspin         0.9.8    ---     0.10.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks violation]",
          "features": "",
          "count": 4,
          "kinds": {
            "Semver Violation": [
              "pkg=axvm, checker=SemverChecks\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none \ntimestamp=2025-06-28 14:54:16.196168198 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building axvm v0.1.0 (current)\nerror: running cargo-doc on crate 'axvm' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking cfg-if v1.0.1\n   Compiling crunchy v0.2.4\n   Compiling libc v0.2.174\n   Compiling tiny-keccak v2.0.2\n    Checking tock-registers v0.9.0\n    Checking log v0.4.27\n   Compiling serde v1.0.219\n   Compiling axerrno v0.1.0\n    Checking aarch64-cpu v10.0.0\n   Compiling quote v1.0.40\n   Compiling syn v2.0.104\n    Checking bitflags v2.9.1\n   Compiling getrandom v0.2.16\n   Compiling zerocopy v0.8.26\n   Compiling once_cell v1.21.3\n   Compiling version_check v0.9.5\n    Checking memory_addr v0.4.0\n   Compiling const-random-macro v0.1.16\n   Compiling ahash v0.8.12\n   Compiling equivalent v1.0.2\n   Compiling hashbrown v0.15.4\n    Checking memory_addr v0.3.2\n    Checking memory_set v0.3.2\n    Checking const-random v0.1.18\n   Compiling indexmap v2.10.0\n    Checking page_table_entry v0.5.4\n    Checking bit_field v0.10.2\n   Compiling toml_datetime v0.6.11\n    Checking page_table_multiarch v0.5.4\n    Checking numeric-enum-macro v0.2.0\n   Compiling winnow v0.7.11\n    Checking lazyinit v0.2.2\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:161:24\n    |\n161 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> A64PTEHV`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> A64PTEHV`\nhelp: change the parameter type to match the trait\n    |\n161 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n161 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:168:25\n    |\n168 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> A64PTEHV`\n               found signature `fn(PhysAddr) -> A64PTEHV`\nhelp: change the parameter type to match the trait\n    |\n168 -     fn new_table(paddr: HostPhysAddr) -> Self {\n168 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:172:24\n    |\n172 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&A64PTEHV) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&A64PTEHV) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n172 -     fn paddr(&self) -> HostPhysAddr {\n172 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/aarch64.rs:178:36\n    |\n178 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut A64PTEHV, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut A64PTEHV, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n178 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n178 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate axvm v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_2/arceos-hypervisor/axvm --features default,vmx &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axvm v0.1.0\n",
              "pkg=axvm, checker=SemverChecks\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-06-28 14:54:09.138265523 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building axvm v0.1.0 (current)\nerror: running cargo-doc on crate 'axvm' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking cfg-if v1.0.1\n   Compiling crunchy v0.2.4\n   Compiling libc v0.2.174\n   Compiling tiny-keccak v2.0.2\n    Checking log v0.4.27\n   Compiling paste v1.0.15\n   Compiling riscv v0.14.0\n   Compiling axerrno v0.1.0\n   Compiling serde v1.0.219\n   Compiling quote v1.0.40\n   Compiling syn v2.0.104\n   Compiling getrandom v0.2.16\n    Checking memory_addr v0.4.0\n    Checking critical-section v1.2.0\n    Checking embedded-hal v1.0.0\n    Checking riscv-pac v0.2.0\n   Compiling zerocopy v0.8.26\n   Compiling version_check v0.9.5\n   Compiling once_cell v1.21.3\n   Compiling autocfg v1.5.0\n    Checking bitflags v2.9.1\n   Compiling memchr v2.7.5\n    Checking page_table_entry v0.5.4\n   Compiling ahash v0.8.12\n   Compiling const-random-macro v0.1.16\n   Compiling aho-corasick v1.1.3\n   Compiling equivalent v1.0.2\n   Compiling semver-parser v0.7.0\n    Checking bit_field v0.10.2\n   Compiling hashbrown v0.15.4\n   Compiling regex-syntax v0.8.5\n    Checking memory_addr v0.3.2\n    Checking memory_set v0.3.2\n   Compiling indexmap v2.10.0\n    Checking page_table_multiarch v0.5.4\n   Compiling semver v0.9.0\n    Checking const-random v0.1.18\n   Compiling regex-automata v0.4.9\n   Compiling winnow v0.7.11\n    Checking lazyinit v0.2.2\n    Checking numeric-enum-macro v0.2.0\n   Compiling toml_datetime v0.6.11\n   Compiling serde_derive v1.0.219\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `axaddrspace` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate axvm v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_2/arceos-hypervisor/axvm --features default,vmx &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axvm v0.1.0\n",
              "pkg=axvm, checker=SemverChecks\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \ntimestamp=2025-06-28 14:53:58.45006537 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building axvm v0.1.0 (current)\nerror: running cargo-doc on crate 'axvm' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking cfg-if v1.0.1\n   Compiling rustversion v1.0.21\n    Checking bit_field v0.10.2\n   Compiling serde v1.0.219\n   Compiling libc v0.2.174\n    Checking bitflags v1.3.2\n   Compiling crunchy v0.2.4\n   Compiling x86 v0.52.0\n    Checking bitflags v2.9.1\n    Checking raw-cpuid v10.7.0\n    Checking volatile v0.4.6\n   Compiling tiny-keccak v2.0.2\n   Compiling quote v1.0.40\n   Compiling syn v2.0.104\n   Compiling axerrno v0.1.0\n    Checking log v0.4.27\n    Checking x86_64 v0.15.2\n    Checking memory_addr v0.4.0\n   Compiling getrandom v0.2.16\n    Checking page_table_entry v0.5.4\n   Compiling version_check v0.9.5\n   Compiling equivalent v1.0.2\n    Checking memory_addr v0.3.2\n   Compiling hashbrown v0.15.4\n   Compiling once_cell v1.21.3\n   Compiling zerocopy v0.8.26\n   Compiling ahash v0.8.12\n   Compiling const-random-macro v0.1.16\n    Checking memory_set v0.3.2\n   Compiling indexmap v2.10.0\n    Checking page_table_multiarch v0.5.4\n    Checking numeric-enum-macro v0.2.0\n    Checking lazyinit v0.2.2\n   Compiling toml_datetime v0.6.11\n   Compiling winnow v0.7.11\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n110 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> EPTEntry`\n               found signature `fn(PhysAddr) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 -     fn new_table(paddr: HostPhysAddr) -> Self {\n117 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&EPTEntry) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 -     fn paddr(&self) -> HostPhysAddr {\n121 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut EPTEntry, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n127 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate axvm v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_2/arceos-hypervisor/axvm --features default,vmx &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axvm v0.1.0\n",
              "pkg=axvm, checker=SemverChecks\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \ntimestamp=2025-06-28 14:53:51.651447601 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building axvm v0.1.0 (current)\nerror: running cargo-doc on crate 'axvm' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking cfg-if v1.0.1\n    Checking bit_field v0.10.2\n   Compiling rustversion v1.0.21\n    Checking bitflags v1.3.2\n   Compiling libc v0.2.174\n   Compiling x86 v0.52.0\n   Compiling serde v1.0.219\n   Compiling crunchy v0.2.4\n    Checking bitflags v2.9.1\n    Checking raw-cpuid v10.7.0\n   Compiling tiny-keccak v2.0.2\n    Checking volatile v0.4.6\n   Compiling axerrno v0.1.0\n   Compiling quote v1.0.40\n   Compiling syn v2.0.104\n    Checking log v0.4.27\n    Checking x86_64 v0.15.2\n    Checking memory_addr v0.4.0\n   Compiling getrandom v0.2.16\n    Checking page_table_entry v0.5.4\n   Compiling once_cell v1.21.3\n   Compiling equivalent v1.0.2\n   Compiling version_check v0.9.5\n   Compiling zerocopy v0.8.26\n   Compiling hashbrown v0.15.4\n    Checking memory_addr v0.3.2\n    Checking memory_set v0.3.2\n   Compiling ahash v0.8.12\n   Compiling const-random-macro v0.1.16\n    Checking page_table_multiarch v0.5.4\n   Compiling indexmap v2.10.0\n    Checking lazyinit v0.2.2\n   Compiling toml_datetime v0.6.11\n    Checking numeric-enum-macro v0.2.0\n   Compiling winnow v0.7.11\n   Compiling autocfg v1.5.0\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n110 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> EPTEntry`\n               found signature `fn(PhysAddr) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 -     fn new_table(paddr: HostPhysAddr) -> Self {\n117 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&EPTEntry) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 -     fn paddr(&self) -> HostPhysAddr {\n121 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut EPTEntry, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n127 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n   Compiling lock_api v0.4.13\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate axvm v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_2/arceos-hypervisor/axvm --features default,vmx &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axvm v0.1.0\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"lazy::LazyUsize::unsync_init\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:36:23: 36:43 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:39:13: 39:39 (#0)\",\n    \"dep_kind\": \"Both\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "(virtual) geiger",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=axvm, checker=Geiger\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu geiger --output-format Ascii\n// timestamp=2025-06-28 14:55:02.556388053 +08:00:00\nFailed to match (ignoring source) package: registry+https://github.com/rust-lang/crates.io-index#zerocopy-derive@0.8.26 \nFailed to match (ignoring source) package: registry+https://github.com/rust-lang/crates.io-index#zerocopy-derive@0.8.26 \nFailed to match (ignoring source) package: registry+https://github.com/rust-lang/crates.io-index#zerocopy-derive@0.8.26 \nFailed to match (ignoring source) package: registry+https://github.com/rust-lang/crates.io-index#zerocopy-derive@0.8.26 \nFailed to match (ignoring source) package: registry+https://github.com/rust-lang/crates.io-index#zerocopy-derive@0.8.26 \nFailed to match (ignoring source) package: registry+https://github.com/rust-lang/crates.io-index#zerocopy-derive@0.8.26 \nFailed to match (ignoring source) package: registry+https://github.com/rust-lang/crates.io-index#zerocopy-derive@0.8.26 \nFailed to match (ignoring source) package: registry+https://github.com/rust-lang/crates.io-index#zerocopy-derive@0.8.26 \nFailed to match (ignoring source) package: registry+https://github.com/rust-lang/crates.io-index#zerocopy-derive@0.8.26 \nFailed to match (ignoring source) package: registry+https://github.com/rust-lang/crates.io-index#zerocopy-derive@0.8.26 \n     Removed 0 files\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking cfg-if v1.0.1\n   Compiling rustversion v1.0.21\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/cfg_if-375191e112da1984.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libcfg_if-375191e112da1984.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/proc-macro2-4b131a9cc84a5cde/build_script_build-4b131a9cc84a5cde.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/rustversion-0768b5f6fd8db8b7/build_script_build-0768b5f6fd8db8b7.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/unicode_ident-1d1395cd7a8bd8da.d\",\"emit\":\"dep-info\"}\n    Checking bit_field v0.10.2\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libunicode_ident-1d1395cd7a8bd8da.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/bit_field-1cb827c223858202.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libunicode_ident-1d1395cd7a8bd8da.rlib\",\"emit\":\"link\"}\n    Checking bitflags v2.9.1\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/bitflags-7c3693fde2daac8d.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libbit_field-1cb827c223858202.rmeta\",\"emit\":\"metadata\"}\n    Checking bitflags v1.3.2\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/bitflags-e452f082b53802d5.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libbitflags-e452f082b53802d5.rmeta\",\"emit\":\"metadata\"}\n   Compiling crunchy v0.2.4\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libbitflags-7c3693fde2daac8d.rmeta\",\"emit\":\"metadata\"}\n   Compiling serde v1.0.219\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/crunchy-ecbb92020f30a849/build_script_build-ecbb92020f30a849.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/proc-macro2-4b131a9cc84a5cde/build_script_build-4b131a9cc84a5cde\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/serde-d13be6ee3c23e465/build_script_build-d13be6ee3c23e465.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/rustversion-0768b5f6fd8db8b7/build_script_build-0768b5f6fd8db8b7\",\"emit\":\"link\"}\n   Compiling libc v0.2.174\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/libc-c316e8beeaf3ef61/build_script_build-c316e8beeaf3ef61.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/crunchy-ecbb92020f30a849/build_script_build-ecbb92020f30a849\",\"emit\":\"link\"}\n   Compiling x86 v0.52.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/proc_macro2-d52e1b0fd08ab4a5.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/x86-cff6e8417eca5035/build_script_build-cff6e8417eca5035.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/serde-d13be6ee3c23e465/build_script_build-d13be6ee3c23e465\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/x86-cff6e8417eca5035/build_script_build-cff6e8417eca5035\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/rustversion-0cd5cbeb9eaceaca.d\",\"emit\":\"dep-info\"}\n    Checking raw-cpuid v10.7.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/libc-c316e8beeaf3ef61/build_script_build-c316e8beeaf3ef61\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/raw_cpuid-5f4ca47649f2be1c.d\",\"emit\":\"dep-info\"}\n    Checking log v0.4.27\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/log-61ee3d839ec629a2.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/liblog-61ee3d839ec629a2.rmeta\",\"emit\":\"metadata\"}\n   Compiling tiny-keccak v2.0.2\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libproc_macro2-d52e1b0fd08ab4a5.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/tiny-keccak-c2aacc7a63ad4a37/build_script_build-c2aacc7a63ad4a37.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/tiny-keccak-c2aacc7a63ad4a37/build_script_build-c2aacc7a63ad4a37\",\"emit\":\"link\"}\n   Compiling axerrno v0.1.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/axerrno-09d22c82c598154d/build_script_build-09d22c82c598154d.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/librustversion-0cd5cbeb9eaceaca.so\",\"emit\":\"link\"}\n    Checking volatile v0.4.6\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/volatile-9c3a5d9b8a46e4be.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libproc_macro2-d52e1b0fd08ab4a5.rlib\",\"emit\":\"link\"}\n   Compiling quote v1.0.40\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libvolatile-9c3a5d9b8a46e4be.rmeta\",\"emit\":\"metadata\"}\n    Checking x86_64 v0.15.2\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/axerrno-09d22c82c598154d/build_script_build-09d22c82c598154d\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/quote-c8eb33032447793c.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libquote-c8eb33032447793c.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libc-105a07506434cced.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/x86_64-a80375a8fc1428dd.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libquote-c8eb33032447793c.rlib\",\"emit\":\"link\"}\n   Compiling syn v2.0.104\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libraw_cpuid-5f4ca47649f2be1c.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/syn-fff2c145fa39ae1a.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/x86-71daba8f6c3e4c2a.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/liblibc-105a07506434cced.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/liblibc-105a07506434cced.rlib\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/crunchy-06ffceecf2a1bd24.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libcrunchy-06ffceecf2a1bd24.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libcrunchy-06ffceecf2a1bd24.rlib\",\"emit\":\"link\"}\n    Checking memory_addr v0.4.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/memory_addr-05cd10bcf213a3f9.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libmemory_addr-05cd10bcf213a3f9.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/cfg_if-b8ad0a6fa4170c99.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libcfg_if-b8ad0a6fa4170c99.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libcfg_if-b8ad0a6fa4170c99.rlib\",\"emit\":\"link\"}\n   Compiling getrandom v0.2.16\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/getrandom-e42038f120e03f79.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libgetrandom-e42038f120e03f79.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libgetrandom-e42038f120e03f79.rlib\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/tiny_keccak-df031a24ed6a02c2.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libx86_64-a80375a8fc1428dd.rmeta\",\"emit\":\"metadata\"}\n    Checking page_table_entry v0.5.4\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/page_table_entry-1dcbe0ad5c972ce9.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libtiny_keccak-df031a24ed6a02c2.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libpage_table_entry-1dcbe0ad5c972ce9.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libtiny_keccak-df031a24ed6a02c2.rlib\",\"emit\":\"link\"}\n   Compiling equivalent v1.0.2\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/axerrno-3f3f9d83a23d7841.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/equivalent-5a88bd14f385988f.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libequivalent-5a88bd14f385988f.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libequivalent-5a88bd14f385988f.rlib\",\"emit\":\"link\"}\n   Compiling zerocopy v0.8.26\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libaxerrno-3f3f9d83a23d7841.rmeta\",\"emit\":\"metadata\"}\n   Compiling once_cell v1.21.3\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/zerocopy-5f0bd4886e4b4931/build_script_build-5f0bd4886e4b4931.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/once_cell-06be233056381e9a.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libonce_cell-06be233056381e9a.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libonce_cell-06be233056381e9a.rlib\",\"emit\":\"link\"}\n   Compiling version_check v0.9.5\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libx86-71daba8f6c3e4c2a.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/version_check-2571cf324060ec01.d\",\"emit\":\"dep-info\"}\n   Compiling hashbrown v0.15.4\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/hashbrown-2573dfd5dc2f6be7.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libversion_check-2571cf324060ec01.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/zerocopy-5f0bd4886e4b4931/build_script_build-5f0bd4886e4b4931\",\"emit\":\"link\"}\n    Checking memory_addr v0.3.2\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/memory_addr-71bb150f2c24197c.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libmemory_addr-71bb150f2c24197c.rmeta\",\"emit\":\"metadata\"}\n    Checking memory_set v0.3.2\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libversion_check-2571cf324060ec01.rlib\",\"emit\":\"link\"}\n   Compiling ahash v0.8.12\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/memory_set-6462112f2263303f.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/ahash-0154c0ad65530e52/build_script_build-0154c0ad65530e52.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libmemory_set-6462112f2263303f.rmeta\",\"emit\":\"metadata\"}\n    Checking page_table_multiarch v0.5.4\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/build/ahash-0154c0ad65530e52/build_script_build-0154c0ad65530e52\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/page_table_multiarch-b68f2f341aba17d2.d\",\"emit\":\"dep-info\"}\n   Compiling const-random-macro v0.1.16\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/const_random_macro-149daeb7b39ed516.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libpage_table_multiarch-b68f2f341aba17d2.rmeta\",\"emit\":\"metadata\"}\n   Compiling autocfg v1.5.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/autocfg-3b49e0afa777d415.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libhashbrown-2573dfd5dc2f6be7.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libconst_random_macro-149daeb7b39ed516.so\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libautocfg-3b49e0afa777d415.rmeta\",\"emit\":\"metadata\"}\n    Checking numeric-enum-macro v0.2.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libhashbrown-2573dfd5dc2f6be7.rlib\",\"emit\":\"link\"}\n   Compiling indexmap v2.10.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/numeric_enum_macro-796a58d6f2689351.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libnumeric_enum_macro-796a58d6f2689351.rmeta\",\"emit\":\"metadata\"}\n   Compiling winnow v0.7.11\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/indexmap-5117044413c7a0b8.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/winnow-80322fb6242b7fe0.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libautocfg-3b49e0afa777d415.rlib\",\"emit\":\"link\"}\n    Checking lazyinit v0.2.2\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/lazyinit-8fc74ff675ee7995.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/liblazyinit-8fc74ff675ee7995.rmeta\",\"emit\":\"metadata\"}\n   Compiling toml_datetime v0.6.11\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/toml_datetime-999d9932efff2177.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libtoml_datetime-999d9932efff2177.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libtoml_datetime-999d9932efff2177.rlib\",\"emit\":\"link\"}\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/axaddrspace-e4ef011c1de6bced.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"method `new_page` has an incompatible type for trait\",\"code\":{\"code\":\"E0053\",\"explanation\":\"The parameters of any trait method must match between a trait implementation\\nand the trait definition.\\n\\nErroneous code example:\\n\\n```compile_fail,E0053\\ntrait Foo {\\n    fn foo(x: u16);\\n    fn bar(&self);\\n}\\n\\nstruct Bar;\\n\\nimpl Foo for Bar {\\n    // error, expected u16, found i16\\n    fn foo(x: i16) { }\\n\\n    // error, types differ in mutability\\n    fn bar(&mut self) { }\\n}\\n```\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs\",\"byte_start\":3272,\"byte_end\":3284,\"line_start\":110,\"line_end\":110,\"column_start\":24,\"column_end\":36,\"is_primary\":true,\"text\":[{\"text\":\"    fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\",\"highlight_start\":24,\"highlight_end\":36}],\"label\":\"expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\\n   found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"change the parameter type to match the trait\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs\",\"byte_start\":3272,\"byte_end\":3284,\"line_start\":110,\"line_end\":110,\"column_start\":24,\"column_end\":36,\"is_primary\":true,\"text\":[{\"text\":\"    fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\",\"highlight_start\":24,\"highlight_end\":36}],\"label\":null,\"suggested_replacement\":\"memory_addr::addr::PhysAddr\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0053]\\u001b[0m\\u001b[0m\\u001b[1m: method `new_page` has an incompatible type for trait\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:110:24\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m110\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                        \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mexpected `memory_addr::addr::PhysAddr`, found `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: expected signature `fn(\\u001b[0m\\u001b[0m\\u001b[1m\\u001b[35mmemory_addr::addr::PhysAddr\\u001b[0m\\u001b[0m, page_table_multiarch::MappingFlags, _) -> EPTEntry`\\u001b[0m\\n\\u001b[0m               found signature `fn(\\u001b[0m\\u001b[0m\\u001b[1m\\u001b[35mPhysAddr\\u001b[0m\\u001b[0m, page_table_multiarch::MappingFlags, _) -> EPTEntry`\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;14mhelp\\u001b[0m\\u001b[0m: change the parameter type to match the trait\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m110\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[38;5;9m- \\u001b[0m\\u001b[0m    fn new_page(paddr: \\u001b[0m\\u001b[0m\\u001b[38;5;9mHostPhysAddr\\u001b[0m\\u001b[0m, flags: MappingFlags, is_huge: bool) -> Self {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m110\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[38;5;10m+ \\u001b[0m\\u001b[0m    fn new_page(paddr: \\u001b[0m\\u001b[0m\\u001b[38;5;10mmemory_addr::addr::PhysAddr\\u001b[0m\\u001b[0m, flags: MappingFlags, is_huge: bool) -> Self {\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"method `new_table` has an incompatible type for trait\",\"code\":{\"code\":\"E0053\",\"explanation\":\"The parameters of any trait method must match between a trait implementation\\nand the trait definition.\\n\\nErroneous code example:\\n\\n```compile_fail,E0053\\ntrait Foo {\\n    fn foo(x: u16);\\n    fn bar(&self);\\n}\\n\\nstruct Bar;\\n\\nimpl Foo for Bar {\\n    // error, expected u16, found i16\\n    fn foo(x: i16) { }\\n\\n    // error, types differ in mutability\\n    fn bar(&mut self) { }\\n}\\n```\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs\",\"byte_start\":3560,\"byte_end\":3572,\"line_start\":117,\"line_end\":117,\"column_start\":25,\"column_end\":37,\"is_primary\":true,\"text\":[{\"text\":\"    fn new_table(paddr: HostPhysAddr) -> Self {\",\"highlight_start\":25,\"highlight_end\":37}],\"label\":\"expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected signature `fn(memory_addr::addr::PhysAddr) -> EPTEntry`\\n   found signature `fn(PhysAddr) -> EPTEntry`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"change the parameter type to match the trait\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs\",\"byte_start\":3560,\"byte_end\":3572,\"line_start\":117,\"line_end\":117,\"column_start\":25,\"column_end\":37,\"is_primary\":true,\"text\":[{\"text\":\"    fn new_table(paddr: HostPhysAddr) -> Self {\",\"highlight_start\":25,\"highlight_end\":37}],\"label\":null,\"suggested_replacement\":\"memory_addr::addr::PhysAddr\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0053]\\u001b[0m\\u001b[0m\\u001b[1m: method `new_table` has an incompatible type for trait\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:117:25\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m117\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    fn new_table(paddr: HostPhysAddr) -> Self {\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                         \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mexpected `memory_addr::addr::PhysAddr`, found `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: expected signature `fn(\\u001b[0m\\u001b[0m\\u001b[1m\\u001b[35mmemory_addr::addr::PhysAddr\\u001b[0m\\u001b[0m) -> EPTEntry`\\u001b[0m\\n\\u001b[0m               found signature `fn(\\u001b[0m\\u001b[0m\\u001b[1m\\u001b[35mPhysAddr\\u001b[0m\\u001b[0m) -> EPTEntry`\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;14mhelp\\u001b[0m\\u001b[0m: change the parameter type to match the trait\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m117\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[38;5;9m- \\u001b[0m\\u001b[0m    fn new_table(paddr: \\u001b[0m\\u001b[0m\\u001b[38;5;9mHostPhysAddr\\u001b[0m\\u001b[0m) -> Self {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m117\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[38;5;10m+ \\u001b[0m\\u001b[0m    fn new_table(paddr: \\u001b[0m\\u001b[0m\\u001b[38;5;10mmemory_addr::addr::PhysAddr\\u001b[0m\\u001b[0m) -> Self {\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"method `paddr` has an incompatible type for trait\",\"code\":{\"code\":\"E0053\",\"explanation\":\"The parameters of any trait method must match between a trait implementation\\nand the trait definition.\\n\\nErroneous code example:\\n\\n```compile_fail,E0053\\ntrait Foo {\\n    fn foo(x: u16);\\n    fn bar(&self);\\n}\\n\\nstruct Bar;\\n\\nimpl Foo for Bar {\\n    // error, expected u16, found i16\\n    fn foo(x: i16) { }\\n\\n    // error, types differ in mutability\\n    fn bar(&mut self) { }\\n}\\n```\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs\",\"byte_start\":3765,\"byte_end\":3777,\"line_start\":121,\"line_end\":121,\"column_start\":24,\"column_end\":36,\"is_primary\":true,\"text\":[{\"text\":\"    fn paddr(&self) -> HostPhysAddr {\",\"highlight_start\":24,\"highlight_end\":36}],\"label\":\"expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected signature `fn(&EPTEntry) -> memory_addr::addr::PhysAddr`\\n   found signature `fn(&EPTEntry) -> PhysAddr`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"change the output type to match the trait\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs\",\"byte_start\":3765,\"byte_end\":3777,\"line_start\":121,\"line_end\":121,\"column_start\":24,\"column_end\":36,\"is_primary\":true,\"text\":[{\"text\":\"    fn paddr(&self) -> HostPhysAddr {\",\"highlight_start\":24,\"highlight_end\":36}],\"label\":null,\"suggested_replacement\":\"memory_addr::addr::PhysAddr\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0053]\\u001b[0m\\u001b[0m\\u001b[1m: method `paddr` has an incompatible type for trait\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:121:24\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m121\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    fn paddr(&self) -> HostPhysAddr {\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                        \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mexpected `memory_addr::addr::PhysAddr`, found `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: expected signature `fn(&EPTEntry) -> \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[35mmemory_addr::addr::PhysAddr\\u001b[0m\\u001b[0m`\\u001b[0m\\n\\u001b[0m               found signature `fn(&EPTEntry) -> \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[35mPhysAddr\\u001b[0m\\u001b[0m`\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;14mhelp\\u001b[0m\\u001b[0m: change the output type to match the trait\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m121\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[38;5;9m- \\u001b[0m\\u001b[0m    fn paddr(&self) -> \\u001b[0m\\u001b[0m\\u001b[38;5;9mHostPhysAddr\\u001b[0m\\u001b[0m {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m121\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[38;5;10m+ \\u001b[0m\\u001b[0m    fn paddr(&self) -> \\u001b[0m\\u001b[0m\\u001b[38;5;10mmemory_addr::addr::PhysAddr\\u001b[0m\\u001b[0m {\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"method `set_paddr` has an incompatible type for trait\",\"code\":{\"code\":\"E0053\",\"explanation\":\"The parameters of any trait method must match between a trait implementation\\nand the trait definition.\\n\\nErroneous code example:\\n\\n```compile_fail,E0053\\ntrait Foo {\\n    fn foo(x: u16);\\n    fn bar(&self);\\n}\\n\\nstruct Bar;\\n\\nimpl Foo for Bar {\\n    // error, expected u16, found i16\\n    fn foo(x: i16) { }\\n\\n    // error, types differ in mutability\\n    fn bar(&mut self) { }\\n}\\n```\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs\",\"byte_start\":3986,\"byte_end\":3998,\"line_start\":127,\"line_end\":127,\"column_start\":36,\"column_end\":48,\"is_primary\":true,\"text\":[{\"text\":\"    fn set_paddr(&mut self, paddr: HostPhysAddr) {\",\"highlight_start\":36,\"highlight_end\":48}],\"label\":\"expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected signature `fn(&mut EPTEntry, memory_addr::addr::PhysAddr)`\\n   found signature `fn(&mut EPTEntry, PhysAddr)`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"change the parameter type to match the trait\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs\",\"byte_start\":3986,\"byte_end\":3998,\"line_start\":127,\"line_end\":127,\"column_start\":36,\"column_end\":48,\"is_primary\":true,\"text\":[{\"text\":\"    fn set_paddr(&mut self, paddr: HostPhysAddr) {\",\"highlight_start\":36,\"highlight_end\":48}],\"label\":null,\"suggested_replacement\":\"memory_addr::addr::PhysAddr\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0053]\\u001b[0m\\u001b[0m\\u001b[1m: method `set_paddr` has an incompatible type for trait\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:127:36\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m127\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    fn set_paddr(&mut self, paddr: HostPhysAddr) {\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                                    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mexpected `memory_addr::addr::PhysAddr`, found `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: expected signature `fn(&mut EPTEntry, \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[35mmemory_addr::addr::PhysAddr\\u001b[0m\\u001b[0m)`\\u001b[0m\\n\\u001b[0m               found signature `fn(&mut EPTEntry, \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[35mPhysAddr\\u001b[0m\\u001b[0m)`\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;14mhelp\\u001b[0m\\u001b[0m: change the parameter type to match the trait\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m127\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[38;5;9m- \\u001b[0m\\u001b[0m    fn set_paddr(&mut self, paddr: \\u001b[0m\\u001b[0m\\u001b[38;5;9mHostPhysAddr\\u001b[0m\\u001b[0m) {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m127\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[38;5;10m+ \\u001b[0m\\u001b[0m    fn set_paddr(&mut self, paddr: \\u001b[0m\\u001b[0m\\u001b[38;5;10mmemory_addr::addr::PhysAddr\\u001b[0m\\u001b[0m) {\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\\n\\nErroneous code examples:\\n\\n```compile_fail,E0308\\nfn plus_one(x: i32) -> i32 {\\n    x + 1\\n}\\n\\nplus_one(\\\"Not a number\\\");\\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\\n\\nif \\\"Not a bool\\\" {\\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\\n}\\n\\nlet x: f32 = \\\"Not a float\\\";\\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\\n//     |\\n//     expected due to this\\n```\\n\\nThis error occurs when an expression was used in a place where the compiler\\nexpected an expression of a different type. It can occur in several cases, the\\nmost common being when calling a function and passing an argument which has a\\ndifferent type than the matching type in the function declaration.\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs\",\"byte_start\":1384,\"byte_end\":1401,\"line_start\":46,\"line_end\":46,\"column_start\":23,\"column_end\":40,\"is_primary\":true,\"text\":[{\"text\":\"                |_va| PhysAddr::from(0),\",\"highlight_start\":23,\"highlight_end\":40}],\"label\":\"expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the expected type `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the found type `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs\",\"byte_start\":180,\"byte_end\":200,\"line_start\":7,\"line_end\":7,\"column_start\":5,\"column_end\":25,\"is_primary\":false,\"text\":[{\"text\":\"use page_table_multiarch::PagingHandler;\",\"highlight_start\":5,\"highlight_end\":25}],\"label\":\"one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs\",\"byte_start\":4,\"byte_end\":15,\"line_start\":1,\"line_end\":1,\"column_start\":5,\"column_end\":16,\"is_primary\":false,\"text\":[{\"text\":\"use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\",\"highlight_start\":5,\"highlight_end\":16}],\"label\":\"one version of crate `memory_addr` used here, as a direct dependency of the current crate\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"you can use `cargo tree` to explore your dependency tree\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0308]\\u001b[0m\\u001b[0m\\u001b[1m: mismatched types\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m46\\u001b[0m\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m                |_va| PhysAddr::from(0),\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mexpected `memory_addr::addr::PhysAddr`, found `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m7\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse page_table_multiarch::PagingHandler;\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--------------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m1\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m-----------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a direct dependency of the current crate\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the expected type `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m450\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m/\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0mdef_usize_addr! {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m451\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    /// A physical memory address.\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m452\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type PhysAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m...\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m455\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type VirtAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|_^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the found type `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mhelp\\u001b[0m\\u001b[0m: you can use `cargo tree` to explore your dependency tree\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\\n\\nErroneous code examples:\\n\\n```compile_fail,E0308\\nfn plus_one(x: i32) -> i32 {\\n    x + 1\\n}\\n\\nplus_one(\\\"Not a number\\\");\\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\\n\\nif \\\"Not a bool\\\" {\\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\\n}\\n\\nlet x: f32 = \\\"Not a float\\\";\\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\\n//     |\\n//     expected due to this\\n```\\n\\nThis error occurs when an expression was used in a place where the compiler\\nexpected an expression of a different type. It can occur in several cases, the\\nmost common being when calling a function and passing an argument which has a\\ndifferent type than the matching type in the function declaration.\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs\",\"byte_start\":893,\"byte_end\":937,\"line_start\":32,\"line_end\":32,\"column_start\":18,\"column_end\":62,\"is_primary\":true,\"text\":[{\"text\":\"            |va| PhysAddr::from(va.as_usize() - pa_va_offset),\",\"highlight_start\":18,\"highlight_end\":62}],\"label\":\"expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the expected type `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the found type `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs\",\"byte_start\":180,\"byte_end\":200,\"line_start\":7,\"line_end\":7,\"column_start\":5,\"column_end\":25,\"is_primary\":false,\"text\":[{\"text\":\"use page_table_multiarch::PagingHandler;\",\"highlight_start\":5,\"highlight_end\":25}],\"label\":\"one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs\",\"byte_start\":4,\"byte_end\":15,\"line_start\":1,\"line_end\":1,\"column_start\":5,\"column_end\":16,\"is_primary\":false,\"text\":[{\"text\":\"use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\",\"highlight_start\":5,\"highlight_end\":16}],\"label\":\"one version of crate `memory_addr` used here, as a direct dependency of the current crate\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"you can use `cargo tree` to explore your dependency tree\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0308]\\u001b[0m\\u001b[0m\\u001b[1m: mismatched types\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m32\\u001b[0m\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m            |va| PhysAddr::from(va.as_usize() - pa_va_offset),\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mexpected `memory_addr::addr::PhysAddr`, found `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m7\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse page_table_multiarch::PagingHandler;\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--------------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m1\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m-----------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a direct dependency of the current crate\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the expected type `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m450\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m/\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0mdef_usize_addr! {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m451\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    /// A physical memory address.\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m452\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type PhysAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m...\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m455\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type VirtAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|_^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the found type `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mhelp\\u001b[0m\\u001b[0m: you can use `cargo tree` to explore your dependency tree\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\\n\\nErroneous code examples:\\n\\n```compile_fail,E0308\\nfn plus_one(x: i32) -> i32 {\\n    x + 1\\n}\\n\\nplus_one(\\\"Not a number\\\");\\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\\n\\nif \\\"Not a bool\\\" {\\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\\n}\\n\\nlet x: f32 = \\\"Not a float\\\";\\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\\n//     |\\n//     expected due to this\\n```\\n\\nThis error occurs when an expression was used in a place where the compiler\\nexpected an expression of a different type. It can occur in several cases, the\\nmost common being when calling a function and passing an argument which has a\\ndifferent type than the matching type in the function declaration.\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs\",\"byte_start\":1241,\"byte_end\":1261,\"line_start\":47,\"line_end\":47,\"column_start\":9,\"column_end\":29,\"is_primary\":true,\"text\":[{\"text\":\"        self.pt.root_paddr()\",\"highlight_start\":9,\"highlight_end\":29}],\"label\":\"expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs\",\"byte_start\":1222,\"byte_end\":1230,\"line_start\":46,\"line_end\":46,\"column_start\":44,\"column_end\":52,\"is_primary\":false,\"text\":[{\"text\":\"    pub const fn page_table_root(&self) -> PhysAddr {\",\"highlight_start\":44,\"highlight_end\":52}],\"label\":\"expected `PhysAddr` because of return type\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the expected type `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the found type `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs\",\"byte_start\":4,\"byte_end\":15,\"line_start\":1,\"line_end\":1,\"column_start\":5,\"column_end\":16,\"is_primary\":false,\"text\":[{\"text\":\"use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\",\"highlight_start\":5,\"highlight_end\":16}],\"label\":\"one version of crate `memory_addr` used here, as a direct dependency of the current crate\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs\",\"byte_start\":180,\"byte_end\":200,\"line_start\":7,\"line_end\":7,\"column_start\":5,\"column_end\":25,\"is_primary\":false,\"text\":[{\"text\":\"use page_table_multiarch::PagingHandler;\",\"highlight_start\":5,\"highlight_end\":25}],\"label\":\"one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"you can use `cargo tree` to explore your dependency tree\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0308]\\u001b[0m\\u001b[0m\\u001b[1m: mismatched types\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m46\\u001b[0m\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub const fn page_table_root(&self) -> PhysAddr {\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                                            \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mexpected `PhysAddr` because of return type\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m47\\u001b[0m\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        self.pt.root_paddr()\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m         \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mexpected `PhysAddr`, found `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the expected type `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m7\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse page_table_multiarch::PagingHandler;\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--------------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m1\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m-----------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a direct dependency of the current crate\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m450\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m/\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0mdef_usize_addr! {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m451\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    /// A physical memory address.\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m452\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type PhysAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m...\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m455\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type VirtAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|_^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the found type `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mhelp\\u001b[0m\\u001b[0m: you can use `cargo tree` to explore your dependency tree\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\\n\\nErroneous code examples:\\n\\n```compile_fail,E0308\\nfn plus_one(x: i32) -> i32 {\\n    x + 1\\n}\\n\\nplus_one(\\\"Not a number\\\");\\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\\n\\nif \\\"Not a bool\\\" {\\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\\n}\\n\\nlet x: f32 = \\\"Not a float\\\";\\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\\n//     |\\n//     expected due to this\\n```\\n\\nThis error occurs when an expression was used in a place where the compiler\\nexpected an expression of a different type. It can occur in several cases, the\\nmost common being when calling a function and passing an argument which has a\\ndifferent type than the matching type in the function declaration.\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs\",\"byte_start\":5509,\"byte_end\":5714,\"line_start\":170,\"line_end\":176,\"column_start\":9,\"column_end\":18,\"is_primary\":true,\"text\":[{\"text\":\"        self.pt\",\"highlight_start\":9,\"highlight_end\":16},{\"text\":\"            .query(vaddr)\",\"highlight_start\":1,\"highlight_end\":26},{\"text\":\"            .map(|(phys_addr, _, _)| {\",\"highlight_start\":1,\"highlight_end\":39},{\"text\":\"                debug!(\\\"vaddr {:?} translate to {:?}\\\", vaddr, phys_addr);\",\"highlight_start\":1,\"highlight_end\":74},{\"text\":\"                phys_addr\",\"highlight_start\":1,\"highlight_end\":26},{\"text\":\"            })\",\"highlight_start\":1,\"highlight_end\":15},{\"text\":\"            .ok()\",\"highlight_start\":1,\"highlight_end\":18}],\"label\":\"expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs\",\"byte_start\":5403,\"byte_end\":5419,\"line_start\":166,\"line_end\":166,\"column_start\":54,\"column_end\":70,\"is_primary\":false,\"text\":[{\"text\":\"    pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\",\"highlight_start\":54,\"highlight_end\":70}],\"label\":\"expected `Option<PhysAddr>` because of return type\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the expected type `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the found type `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs\",\"byte_start\":4,\"byte_end\":15,\"line_start\":1,\"line_end\":1,\"column_start\":5,\"column_end\":16,\"is_primary\":false,\"text\":[{\"text\":\"use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\",\"highlight_start\":5,\"highlight_end\":16}],\"label\":\"one version of crate `memory_addr` used here, as a direct dependency of the current crate\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs\",\"byte_start\":180,\"byte_end\":200,\"line_start\":7,\"line_end\":7,\"column_start\":5,\"column_end\":25,\"is_primary\":false,\"text\":[{\"text\":\"use page_table_multiarch::PagingHandler;\",\"highlight_start\":5,\"highlight_end\":25}],\"label\":\"one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"you can use `cargo tree` to explore your dependency tree\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0308]\\u001b[0m\\u001b[0m\\u001b[1m: mismatched types\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m166\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m    pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                                                        \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m----------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mexpected `Option<PhysAddr>` because of return type\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m...\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m170\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m/\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        self.pt\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m171\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m            .query(vaddr)\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m172\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m            .map(|(phys_addr, _, _)| {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m173\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m                debug!(\\\"vaddr {:?} translate to {:?}\\\", vaddr, phys_addr);\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m174\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m                phys_addr\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m175\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m            })\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m176\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m            .ok()\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m|_________________^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mexpected `PhysAddr`, found `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the expected type `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m7\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse page_table_multiarch::PagingHandler;\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--------------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m1\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m-----------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a direct dependency of the current crate\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m450\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m/\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0mdef_usize_addr! {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m451\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    /// A physical memory address.\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m452\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type PhysAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m...\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m455\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type VirtAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|_^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the found type `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mhelp\\u001b[0m\\u001b[0m: you can use `cargo tree` to explore your dependency tree\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\\n\\nErroneous code examples:\\n\\n```compile_fail,E0308\\nfn plus_one(x: i32) -> i32 {\\n    x + 1\\n}\\n\\nplus_one(\\\"Not a number\\\");\\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\\n\\nif \\\"Not a bool\\\" {\\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\\n}\\n\\nlet x: f32 = \\\"Not a float\\\";\\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\\n//     |\\n//     expected due to this\\n```\\n\\nThis error occurs when an expression was used in a place where the compiler\\nexpected an expression of a different type. It can occur in several cases, the\\nmost common being when calling a function and passing an argument which has a\\ndifferent type than the matching type in the function declaration.\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs\",\"byte_start\":7804,\"byte_end\":7930,\"line_start\":239,\"line_end\":242,\"column_start\":13,\"column_end\":22,\"is_primary\":true,\"text\":[{\"text\":\"            self.pt\",\"highlight_start\":13,\"highlight_end\":20},{\"text\":\"                .query(vaddr)\",\"highlight_start\":1,\"highlight_end\":30},{\"text\":\"                .map(|(phys_addr, _, _)| (phys_addr, area.size()))\",\"highlight_start\":1,\"highlight_end\":67},{\"text\":\"                .ok()\",\"highlight_start\":1,\"highlight_end\":22}],\"label\":\"expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs\",\"byte_start\":7632,\"byte_end\":7657,\"line_start\":234,\"line_end\":234,\"column_start\":68,\"column_end\":93,\"is_primary\":false,\"text\":[{\"text\":\"    pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\",\"highlight_start\":68,\"highlight_end\":93}],\"label\":\"expected `Option<(PhysAddr, usize)>` because of return type\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the expected type `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the found type `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs\",\"byte_start\":4,\"byte_end\":15,\"line_start\":1,\"line_end\":1,\"column_start\":5,\"column_end\":16,\"is_primary\":false,\"text\":[{\"text\":\"use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\",\"highlight_start\":5,\"highlight_end\":16}],\"label\":\"one version of crate `memory_addr` used here, as a direct dependency of the current crate\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs\",\"byte_start\":180,\"byte_end\":200,\"line_start\":7,\"line_end\":7,\"column_start\":5,\"column_end\":25,\"is_primary\":false,\"text\":[{\"text\":\"use page_table_multiarch::PagingHandler;\",\"highlight_start\":5,\"highlight_end\":25}],\"label\":\"one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"you can use `cargo tree` to explore your dependency tree\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0308]\\u001b[0m\\u001b[0m\\u001b[1m: mismatched types\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m234\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m    pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                                                                      \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m-------------------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mexpected `Option<(PhysAddr, usize)>` because of return type\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m...\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m239\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m/\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m            self.pt\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m240\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m                .query(vaddr)\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m241\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m                .map(|(phys_addr, _, _)| (phys_addr, area.size()))\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m242\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m                .ok()\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m|_____________________^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mexpected `PhysAddr`, found `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the expected type `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m7\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse page_table_multiarch::PagingHandler;\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--------------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m1\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m-----------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a direct dependency of the current crate\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m450\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m/\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0mdef_usize_addr! {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m451\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    /// A physical memory address.\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m452\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type PhysAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m...\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m455\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type VirtAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|_^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the found type `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mhelp\\u001b[0m\\u001b[0m: you can use `cargo tree` to explore your dependency tree\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"aborting due to 9 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror\\u001b[0m\\u001b[0m\\u001b[1m: aborting due to 9 previous errors\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"Some errors have detailed explanations: E0053, E0308.\",\"code\":null,\"level\":\"failure-note\",\"spans\":[],\"children\":[],\"rendered\":\"\\u001b[0m\\u001b[1mSome errors have detailed explanations: E0053, E0308.\\u001b[0m\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"For more information about an error, try `rustc --explain E0053`.\",\"code\":null,\"level\":\"failure-note\",\"spans\":[],\"children\":[],\"rendered\":\"\\u001b[0m\\u001b[1mFor more information about an error, try `rustc --explain E0053`.\\u001b[0m\\n\"}\nerror: could not compile `axaddrspace` (lib)\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-2025-06-26-x86_64-unknown-linux-gnu/bin/rustc --crate-name axaddrspace --edition=2024 /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg 'feature=\"arm-el2\"' --cfg 'feature=\"default\"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values(\"arm-el2\", \"default\"))' -C metadata=506397ecfaa8b22e -C extra-filename=-e4ef011c1de6bced --out-dir /home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps -L dependency=/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps --extern axerrno=/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libaxerrno-3f3f9d83a23d7841.rmeta --extern bit_field=/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libbit_field-1cb827c223858202.rmeta --extern bitflags=/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libbitflags-7c3693fde2daac8d.rmeta --extern cfg_if=/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libcfg_if-375191e112da1984.rmeta --extern lazyinit=/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/liblazyinit-8fc74ff675ee7995.rmeta --extern log=/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/liblog-61ee3d839ec629a2.rmeta --extern memory_addr=/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libmemory_addr-71bb150f2c24197c.rmeta --extern memory_set=/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libmemory_set-6462112f2263303f.rmeta --extern numeric_enum_macro=/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libnumeric_enum_macro-796a58d6f2689351.rmeta --extern page_table_entry=/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libpage_table_entry-1dcbe0ad5c972ce9.rmeta --extern page_table_multiarch=/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libpage_table_multiarch-b68f2f341aba17d2.rmeta --cap-lints allow` (exit status: 1)\nwarning: build failed, waiting for other jobs to finish...\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libsyn-fff2c145fa39ae1a.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libindexmap-5117044413c7a0b8.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libindexmap-5117044413c7a0b8.rlib\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libsyn-fff2c145fa39ae1a.rlib\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libwinnow-80322fb6242b7fe0.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/axvm/target/debug/deps/libwinnow-80322fb6242b7fe0.rlib\",\"emit\":\"link\"}\nerror: Cargo(\"1 job failed\")\n"
            ]
          }
        },
        {
          "file": "(virtual) mirai",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=axvm, checker=Mirai\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axvm\n// cmd=cargo +nightly-2025-01-10 mirai --target x86_64-unknown-linux-gnu \n// timestamp=2025-06-28 14:54:17.811266464 +08:00:00\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n    Checking cfg-if v1.0.1\n    Checking bit_field v0.10.2\n   Compiling rustversion v1.0.21\n   Compiling serde v1.0.219\n   Compiling x86 v0.52.0\n    Checking bitflags v2.9.1\n    Checking bitflags v1.3.2\n   Compiling crunchy v0.2.4\n   Compiling libc v0.2.174\n    Checking raw-cpuid v10.7.0\n   Compiling quote v1.0.40\n   Compiling syn v2.0.104\n    Checking log v0.4.27\n   Compiling tiny-keccak v2.0.2\n   Compiling axerrno v0.1.0\n    Checking volatile v0.4.6\n    Checking x86_64 v0.15.2\n    Checking memory_addr v0.4.0\n   Compiling getrandom v0.2.16\n    Checking page_table_entry v0.5.4\n   Compiling zerocopy v0.8.26\n   Compiling hashbrown v0.15.4\n   Compiling version_check v0.9.5\n   Compiling equivalent v1.0.2\n    Checking memory_addr v0.3.2\n   Compiling once_cell v1.21.3\n    Checking memory_set v0.3.2\n   Compiling const-random-macro v0.1.16\n   Compiling indexmap v2.10.0\n   Compiling ahash v0.8.12\n    Checking page_table_multiarch v0.5.4\n    Checking lazyinit v0.2.2\n    Checking numeric-enum-macro v0.2.0\n   Compiling winnow v0.7.11\n   Compiling autocfg v1.5.0\n   Compiling toml_datetime v0.6.11\n   Compiling lock_api v0.4.13\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\n    Checking const-random v0.1.18\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Atomvchecker",
    "Outdated",
    "Geiger",
    "Unused Deps",
    "Unformatted"
  ]
}