{
  "repo": {
    "user": "arceos-hypervisor",
    "repo": "x86_vcpu"
  },
  "data": [
    {
      "user": "arceos-hypervisor",
      "repo": "x86_vcpu",
      "pkg": "x86_vcpu",
      "count": 18,
      "raw_reports": [
        {
          "file": "src/vmx/vcpu.rs",
          "features": "",
          "count": 11,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unused import: `vmx::vcpu`\n  --> src/vmx/vcpu.rs:35:71\n   |\n35 | use crate::{ept::GuestPageWalkInfo, msr::Msr, regs::GeneralRegisters, vmx::vcpu};\n   |                                                                       ^^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by default\n\n",
              "warning: operator precedence can trip the unwary\n    --> src/vmx/vcpu.rs:1203:21\n     |\n1203 |         let value = self.guest_regs.rdx.get_bits(0..32) << 32 | self.guest_regs.rax.get_bits(0..32);\n     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `(self.guest_regs.rdx.get_bits(0..32) << 32) | self.guest_regs.rax.get_bits(0..32)`\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n\n",
              "warning: operator precedence can trip the unwary\n    --> src/vmx/vcpu.rs:1268:24\n     |\n1268 |         let base_low = entry.get_bits(16..40) | entry.get_bits(56..64) << 24;\n     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `entry.get_bits(16..40) | (entry.get_bits(56..64) << 24)`\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n\n",
              "warning: operator precedence can trip the unwary\n    --> src/vmx/vcpu.rs:1270:9\n     |\n1270 |         base_low | base_high << 32\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `base_low | (base_high << 32)`\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n\n",
              "warning: unreachable expression\n    --> src/vmx/vcpu.rs:1059:9\n     |\n1056 |         unimplemented!(\"apic access\");\n     |         ----------------------------- any code following this expression is unreachable\n...\n1059 |         self.advance_rip(exit_info.exit_instruction_length as _)\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable expression\n     |\n     = note: `#[warn(unreachable_code)]` on by default\n\n",
              "warning: unused variable: `write`\n    --> src/vmx/vcpu.rs:1044:13\n     |\n1044 |         let write = match apic_access_exit_info.access_type {\n     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_write`\n     |\n     = note: `#[warn(unused_variables)]` on by default\n\n",
              "warning: unused variable: `exit_info`\n    --> src/vmx/vcpu.rs:1041:38\n     |\n1041 |     fn handle_apic_access(&mut self, exit_info: &VmxExitInfo) -> AxResult {\n     |                                      ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_exit_info`\n\n",
              "warning: an array of `Range` that is only one element\n   --> src/vmx/vcpu.rs:506:36\n    |\n506 |           let io_to_be_intercepted = [\n    |  ____________________________________^\n...   |\n533 | |             QEMU_EXIT_PORT..QEMU_EXIT_PORT + 1, // QEMU exit port\n534 | |         ];\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_range_in_vec_init\n    = note: `#[warn(clippy::single_range_in_vec_init)]` on by default\nhelp: if you wanted a `Vec` that contains the entire range, try\n    |\n506 |         let io_to_be_intercepted = (QEMU_EXIT_PORT..QEMU_EXIT_PORT + 1).collect::<std::vec::Vec<u16>>();\n    |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
              "warning: manual `RangeInclusive::contains` implementation\n   --> src/vmx/vcpu.rs:983:21\n    |\n983 |                     msr >= X2APIC_MSR_BASE && msr <= X2APIC_MSR_END\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(X2APIC_MSR_BASE..=X2APIC_MSR_END).contains(&msr)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: `#[warn(clippy::manual_range_contains)]` on by default\n\n",
              "warning: using `clone` on type `GeneralRegisters` which implements the `Copy` trait\n    --> src/vmx/vcpu.rs:1122:26\n     |\n1122 |         let regs_clone = self.regs_mut().clone();\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^ help: try dereferencing it: `*self.regs_mut()`\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n     = note: `#[warn(clippy::clone_on_copy)]` on by default\n\n",
              "warning: passing a unit value to a function\n    --> src/vmx/vcpu.rs:1442:9\n     |\n1442 |         Ok(self.queue_event(vector as u8, None))\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unit_arg\n     = note: `#[warn(clippy::unit_arg)]` on by default\nhelp: move the expression in front of the call and replace it with the unit literal `()`\n     |\n1442 ~         self.queue_event(vector as u8, None);\n1443 +         Ok(())\n     |\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=x86_vcpu, checker=SemverChecks\n// toolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/x86_vcpu\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \n// timestamp=2025-06-19 4:35:20.198815976 +08:00:00\n    Building x86_vcpu v0.1.0 (current)\n       Built [   9.223s] (current)\n     Parsing x86_vcpu v0.1.0 (current)\n      Parsed [   0.008s] (current)\nerror: x86_vcpu not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        },
        {
          "file": "Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x86_vlapic 0.1.0\n│   └── x86_vcpu 0.1.0\n├── x86_vcpu 0.1.0\n└── riscv 0.12.1\n    └── page_table_multiarch 0.5.3\n        └── axaddrspace 0.1.0\n            ├── x86_vlapic 0.1.0\n            ├── x86_vcpu 0.1.0\n            ├── axvisor_api 0.1.0\n            │   ├── x86_vlapic 0.1.0\n            │   ├── x86_vcpu 0.1.0\n            │   └── axvcpu 0.1.0\n            │       └── x86_vcpu 0.1.0\n            ├── axvcpu 0.1.0\n            └── axdevice_base 0.1.0\n                ├── x86_vlapic 0.1.0\n                └── x86_vcpu 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 787,\n    \"last-commit\": \"7573f55ba337263f61167dbb0ea926cdc7c8eb5d\",\n    \"last-updated\": \"2025-06-17T11:04:25+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 54\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-06-18T20:35:49Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-18T20:35:49Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=x86_vcpu, checker=Outdated\ntoolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/x86_vcpu\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-06-19 4:36:05.686379385 +08:00:00\n\nName         Project  Compat  Latest  Kind    Platform\n----         -------  ------  ------  ----    --------\nmemory_addr  0.3.2    ---     0.4.0   Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=x86_vcpu, checker=SemverChecks\ntoolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/x86_vcpu\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \ntimestamp=2025-06-19 4:35:30.351047852 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building x86_vcpu v0.1.0 (current)\n       Built [   9.223s] (current)\n     Parsing x86_vcpu v0.1.0 (current)\n      Parsed [   0.008s] (current)\nerror: x86_vcpu not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        },
        {
          "file": "src/regs/accessors.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: operator precedence can trip the unwary\n   --> src/regs/accessors.rs:116:9\n    |\n116 |         (self.edx() as u64) << 32 | self.eax() as u64\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `((self.edx() as u64) << 32) | self.eax() as u64`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n    = note: `#[warn(clippy::precedence)]` on by default\n\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Outdated",
    "Geiger",
    "Unformatted"
  ]
}