{
  "repo": {
    "user": "arceos-hypervisor",
    "repo": "x86_vcpu"
  },
  "data": [
    {
      "user": "arceos-hypervisor",
      "repo": "x86_vcpu",
      "pkg": "x86_vcpu",
      "count": 32,
      "raw_reports": [
        {
          "file": "src/vmx/vcpu.rs",
          "features": "",
          "count": 22,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unreachable expression\n    --> src/vmx/vcpu.rs:1061:9\n     |\n1058 |         unimplemented!(\"apic access\");\n     |         ----------------------------- any code following this expression is unreachable\n...\n1061 |         self.advance_rip(exit_info.exit_instruction_length as _)\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable expression\n     |\n     = note: `#[warn(unreachable_code)]` on by default\n\n",
              "warning: unnecessary `unsafe` block\n   --> src/vmx/vcpu.rs:879:9\n    |\n879 |         unsafe {\n    |         ^^^^^^ unnecessary `unsafe` block\n...\n905 |         vmx_entry_with!(\"vmlaunch\")\n    |         --------------------------- in this macro invocation\n    |\n    = note: `#[warn(unused_unsafe)]` on by default\n    = note: this warning originates in the macro `vmx_entry_with` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: unnecessary `unsafe` block\n   --> src/vmx/vcpu.rs:879:9\n    |\n879 |         unsafe {\n    |         ^^^^^^ unnecessary `unsafe` block\n...\n913 |         vmx_entry_with!(\"vmresume\")\n    |         --------------------------- in this macro invocation\n    |\n    = note: this warning originates in the macro `vmx_entry_with` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: unnecessary `unsafe` block\n   --> src/vmx/vcpu.rs:923:9\n    |\n923 |         unsafe {\n    |         ^^^^^^ unnecessary `unsafe` block\n\n",
              "warning: unused variable: `write`\n    --> src/vmx/vcpu.rs:1046:13\n     |\n1046 |         let write = match apic_access_exit_info.access_type {\n     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_write`\n     |\n     = note: `#[warn(unused_variables)]` on by default\n\n",
              "warning: unused variable: `exit_info`\n    --> src/vmx/vcpu.rs:1043:38\n     |\n1043 |     fn handle_apic_access(&mut self, exit_info: &VmxExitInfo) -> AxResult {\n     |                                      ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_exit_info`\n\n",
              "warning: an array of `Range` that is only one element\n   --> src/vmx/vcpu.rs:506:36\n    |\n506 |           let io_to_be_intercepted = [\n    |  ____________________________________^\n...   |\n533 | |             QEMU_EXIT_PORT..QEMU_EXIT_PORT + 1, // QEMU exit port\n534 | |         ];\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_range_in_vec_init\n    = note: `#[warn(clippy::single_range_in_vec_init)]` on by default\n\n",
              "warning: this `if` statement can be collapsed\n   --> src/vmx/vcpu.rs:711:9\n    |\n711 | /         if let Some(features) = raw_cpuid.get_extended_processor_and_feature_identifiers() {\n712 | |             if features.has_rdtscp() {\n713 | |                 val |= CpuCtrl2::ENABLE_RDTSCP;\n714 | |             }\n715 | |         }\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n    = note: `#[warn(clippy::collapsible_if)]` on by default\nhelp: collapse nested if block\n    |\n711 ~         if let Some(features) = raw_cpuid.get_extended_processor_and_feature_identifiers()\n712 ~             && features.has_rdtscp() {\n713 |                 val |= CpuCtrl2::ENABLE_RDTSCP;\n714 ~             }\n    |\n\n",
              "warning: this `if` statement can be collapsed\n   --> src/vmx/vcpu.rs:716:9\n    |\n716 | /         if let Some(features) = raw_cpuid.get_extended_feature_info() {\n717 | |             if features.has_invpcid() {\n718 | |                 val |= CpuCtrl2::ENABLE_INVPCID;\n719 | |             }\n720 | |         }\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n    |\n716 ~         if let Some(features) = raw_cpuid.get_extended_feature_info()\n717 ~             && features.has_invpcid() {\n718 |                 val |= CpuCtrl2::ENABLE_INVPCID;\n719 ~             }\n    |\n\n",
              "warning: this `if` statement can be collapsed\n   --> src/vmx/vcpu.rs:721:9\n    |\n721 | /         if let Some(features) = raw_cpuid.get_extended_state_info() {\n722 | |             if features.has_xsaves_xrstors() {\n723 | |                 val |= CpuCtrl2::ENABLE_XSAVES_XRSTORS;\n724 | |             }\n725 | |         }\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n    |\n721 ~         if let Some(features) = raw_cpuid.get_extended_state_info()\n722 ~             && features.has_xsaves_xrstors() {\n723 |                 val |= CpuCtrl2::ENABLE_XSAVES_XRSTORS;\n724 ~             }\n    |\n\n",
              "warning: manual `RangeInclusive::contains` implementation\n   --> src/vmx/vcpu.rs:985:21\n    |\n985 |                     msr >= X2APIC_MSR_BASE && msr <= X2APIC_MSR_END\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(X2APIC_MSR_BASE..=X2APIC_MSR_END).contains(&msr)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: `#[warn(clippy::manual_range_contains)]` on by default\n\n",
              "warning: variables can be used directly in the `format!` string\n    --> src/vmx/vcpu.rs:1018:13\n     |\n1018 | /             trace!(\n1019 | |                 \"handle_vlapic_msr_write: msr={:#x}, value={:#x}\",\n1020 | |                 msr, value\n1021 | |             );\n     | |_____________^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n     = note: `#[warn(clippy::uninlined_format_args)]` on by default\n\n",
              "warning: variables can be used directly in the `format!` string\n    --> src/vmx/vcpu.rs:1036:13\n     |\n1036 |             trace!(\"handle_vlapic_msr_read: msr={:#x}, value={:#x}\", msr, value);\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n     |\n1036 -             trace!(\"handle_vlapic_msr_read: msr={:#x}, value={:#x}\", msr, value);\n1036 +             trace!(\"handle_vlapic_msr_read: msr={msr:#x}, value={value:#x}\");\n     |\n\n",
              "warning: using `clone` on type `GeneralRegisters` which implements the `Copy` trait\n    --> src/vmx/vcpu.rs:1124:26\n     |\n1124 |         let regs_clone = self.regs_mut().clone();\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^ help: try dereferencing it: `*self.regs_mut()`\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n     = note: `#[warn(clippy::clone_on_copy)]` on by default\n\n",
              "warning: variables can be used directly in the `format!` string\n    --> src/vmx/vcpu.rs:1174:21\n     |\n1174 | /                     warn!(\n1175 | |                         \"handle_cpuid: Failed to get TSC frequency by CPUID, default to {} MHz\",\n1176 | |                         TIMER_FREQUENCY_MHZ\n1177 | |                     );\n     | |_____________________^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
              "warning: variables can be used directly in the `format!` string\n    --> src/vmx/vcpu.rs:1353:29\n     |\n1353 | / ...                   warn!(\n1354 | | ...                       \"VMX unsupported IO-Exit: {:#x?} of {:#x?}\",\n1355 | | ...                       io_info, exit_info\n1356 | | ...                   );\n     | |_______________________^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
              "warning: variables can be used directly in the `format!` string\n    --> src/vmx/vcpu.rs:1357:29\n     |\n1357 | ...                   warn!(\"VCpu {:#x?}\", self);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n     |\n1357 -                             warn!(\"VCpu {:#x?}\", self);\n1357 +                             warn!(\"VCpu {self:#x?}\");\n     |\n\n",
              "warning: variables can be used directly in the `format!` string\n    --> src/vmx/vcpu.rs:1363:37\n     |\n1363 | / ...                   warn!(\n1364 | | ...                       \"VMX invalid IO-Exit: {:#x?} of {:#x?}\",\n1365 | | ...                       io_info, exit_info\n1366 | | ...                   );\n     | |_______________________^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
              "warning: variables can be used directly in the `format!` string\n    --> src/vmx/vcpu.rs:1367:37\n     |\n1367 | ...                   warn!(\"VCpu {:#x?}\", self);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n     |\n1367 -                                     warn!(\"VCpu {:#x?}\", self);\n1367 +                                     warn!(\"VCpu {self:#x?}\");\n     |\n\n",
              "warning: variables can be used directly in the `format!` string\n    --> src/vmx/vcpu.rs:1414:25\n     |\n1414 |                         warn!(\"VMX unsupported VM-Exit: {:#x?}\", exit_info);\n     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n     |\n1414 -                         warn!(\"VMX unsupported VM-Exit: {:#x?}\", exit_info);\n1414 +                         warn!(\"VMX unsupported VM-Exit: {exit_info:#x?}\");\n     |\n\n",
              "warning: variables can be used directly in the `format!` string\n    --> src/vmx/vcpu.rs:1415:25\n     |\n1415 |                         warn!(\"VCpu {:#x?}\", self);\n     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n     |\n1415 -                         warn!(\"VCpu {:#x?}\", self);\n1415 +                         warn!(\"VCpu {self:#x?}\");\n     |\n\n",
              "warning: passing a unit value to a function\n    --> src/vmx/vcpu.rs:1444:9\n     |\n1444 |         Ok(self.queue_event(vector as u8, None))\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unit_arg\n     = note: `#[warn(clippy::unit_arg)]` on by default\nhelp: move the expression in front of the call and replace it with the unit literal `()`\n     |\n1444 ~         self.queue_event(vector as u8, None);\n1445 +         Ok(())\n     |\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"lazy::LazyUsize::unsync_init\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:36:23: 36:43 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:39:13: 39:39 (#0)\",\n    \"dep_kind\": \"Both\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=x86_vcpu, checker=Lockbud\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/arceos-hypervisor/x86_vcpu\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-none \n// timestamp=2025-07-27 4:34:24.055469028 +08:00:00\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling libc v0.2.174\n   Compiling crunchy v0.2.4\n   Compiling equivalent v1.0.2\n   Compiling cfg-if v1.0.1\n   Compiling hashbrown v0.15.4\n   Compiling tiny-keccak v2.0.2\n   Compiling bit_field v0.10.2\n   Compiling rustversion v1.0.21\n   Compiling indexmap v2.10.0\n   Compiling winnow v0.7.12\n   Compiling quote v1.0.40\n   Compiling toml_datetime v0.6.11\n   Compiling syn v2.0.104\n   Compiling getrandom v0.2.16\n[2025-07-26T20:34:25Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"lazy::LazyUsize::unsync_init\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:36:23: 36:43 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:39:13: 39:39 (#0)\",\n            \"dep_kind\": \"Both\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-07-26T20:34:25Z WARN  lockbud::callbacks] crate getrandom contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling bitflags v1.3.2\n   Compiling once_cell v1.21.3\n   Compiling zerocopy v0.8.26\n   Compiling version_check v0.9.5\n   Compiling bitflags v2.9.1\n   Compiling x86 v0.52.0\n   Compiling serde v1.0.219\n   Compiling ahash v0.8.12\n   Compiling const-random-macro v0.1.16\n   Compiling raw-cpuid v10.7.0\n   Compiling toml_edit v0.22.27\n   Compiling memory_addr v0.4.0\n   Compiling volatile v0.4.6\n   Compiling log v0.4.27\n[2025-07-26T20:34:28Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-07-26T20:34:28Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling axerrno v0.1.0\n   Compiling x86_64 v0.15.2\n   Compiling proc-macro-crate v3.3.0\n   Compiling const-random v0.1.18\n   Compiling page_table_entry v0.5.5\n   Compiling allocator-api2 v0.2.21\n   Compiling serde_derive v1.0.219\n   Compiling page_table_multiarch v0.5.5\n   Compiling memory_set v0.4.0\n   Compiling numeric-enum-macro v0.2.0\n   Compiling winnow v0.6.26\n   Compiling hashbrown v0.14.5\n   Compiling lazyinit v0.2.2\n   Compiling axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2722b2cb)\n   Compiling enumerable_derive v1.2.0\n   Compiling crate_interface v0.1.4\n   Compiling axvisor_api_proc v0.1.0 (https://github.com/arceos-hypervisor/axvisor_api.git#4102b0a4)\n   Compiling serde_repr v0.1.20\n   Compiling enumerable v1.2.0\n   Compiling percpu v0.2.0\n   Compiling paste v1.0.15\n   Compiling axvisor_api v0.1.0 (https://github.com/arceos-hypervisor/axvisor_api.git#4102b0a4)\n   Compiling percpu_macros v0.2.0\n   Compiling bit v0.1.1\n   Compiling tock-registers v0.10.0\n   Compiling raw-cpuid v11.5.0\n   Compiling spin v0.9.8\n   Compiling axvcpu v0.1.0 (https://github.com/arceos-hypervisor/axvcpu.git#0dae8925)\n   Compiling serde_spanned v0.6.6 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n   Compiling toml_datetime v0.6.6 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n   Compiling toml_edit v0.22.15 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n   Compiling toml v0.8.14 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n   Compiling axvmconfig v0.1.0 (https://github.com/arceos-hypervisor/axvmconfig.git#6704074b)\n   Compiling axdevice_base v0.1.0 (https://github.com/arceos-hypervisor/axdevice_crates.git#a4745807)\n   Compiling x86_vlapic v0.1.0 (https://github.com/arceos-hypervisor/x86_vlapic.git#1f3edfb0)\n   Compiling x86_vcpu v0.1.0 (/home/runner/check/batch_1/arceos-hypervisor/x86_vcpu)\nerror[E0658]: use of unstable library feature `naked_functions`\n   --> src/vmx/vcpu.rs:924:13\n    |\n924 |             naked_asm!(\n    |             ^^^^^^^^^\n    |\n    = note: see issue #90957 <https://github.com/rust-lang/rust/issues/90957> for more information\n    = help: add `#![feature(naked_functions)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: use of unstable library feature `naked_functions`\n   --> src/vmx/vcpu.rs:880:13\n    |\n880 |             naked_asm!(\n    |             ^^^^^^^^^\n...\n913 |         vmx_entry_with!(\"vmresume\")\n    |         --------------------------- in this macro invocation\n    |\n    = note: see issue #90957 <https://github.com/rust-lang/rust/issues/90957> for more information\n    = help: add `#![feature(naked_functions)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n    = note: this error originates in the macro `vmx_entry_with` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0658]: use of unstable library feature `naked_functions`\n   --> src/vmx/vcpu.rs:880:13\n    |\n880 |             naked_asm!(\n    |             ^^^^^^^^^\n...\n905 |         vmx_entry_with!(\"vmlaunch\")\n    |         --------------------------- in this macro invocation\n    |\n    = note: see issue #90957 <https://github.com/rust-lang/rust/issues/90957> for more information\n    = help: add `#![feature(naked_functions)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n    = note: this error originates in the macro `vmx_entry_with` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: `naked` is not an unsafe attribute\n   --> src/vmx/vcpu.rs:896:7\n    |\n896 |     #[unsafe(naked)]\n    |       ^^^^^^ this is not an unsafe attribute\n    |\n    = note: extraneous unsafe is not allowed in attributes\n\nerror: `naked` is not an unsafe attribute\n   --> src/vmx/vcpu.rs:908:7\n    |\n908 |     #[unsafe(naked)]\n    |       ^^^^^^ this is not an unsafe attribute\n    |\n    = note: extraneous unsafe is not allowed in attributes\n\nerror: `naked` is not an unsafe attribute\n   --> src/vmx/vcpu.rs:916:7\n    |\n916 |     #[unsafe(naked)]\n    |       ^^^^^^ this is not an unsafe attribute\n    |\n    = note: extraneous unsafe is not allowed in attributes\n\nerror[E0658]: the `#[naked]` attribute is an experimental feature\n   --> src/vmx/vcpu.rs:896:5\n    |\n896 |     #[unsafe(naked)]\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #90957 <https://github.com/rust-lang/rust/issues/90957> for more information\n    = help: add `#![feature(naked_functions)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: the `#[naked]` attribute is an experimental feature\n   --> src/vmx/vcpu.rs:908:5\n    |\n908 |     #[unsafe(naked)]\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #90957 <https://github.com/rust-lang/rust/issues/90957> for more information\n    = help: add `#![feature(naked_functions)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: the `#[naked]` attribute is an experimental feature\n   --> src/vmx/vcpu.rs:916:5\n    |\n916 |     #[unsafe(naked)]\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #90957 <https://github.com/rust-lang/rust/issues/90957> for more information\n    = help: add `#![feature(naked_functions)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: use of unstable library feature `naked_functions`\n --> src/vmx/vcpu.rs:4:5\n  |\n4 |     arch::naked_asm,\n  |     ^^^^^^^^^^^^^^^\n  |\n  = note: see issue #90957 <https://github.com/rust-lang/rust/issues/90957> for more information\n  = help: add `#![feature(naked_functions)]` to the crate attributes to enable\n  = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nwarning: unreachable expression\n    --> src/vmx/vcpu.rs:1061:9\n     |\n1058 |         unimplemented!(\"apic access\");\n     |         ----------------------------- any code following this expression is unreachable\n...\n1061 |         self.advance_rip(exit_info.exit_instruction_length as _)\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable expression\n     |\n     = note: `#[warn(unreachable_code)]` on by default\n\nwarning: unused variable: `write`\n    --> src/vmx/vcpu.rs:1046:13\n     |\n1046 |         let write = match apic_access_exit_info.access_type {\n     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_write`\n     |\n     = note: `#[warn(unused_variables)]` on by default\n\nwarning: unused variable: `exit_info`\n    --> src/vmx/vcpu.rs:1043:38\n     |\n1043 |     fn handle_apic_access(&mut self, exit_info: &VmxExitInfo) -> AxResult {\n     |                                      ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_exit_info`\n\nFor more information about this error, try `rustc --explain E0658`.\nwarning: `x86_vcpu` (lib) generated 3 warnings\nerror: could not compile `x86_vcpu` (lib) due to 10 previous errors; 3 warnings emitted\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=x86_vcpu, checker=SemverChecks\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/arceos-hypervisor/x86_vcpu\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \n// timestamp=2025-07-27 4:33:38.698104343 +08:00:00\n    Building x86_vcpu v0.1.0 (current)\n       Built [  13.640s] (current)\n     Parsing x86_vcpu v0.1.0 (current)\n      Parsed [   0.021s] (current)\nerror: x86_vcpu not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        },
        {
          "file": "Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n├── x86_vlapic 0.1.0\n│   └── x86_vcpu 0.1.0\n├── x86_vcpu 0.1.0\n└── riscv 0.14.0\n    └── page_table_multiarch 0.5.5\n        └── axaddrspace 0.1.0\n            ├── x86_vlapic 0.1.0\n            ├── x86_vcpu 0.1.0\n            ├── axvisor_api 0.1.0\n            │   ├── x86_vlapic 0.1.0\n            │   ├── x86_vcpu 0.1.0\n            │   └── axvcpu 0.1.0\n            │       └── x86_vcpu 0.1.0\n            ├── axvcpu 0.1.0\n            └── axdevice_base 0.1.0\n                ├── x86_vlapic 0.1.0\n                └── x86_vcpu 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 792,\n    \"last-commit\": \"c62e71ad8c5256ffa3cafbb1a8c687db60869e98\",\n    \"last-updated\": \"2025-07-23T15:03:26+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 78\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\\n\\n## Possible Alternative(s)\\n\\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[Lockbud] deadlock detection",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-07-26T20:34:25Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"lazy::LazyUsize::unsync_init\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:36:23: 36:43 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:39:13: 39:39 (#0)\",\n            \"dep_kind\": \"Both\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-07-26T20:34:25Z WARN  lockbud::callbacks] crate getrandom contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n[2025-07-26T20:34:28Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-07-26T20:34:28Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[Udeps] Unused dependencies",
          "features": "",
          "count": 1,
          "kinds": {
            "Unused Deps": [
              "pkg=x86_vcpu, checker=Udeps\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/arceos-hypervisor/x86_vcpu\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target x86_64-unknown-none \ntimestamp=2025-07-27 4:35:27.421421842 +08:00:00\n\n\nstdout:\nunused dependencies:\n`x86_vcpu v0.1.0 (/home/runner/check/batch_1/arceos-hypervisor/x86_vcpu)`\n└─── dependencies\n     └─── \"spin\"\nNote: These dependencies might be used by other targets.\n      To find dependencies that are not used by any target, enable `--all-targets`.\nNote: They might be false-positive.\n      For example, `cargo-udeps` cannot detect usage of crates that are only used in doc-tests.\n      To ignore some dependencies, write `package.metadata.cargo-udeps.ignore` in Cargo.toml.\n\nstderr:\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling crunchy v0.2.4\n   Compiling libc v0.2.174\n    Checking cfg-if v1.0.1\n   Compiling tiny-keccak v2.0.2\n   Compiling hashbrown v0.15.4\n   Compiling equivalent v1.0.2\n   Compiling rustversion v1.0.21\n    Checking bit_field v0.10.2\n   Compiling toml_datetime v0.6.11\n   Compiling quote v1.0.40\n   Compiling indexmap v2.10.0\n   Compiling syn v2.0.104\n   Compiling winnow v0.7.12\n   Compiling getrandom v0.2.16\n   Compiling zerocopy v0.8.26\n    Checking bitflags v2.9.1\n    Checking bitflags v1.3.2\n   Compiling serde v1.0.219\n   Compiling x86 v0.52.0\n   Compiling version_check v0.9.5\n   Compiling once_cell v1.21.3\n   Compiling const-random-macro v0.1.16\n   Compiling ahash v0.8.12\n    Checking raw-cpuid v10.7.0\n   Compiling toml_edit v0.22.27\n    Checking memory_addr v0.4.0\n    Checking log v0.4.27\n    Checking volatile v0.4.6\n   Compiling axerrno v0.1.0\n    Checking x86_64 v0.15.2\n    Checking const-random v0.1.18\n   Compiling proc-macro-crate v3.3.0\n    Checking page_table_entry v0.5.5\n    Checking allocator-api2 v0.2.21\n   Compiling serde_derive v1.0.219\n    Checking hashbrown v0.14.5\n    Checking page_table_multiarch v0.5.5\n    Checking memory_set v0.4.0\n    Checking winnow v0.6.26\n    Checking lazyinit v0.2.2\n    Checking numeric-enum-macro v0.2.0\n   Compiling enumerable_derive v1.2.0\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2722b2cb)\n   Compiling axvisor_api_proc v0.1.0 (https://github.com/arceos-hypervisor/axvisor_api.git#4102b0a4)\n   Compiling crate_interface v0.1.4\n    Checking enumerable v1.2.0\n   Compiling serde_repr v0.1.20\n   Compiling percpu v0.2.0\n   Compiling paste v1.0.15\n    Checking axvisor_api v0.1.0 (https://github.com/arceos-hypervisor/axvisor_api.git#4102b0a4)\n   Compiling percpu_macros v0.2.0\n    Checking tock-registers v0.10.0\n    Checking bit v0.1.1\n    Checking raw-cpuid v11.5.0\n    Checking axvcpu v0.1.0 (https://github.com/arceos-hypervisor/axvcpu.git#0dae8925)\n    Checking spin v0.9.8\n    Checking serde_spanned v0.6.6 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n    Checking toml_datetime v0.6.6 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n    Checking toml_edit v0.22.15 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n    Checking toml v0.8.14 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n    Checking axvmconfig v0.1.0 (https://github.com/arceos-hypervisor/axvmconfig.git#6704074b)\n    Checking axdevice_base v0.1.0 (https://github.com/arceos-hypervisor/axdevice_crates.git#a4745807)\n    Checking x86_vlapic v0.1.0 (https://github.com/arceos-hypervisor/x86_vlapic.git#1f3edfb0)\n    Checking x86_vcpu v0.1.0 (/home/runner/check/batch_1/arceos-hypervisor/x86_vcpu)\nwarning: unreachable expression\n    --> src/vmx/vcpu.rs:1061:9\n     |\n1058 |         unimplemented!(\"apic access\");\n     |         ----------------------------- any code following this expression is unreachable\n...\n1061 |         self.advance_rip(exit_info.exit_instruction_length as _)\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable expression\n     |\n     = note: `#[warn(unreachable_code)]` on by default\n\nwarning: unnecessary `unsafe` block\n   --> src/vmx/vcpu.rs:879:9\n    |\n879 |         unsafe {\n    |         ^^^^^^ unnecessary `unsafe` block\n...\n905 |         vmx_entry_with!(\"vmlaunch\")\n    |         --------------------------- in this macro invocation\n    |\n    = note: `#[warn(unused_unsafe)]` on by default\n    = note: this warning originates in the macro `vmx_entry_with` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nwarning: unnecessary `unsafe` block\n   --> src/vmx/vcpu.rs:879:9\n    |\n879 |         unsafe {\n    |         ^^^^^^ unnecessary `unsafe` block\n...\n913 |         vmx_entry_with!(\"vmresume\")\n    |         --------------------------- in this macro invocation\n    |\n    = note: this warning originates in the macro `vmx_entry_with` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nwarning: unnecessary `unsafe` block\n   --> src/vmx/vcpu.rs:923:9\n    |\n923 |         unsafe {\n    |         ^^^^^^ unnecessary `unsafe` block\n\nwarning: unused variable: `write`\n    --> src/vmx/vcpu.rs:1046:13\n     |\n1046 |         let write = match apic_access_exit_info.access_type {\n     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_write`\n     |\n     = note: `#[warn(unused_variables)]` on by default\n\nwarning: unused variable: `exit_info`\n    --> src/vmx/vcpu.rs:1043:38\n     |\n1043 |     fn handle_apic_access(&mut self, exit_info: &VmxExitInfo) -> AxResult {\n     |                                      ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_exit_info`\n\nwarning: `x86_vcpu` (lib) generated 6 warnings\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 13.49s\ninfo: Loading depinfo from \"/home/runner/check/batch_1/arceos-hypervisor/x86_vcpu/target/x86_64-unknown-none/debug/deps/x86_vcpu-89271633c3c17521.d\"\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=x86_vcpu, checker=Outdated\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/arceos-hypervisor/x86_vcpu\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-07-27 4:34:53.878890186 +08:00:00\n\nName  Project  Compat  Latest  Kind    Platform\n----  -------  ------  ------  ----    --------\nspin  0.9.8    ---     0.10.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks violation]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=x86_vcpu, checker=SemverChecks\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/arceos-hypervisor/x86_vcpu\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \ntimestamp=2025-07-27 4:33:53.899679556 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building x86_vcpu v0.1.0 (current)\n       Built [  13.640s] (current)\n     Parsing x86_vcpu v0.1.0 (current)\n      Parsed [   0.021s] (current)\nerror: x86_vcpu not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        },
        {
          "file": "src/vmx/vmcs.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: variables can be used directly in the `format!` string\n   --> src/vmx/vmcs.rs:650:5\n    |\n650 | /     debug!(\n651 | |         \"set {:?}: {:#x} (+{:#x}, -{:#x})\",\n652 | |         control, old_value, set, clear\n653 | |     );\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Atomvchecker",
    "Outdated",
    "Geiger",
    "Unused Deps",
    "Unformatted"
  ]
}