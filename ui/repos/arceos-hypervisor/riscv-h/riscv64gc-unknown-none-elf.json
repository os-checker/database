{
  "repo": {
    "user": "arceos-hypervisor",
    "repo": "riscv-h"
  },
  "data": [
    {
      "user": "arceos-hypervisor",
      "repo": "riscv-h",
      "pkg": "riscv-h",
      "count": 61,
      "raw_reports": [
        {
          "file": "src/register/hypervisorx64/hcounteren.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hcounteren::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hcounteren.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hcounteren.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hcounteren.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hcounteren.rs:21:9\n   |\n21 |         return Hcounteren { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Hcounteren { bits: x };\n21 +         Hcounteren { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hcounteren.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n   = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/hedeleg.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hedeleg::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hedeleg.rs:34:9\n   |\n34 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hedeleg.rs:33:5\n   |\n33 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hedeleg.rs:24:9\n   |\n24 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n24 -         return self.bits;\n24 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hedeleg.rs:29:9\n   |\n29 |         return Hedeleg { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n29 -         return Hedeleg { bits: x };\n29 +         Hedeleg { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hedeleg.rs:33:5\n   |\n33 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/hgatp.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hgatp::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hgatp.rs:36:9\n   |\n36 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hgatp.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hgatp.rs:26:9\n   |\n26 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n26 -         return self.bits;\n26 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hgatp.rs:31:9\n   |\n31 |         return Hgatp { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n31 -         return Hgatp { bits: x };\n31 +         Hgatp { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hgatp.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/hideleg.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hideleg::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hideleg.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hideleg.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hideleg.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hideleg.rs:21:9\n   |\n21 |         return Hideleg { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Hideleg { bits: x };\n21 +         Hideleg { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hideleg.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/hie.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hie::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hie.rs:32:9\n   |\n32 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hie.rs:31:5\n   |\n31 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hie.rs:24:9\n   |\n24 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n24 -         return self.bits;\n24 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hie.rs:28:9\n   |\n28 |         return Hie { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n28 -         return Hie { bits: x };\n28 +         Hie { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hie.rs:31:5\n   |\n31 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/hip.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hip.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hip.rs:21:9\n   |\n21 |         return Hip { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Hip { bits: x };\n21 +         Hip { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/hstatus.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hstatus::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hstatus.rs:36:9\n   |\n36 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hstatus.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hstatus.rs:26:9\n   |\n26 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n26 -         return self.bits;\n26 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hstatus.rs:31:9\n   |\n31 |         return Hstatus { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n31 -         return Hstatus { bits: x };\n31 +         Hstatus { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hstatus.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/hvip.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hvip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hvip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hvip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hvip.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hvip.rs:21:9\n   |\n21 |         return Hvip { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Hvip { bits: x };\n21 +         Hvip { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hvip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/vsatp.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsatp::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsatp.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsatp.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsatp.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsatp.rs:21:9\n   |\n21 |         return Vsatp { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Vsatp { bits: x };\n21 +         Vsatp { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vsatp.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/vscause.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vscause::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vscause.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vscause.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vscause.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vscause.rs:21:9\n   |\n21 |         return Vscause { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Vscause { bits: x };\n21 +         Vscause { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vscause.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/vsie.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsie::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsie.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsie.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsie.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsie.rs:21:9\n   |\n21 |         return Vsie { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Vsie { bits: x };\n21 +         Vsie { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vsie.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/vsip.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsip.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsip.rs:21:9\n   |\n21 |         return Vsip { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Vsip { bits: x };\n21 +         Vsip { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vsip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/vsstatus.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsstatus::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsstatus.rs:30:9\n   |\n30 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsstatus.rs:29:5\n   |\n29 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsstatus.rs:20:9\n   |\n20 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n20 -         return self.bits;\n20 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsstatus.rs:25:9\n   |\n25 |         return Vsstatus { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n25 -         return Vsstatus { bits: x };\n25 +         Vsstatus { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vsstatus.rs:29:5\n   |\n29 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/vstvec.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vstvec::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vstvec.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vstvec.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vstvec.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vstvec.rs:21:9\n   |\n21 |         return Vstvec { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Vstvec { bits: x };\n21 +         Vstvec { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vstvec.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n└── riscv 0.14.0\n    └── riscv-h 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 820,\n    \"last-commit\": \"fb0d06e8e2cc04c9aa359e51ffa0a09e3bf58822\",\n    \"last-updated\": \"2025-09-22T08:05:57+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 15\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\\n\\n## Possible Alternative(s)\\n\\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[Lockbud] deadlock detection",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-09-26T20:34:29Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-09-26T20:34:29Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[Udeps] Unused dependencies",
          "features": "",
          "count": 1,
          "kinds": {
            "Unused Deps": [
              "pkg=riscv-h, checker=Udeps\ntoolchain=nightly-2025-05-20, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/arceos-hypervisor/riscv-h\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target riscv64gc-unknown-none-elf \ntimestamp=2025-09-27 4:34:41.272297922 +08:00:00\n\n\nstdout:\nunused dependencies:\n`riscv-h v0.1.0 (/home/runner/check/batch_1/arceos-hypervisor/riscv-h)`\n└─── dependencies\n     ├─── \"bare-metal\"\n     ├─── \"bitflags\"\n     └─── \"log\"\nNote: These dependencies might be used by other targets.\n      To find dependencies that are not used by any target, enable `--all-targets`.\nNote: They might be false-positive.\n      For example, `cargo-udeps` cannot detect usage of crates that are only used in doc-tests.\n      To ignore some dependencies, write `package.metadata.cargo-udeps.ignore` in Cargo.toml.\n\nstderr:\n   Compiling proc-macro2 v1.0.101\n   Compiling unicode-ident v1.0.18\n   Compiling paste v1.0.15\n   Compiling riscv v0.14.0\n    Checking critical-section v1.2.0\n    Checking embedded-hal v1.0.0\n    Checking riscv-pac v0.2.0\n    Checking bare-metal v1.0.0\n    Checking bit_field v0.10.3\n    Checking bitflags v2.9.3\n    Checking log v0.4.27\n   Compiling quote v1.0.40\n   Compiling syn v2.0.106\n   Compiling riscv-macros v0.2.0\n    Checking riscv-h v0.1.0 (/home/runner/check/batch_1/arceos-hypervisor/riscv-h)\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hcounteren::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hcounteren.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hcounteren.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hedeleg::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hedeleg.rs:34:9\n   |\n34 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hedeleg.rs:33:5\n   |\n33 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hgatp::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hgatp.rs:36:9\n   |\n36 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hgatp.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hideleg::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hideleg.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hideleg.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hie::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hie.rs:32:9\n   |\n32 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hie.rs:31:5\n   |\n31 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hstatus::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hstatus.rs:36:9\n   |\n36 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hstatus.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hvip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hvip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hvip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vsatp::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsatp.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsatp.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vscause::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vscause.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vscause.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vsie::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsie.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsie.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vsip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vsstatus::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsstatus.rs:30:9\n   |\n30 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsstatus.rs:29:5\n   |\n29 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vstvec::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vstvec.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vstvec.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0133`.\nwarning: `riscv-h` (lib) generated 14 warnings (run `cargo fix --lib -p riscv-h` to apply 14 suggestions)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 2.88s\ninfo: Loading depinfo from \"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/riscv64gc-unknown-none-elf/debug/deps/riscv_h-4edc144b5daa3b56.d\"\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=riscv-h, checker=Outdated\ntoolchain=nightly-2025-05-20, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/arceos-hypervisor/riscv-h\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-09-27 4:34:34.093996427 +08:00:00\n\nName      Project  Compat  Latest  Kind    Platform\n----      -------  ------  ------  ----    --------\nbitflags  2.9.3    2.9.4   2.9.4   Normal  ---\nlog       0.4.27   0.4.28  0.4.28  Normal  ---\nriscv     0.14.0   ---     0.15.0  Normal  ---\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Atomvchecker",
    "Outdated",
    "Geiger",
    "Unused Deps",
    "Unformatted"
  ]
}