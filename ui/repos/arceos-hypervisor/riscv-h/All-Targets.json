{
  "repo": {
    "user": "arceos-hypervisor",
    "repo": "riscv-h"
  },
  "data": [
    {
      "user": "arceos-hypervisor",
      "repo": "riscv-h",
      "pkg": "riscv-h",
      "count": 168,
      "raw_reports": [
        {
          "file": "src/register/hypervisorx64/vsstatus.rs",
          "features": "",
          "count": 14,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsstatus::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsstatus.rs:30:9\n   |\n30 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsstatus.rs:29:5\n   |\n29 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsstatus.rs:20:9\n   |\n20 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n20 -         return self.bits;\n20 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsstatus.rs:25:9\n   |\n25 |         return Vsstatus { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n25 -         return Vsstatus { bits: x };\n25 +         Vsstatus { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vsstatus.rs:29:5\n   |\n29 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsstatus::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsstatus.rs:30:9\n   |\n30 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsstatus.rs:29:5\n   |\n29 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsstatus.rs:20:9\n   |\n20 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n20 -         return self.bits;\n20 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsstatus.rs:25:9\n   |\n25 |         return Vsstatus { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n25 -         return Vsstatus { bits: x };\n25 +         Vsstatus { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vsstatus.rs:29:5\n   |\n29 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ],
            "Mirai": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsstatus::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsstatus.rs:30:9\n   |\n30 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsstatus.rs:29:5\n   |\n29 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] value does not fit into bit range\n  --> src/register/hypervisorx64/vsstatus.rs:40:9\n   |\n40 |         self.bits.set_bits(60..64, val);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] value does not fit into bit range\n  --> src/register/hypervisorx64/vsstatus.rs:50:9\n   |\n50 |         self.bits.set_bits(32..34, val as usize);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] value does not fit into bit range\n  --> src/register/hypervisorx64/vsstatus.rs:80:9\n   |\n80 |         self.bits.set_bits(15..17, val);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] value does not fit into bit range\n  --> src/register/hypervisorx64/vsstatus.rs:90:9\n   |\n90 |         self.bits.set_bits(13..15, val);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsstatus::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsstatus.rs:30:9\n   |\n30 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsstatus.rs:29:5\n   |\n29 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/hgatp.rs",
          "features": "",
          "count": 13,
          "kinds": {
            "Mirai": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hgatp::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hgatp.rs:36:9\n   |\n36 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hgatp.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] value does not fit into bit range\n  --> src/register/hypervisorx64/hgatp.rs:46:9\n   |\n46 |         self.bits.set_bits(60..64, val as usize);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] value does not fit into bit range\n  --> src/register/hypervisorx64/hgatp.rs:56:9\n   |\n56 |         self.bits.set_bits(44..58, val);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] value does not fit into bit range\n  --> src/register/hypervisorx64/hgatp.rs:66:9\n   |\n66 |         self.bits.set_bits(0..44, val);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hgatp::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hgatp.rs:36:9\n   |\n36 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hgatp.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ],
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hgatp::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hgatp.rs:36:9\n   |\n36 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hgatp.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hgatp.rs:26:9\n   |\n26 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n26 -         return self.bits;\n26 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hgatp.rs:31:9\n   |\n31 |         return Hgatp { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n31 -         return Hgatp { bits: x };\n31 +         Hgatp { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hgatp.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hgatp::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hgatp.rs:36:9\n   |\n36 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hgatp.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hgatp.rs:26:9\n   |\n26 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n26 -         return self.bits;\n26 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hgatp.rs:31:9\n   |\n31 |         return Hgatp { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n31 -         return Hgatp { bits: x };\n31 +         Hgatp { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hgatp.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/vsatp.rs",
          "features": "",
          "count": 13,
          "kinds": {
            "Mirai": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsatp::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsatp.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsatp.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] value does not fit into bit range\n  --> src/register/hypervisorx64/vsatp.rs:36:9\n   |\n36 |         self.bits.set_bits(60..64, val as usize);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] value does not fit into bit range\n  --> src/register/hypervisorx64/vsatp.rs:46:9\n   |\n46 |         self.bits.set_bits(44..60, val);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] value does not fit into bit range\n  --> src/register/hypervisorx64/vsatp.rs:56:9\n   |\n56 |         self.bits.set_bits(0..44, val);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsatp::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsatp.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsatp.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ],
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsatp::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsatp.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsatp.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsatp.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsatp.rs:21:9\n   |\n21 |         return Vsatp { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Vsatp { bits: x };\n21 +         Vsatp { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vsatp.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsatp::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsatp.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsatp.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsatp.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsatp.rs:21:9\n   |\n21 |         return Vsatp { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Vsatp { bits: x };\n21 +         Vsatp { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vsatp.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/hstatus.rs",
          "features": "",
          "count": 12,
          "kinds": {
            "Mirai": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hstatus::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hstatus.rs:36:9\n   |\n36 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hstatus.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] value does not fit into bit range\n  --> src/register/hypervisorx64/hstatus.rs:46:9\n   |\n46 |         self.bits.set_bits(32..34, val as usize);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] value does not fit into bit range\n  --> src/register/hypervisorx64/hstatus.rs:86:9\n   |\n86 |         self.bits.set_bits(12..18, val);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hstatus::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hstatus.rs:36:9\n   |\n36 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hstatus.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ],
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hstatus::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hstatus.rs:36:9\n   |\n36 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hstatus.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hstatus.rs:26:9\n   |\n26 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n26 -         return self.bits;\n26 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hstatus.rs:31:9\n   |\n31 |         return Hstatus { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n31 -         return Hstatus { bits: x };\n31 +         Hstatus { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hstatus.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hstatus::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hstatus.rs:36:9\n   |\n36 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hstatus.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hstatus.rs:26:9\n   |\n26 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n26 -         return self.bits;\n26 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hstatus.rs:31:9\n   |\n31 |         return Hstatus { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n31 -         return Hstatus { bits: x };\n31 +         Hstatus { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hstatus.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/vstvec.rs",
          "features": "",
          "count": 12,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vstvec::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vstvec.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vstvec.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vstvec.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vstvec.rs:21:9\n   |\n21 |         return Vstvec { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Vstvec { bits: x };\n21 +         Vstvec { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vstvec.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vstvec::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vstvec.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vstvec.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vstvec.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vstvec.rs:21:9\n   |\n21 |         return Vstvec { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Vstvec { bits: x };\n21 +         Vstvec { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vstvec.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ],
            "Mirai": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vstvec::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vstvec.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vstvec.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] value does not fit into bit range\n  --> src/register/hypervisorx64/vstvec.rs:36:9\n   |\n36 |         self.bits.set_bits(2..64, val);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] value does not fit into bit range\n  --> src/register/hypervisorx64/vstvec.rs:46:9\n   |\n46 |         self.bits.set_bits(0..2, val);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vstvec::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vstvec.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vstvec.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/vscause.rs",
          "features": "",
          "count": 11,
          "kinds": {
            "Mirai": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vscause::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vscause.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vscause.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] value does not fit into bit range\n  --> src/register/hypervisorx64/vscause.rs:46:9\n   |\n46 |         self.bits.set_bits(0..63, val);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vscause::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vscause.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vscause.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ],
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vscause::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vscause.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vscause.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vscause.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vscause.rs:21:9\n   |\n21 |         return Vscause { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Vscause { bits: x };\n21 +         Vscause { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vscause.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vscause::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vscause.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vscause.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vscause.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vscause.rs:21:9\n   |\n21 |         return Vscause { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Vscause { bits: x };\n21 +         Vscause { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vscause.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/hcounteren.rs",
          "features": "",
          "count": 10,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hcounteren::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hcounteren.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hcounteren.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hcounteren.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hcounteren.rs:21:9\n   |\n21 |         return Hcounteren { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Hcounteren { bits: x };\n21 +         Hcounteren { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hcounteren.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n   = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hcounteren::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hcounteren.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hcounteren.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hcounteren.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hcounteren.rs:21:9\n   |\n21 |         return Hcounteren { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Hcounteren { bits: x };\n21 +         Hcounteren { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hcounteren.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n   = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n"
            ],
            "Mirai": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hcounteren::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hcounteren.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hcounteren.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hcounteren::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hcounteren.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hcounteren.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/hedeleg.rs",
          "features": "",
          "count": 10,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hedeleg::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hedeleg.rs:34:9\n   |\n34 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hedeleg.rs:33:5\n   |\n33 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hedeleg.rs:24:9\n   |\n24 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n24 -         return self.bits;\n24 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hedeleg.rs:29:9\n   |\n29 |         return Hedeleg { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n29 -         return Hedeleg { bits: x };\n29 +         Hedeleg { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hedeleg.rs:33:5\n   |\n33 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hedeleg::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hedeleg.rs:34:9\n   |\n34 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hedeleg.rs:33:5\n   |\n33 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hedeleg.rs:24:9\n   |\n24 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n24 -         return self.bits;\n24 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hedeleg.rs:29:9\n   |\n29 |         return Hedeleg { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n29 -         return Hedeleg { bits: x };\n29 +         Hedeleg { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hedeleg.rs:33:5\n   |\n33 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ],
            "Mirai": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hedeleg::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hedeleg.rs:34:9\n   |\n34 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hedeleg.rs:33:5\n   |\n33 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hedeleg::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hedeleg.rs:34:9\n   |\n34 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hedeleg.rs:33:5\n   |\n33 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/hideleg.rs",
          "features": "",
          "count": 10,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hideleg::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hideleg.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hideleg.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hideleg.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hideleg.rs:21:9\n   |\n21 |         return Hideleg { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Hideleg { bits: x };\n21 +         Hideleg { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hideleg.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hideleg::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hideleg.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hideleg.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hideleg.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hideleg.rs:21:9\n   |\n21 |         return Hideleg { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Hideleg { bits: x };\n21 +         Hideleg { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hideleg.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ],
            "Mirai": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hideleg::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hideleg.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hideleg.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hideleg::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hideleg.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hideleg.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/hie.rs",
          "features": "",
          "count": 10,
          "kinds": {
            "Mirai": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hie::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hie.rs:32:9\n   |\n32 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hie.rs:31:5\n   |\n31 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hie::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hie.rs:32:9\n   |\n32 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hie.rs:31:5\n   |\n31 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ],
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hie::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hie.rs:32:9\n   |\n32 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hie.rs:31:5\n   |\n31 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hie.rs:24:9\n   |\n24 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n24 -         return self.bits;\n24 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hie.rs:28:9\n   |\n28 |         return Hie { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n28 -         return Hie { bits: x };\n28 +         Hie { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hie.rs:31:5\n   |\n31 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hie::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hie.rs:32:9\n   |\n32 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hie.rs:31:5\n   |\n31 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hie.rs:24:9\n   |\n24 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n24 -         return self.bits;\n24 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hie.rs:28:9\n   |\n28 |         return Hie { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n28 -         return Hie { bits: x };\n28 +         Hie { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hie.rs:31:5\n   |\n31 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/hip.rs",
          "features": "",
          "count": 10,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hip.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hip.rs:21:9\n   |\n21 |         return Hip { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Hip { bits: x };\n21 +         Hip { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hip.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hip.rs:21:9\n   |\n21 |         return Hip { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Hip { bits: x };\n21 +         Hip { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ],
            "Mirai": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/hvip.rs",
          "features": "",
          "count": 10,
          "kinds": {
            "Mirai": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hvip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hvip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hvip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hvip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hvip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hvip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ],
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hvip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hvip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hvip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hvip.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hvip.rs:21:9\n   |\n21 |         return Hvip { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Hvip { bits: x };\n21 +         Hvip { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hvip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::hvip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hvip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hvip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hvip.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/hvip.rs:21:9\n   |\n21 |         return Hvip { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Hvip { bits: x };\n21 +         Hvip { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/hvip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/vsie.rs",
          "features": "",
          "count": 10,
          "kinds": {
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsie::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsie.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsie.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsie.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsie.rs:21:9\n   |\n21 |         return Vsie { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Vsie { bits: x };\n21 +         Vsie { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vsie.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsie::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsie.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsie.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsie.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsie.rs:21:9\n   |\n21 |         return Vsie { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Vsie { bits: x };\n21 +         Vsie { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vsie.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ],
            "Mirai": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsie::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsie.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsie.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsie::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsie.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsie.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "src/register/hypervisorx64/vsip.rs",
          "features": "",
          "count": 10,
          "kinds": {
            "Mirai": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ],
            "Clippy(Warn)": [
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsip.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsip.rs:21:9\n   |\n21 |         return Vsip { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Vsip { bits: x };\n21 +         Vsip { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vsip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
              "warning[E0133]: call to unsafe function `register::hypervisorx64::vsip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsip.rs:16:9\n   |\n16 |         return self.bits;\n   |         ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n16 -         return self.bits;\n16 +         self.bits\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/register/hypervisorx64/vsip.rs:21:9\n   |\n21 |         return Vsip { bits: x };\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Vsip { bits: x };\n21 +         Vsip { bits: x }\n   |\n\n",
              "warning: unsafe function's docs are missing a `# Safety` section\n  --> src/register/hypervisorx64/vsip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
            ]
          }
        },
        {
          "file": "Cargo.lock",
          "features": "",
          "count": 2,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n└── riscv 0.14.0\n    └── riscv-h 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 820,\n    \"last-commit\": \"fb0d06e8e2cc04c9aa359e51ffa0a09e3bf58822\",\n    \"last-updated\": \"2025-09-22T08:05:57+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 15\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\\n\\n## Possible Alternative(s)\\n\\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}",
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n└── riscv 0.14.0\n    └── riscv-h 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 820,\n    \"last-commit\": \"fb0d06e8e2cc04c9aa359e51ffa0a09e3bf58822\",\n    \"last-updated\": \"2025-09-22T08:05:57+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 15\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\\n\\n## Possible Alternative(s)\\n\\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[Lockbud] deadlock detection",
          "features": "",
          "count": 2,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-09-26T20:34:29Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-09-26T20:34:29Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }",
              "[2025-09-26T20:34:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-09-26T20:34:32Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[Udeps] Unused dependencies",
          "features": "",
          "count": 2,
          "kinds": {
            "Unused Deps": [
              "pkg=riscv-h, checker=Udeps\ntoolchain=nightly-2025-05-20, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/arceos-hypervisor/riscv-h\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target riscv64gc-unknown-none-elf \ntimestamp=2025-09-27 4:34:41.272297922 +08:00:00\n\n\nstdout:\nunused dependencies:\n`riscv-h v0.1.0 (/home/runner/check/batch_1/arceos-hypervisor/riscv-h)`\n└─── dependencies\n     ├─── \"bare-metal\"\n     ├─── \"bitflags\"\n     └─── \"log\"\nNote: These dependencies might be used by other targets.\n      To find dependencies that are not used by any target, enable `--all-targets`.\nNote: They might be false-positive.\n      For example, `cargo-udeps` cannot detect usage of crates that are only used in doc-tests.\n      To ignore some dependencies, write `package.metadata.cargo-udeps.ignore` in Cargo.toml.\n\nstderr:\n   Compiling proc-macro2 v1.0.101\n   Compiling unicode-ident v1.0.18\n   Compiling paste v1.0.15\n   Compiling riscv v0.14.0\n    Checking critical-section v1.2.0\n    Checking embedded-hal v1.0.0\n    Checking riscv-pac v0.2.0\n    Checking bare-metal v1.0.0\n    Checking bit_field v0.10.3\n    Checking bitflags v2.9.3\n    Checking log v0.4.27\n   Compiling quote v1.0.40\n   Compiling syn v2.0.106\n   Compiling riscv-macros v0.2.0\n    Checking riscv-h v0.1.0 (/home/runner/check/batch_1/arceos-hypervisor/riscv-h)\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hcounteren::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hcounteren.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hcounteren.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hedeleg::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hedeleg.rs:34:9\n   |\n34 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hedeleg.rs:33:5\n   |\n33 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hgatp::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hgatp.rs:36:9\n   |\n36 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hgatp.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hideleg::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hideleg.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hideleg.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hie::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hie.rs:32:9\n   |\n32 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hie.rs:31:5\n   |\n31 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hstatus::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hstatus.rs:36:9\n   |\n36 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hstatus.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hvip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hvip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hvip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vsatp::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsatp.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsatp.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vscause::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vscause.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vscause.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vsie::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsie.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsie.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vsip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vsstatus::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsstatus.rs:30:9\n   |\n30 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsstatus.rs:29:5\n   |\n29 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vstvec::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vstvec.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vstvec.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0133`.\nwarning: `riscv-h` (lib) generated 14 warnings (run `cargo fix --lib -p riscv-h` to apply 14 suggestions)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 2.88s\ninfo: Loading depinfo from \"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/riscv64gc-unknown-none-elf/debug/deps/riscv_h-4edc144b5daa3b56.d\"\n",
              "pkg=riscv-h, checker=Udeps\ntoolchain=nightly-2025-05-20, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_1/arceos-hypervisor/riscv-h\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target x86_64-unknown-linux-gnu \ntimestamp=2025-09-27 4:34:41.896002017 +08:00:00\n\n\nstdout:\nunused dependencies:\n`riscv-h v0.1.0 (/home/runner/check/batch_1/arceos-hypervisor/riscv-h)`\n└─── dependencies\n     ├─── \"bare-metal\"\n     ├─── \"bitflags\"\n     └─── \"log\"\nNote: These dependencies might be used by other targets.\n      To find dependencies that are not used by any target, enable `--all-targets`.\nNote: They might be false-positive.\n      For example, `cargo-udeps` cannot detect usage of crates that are only used in doc-tests.\n      To ignore some dependencies, write `package.metadata.cargo-udeps.ignore` in Cargo.toml.\n\nstderr:\n    Checking riscv-pac v0.2.0\n   Compiling riscv v0.14.0\n    Checking embedded-hal v1.0.0\n    Checking critical-section v1.2.0\n    Checking bare-metal v1.0.0\n    Checking bit_field v0.10.3\n    Checking bitflags v2.9.3\n    Checking log v0.4.27\n    Checking riscv-h v0.1.0 (/home/runner/check/batch_1/arceos-hypervisor/riscv-h)\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hcounteren::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hcounteren.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hcounteren.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hedeleg::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hedeleg.rs:34:9\n   |\n34 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hedeleg.rs:33:5\n   |\n33 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hgatp::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hgatp.rs:36:9\n   |\n36 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hgatp.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hideleg::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hideleg.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hideleg.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hie::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hie.rs:32:9\n   |\n32 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hie.rs:31:5\n   |\n31 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hstatus::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hstatus.rs:36:9\n   |\n36 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hstatus.rs:35:5\n   |\n35 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::hvip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/hvip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/hvip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vsatp::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsatp.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsatp.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vscause::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vscause.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vscause.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vsie::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsie.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsie.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vsip::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsip.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsip.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vsstatus::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vsstatus.rs:30:9\n   |\n30 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vsstatus.rs:29:5\n   |\n29 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning[E0133]: call to unsafe function `register::hypervisorx64::vstvec::_write` is unsafe and requires unsafe block\n  --> src/register/hypervisorx64/vstvec.rs:26:9\n   |\n26 |         _write(self.bits);\n   |         ^^^^^^^^^^^^^^^^^ call to unsafe function\n   |\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n   = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n  --> src/register/hypervisorx64/vstvec.rs:25:5\n   |\n25 |     pub unsafe fn write(&self) {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0133`.\nwarning: `riscv-h` (lib) generated 14 warnings (run `cargo fix --lib -p riscv-h` to apply 14 suggestions)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.59s\ninfo: Loading depinfo from \"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/x86_64-unknown-linux-gnu/debug/deps/riscv_h-15a57828691631b7.d\"\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 2,
          "kinds": {
            "Outdated": [
              "pkg=riscv-h, checker=Outdated\ntoolchain=nightly-2025-05-20, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_1/arceos-hypervisor/riscv-h\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-09-27 4:34:34.093996427 +08:00:00\n\nName      Project  Compat  Latest  Kind    Platform\n----      -------  ------  ------  ----    --------\nbitflags  2.9.3    2.9.4   2.9.4   Normal  ---\nlog       0.4.27   0.4.28  0.4.28  Normal  ---\nriscv     0.14.0   ---     0.15.0  Normal  ---\n",
              "pkg=riscv-h, checker=Outdated\ntoolchain=nightly-2025-05-20, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_1/arceos-hypervisor/riscv-h\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-09-27 4:34:34.285720859 +08:00:00\n\nName      Project  Compat  Latest  Kind    Platform\n----      -------  ------  ------  ----    --------\nbitflags  2.9.3    2.9.4   2.9.4   Normal  ---\nlog       0.4.27   0.4.28  0.4.28  Normal  ---\nriscv     0.14.0   ---     0.15.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "tests/integration_tests.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Mirai": [
              "warning: unused variable: `modified`\n   --> tests/integration_tests.rs:130:13\n    |\n130 |     let mut modified = original;\n    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_modified`\n    |\n    = note: `#[warn(unused_variables)]` on by default\n\n",
              "warning: variable does not need to be mutable\n   --> tests/integration_tests.rs:130:9\n    |\n130 |     let mut modified = original;\n    |         ----^^^^^^^^\n    |         |\n    |         help: remove this `mut`\n    |\n    = note: `#[warn(unused_mut)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "(virtual) geiger",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=riscv-h, checker=Geiger\n// toolchain=nightly-2025-05-20, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_1/arceos-hypervisor/riscv-h\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu geiger --output-format Ascii\n// timestamp=2025-09-27 4:34:34.347407158 +08:00:00\n     Removed 0 files\n   Compiling proc-macro2 v1.0.101\n   Compiling unicode-ident v1.0.18\n   Compiling paste v1.0.15\n   Compiling riscv v0.14.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/build/riscv-21ff4c7d9ed9caa4/build_script_build-21ff4c7d9ed9caa4.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/build/paste-9245072c691d01c9/build_script_build-9245072c691d01c9.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/build/proc-macro2-17e32568540fc90a/build_script_build-17e32568540fc90a.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/unicode_ident-1d1395cd7a8bd8da.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libunicode_ident-1d1395cd7a8bd8da.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libunicode_ident-1d1395cd7a8bd8da.rlib\",\"emit\":\"link\"}\n    Checking riscv-pac v0.2.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/riscv_pac-d7e3a3b8e9534268.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/build/riscv-21ff4c7d9ed9caa4/build_script_build-21ff4c7d9ed9caa4\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libriscv_pac-d7e3a3b8e9534268.rmeta\",\"emit\":\"metadata\"}\n    Checking embedded-hal v1.0.0\n    Checking critical-section v1.2.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/critical_section-6d6d0d1123178766.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/embedded_hal-c2861191064355a4.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libcritical_section-6d6d0d1123178766.rmeta\",\"emit\":\"metadata\"}\n    Checking bare-metal v1.0.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/build/paste-9245072c691d01c9/build_script_build-9245072c691d01c9\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/bare_metal-9d48211f01ac2a00.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libbare_metal-9d48211f01ac2a00.rmeta\",\"emit\":\"metadata\"}\n    Checking bitflags v2.9.3\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libembedded_hal-c2861191064355a4.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/paste-324a265740fab356.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/build/proc-macro2-17e32568540fc90a/build_script_build-17e32568540fc90a\",\"emit\":\"link\"}\n    Checking bit_field v0.10.3\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/bitflags-7d9caac509ebc438.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/bit_field-5f0cf7a55cf79a0f.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libbitflags-7d9caac509ebc438.rmeta\",\"emit\":\"metadata\"}\n    Checking log v0.4.27\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libbit_field-5f0cf7a55cf79a0f.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/log-61ee3d839ec629a2.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/proc_macro2-7b32767948b63582.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/liblog-61ee3d839ec629a2.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libpaste-324a265740fab356.so\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libproc_macro2-7b32767948b63582.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libproc_macro2-7b32767948b63582.rlib\",\"emit\":\"link\"}\n   Compiling quote v1.0.40\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/quote-9a5d1aa1ec19da0e.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libquote-9a5d1aa1ec19da0e.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libquote-9a5d1aa1ec19da0e.rlib\",\"emit\":\"link\"}\n   Compiling syn v2.0.106\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/syn-614f107bd2c6a0e4.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libsyn-614f107bd2c6a0e4.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libsyn-614f107bd2c6a0e4.rlib\",\"emit\":\"link\"}\n   Compiling riscv-macros v0.2.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/riscv_macros-59ce4f8e0a25aba5.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libriscv_macros-59ce4f8e0a25aba5.so\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/riscv-283fb5757a91bf47.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libriscv-283fb5757a91bf47.rmeta\",\"emit\":\"metadata\"}\n    Checking riscv-h v0.1.0 (/home/runner/check/batch_1/arceos-hypervisor/riscv-h)\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/riscv_h-e03a8eab8a1632d6.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"call to unsafe function `register::hypervisorx64::hcounteren::_write` is unsafe and requires unsafe block\",\"code\":{\"code\":\"E0133\",\"explanation\":\"Unsafe code was used outside of an unsafe block.\\n\\nErroneous code example:\\n\\n```compile_fail,E0133\\nunsafe fn f() { return; } // This is the unsafe code\\n\\nfn main() {\\n    f(); // error: call to unsafe function requires unsafe function or block\\n}\\n```\\n\\nUsing unsafe functionality is potentially dangerous and disallowed by safety\\nchecks. Examples:\\n\\n* Dereferencing raw pointers\\n* Calling functions via FFI\\n* Calling functions marked unsafe\\n\\nThese safety checks can be relaxed for a section of the code by wrapping the\\nunsafe instructions with an `unsafe` block. For instance:\\n\\n```\\nunsafe fn f() { return; }\\n\\nfn main() {\\n    unsafe { f(); } // ok!\\n}\\n```\\n\\nSee the [unsafe section][unsafe-section] of the Book for more details.\\n\\n#### Unsafe code in functions\\n\\nUnsafe code is currently accepted in unsafe functions, but that is being phased\\nout in favor of requiring unsafe blocks here too.\\n\\n```\\nunsafe fn f() { return; }\\n\\nunsafe fn g() {\\n    f(); // Is accepted, but no longer recommended\\n    unsafe { f(); } // Recommended way to write this\\n}\\n```\\n\\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\\nis `warn` by default in the 2024 edition and `allow` by default in earlier\\neditions.\\n\\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\\n\"},\"level\":\"warning\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hcounteren.rs\",\"byte_start\":656,\"byte_end\":673,\"line_start\":26,\"line_end\":26,\"column_start\":9,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"        _write(self.bits);\",\"highlight_start\":9,\"highlight_end\":26}],\"label\":\"call to unsafe function\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"consult the function's documentation for information on how to avoid undefined behavior\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"an unsafe function restricts its caller, but its body is safe by default\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hcounteren.rs\",\"byte_start\":619,\"byte_end\":645,\"line_start\":25,\"line_end\":25,\"column_start\":5,\"column_end\":31,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":5,\"highlight_end\":31}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"`#[warn(unsafe_op_in_unsafe_fn)]` on by default\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"consider wrapping the function body in an unsafe block\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hcounteren.rs\",\"byte_start\":646,\"byte_end\":646,\"line_start\":25,\"line_end\":25,\"column_start\":32,\"column_end\":32,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":32,\"highlight_end\":32}],\"label\":null,\"suggested_replacement\":\"{ unsafe \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"src/register/hypervisorx64/hcounteren.rs\",\"byte_start\":680,\"byte_end\":680,\"line_start\":27,\"line_end\":27,\"column_start\":6,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    }\",\"highlight_start\":6,\"highlight_end\":6}],\"label\":null,\"suggested_replacement\":\"}\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[33mwarning[E0133]\\u001b[0m\\u001b[0m\\u001b[1m: call to unsafe function `register::hypervisorx64::hcounteren::_write` is unsafe and requires unsafe block\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/hcounteren.rs:26:9\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m26\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        _write(self.bits);\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m         \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33m^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33mcall to unsafe function\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: consult the function's documentation for information on how to avoid undefined behavior\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: an unsafe function restricts its caller, but its body is safe by default\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/hcounteren.rs:25:5\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m25\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub unsafe fn write(&self) {\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: `#[warn(unsafe_op_in_unsafe_fn)]` on by default\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"call to unsafe function `register::hypervisorx64::hedeleg::_write` is unsafe and requires unsafe block\",\"code\":{\"code\":\"E0133\",\"explanation\":\"Unsafe code was used outside of an unsafe block.\\n\\nErroneous code example:\\n\\n```compile_fail,E0133\\nunsafe fn f() { return; } // This is the unsafe code\\n\\nfn main() {\\n    f(); // error: call to unsafe function requires unsafe function or block\\n}\\n```\\n\\nUsing unsafe functionality is potentially dangerous and disallowed by safety\\nchecks. Examples:\\n\\n* Dereferencing raw pointers\\n* Calling functions via FFI\\n* Calling functions marked unsafe\\n\\nThese safety checks can be relaxed for a section of the code by wrapping the\\nunsafe instructions with an `unsafe` block. For instance:\\n\\n```\\nunsafe fn f() { return; }\\n\\nfn main() {\\n    unsafe { f(); } // ok!\\n}\\n```\\n\\nSee the [unsafe section][unsafe-section] of the Book for more details.\\n\\n#### Unsafe code in functions\\n\\nUnsafe code is currently accepted in unsafe functions, but that is being phased\\nout in favor of requiring unsafe blocks here too.\\n\\n```\\nunsafe fn f() { return; }\\n\\nunsafe fn g() {\\n    f(); // Is accepted, but no longer recommended\\n    unsafe { f(); } // Recommended way to write this\\n}\\n```\\n\\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\\nis `warn` by default in the 2024 edition and `allow` by default in earlier\\neditions.\\n\\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\\n\"},\"level\":\"warning\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hedeleg.rs\",\"byte_start\":1124,\"byte_end\":1141,\"line_start\":34,\"line_end\":34,\"column_start\":9,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"        _write(self.bits);\",\"highlight_start\":9,\"highlight_end\":26}],\"label\":\"call to unsafe function\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"consult the function's documentation for information on how to avoid undefined behavior\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"an unsafe function restricts its caller, but its body is safe by default\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hedeleg.rs\",\"byte_start\":1087,\"byte_end\":1113,\"line_start\":33,\"line_end\":33,\"column_start\":5,\"column_end\":31,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":5,\"highlight_end\":31}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"consider wrapping the function body in an unsafe block\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hedeleg.rs\",\"byte_start\":1114,\"byte_end\":1114,\"line_start\":33,\"line_end\":33,\"column_start\":32,\"column_end\":32,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":32,\"highlight_end\":32}],\"label\":null,\"suggested_replacement\":\"{ unsafe \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"src/register/hypervisorx64/hedeleg.rs\",\"byte_start\":1148,\"byte_end\":1148,\"line_start\":35,\"line_end\":35,\"column_start\":6,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    }\",\"highlight_start\":6,\"highlight_end\":6}],\"label\":null,\"suggested_replacement\":\"}\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[33mwarning[E0133]\\u001b[0m\\u001b[0m\\u001b[1m: call to unsafe function `register::hypervisorx64::hedeleg::_write` is unsafe and requires unsafe block\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/hedeleg.rs:34:9\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m34\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        _write(self.bits);\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m         \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33m^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33mcall to unsafe function\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: consult the function's documentation for information on how to avoid undefined behavior\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: an unsafe function restricts its caller, but its body is safe by default\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/hedeleg.rs:33:5\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m33\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub unsafe fn write(&self) {\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"call to unsafe function `register::hypervisorx64::hgatp::_write` is unsafe and requires unsafe block\",\"code\":{\"code\":\"E0133\",\"explanation\":\"Unsafe code was used outside of an unsafe block.\\n\\nErroneous code example:\\n\\n```compile_fail,E0133\\nunsafe fn f() { return; } // This is the unsafe code\\n\\nfn main() {\\n    f(); // error: call to unsafe function requires unsafe function or block\\n}\\n```\\n\\nUsing unsafe functionality is potentially dangerous and disallowed by safety\\nchecks. Examples:\\n\\n* Dereferencing raw pointers\\n* Calling functions via FFI\\n* Calling functions marked unsafe\\n\\nThese safety checks can be relaxed for a section of the code by wrapping the\\nunsafe instructions with an `unsafe` block. For instance:\\n\\n```\\nunsafe fn f() { return; }\\n\\nfn main() {\\n    unsafe { f(); } // ok!\\n}\\n```\\n\\nSee the [unsafe section][unsafe-section] of the Book for more details.\\n\\n#### Unsafe code in functions\\n\\nUnsafe code is currently accepted in unsafe functions, but that is being phased\\nout in favor of requiring unsafe blocks here too.\\n\\n```\\nunsafe fn f() { return; }\\n\\nunsafe fn g() {\\n    f(); // Is accepted, but no longer recommended\\n    unsafe { f(); } // Recommended way to write this\\n}\\n```\\n\\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\\nis `warn` by default in the 2024 edition and `allow` by default in earlier\\neditions.\\n\\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\\n\"},\"level\":\"warning\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hgatp.rs\",\"byte_start\":1180,\"byte_end\":1197,\"line_start\":36,\"line_end\":36,\"column_start\":9,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"        _write(self.bits);\",\"highlight_start\":9,\"highlight_end\":26}],\"label\":\"call to unsafe function\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"consult the function's documentation for information on how to avoid undefined behavior\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"an unsafe function restricts its caller, but its body is safe by default\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hgatp.rs\",\"byte_start\":1143,\"byte_end\":1169,\"line_start\":35,\"line_end\":35,\"column_start\":5,\"column_end\":31,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":5,\"highlight_end\":31}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"consider wrapping the function body in an unsafe block\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hgatp.rs\",\"byte_start\":1170,\"byte_end\":1170,\"line_start\":35,\"line_end\":35,\"column_start\":32,\"column_end\":32,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":32,\"highlight_end\":32}],\"label\":null,\"suggested_replacement\":\"{ unsafe \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"src/register/hypervisorx64/hgatp.rs\",\"byte_start\":1204,\"byte_end\":1204,\"line_start\":37,\"line_end\":37,\"column_start\":6,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    }\",\"highlight_start\":6,\"highlight_end\":6}],\"label\":null,\"suggested_replacement\":\"}\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[33mwarning[E0133]\\u001b[0m\\u001b[0m\\u001b[1m: call to unsafe function `register::hypervisorx64::hgatp::_write` is unsafe and requires unsafe block\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/hgatp.rs:36:9\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m36\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        _write(self.bits);\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m         \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33m^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33mcall to unsafe function\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: consult the function's documentation for information on how to avoid undefined behavior\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: an unsafe function restricts its caller, but its body is safe by default\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/hgatp.rs:35:5\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m35\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub unsafe fn write(&self) {\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"call to unsafe function `register::hypervisorx64::hideleg::_write` is unsafe and requires unsafe block\",\"code\":{\"code\":\"E0133\",\"explanation\":\"Unsafe code was used outside of an unsafe block.\\n\\nErroneous code example:\\n\\n```compile_fail,E0133\\nunsafe fn f() { return; } // This is the unsafe code\\n\\nfn main() {\\n    f(); // error: call to unsafe function requires unsafe function or block\\n}\\n```\\n\\nUsing unsafe functionality is potentially dangerous and disallowed by safety\\nchecks. Examples:\\n\\n* Dereferencing raw pointers\\n* Calling functions via FFI\\n* Calling functions marked unsafe\\n\\nThese safety checks can be relaxed for a section of the code by wrapping the\\nunsafe instructions with an `unsafe` block. For instance:\\n\\n```\\nunsafe fn f() { return; }\\n\\nfn main() {\\n    unsafe { f(); } // ok!\\n}\\n```\\n\\nSee the [unsafe section][unsafe-section] of the Book for more details.\\n\\n#### Unsafe code in functions\\n\\nUnsafe code is currently accepted in unsafe functions, but that is being phased\\nout in favor of requiring unsafe blocks here too.\\n\\n```\\nunsafe fn f() { return; }\\n\\nunsafe fn g() {\\n    f(); // Is accepted, but no longer recommended\\n    unsafe { f(); } // Recommended way to write this\\n}\\n```\\n\\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\\nis `warn` by default in the 2024 edition and `allow` by default in earlier\\neditions.\\n\\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\\n\"},\"level\":\"warning\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hideleg.rs\",\"byte_start\":641,\"byte_end\":658,\"line_start\":26,\"line_end\":26,\"column_start\":9,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"        _write(self.bits);\",\"highlight_start\":9,\"highlight_end\":26}],\"label\":\"call to unsafe function\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"consult the function's documentation for information on how to avoid undefined behavior\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"an unsafe function restricts its caller, but its body is safe by default\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hideleg.rs\",\"byte_start\":604,\"byte_end\":630,\"line_start\":25,\"line_end\":25,\"column_start\":5,\"column_end\":31,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":5,\"highlight_end\":31}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"consider wrapping the function body in an unsafe block\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hideleg.rs\",\"byte_start\":631,\"byte_end\":631,\"line_start\":25,\"line_end\":25,\"column_start\":32,\"column_end\":32,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":32,\"highlight_end\":32}],\"label\":null,\"suggested_replacement\":\"{ unsafe \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"src/register/hypervisorx64/hideleg.rs\",\"byte_start\":665,\"byte_end\":665,\"line_start\":27,\"line_end\":27,\"column_start\":6,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    }\",\"highlight_start\":6,\"highlight_end\":6}],\"label\":null,\"suggested_replacement\":\"}\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[33mwarning[E0133]\\u001b[0m\\u001b[0m\\u001b[1m: call to unsafe function `register::hypervisorx64::hideleg::_write` is unsafe and requires unsafe block\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/hideleg.rs:26:9\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m26\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        _write(self.bits);\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m         \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33m^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33mcall to unsafe function\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: consult the function's documentation for information on how to avoid undefined behavior\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: an unsafe function restricts its caller, but its body is safe by default\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/hideleg.rs:25:5\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m25\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub unsafe fn write(&self) {\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"call to unsafe function `register::hypervisorx64::hie::_write` is unsafe and requires unsafe block\",\"code\":{\"code\":\"E0133\",\"explanation\":\"Unsafe code was used outside of an unsafe block.\\n\\nErroneous code example:\\n\\n```compile_fail,E0133\\nunsafe fn f() { return; } // This is the unsafe code\\n\\nfn main() {\\n    f(); // error: call to unsafe function requires unsafe function or block\\n}\\n```\\n\\nUsing unsafe functionality is potentially dangerous and disallowed by safety\\nchecks. Examples:\\n\\n* Dereferencing raw pointers\\n* Calling functions via FFI\\n* Calling functions marked unsafe\\n\\nThese safety checks can be relaxed for a section of the code by wrapping the\\nunsafe instructions with an `unsafe` block. For instance:\\n\\n```\\nunsafe fn f() { return; }\\n\\nfn main() {\\n    unsafe { f(); } // ok!\\n}\\n```\\n\\nSee the [unsafe section][unsafe-section] of the Book for more details.\\n\\n#### Unsafe code in functions\\n\\nUnsafe code is currently accepted in unsafe functions, but that is being phased\\nout in favor of requiring unsafe blocks here too.\\n\\n```\\nunsafe fn f() { return; }\\n\\nunsafe fn g() {\\n    f(); // Is accepted, but no longer recommended\\n    unsafe { f(); } // Recommended way to write this\\n}\\n```\\n\\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\\nis `warn` by default in the 2024 edition and `allow` by default in earlier\\neditions.\\n\\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\\n\"},\"level\":\"warning\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hie.rs\",\"byte_start\":960,\"byte_end\":977,\"line_start\":32,\"line_end\":32,\"column_start\":9,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"        _write(self.bits);\",\"highlight_start\":9,\"highlight_end\":26}],\"label\":\"call to unsafe function\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"consult the function's documentation for information on how to avoid undefined behavior\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"an unsafe function restricts its caller, but its body is safe by default\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hie.rs\",\"byte_start\":923,\"byte_end\":949,\"line_start\":31,\"line_end\":31,\"column_start\":5,\"column_end\":31,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":5,\"highlight_end\":31}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"consider wrapping the function body in an unsafe block\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hie.rs\",\"byte_start\":950,\"byte_end\":950,\"line_start\":31,\"line_end\":31,\"column_start\":32,\"column_end\":32,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":32,\"highlight_end\":32}],\"label\":null,\"suggested_replacement\":\"{ unsafe \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"src/register/hypervisorx64/hie.rs\",\"byte_start\":984,\"byte_end\":984,\"line_start\":33,\"line_end\":33,\"column_start\":6,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    }\",\"highlight_start\":6,\"highlight_end\":6}],\"label\":null,\"suggested_replacement\":\"}\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[33mwarning[E0133]\\u001b[0m\\u001b[0m\\u001b[1m: call to unsafe function `register::hypervisorx64::hie::_write` is unsafe and requires unsafe block\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/hie.rs:32:9\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m32\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        _write(self.bits);\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m         \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33m^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33mcall to unsafe function\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: consult the function's documentation for information on how to avoid undefined behavior\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: an unsafe function restricts its caller, but its body is safe by default\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/hie.rs:31:5\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m31\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub unsafe fn write(&self) {\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"call to unsafe function `register::hypervisorx64::hip::_write` is unsafe and requires unsafe block\",\"code\":{\"code\":\"E0133\",\"explanation\":\"Unsafe code was used outside of an unsafe block.\\n\\nErroneous code example:\\n\\n```compile_fail,E0133\\nunsafe fn f() { return; } // This is the unsafe code\\n\\nfn main() {\\n    f(); // error: call to unsafe function requires unsafe function or block\\n}\\n```\\n\\nUsing unsafe functionality is potentially dangerous and disallowed by safety\\nchecks. Examples:\\n\\n* Dereferencing raw pointers\\n* Calling functions via FFI\\n* Calling functions marked unsafe\\n\\nThese safety checks can be relaxed for a section of the code by wrapping the\\nunsafe instructions with an `unsafe` block. For instance:\\n\\n```\\nunsafe fn f() { return; }\\n\\nfn main() {\\n    unsafe { f(); } // ok!\\n}\\n```\\n\\nSee the [unsafe section][unsafe-section] of the Book for more details.\\n\\n#### Unsafe code in functions\\n\\nUnsafe code is currently accepted in unsafe functions, but that is being phased\\nout in favor of requiring unsafe blocks here too.\\n\\n```\\nunsafe fn f() { return; }\\n\\nunsafe fn g() {\\n    f(); // Is accepted, but no longer recommended\\n    unsafe { f(); } // Recommended way to write this\\n}\\n```\\n\\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\\nis `warn` by default in the 2024 edition and `allow` by default in earlier\\neditions.\\n\\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\\n\"},\"level\":\"warning\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hip.rs\",\"byte_start\":616,\"byte_end\":633,\"line_start\":26,\"line_end\":26,\"column_start\":9,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"        _write(self.bits);\",\"highlight_start\":9,\"highlight_end\":26}],\"label\":\"call to unsafe function\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"consult the function's documentation for information on how to avoid undefined behavior\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"an unsafe function restricts its caller, but its body is safe by default\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hip.rs\",\"byte_start\":579,\"byte_end\":605,\"line_start\":25,\"line_end\":25,\"column_start\":5,\"column_end\":31,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":5,\"highlight_end\":31}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"consider wrapping the function body in an unsafe block\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hip.rs\",\"byte_start\":606,\"byte_end\":606,\"line_start\":25,\"line_end\":25,\"column_start\":32,\"column_end\":32,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":32,\"highlight_end\":32}],\"label\":null,\"suggested_replacement\":\"{ unsafe \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"src/register/hypervisorx64/hip.rs\",\"byte_start\":640,\"byte_end\":640,\"line_start\":27,\"line_end\":27,\"column_start\":6,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    }\",\"highlight_start\":6,\"highlight_end\":6}],\"label\":null,\"suggested_replacement\":\"}\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[33mwarning[E0133]\\u001b[0m\\u001b[0m\\u001b[1m: call to unsafe function `register::hypervisorx64::hip::_write` is unsafe and requires unsafe block\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/hip.rs:26:9\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m26\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        _write(self.bits);\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m         \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33m^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33mcall to unsafe function\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: consult the function's documentation for information on how to avoid undefined behavior\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: an unsafe function restricts its caller, but its body is safe by default\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/hip.rs:25:5\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m25\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub unsafe fn write(&self) {\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"call to unsafe function `register::hypervisorx64::hstatus::_write` is unsafe and requires unsafe block\",\"code\":{\"code\":\"E0133\",\"explanation\":\"Unsafe code was used outside of an unsafe block.\\n\\nErroneous code example:\\n\\n```compile_fail,E0133\\nunsafe fn f() { return; } // This is the unsafe code\\n\\nfn main() {\\n    f(); // error: call to unsafe function requires unsafe function or block\\n}\\n```\\n\\nUsing unsafe functionality is potentially dangerous and disallowed by safety\\nchecks. Examples:\\n\\n* Dereferencing raw pointers\\n* Calling functions via FFI\\n* Calling functions marked unsafe\\n\\nThese safety checks can be relaxed for a section of the code by wrapping the\\nunsafe instructions with an `unsafe` block. For instance:\\n\\n```\\nunsafe fn f() { return; }\\n\\nfn main() {\\n    unsafe { f(); } // ok!\\n}\\n```\\n\\nSee the [unsafe section][unsafe-section] of the Book for more details.\\n\\n#### Unsafe code in functions\\n\\nUnsafe code is currently accepted in unsafe functions, but that is being phased\\nout in favor of requiring unsafe blocks here too.\\n\\n```\\nunsafe fn f() { return; }\\n\\nunsafe fn g() {\\n    f(); // Is accepted, but no longer recommended\\n    unsafe { f(); } // Recommended way to write this\\n}\\n```\\n\\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\\nis `warn` by default in the 2024 edition and `allow` by default in earlier\\neditions.\\n\\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\\n\"},\"level\":\"warning\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hstatus.rs\",\"byte_start\":1107,\"byte_end\":1124,\"line_start\":36,\"line_end\":36,\"column_start\":9,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"        _write(self.bits);\",\"highlight_start\":9,\"highlight_end\":26}],\"label\":\"call to unsafe function\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"consult the function's documentation for information on how to avoid undefined behavior\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"an unsafe function restricts its caller, but its body is safe by default\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hstatus.rs\",\"byte_start\":1070,\"byte_end\":1096,\"line_start\":35,\"line_end\":35,\"column_start\":5,\"column_end\":31,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":5,\"highlight_end\":31}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"consider wrapping the function body in an unsafe block\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hstatus.rs\",\"byte_start\":1097,\"byte_end\":1097,\"line_start\":35,\"line_end\":35,\"column_start\":32,\"column_end\":32,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":32,\"highlight_end\":32}],\"label\":null,\"suggested_replacement\":\"{ unsafe \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"src/register/hypervisorx64/hstatus.rs\",\"byte_start\":1131,\"byte_end\":1131,\"line_start\":37,\"line_end\":37,\"column_start\":6,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    }\",\"highlight_start\":6,\"highlight_end\":6}],\"label\":null,\"suggested_replacement\":\"}\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[33mwarning[E0133]\\u001b[0m\\u001b[0m\\u001b[1m: call to unsafe function `register::hypervisorx64::hstatus::_write` is unsafe and requires unsafe block\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/hstatus.rs:36:9\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m36\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        _write(self.bits);\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m         \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33m^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33mcall to unsafe function\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: consult the function's documentation for information on how to avoid undefined behavior\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: an unsafe function restricts its caller, but its body is safe by default\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/hstatus.rs:35:5\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m35\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub unsafe fn write(&self) {\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"call to unsafe function `register::hypervisorx64::hvip::_write` is unsafe and requires unsafe block\",\"code\":{\"code\":\"E0133\",\"explanation\":\"Unsafe code was used outside of an unsafe block.\\n\\nErroneous code example:\\n\\n```compile_fail,E0133\\nunsafe fn f() { return; } // This is the unsafe code\\n\\nfn main() {\\n    f(); // error: call to unsafe function requires unsafe function or block\\n}\\n```\\n\\nUsing unsafe functionality is potentially dangerous and disallowed by safety\\nchecks. Examples:\\n\\n* Dereferencing raw pointers\\n* Calling functions via FFI\\n* Calling functions marked unsafe\\n\\nThese safety checks can be relaxed for a section of the code by wrapping the\\nunsafe instructions with an `unsafe` block. For instance:\\n\\n```\\nunsafe fn f() { return; }\\n\\nfn main() {\\n    unsafe { f(); } // ok!\\n}\\n```\\n\\nSee the [unsafe section][unsafe-section] of the Book for more details.\\n\\n#### Unsafe code in functions\\n\\nUnsafe code is currently accepted in unsafe functions, but that is being phased\\nout in favor of requiring unsafe blocks here too.\\n\\n```\\nunsafe fn f() { return; }\\n\\nunsafe fn g() {\\n    f(); // Is accepted, but no longer recommended\\n    unsafe { f(); } // Recommended way to write this\\n}\\n```\\n\\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\\nis `warn` by default in the 2024 edition and `allow` by default in earlier\\neditions.\\n\\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\\n\"},\"level\":\"warning\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hvip.rs\",\"byte_start\":642,\"byte_end\":659,\"line_start\":26,\"line_end\":26,\"column_start\":9,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"        _write(self.bits);\",\"highlight_start\":9,\"highlight_end\":26}],\"label\":\"call to unsafe function\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"consult the function's documentation for information on how to avoid undefined behavior\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"an unsafe function restricts its caller, but its body is safe by default\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hvip.rs\",\"byte_start\":605,\"byte_end\":631,\"line_start\":25,\"line_end\":25,\"column_start\":5,\"column_end\":31,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":5,\"highlight_end\":31}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"consider wrapping the function body in an unsafe block\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/hvip.rs\",\"byte_start\":632,\"byte_end\":632,\"line_start\":25,\"line_end\":25,\"column_start\":32,\"column_end\":32,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":32,\"highlight_end\":32}],\"label\":null,\"suggested_replacement\":\"{ unsafe \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"src/register/hypervisorx64/hvip.rs\",\"byte_start\":666,\"byte_end\":666,\"line_start\":27,\"line_end\":27,\"column_start\":6,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    }\",\"highlight_start\":6,\"highlight_end\":6}],\"label\":null,\"suggested_replacement\":\"}\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[33mwarning[E0133]\\u001b[0m\\u001b[0m\\u001b[1m: call to unsafe function `register::hypervisorx64::hvip::_write` is unsafe and requires unsafe block\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/hvip.rs:26:9\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m26\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        _write(self.bits);\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m         \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33m^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33mcall to unsafe function\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: consult the function's documentation for information on how to avoid undefined behavior\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: an unsafe function restricts its caller, but its body is safe by default\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/hvip.rs:25:5\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m25\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub unsafe fn write(&self) {\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"call to unsafe function `register::hypervisorx64::vsatp::_write` is unsafe and requires unsafe block\",\"code\":{\"code\":\"E0133\",\"explanation\":\"Unsafe code was used outside of an unsafe block.\\n\\nErroneous code example:\\n\\n```compile_fail,E0133\\nunsafe fn f() { return; } // This is the unsafe code\\n\\nfn main() {\\n    f(); // error: call to unsafe function requires unsafe function or block\\n}\\n```\\n\\nUsing unsafe functionality is potentially dangerous and disallowed by safety\\nchecks. Examples:\\n\\n* Dereferencing raw pointers\\n* Calling functions via FFI\\n* Calling functions marked unsafe\\n\\nThese safety checks can be relaxed for a section of the code by wrapping the\\nunsafe instructions with an `unsafe` block. For instance:\\n\\n```\\nunsafe fn f() { return; }\\n\\nfn main() {\\n    unsafe { f(); } // ok!\\n}\\n```\\n\\nSee the [unsafe section][unsafe-section] of the Book for more details.\\n\\n#### Unsafe code in functions\\n\\nUnsafe code is currently accepted in unsafe functions, but that is being phased\\nout in favor of requiring unsafe blocks here too.\\n\\n```\\nunsafe fn f() { return; }\\n\\nunsafe fn g() {\\n    f(); // Is accepted, but no longer recommended\\n    unsafe { f(); } // Recommended way to write this\\n}\\n```\\n\\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\\nis `warn` by default in the 2024 edition and `allow` by default in earlier\\neditions.\\n\\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\\n\"},\"level\":\"warning\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vsatp.rs\",\"byte_start\":670,\"byte_end\":687,\"line_start\":26,\"line_end\":26,\"column_start\":9,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"        _write(self.bits);\",\"highlight_start\":9,\"highlight_end\":26}],\"label\":\"call to unsafe function\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"consult the function's documentation for information on how to avoid undefined behavior\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"an unsafe function restricts its caller, but its body is safe by default\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vsatp.rs\",\"byte_start\":633,\"byte_end\":659,\"line_start\":25,\"line_end\":25,\"column_start\":5,\"column_end\":31,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":5,\"highlight_end\":31}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"consider wrapping the function body in an unsafe block\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vsatp.rs\",\"byte_start\":660,\"byte_end\":660,\"line_start\":25,\"line_end\":25,\"column_start\":32,\"column_end\":32,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":32,\"highlight_end\":32}],\"label\":null,\"suggested_replacement\":\"{ unsafe \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"src/register/hypervisorx64/vsatp.rs\",\"byte_start\":694,\"byte_end\":694,\"line_start\":27,\"line_end\":27,\"column_start\":6,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    }\",\"highlight_start\":6,\"highlight_end\":6}],\"label\":null,\"suggested_replacement\":\"}\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[33mwarning[E0133]\\u001b[0m\\u001b[0m\\u001b[1m: call to unsafe function `register::hypervisorx64::vsatp::_write` is unsafe and requires unsafe block\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/vsatp.rs:26:9\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m26\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        _write(self.bits);\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m         \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33m^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33mcall to unsafe function\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: consult the function's documentation for information on how to avoid undefined behavior\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: an unsafe function restricts its caller, but its body is safe by default\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/vsatp.rs:25:5\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m25\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub unsafe fn write(&self) {\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"call to unsafe function `register::hypervisorx64::vscause::_write` is unsafe and requires unsafe block\",\"code\":{\"code\":\"E0133\",\"explanation\":\"Unsafe code was used outside of an unsafe block.\\n\\nErroneous code example:\\n\\n```compile_fail,E0133\\nunsafe fn f() { return; } // This is the unsafe code\\n\\nfn main() {\\n    f(); // error: call to unsafe function requires unsafe function or block\\n}\\n```\\n\\nUsing unsafe functionality is potentially dangerous and disallowed by safety\\nchecks. Examples:\\n\\n* Dereferencing raw pointers\\n* Calling functions via FFI\\n* Calling functions marked unsafe\\n\\nThese safety checks can be relaxed for a section of the code by wrapping the\\nunsafe instructions with an `unsafe` block. For instance:\\n\\n```\\nunsafe fn f() { return; }\\n\\nfn main() {\\n    unsafe { f(); } // ok!\\n}\\n```\\n\\nSee the [unsafe section][unsafe-section] of the Book for more details.\\n\\n#### Unsafe code in functions\\n\\nUnsafe code is currently accepted in unsafe functions, but that is being phased\\nout in favor of requiring unsafe blocks here too.\\n\\n```\\nunsafe fn f() { return; }\\n\\nunsafe fn g() {\\n    f(); // Is accepted, but no longer recommended\\n    unsafe { f(); } // Recommended way to write this\\n}\\n```\\n\\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\\nis `warn` by default in the 2024 edition and `allow` by default in earlier\\neditions.\\n\\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\\n\"},\"level\":\"warning\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vscause.rs\",\"byte_start\":626,\"byte_end\":643,\"line_start\":26,\"line_end\":26,\"column_start\":9,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"        _write(self.bits);\",\"highlight_start\":9,\"highlight_end\":26}],\"label\":\"call to unsafe function\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"consult the function's documentation for information on how to avoid undefined behavior\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"an unsafe function restricts its caller, but its body is safe by default\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vscause.rs\",\"byte_start\":589,\"byte_end\":615,\"line_start\":25,\"line_end\":25,\"column_start\":5,\"column_end\":31,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":5,\"highlight_end\":31}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"consider wrapping the function body in an unsafe block\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vscause.rs\",\"byte_start\":616,\"byte_end\":616,\"line_start\":25,\"line_end\":25,\"column_start\":32,\"column_end\":32,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":32,\"highlight_end\":32}],\"label\":null,\"suggested_replacement\":\"{ unsafe \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"src/register/hypervisorx64/vscause.rs\",\"byte_start\":650,\"byte_end\":650,\"line_start\":27,\"line_end\":27,\"column_start\":6,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    }\",\"highlight_start\":6,\"highlight_end\":6}],\"label\":null,\"suggested_replacement\":\"}\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[33mwarning[E0133]\\u001b[0m\\u001b[0m\\u001b[1m: call to unsafe function `register::hypervisorx64::vscause::_write` is unsafe and requires unsafe block\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/vscause.rs:26:9\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m26\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        _write(self.bits);\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m         \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33m^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33mcall to unsafe function\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: consult the function's documentation for information on how to avoid undefined behavior\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: an unsafe function restricts its caller, but its body is safe by default\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/vscause.rs:25:5\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m25\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub unsafe fn write(&self) {\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"call to unsafe function `register::hypervisorx64::vsie::_write` is unsafe and requires unsafe block\",\"code\":{\"code\":\"E0133\",\"explanation\":\"Unsafe code was used outside of an unsafe block.\\n\\nErroneous code example:\\n\\n```compile_fail,E0133\\nunsafe fn f() { return; } // This is the unsafe code\\n\\nfn main() {\\n    f(); // error: call to unsafe function requires unsafe function or block\\n}\\n```\\n\\nUsing unsafe functionality is potentially dangerous and disallowed by safety\\nchecks. Examples:\\n\\n* Dereferencing raw pointers\\n* Calling functions via FFI\\n* Calling functions marked unsafe\\n\\nThese safety checks can be relaxed for a section of the code by wrapping the\\nunsafe instructions with an `unsafe` block. For instance:\\n\\n```\\nunsafe fn f() { return; }\\n\\nfn main() {\\n    unsafe { f(); } // ok!\\n}\\n```\\n\\nSee the [unsafe section][unsafe-section] of the Book for more details.\\n\\n#### Unsafe code in functions\\n\\nUnsafe code is currently accepted in unsafe functions, but that is being phased\\nout in favor of requiring unsafe blocks here too.\\n\\n```\\nunsafe fn f() { return; }\\n\\nunsafe fn g() {\\n    f(); // Is accepted, but no longer recommended\\n    unsafe { f(); } // Recommended way to write this\\n}\\n```\\n\\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\\nis `warn` by default in the 2024 edition and `allow` by default in earlier\\neditions.\\n\\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\\n\"},\"level\":\"warning\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vsie.rs\",\"byte_start\":639,\"byte_end\":656,\"line_start\":26,\"line_end\":26,\"column_start\":9,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"        _write(self.bits);\",\"highlight_start\":9,\"highlight_end\":26}],\"label\":\"call to unsafe function\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"consult the function's documentation for information on how to avoid undefined behavior\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"an unsafe function restricts its caller, but its body is safe by default\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vsie.rs\",\"byte_start\":602,\"byte_end\":628,\"line_start\":25,\"line_end\":25,\"column_start\":5,\"column_end\":31,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":5,\"highlight_end\":31}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"consider wrapping the function body in an unsafe block\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vsie.rs\",\"byte_start\":629,\"byte_end\":629,\"line_start\":25,\"line_end\":25,\"column_start\":32,\"column_end\":32,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":32,\"highlight_end\":32}],\"label\":null,\"suggested_replacement\":\"{ unsafe \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"src/register/hypervisorx64/vsie.rs\",\"byte_start\":663,\"byte_end\":663,\"line_start\":27,\"line_end\":27,\"column_start\":6,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    }\",\"highlight_start\":6,\"highlight_end\":6}],\"label\":null,\"suggested_replacement\":\"}\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[33mwarning[E0133]\\u001b[0m\\u001b[0m\\u001b[1m: call to unsafe function `register::hypervisorx64::vsie::_write` is unsafe and requires unsafe block\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/vsie.rs:26:9\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m26\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        _write(self.bits);\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m         \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33m^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33mcall to unsafe function\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: consult the function's documentation for information on how to avoid undefined behavior\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: an unsafe function restricts its caller, but its body is safe by default\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/vsie.rs:25:5\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m25\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub unsafe fn write(&self) {\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"call to unsafe function `register::hypervisorx64::vsip::_write` is unsafe and requires unsafe block\",\"code\":{\"code\":\"E0133\",\"explanation\":\"Unsafe code was used outside of an unsafe block.\\n\\nErroneous code example:\\n\\n```compile_fail,E0133\\nunsafe fn f() { return; } // This is the unsafe code\\n\\nfn main() {\\n    f(); // error: call to unsafe function requires unsafe function or block\\n}\\n```\\n\\nUsing unsafe functionality is potentially dangerous and disallowed by safety\\nchecks. Examples:\\n\\n* Dereferencing raw pointers\\n* Calling functions via FFI\\n* Calling functions marked unsafe\\n\\nThese safety checks can be relaxed for a section of the code by wrapping the\\nunsafe instructions with an `unsafe` block. For instance:\\n\\n```\\nunsafe fn f() { return; }\\n\\nfn main() {\\n    unsafe { f(); } // ok!\\n}\\n```\\n\\nSee the [unsafe section][unsafe-section] of the Book for more details.\\n\\n#### Unsafe code in functions\\n\\nUnsafe code is currently accepted in unsafe functions, but that is being phased\\nout in favor of requiring unsafe blocks here too.\\n\\n```\\nunsafe fn f() { return; }\\n\\nunsafe fn g() {\\n    f(); // Is accepted, but no longer recommended\\n    unsafe { f(); } // Recommended way to write this\\n}\\n```\\n\\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\\nis `warn` by default in the 2024 edition and `allow` by default in earlier\\neditions.\\n\\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\\n\"},\"level\":\"warning\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vsip.rs\",\"byte_start\":641,\"byte_end\":658,\"line_start\":26,\"line_end\":26,\"column_start\":9,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"        _write(self.bits);\",\"highlight_start\":9,\"highlight_end\":26}],\"label\":\"call to unsafe function\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"consult the function's documentation for information on how to avoid undefined behavior\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"an unsafe function restricts its caller, but its body is safe by default\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vsip.rs\",\"byte_start\":604,\"byte_end\":630,\"line_start\":25,\"line_end\":25,\"column_start\":5,\"column_end\":31,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":5,\"highlight_end\":31}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"consider wrapping the function body in an unsafe block\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vsip.rs\",\"byte_start\":631,\"byte_end\":631,\"line_start\":25,\"line_end\":25,\"column_start\":32,\"column_end\":32,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":32,\"highlight_end\":32}],\"label\":null,\"suggested_replacement\":\"{ unsafe \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"src/register/hypervisorx64/vsip.rs\",\"byte_start\":665,\"byte_end\":665,\"line_start\":27,\"line_end\":27,\"column_start\":6,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    }\",\"highlight_start\":6,\"highlight_end\":6}],\"label\":null,\"suggested_replacement\":\"}\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[33mwarning[E0133]\\u001b[0m\\u001b[0m\\u001b[1m: call to unsafe function `register::hypervisorx64::vsip::_write` is unsafe and requires unsafe block\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/vsip.rs:26:9\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m26\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        _write(self.bits);\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m         \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33m^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33mcall to unsafe function\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: consult the function's documentation for information on how to avoid undefined behavior\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: an unsafe function restricts its caller, but its body is safe by default\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/vsip.rs:25:5\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m25\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub unsafe fn write(&self) {\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"call to unsafe function `register::hypervisorx64::vsstatus::_write` is unsafe and requires unsafe block\",\"code\":{\"code\":\"E0133\",\"explanation\":\"Unsafe code was used outside of an unsafe block.\\n\\nErroneous code example:\\n\\n```compile_fail,E0133\\nunsafe fn f() { return; } // This is the unsafe code\\n\\nfn main() {\\n    f(); // error: call to unsafe function requires unsafe function or block\\n}\\n```\\n\\nUsing unsafe functionality is potentially dangerous and disallowed by safety\\nchecks. Examples:\\n\\n* Dereferencing raw pointers\\n* Calling functions via FFI\\n* Calling functions marked unsafe\\n\\nThese safety checks can be relaxed for a section of the code by wrapping the\\nunsafe instructions with an `unsafe` block. For instance:\\n\\n```\\nunsafe fn f() { return; }\\n\\nfn main() {\\n    unsafe { f(); } // ok!\\n}\\n```\\n\\nSee the [unsafe section][unsafe-section] of the Book for more details.\\n\\n#### Unsafe code in functions\\n\\nUnsafe code is currently accepted in unsafe functions, but that is being phased\\nout in favor of requiring unsafe blocks here too.\\n\\n```\\nunsafe fn f() { return; }\\n\\nunsafe fn g() {\\n    f(); // Is accepted, but no longer recommended\\n    unsafe { f(); } // Recommended way to write this\\n}\\n```\\n\\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\\nis `warn` by default in the 2024 edition and `allow` by default in earlier\\neditions.\\n\\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\\n\"},\"level\":\"warning\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vsstatus.rs\",\"byte_start\":880,\"byte_end\":897,\"line_start\":30,\"line_end\":30,\"column_start\":9,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"        _write(self.bits);\",\"highlight_start\":9,\"highlight_end\":26}],\"label\":\"call to unsafe function\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"consult the function's documentation for information on how to avoid undefined behavior\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"an unsafe function restricts its caller, but its body is safe by default\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vsstatus.rs\",\"byte_start\":843,\"byte_end\":869,\"line_start\":29,\"line_end\":29,\"column_start\":5,\"column_end\":31,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":5,\"highlight_end\":31}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"consider wrapping the function body in an unsafe block\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vsstatus.rs\",\"byte_start\":870,\"byte_end\":870,\"line_start\":29,\"line_end\":29,\"column_start\":32,\"column_end\":32,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":32,\"highlight_end\":32}],\"label\":null,\"suggested_replacement\":\"{ unsafe \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"src/register/hypervisorx64/vsstatus.rs\",\"byte_start\":904,\"byte_end\":904,\"line_start\":31,\"line_end\":31,\"column_start\":6,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    }\",\"highlight_start\":6,\"highlight_end\":6}],\"label\":null,\"suggested_replacement\":\"}\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[33mwarning[E0133]\\u001b[0m\\u001b[0m\\u001b[1m: call to unsafe function `register::hypervisorx64::vsstatus::_write` is unsafe and requires unsafe block\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/vsstatus.rs:30:9\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m30\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        _write(self.bits);\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m         \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33m^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33mcall to unsafe function\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: consult the function's documentation for information on how to avoid undefined behavior\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: an unsafe function restricts its caller, but its body is safe by default\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/vsstatus.rs:29:5\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m29\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub unsafe fn write(&self) {\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"call to unsafe function `register::hypervisorx64::vstvec::_write` is unsafe and requires unsafe block\",\"code\":{\"code\":\"E0133\",\"explanation\":\"Unsafe code was used outside of an unsafe block.\\n\\nErroneous code example:\\n\\n```compile_fail,E0133\\nunsafe fn f() { return; } // This is the unsafe code\\n\\nfn main() {\\n    f(); // error: call to unsafe function requires unsafe function or block\\n}\\n```\\n\\nUsing unsafe functionality is potentially dangerous and disallowed by safety\\nchecks. Examples:\\n\\n* Dereferencing raw pointers\\n* Calling functions via FFI\\n* Calling functions marked unsafe\\n\\nThese safety checks can be relaxed for a section of the code by wrapping the\\nunsafe instructions with an `unsafe` block. For instance:\\n\\n```\\nunsafe fn f() { return; }\\n\\nfn main() {\\n    unsafe { f(); } // ok!\\n}\\n```\\n\\nSee the [unsafe section][unsafe-section] of the Book for more details.\\n\\n#### Unsafe code in functions\\n\\nUnsafe code is currently accepted in unsafe functions, but that is being phased\\nout in favor of requiring unsafe blocks here too.\\n\\n```\\nunsafe fn f() { return; }\\n\\nunsafe fn g() {\\n    f(); // Is accepted, but no longer recommended\\n    unsafe { f(); } // Recommended way to write this\\n}\\n```\\n\\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\\nis `warn` by default in the 2024 edition and `allow` by default in earlier\\neditions.\\n\\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\\n\"},\"level\":\"warning\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vstvec.rs\",\"byte_start\":647,\"byte_end\":664,\"line_start\":26,\"line_end\":26,\"column_start\":9,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"        _write(self.bits);\",\"highlight_start\":9,\"highlight_end\":26}],\"label\":\"call to unsafe function\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"consult the function's documentation for information on how to avoid undefined behavior\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"an unsafe function restricts its caller, but its body is safe by default\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vstvec.rs\",\"byte_start\":610,\"byte_end\":636,\"line_start\":25,\"line_end\":25,\"column_start\":5,\"column_end\":31,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":5,\"highlight_end\":31}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"consider wrapping the function body in an unsafe block\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"src/register/hypervisorx64/vstvec.rs\",\"byte_start\":637,\"byte_end\":637,\"line_start\":25,\"line_end\":25,\"column_start\":32,\"column_end\":32,\"is_primary\":true,\"text\":[{\"text\":\"    pub unsafe fn write(&self) {\",\"highlight_start\":32,\"highlight_end\":32}],\"label\":null,\"suggested_replacement\":\"{ unsafe \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"src/register/hypervisorx64/vstvec.rs\",\"byte_start\":671,\"byte_end\":671,\"line_start\":27,\"line_end\":27,\"column_start\":6,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    }\",\"highlight_start\":6,\"highlight_end\":6}],\"label\":null,\"suggested_replacement\":\"}\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[33mwarning[E0133]\\u001b[0m\\u001b[0m\\u001b[1m: call to unsafe function `register::hypervisorx64::vstvec::_write` is unsafe and requires unsafe block\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/vstvec.rs:26:9\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m26\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        _write(self.bits);\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m         \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33m^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33mcall to unsafe function\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: consult the function's documentation for information on how to avoid undefined behavior\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: an unsafe function restricts its caller, but its body is safe by default\\u001b[0m\\n\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/register/hypervisorx64/vstvec.rs:25:5\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m25\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub unsafe fn write(&self) {\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/arceos-hypervisor/riscv-h/target/debug/deps/libriscv_h-e03a8eab8a1632d6.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"14 warnings emitted\",\"code\":null,\"level\":\"warning\",\"spans\":[],\"children\":[],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[33mwarning\\u001b[0m\\u001b[0m\\u001b[1m: 14 warnings emitted\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"For more information about this error, try `rustc --explain E0133`.\",\"code\":null,\"level\":\"failure-note\",\"spans\":[],\"children\":[],\"rendered\":\"\\u001b[0m\\u001b[1mFor more information about this error, try `rustc --explain E0133`.\\u001b[0m\\n\"}\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 2.64s\n    Scanning done\nWARNING: Dependency file was never scanned: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/i2c-shared-bus.svg\nWARNING: Dependency file was never scanned: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/README.md\nWARNING: Dependency file was never scanned: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/spi-shared-bus.svg\nWARNING: Dependency file was never scanned: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/critical-section-1.2.0/README.md\nerror: Found 4 warnings\n"
            ]
          }
        },
        {
          "file": "[Geiger] Unsafe code statistics",
          "features": "",
          "count": 1,
          "kinds": {
            "Geiger": [
              "pkg=riscv-h, checker=Geiger\ntoolchain=nightly-2025-05-20, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_1/arceos-hypervisor/riscv-h\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu geiger --output-format Ascii\ntimestamp=2025-09-27 4:34:38.358102331 +08:00:00\n\n\nMetric output format: x/y\n    x = unsafe code used by the build\n    y = total unsafe code found in the crate\n\nSymbols:\n    :) = No `unsafe` usage found, declares #![forbid(unsafe_code)]\n    ?  = No `unsafe` usage found, missing #![forbid(unsafe_code)]\n    !  = `unsafe` usage found\n\nFunctions  Expressions  Impls  Traits  Methods  Dependency\n\n0/0        28/28        0/0    0/0     14/14    !  riscv-h 0.1.0\n0/0        9/9          1/1    0/0     1/1      !  |-- bare-metal 1.0.0\n0/0        0/0          0/0    0/0     0/0      ?  |-- bit_field 0.10.3\n0/0        0/0          0/0    0/0     0/0      ?  |-- bitflags 2.9.3\n2/2        18/18        1/1    0/0     0/0      !  |-- log 0.4.27\n33/33      242/252      6/7    0/0     0/3      !  `-- riscv 0.14.0\n2/2        18/36        1/2    1/1     1/3      !      |-- critical-section 1.2.0\n0/0        0/0          0/0    0/0     0/0      ?      |-- embedded-hal 1.0.0\n0/0        0/0          0/0    0/0     0/0      ?      |-- paste 1.0.15\n0/0        0/0          0/0    0/0     0/0      ?      |-- riscv-macros 0.2.0\n0/0        14/14        0/0    0/0     3/3      !      |   |-- proc-macro2 1.0.101\n0/0        4/4          0/0    0/0     0/0      !      |   |   `-- unicode-ident 1.0.18\n0/0        0/0          0/0    0/0     0/0      ?      |   |-- quote 1.0.40\n0/0        14/14        0/0    0/0     3/3      !      |   |   `-- proc-macro2 1.0.101\n0/0        88/88        3/3    0/0     2/2      !      |   `-- syn 2.0.106\n0/0        14/14        0/0    0/0     3/3      !      |       |-- proc-macro2 1.0.101\n0/0        0/0          0/0    0/0     0/0      ?      |       |-- quote 1.0.40\n0/0        4/4          0/0    0/0     0/0      !      |       `-- unicode-ident 1.0.18\n0/0        0/0          0/0    6/6     0/0      !      `-- riscv-pac 0.2.0\n\n37/37      421/449      12/14  7/7     21/26\n\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Atomvchecker",
    "Outdated",
    "Geiger",
    "Unused Deps",
    "Unformatted"
  ]
}