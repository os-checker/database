{
  "repo": {
    "user": "arceos-hypervisor",
    "repo": "arm_vgic"
  },
  "data": [
    {
      "user": "arceos-hypervisor",
      "repo": "arm_vgic",
      "pkg": "arm_vgic",
      "count": 76,
      "raw_reports": [
        {
          "file": "src/interrupt.rs",
          "features": "",
          "count": 24,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unused variable: `interrupt_type`\n  --> src/interrupt.rs:59:13\n   |\n59 |         let interrupt_type = if interrupt_id < SGI_ID_MAX as u32 {\n   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_interrupt_type`\n\n",
              "warning: type `interrupt::InterruptStatus` is more private than the item `interrupt::VgicInt::set_status`\n   --> src/interrupt.rs:104:5\n    |\n104 |     pub(crate) fn set_status(&mut self, status: InterruptStatus) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method `interrupt::VgicInt::set_status` is reachable at visibility `pub(crate)`\n    |\nnote: but type `interrupt::InterruptStatus` is only usable at visibility `pub(self)`\n   --> src/interrupt.rs:20:1\n    |\n20  | enum InterruptStatus {\n    | ^^^^^^^^^^^^^^^^^^^^\n    = note: `#[warn(private_interfaces)]` on by default\n\n",
              "warning: type `interrupt::InterruptStatus` is more private than the item `interrupt::VgicInt::get_status`\n   --> src/interrupt.rs:108:5\n    |\n108 |     pub(crate) fn get_status(&self) -> InterruptStatus {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method `interrupt::VgicInt::get_status` is reachable at visibility `pub(crate)`\n    |\nnote: but type `interrupt::InterruptStatus` is only usable at visibility `pub(self)`\n   --> src/interrupt.rs:20:1\n    |\n20  | enum InterruptStatus {\n    | ^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: variant `Level` is never constructed\n --> src/interrupt.rs:8:5\n  |\n6 | pub enum TriggerMode {\n  |          ----------- variant in this enum\n7 |     Edge = 0,\n8 |     Level = 1,\n  |     ^^^^^\n  |\n  = note: `TriggerMode` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n  = note: `#[warn(dead_code)]` on by default\n\n",
              "warning: variants `Pending`, `Active`, and `ActivePending` are never constructed\n  --> src/interrupt.rs:22:5\n   |\n20 | enum InterruptStatus {\n   |      --------------- variants in this enum\n21 |     Inactive,\n22 |     Pending,\n   |     ^^^^^^^\n23 |     Active,\n   |     ^^^^^^\n24 |     ActivePending,\n   |     ^^^^^^^^^^^^^\n   |\n   = note: `InterruptStatus` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n\n",
              "warning: variants `Pending`, `Active`, and `ActivePending` are never constructed\n  --> src/interrupt.rs:22:5\n   |\n20 | enum InterruptStatus {\n   |      --------------- variants in this enum\n21 |     Inactive,\n22 |     Pending,\n   |     ^^^^^^^\n23 |     Active,\n   |     ^^^^^^\n24 |     ActivePending,\n   |     ^^^^^^^^^^^^^\n   |\n   = note: `InterruptStatus` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n\n",
              "warning: variants `Pending`, `Active`, and `ActivePending` are never constructed\n  --> src/interrupt.rs:22:5\n   |\n20 | enum InterruptStatus {\n   |      --------------- variants in this enum\n21 |     Inactive,\n22 |     Pending,\n   |     ^^^^^^^\n23 |     Active,\n   |     ^^^^^^\n24 |     ActivePending,\n   |     ^^^^^^^^^^^^^\n   |\n   = note: `InterruptStatus` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n\n",
              "warning: fields `vcpu_id`, `priority`, `status`, `trigger_mode`, and `interrupt_type` are never read\n  --> src/interrupt.rs:30:5\n   |\n28 | pub struct Interrupt {\n   |            --------- fields in this struct\n29 |     interrupt_id: u32,\n30 |     vcpu_id: u32,\n   |     ^^^^^^^\n31 |     priority: u32,\n   |     ^^^^^^^^\n32 |     status: InterruptStatus,\n   |     ^^^^^^\n33 |     enable: bool,\n34 |     trigger_mode: TriggerMode,\n   |     ^^^^^^^^^^^^\n35 |     interrupt_type: InterruptType,\n   |     ^^^^^^^^^^^^^^\n   |\n   = note: `Interrupt` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n\n",
              "warning: fields `vcpu_id`, `priority`, `status`, `trigger_mode`, and `interrupt_type` are never read\n  --> src/interrupt.rs:30:5\n   |\n28 | pub struct Interrupt {\n   |            --------- fields in this struct\n29 |     interrupt_id: u32,\n30 |     vcpu_id: u32,\n   |     ^^^^^^^\n31 |     priority: u32,\n   |     ^^^^^^^^\n32 |     status: InterruptStatus,\n   |     ^^^^^^\n33 |     enable: bool,\n34 |     trigger_mode: TriggerMode,\n   |     ^^^^^^^^^^^^\n35 |     interrupt_type: InterruptType,\n   |     ^^^^^^^^^^^^^^\n   |\n   = note: `Interrupt` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n\n",
              "warning: fields `vcpu_id`, `priority`, `status`, `trigger_mode`, and `interrupt_type` are never read\n  --> src/interrupt.rs:30:5\n   |\n28 | pub struct Interrupt {\n   |            --------- fields in this struct\n29 |     interrupt_id: u32,\n30 |     vcpu_id: u32,\n   |     ^^^^^^^\n31 |     priority: u32,\n   |     ^^^^^^^^\n32 |     status: InterruptStatus,\n   |     ^^^^^^\n33 |     enable: bool,\n34 |     trigger_mode: TriggerMode,\n   |     ^^^^^^^^^^^^\n35 |     interrupt_type: InterruptType,\n   |     ^^^^^^^^^^^^^^\n   |\n   = note: `Interrupt` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n\n",
              "warning: fields `vcpu_id`, `priority`, `status`, `trigger_mode`, and `interrupt_type` are never read\n  --> src/interrupt.rs:30:5\n   |\n28 | pub struct Interrupt {\n   |            --------- fields in this struct\n29 |     interrupt_id: u32,\n30 |     vcpu_id: u32,\n   |     ^^^^^^^\n31 |     priority: u32,\n   |     ^^^^^^^^\n32 |     status: InterruptStatus,\n   |     ^^^^^^\n33 |     enable: bool,\n34 |     trigger_mode: TriggerMode,\n   |     ^^^^^^^^^^^^\n35 |     interrupt_type: InterruptType,\n   |     ^^^^^^^^^^^^^^\n   |\n   = note: `Interrupt` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n\n",
              "warning: fields `vcpu_id`, `priority`, `status`, `trigger_mode`, and `interrupt_type` are never read\n  --> src/interrupt.rs:30:5\n   |\n28 | pub struct Interrupt {\n   |            --------- fields in this struct\n29 |     interrupt_id: u32,\n30 |     vcpu_id: u32,\n   |     ^^^^^^^\n31 |     priority: u32,\n   |     ^^^^^^^^\n32 |     status: InterruptStatus,\n   |     ^^^^^^\n33 |     enable: bool,\n34 |     trigger_mode: TriggerMode,\n   |     ^^^^^^^^^^^^\n35 |     interrupt_type: InterruptType,\n   |     ^^^^^^^^^^^^^^\n   |\n   = note: `Interrupt` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n\n",
              "warning: multiple methods are never used\n   --> src/interrupt.rs:87:19\n    |\n57  | impl VgicInt {\n    | ------------ methods in this implementation\n...\n87  |     pub(crate) fn set_priority(&mut self, priority: u32) {\n    |                   ^^^^^^^^^^^^\n...\n92  |     pub(crate) fn get_priority(&self) -> u32 {\n    |                   ^^^^^^^^^^^^\n...\n96  |     pub(crate) fn set_vcpu_id(&mut self, vcpu_id: u32) {\n    |                   ^^^^^^^^^^^\n...\n100 |     pub(crate) fn get_vcpu_id(&self) -> u32 {\n    |                   ^^^^^^^^^^^\n...\n104 |     pub(crate) fn set_status(&mut self, status: InterruptStatus) {\n    |                   ^^^^^^^^^^\n...\n108 |     pub(crate) fn get_status(&self) -> InterruptStatus {\n    |                   ^^^^^^^^^^\n...\n112 |     pub(crate) fn set_trigger_mode(&mut self, trigger_mode: TriggerMode) {\n    |                   ^^^^^^^^^^^^^^^^\n...\n116 |     pub(crate) fn get_trigger_mode(&self) -> &TriggerMode {\n    |                   ^^^^^^^^^^^^^^^^\n...\n120 |     pub(crate) fn get_interrupt_type(&self) -> &InterruptType {\n    |                   ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: multiple methods are never used\n   --> src/interrupt.rs:87:19\n    |\n57  | impl VgicInt {\n    | ------------ methods in this implementation\n...\n87  |     pub(crate) fn set_priority(&mut self, priority: u32) {\n    |                   ^^^^^^^^^^^^\n...\n92  |     pub(crate) fn get_priority(&self) -> u32 {\n    |                   ^^^^^^^^^^^^\n...\n96  |     pub(crate) fn set_vcpu_id(&mut self, vcpu_id: u32) {\n    |                   ^^^^^^^^^^^\n...\n100 |     pub(crate) fn get_vcpu_id(&self) -> u32 {\n    |                   ^^^^^^^^^^^\n...\n104 |     pub(crate) fn set_status(&mut self, status: InterruptStatus) {\n    |                   ^^^^^^^^^^\n...\n108 |     pub(crate) fn get_status(&self) -> InterruptStatus {\n    |                   ^^^^^^^^^^\n...\n112 |     pub(crate) fn set_trigger_mode(&mut self, trigger_mode: TriggerMode) {\n    |                   ^^^^^^^^^^^^^^^^\n...\n116 |     pub(crate) fn get_trigger_mode(&self) -> &TriggerMode {\n    |                   ^^^^^^^^^^^^^^^^\n...\n120 |     pub(crate) fn get_interrupt_type(&self) -> &InterruptType {\n    |                   ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: multiple methods are never used\n   --> src/interrupt.rs:87:19\n    |\n57  | impl VgicInt {\n    | ------------ methods in this implementation\n...\n87  |     pub(crate) fn set_priority(&mut self, priority: u32) {\n    |                   ^^^^^^^^^^^^\n...\n92  |     pub(crate) fn get_priority(&self) -> u32 {\n    |                   ^^^^^^^^^^^^\n...\n96  |     pub(crate) fn set_vcpu_id(&mut self, vcpu_id: u32) {\n    |                   ^^^^^^^^^^^\n...\n100 |     pub(crate) fn get_vcpu_id(&self) -> u32 {\n    |                   ^^^^^^^^^^^\n...\n104 |     pub(crate) fn set_status(&mut self, status: InterruptStatus) {\n    |                   ^^^^^^^^^^\n...\n108 |     pub(crate) fn get_status(&self) -> InterruptStatus {\n    |                   ^^^^^^^^^^\n...\n112 |     pub(crate) fn set_trigger_mode(&mut self, trigger_mode: TriggerMode) {\n    |                   ^^^^^^^^^^^^^^^^\n...\n116 |     pub(crate) fn get_trigger_mode(&self) -> &TriggerMode {\n    |                   ^^^^^^^^^^^^^^^^\n...\n120 |     pub(crate) fn get_interrupt_type(&self) -> &InterruptType {\n    |                   ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: multiple methods are never used\n   --> src/interrupt.rs:87:19\n    |\n57  | impl VgicInt {\n    | ------------ methods in this implementation\n...\n87  |     pub(crate) fn set_priority(&mut self, priority: u32) {\n    |                   ^^^^^^^^^^^^\n...\n92  |     pub(crate) fn get_priority(&self) -> u32 {\n    |                   ^^^^^^^^^^^^\n...\n96  |     pub(crate) fn set_vcpu_id(&mut self, vcpu_id: u32) {\n    |                   ^^^^^^^^^^^\n...\n100 |     pub(crate) fn get_vcpu_id(&self) -> u32 {\n    |                   ^^^^^^^^^^^\n...\n104 |     pub(crate) fn set_status(&mut self, status: InterruptStatus) {\n    |                   ^^^^^^^^^^\n...\n108 |     pub(crate) fn get_status(&self) -> InterruptStatus {\n    |                   ^^^^^^^^^^\n...\n112 |     pub(crate) fn set_trigger_mode(&mut self, trigger_mode: TriggerMode) {\n    |                   ^^^^^^^^^^^^^^^^\n...\n116 |     pub(crate) fn get_trigger_mode(&self) -> &TriggerMode {\n    |                   ^^^^^^^^^^^^^^^^\n...\n120 |     pub(crate) fn get_interrupt_type(&self) -> &InterruptType {\n    |                   ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: multiple methods are never used\n   --> src/interrupt.rs:87:19\n    |\n57  | impl VgicInt {\n    | ------------ methods in this implementation\n...\n87  |     pub(crate) fn set_priority(&mut self, priority: u32) {\n    |                   ^^^^^^^^^^^^\n...\n92  |     pub(crate) fn get_priority(&self) -> u32 {\n    |                   ^^^^^^^^^^^^\n...\n96  |     pub(crate) fn set_vcpu_id(&mut self, vcpu_id: u32) {\n    |                   ^^^^^^^^^^^\n...\n100 |     pub(crate) fn get_vcpu_id(&self) -> u32 {\n    |                   ^^^^^^^^^^^\n...\n104 |     pub(crate) fn set_status(&mut self, status: InterruptStatus) {\n    |                   ^^^^^^^^^^\n...\n108 |     pub(crate) fn get_status(&self) -> InterruptStatus {\n    |                   ^^^^^^^^^^\n...\n112 |     pub(crate) fn set_trigger_mode(&mut self, trigger_mode: TriggerMode) {\n    |                   ^^^^^^^^^^^^^^^^\n...\n116 |     pub(crate) fn get_trigger_mode(&self) -> &TriggerMode {\n    |                   ^^^^^^^^^^^^^^^^\n...\n120 |     pub(crate) fn get_interrupt_type(&self) -> &InterruptType {\n    |                   ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: multiple methods are never used\n   --> src/interrupt.rs:87:19\n    |\n57  | impl VgicInt {\n    | ------------ methods in this implementation\n...\n87  |     pub(crate) fn set_priority(&mut self, priority: u32) {\n    |                   ^^^^^^^^^^^^\n...\n92  |     pub(crate) fn get_priority(&self) -> u32 {\n    |                   ^^^^^^^^^^^^\n...\n96  |     pub(crate) fn set_vcpu_id(&mut self, vcpu_id: u32) {\n    |                   ^^^^^^^^^^^\n...\n100 |     pub(crate) fn get_vcpu_id(&self) -> u32 {\n    |                   ^^^^^^^^^^^\n...\n104 |     pub(crate) fn set_status(&mut self, status: InterruptStatus) {\n    |                   ^^^^^^^^^^\n...\n108 |     pub(crate) fn get_status(&self) -> InterruptStatus {\n    |                   ^^^^^^^^^^\n...\n112 |     pub(crate) fn set_trigger_mode(&mut self, trigger_mode: TriggerMode) {\n    |                   ^^^^^^^^^^^^^^^^\n...\n116 |     pub(crate) fn get_trigger_mode(&self) -> &TriggerMode {\n    |                   ^^^^^^^^^^^^^^^^\n...\n120 |     pub(crate) fn get_interrupt_type(&self) -> &InterruptType {\n    |                   ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: multiple methods are never used\n   --> src/interrupt.rs:87:19\n    |\n57  | impl VgicInt {\n    | ------------ methods in this implementation\n...\n87  |     pub(crate) fn set_priority(&mut self, priority: u32) {\n    |                   ^^^^^^^^^^^^\n...\n92  |     pub(crate) fn get_priority(&self) -> u32 {\n    |                   ^^^^^^^^^^^^\n...\n96  |     pub(crate) fn set_vcpu_id(&mut self, vcpu_id: u32) {\n    |                   ^^^^^^^^^^^\n...\n100 |     pub(crate) fn get_vcpu_id(&self) -> u32 {\n    |                   ^^^^^^^^^^^\n...\n104 |     pub(crate) fn set_status(&mut self, status: InterruptStatus) {\n    |                   ^^^^^^^^^^\n...\n108 |     pub(crate) fn get_status(&self) -> InterruptStatus {\n    |                   ^^^^^^^^^^\n...\n112 |     pub(crate) fn set_trigger_mode(&mut self, trigger_mode: TriggerMode) {\n    |                   ^^^^^^^^^^^^^^^^\n...\n116 |     pub(crate) fn get_trigger_mode(&self) -> &TriggerMode {\n    |                   ^^^^^^^^^^^^^^^^\n...\n120 |     pub(crate) fn get_interrupt_type(&self) -> &InterruptType {\n    |                   ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: multiple methods are never used\n   --> src/interrupt.rs:87:19\n    |\n57  | impl VgicInt {\n    | ------------ methods in this implementation\n...\n87  |     pub(crate) fn set_priority(&mut self, priority: u32) {\n    |                   ^^^^^^^^^^^^\n...\n92  |     pub(crate) fn get_priority(&self) -> u32 {\n    |                   ^^^^^^^^^^^^\n...\n96  |     pub(crate) fn set_vcpu_id(&mut self, vcpu_id: u32) {\n    |                   ^^^^^^^^^^^\n...\n100 |     pub(crate) fn get_vcpu_id(&self) -> u32 {\n    |                   ^^^^^^^^^^^\n...\n104 |     pub(crate) fn set_status(&mut self, status: InterruptStatus) {\n    |                   ^^^^^^^^^^\n...\n108 |     pub(crate) fn get_status(&self) -> InterruptStatus {\n    |                   ^^^^^^^^^^\n...\n112 |     pub(crate) fn set_trigger_mode(&mut self, trigger_mode: TriggerMode) {\n    |                   ^^^^^^^^^^^^^^^^\n...\n116 |     pub(crate) fn get_trigger_mode(&self) -> &TriggerMode {\n    |                   ^^^^^^^^^^^^^^^^\n...\n120 |     pub(crate) fn get_interrupt_type(&self) -> &InterruptType {\n    |                   ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: multiple methods are never used\n   --> src/interrupt.rs:87:19\n    |\n57  | impl VgicInt {\n    | ------------ methods in this implementation\n...\n87  |     pub(crate) fn set_priority(&mut self, priority: u32) {\n    |                   ^^^^^^^^^^^^\n...\n92  |     pub(crate) fn get_priority(&self) -> u32 {\n    |                   ^^^^^^^^^^^^\n...\n96  |     pub(crate) fn set_vcpu_id(&mut self, vcpu_id: u32) {\n    |                   ^^^^^^^^^^^\n...\n100 |     pub(crate) fn get_vcpu_id(&self) -> u32 {\n    |                   ^^^^^^^^^^^\n...\n104 |     pub(crate) fn set_status(&mut self, status: InterruptStatus) {\n    |                   ^^^^^^^^^^\n...\n108 |     pub(crate) fn get_status(&self) -> InterruptStatus {\n    |                   ^^^^^^^^^^\n...\n112 |     pub(crate) fn set_trigger_mode(&mut self, trigger_mode: TriggerMode) {\n    |                   ^^^^^^^^^^^^^^^^\n...\n116 |     pub(crate) fn get_trigger_mode(&self) -> &TriggerMode {\n    |                   ^^^^^^^^^^^^^^^^\n...\n120 |     pub(crate) fn get_interrupt_type(&self) -> &InterruptType {\n    |                   ^^^^^^^^^^^^^^^^^^\n\n",
              "warning: name `SGI` contains a capitalized acronym\n  --> src/interrupt.rs:14:5\n   |\n14 |     SGI,\n   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Sgi`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n   = note: `#[warn(clippy::upper_case_acronyms)]` on by default\n\n",
              "warning: name `PPI` contains a capitalized acronym\n  --> src/interrupt.rs:15:5\n   |\n15 |     PPI,\n   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Ppi`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n",
              "warning: name `SPI` contains a capitalized acronym\n  --> src/interrupt.rs:16:5\n   |\n16 |     SPI,\n   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Spi`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n\n"
            ]
          }
        },
        {
          "file": "src/registers.rs",
          "features": "",
          "count": 17,
          "kinds": {
            "Clippy(Warn)": [
              "warning: all variants have the same prefix: `Gicd`\n   --> src/registers.rs:21:9\n    |\n21  | /         pub enum GicRegister {\n22  | |             // Generate single register variants\n23  | |             $(\n24  | |                 $single_name, // Single register variant\n...   |\n29  | |             )*\n30  | |         }\n    | |_________^\n...\n60  | / generate_gic_registers! {\n61  | |     singles {\n62  | |         // Distributor Control Register\n63  | |         GicdCtlr = 0x0000,\n...   |\n152 | | }\n    | |_- in this macro invocation\n    |\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names\n    = note: `#[warn(clippy::enum_variant_names)]` on by default\n    = note: this warning originates in the macro `generate_gic_registers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: manual `Range::contains` implementation\n   --> src/registers.rs:43:41\n    |\n43  |                           addr if addr >= $range_offset && addr < $range_offset + ($range_size * 4) => {\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0x0080..$range_offset + ($range_size * 4)).contains(&addr)`\n...\n60  | / generate_gic_registers! {\n61  | |     singles {\n62  | |         // Distributor Control Register\n63  | |         GicdCtlr = 0x0000,\n...   |\n152 | | }\n    | |_- in this macro invocation\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: `#[warn(clippy::manual_range_contains)]` on by default\n    = note: this warning originates in the macro `generate_gic_registers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: manual `Range::contains` implementation\n   --> src/registers.rs:43:41\n    |\n43  |                           addr if addr >= $range_offset && addr < $range_offset + ($range_size * 4) => {\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0x0100..$range_offset + ($range_size * 4)).contains(&addr)`\n...\n60  | / generate_gic_registers! {\n61  | |     singles {\n62  | |         // Distributor Control Register\n63  | |         GicdCtlr = 0x0000,\n...   |\n152 | | }\n    | |_- in this macro invocation\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: this warning originates in the macro `generate_gic_registers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: manual `Range::contains` implementation\n   --> src/registers.rs:43:41\n    |\n43  |                           addr if addr >= $range_offset && addr < $range_offset + ($range_size * 4) => {\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0x0180..$range_offset + ($range_size * 4)).contains(&addr)`\n...\n60  | / generate_gic_registers! {\n61  | |     singles {\n62  | |         // Distributor Control Register\n63  | |         GicdCtlr = 0x0000,\n...   |\n152 | | }\n    | |_- in this macro invocation\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: this warning originates in the macro `generate_gic_registers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: manual `Range::contains` implementation\n   --> src/registers.rs:43:41\n    |\n43  |                           addr if addr >= $range_offset && addr < $range_offset + ($range_size * 4) => {\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0x0200..$range_offset + ($range_size * 4)).contains(&addr)`\n...\n60  | / generate_gic_registers! {\n61  | |     singles {\n62  | |         // Distributor Control Register\n63  | |         GicdCtlr = 0x0000,\n...   |\n152 | | }\n    | |_- in this macro invocation\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: this warning originates in the macro `generate_gic_registers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: manual `Range::contains` implementation\n   --> src/registers.rs:43:41\n    |\n43  |                           addr if addr >= $range_offset && addr < $range_offset + ($range_size * 4) => {\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0x0280..$range_offset + ($range_size * 4)).contains(&addr)`\n...\n60  | / generate_gic_registers! {\n61  | |     singles {\n62  | |         // Distributor Control Register\n63  | |         GicdCtlr = 0x0000,\n...   |\n152 | | }\n    | |_- in this macro invocation\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: this warning originates in the macro `generate_gic_registers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: manual `Range::contains` implementation\n   --> src/registers.rs:43:41\n    |\n43  |                           addr if addr >= $range_offset && addr < $range_offset + ($range_size * 4) => {\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0x0300..$range_offset + ($range_size * 4)).contains(&addr)`\n...\n60  | / generate_gic_registers! {\n61  | |     singles {\n62  | |         // Distributor Control Register\n63  | |         GicdCtlr = 0x0000,\n...   |\n152 | | }\n    | |_- in this macro invocation\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: this warning originates in the macro `generate_gic_registers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: manual `Range::contains` implementation\n   --> src/registers.rs:43:41\n    |\n43  |                           addr if addr >= $range_offset && addr < $range_offset + ($range_size * 4) => {\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0x0380..$range_offset + ($range_size * 4)).contains(&addr)`\n...\n60  | / generate_gic_registers! {\n61  | |     singles {\n62  | |         // Distributor Control Register\n63  | |         GicdCtlr = 0x0000,\n...   |\n152 | | }\n    | |_- in this macro invocation\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: this warning originates in the macro `generate_gic_registers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: manual `Range::contains` implementation\n   --> src/registers.rs:43:41\n    |\n43  |                           addr if addr >= $range_offset && addr < $range_offset + ($range_size * 4) => {\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0x0400..$range_offset + ($range_size * 4)).contains(&addr)`\n...\n60  | / generate_gic_registers! {\n61  | |     singles {\n62  | |         // Distributor Control Register\n63  | |         GicdCtlr = 0x0000,\n...   |\n152 | | }\n    | |_- in this macro invocation\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: this warning originates in the macro `generate_gic_registers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: manual `Range::contains` implementation\n   --> src/registers.rs:43:41\n    |\n43  |                           addr if addr >= $range_offset && addr < $range_offset + ($range_size * 4) => {\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0x0800..$range_offset + ($range_size * 4)).contains(&addr)`\n...\n60  | / generate_gic_registers! {\n61  | |     singles {\n62  | |         // Distributor Control Register\n63  | |         GicdCtlr = 0x0000,\n...   |\n152 | | }\n    | |_- in this macro invocation\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: this warning originates in the macro `generate_gic_registers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: manual `Range::contains` implementation\n   --> src/registers.rs:43:41\n    |\n43  |                           addr if addr >= $range_offset && addr < $range_offset + ($range_size * 4) => {\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0x0c00..$range_offset + ($range_size * 4)).contains(&addr)`\n...\n60  | / generate_gic_registers! {\n61  | |     singles {\n62  | |         // Distributor Control Register\n63  | |         GicdCtlr = 0x0000,\n...   |\n152 | | }\n    | |_- in this macro invocation\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: this warning originates in the macro `generate_gic_registers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: manual `Range::contains` implementation\n   --> src/registers.rs:43:41\n    |\n43  |                           addr if addr >= $range_offset && addr < $range_offset + ($range_size * 4) => {\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0x0d00..$range_offset + ($range_size * 4)).contains(&addr)`\n...\n60  | / generate_gic_registers! {\n61  | |     singles {\n62  | |         // Distributor Control Register\n63  | |         GicdCtlr = 0x0000,\n...   |\n152 | | }\n    | |_- in this macro invocation\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: this warning originates in the macro `generate_gic_registers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: manual `Range::contains` implementation\n   --> src/registers.rs:43:41\n    |\n43  |                           addr if addr >= $range_offset && addr < $range_offset + ($range_size * 4) => {\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0x0d04..$range_offset + ($range_size * 4)).contains(&addr)`\n...\n60  | / generate_gic_registers! {\n61  | |     singles {\n62  | |         // Distributor Control Register\n63  | |         GicdCtlr = 0x0000,\n...   |\n152 | | }\n    | |_- in this macro invocation\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: this warning originates in the macro `generate_gic_registers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: manual `Range::contains` implementation\n   --> src/registers.rs:43:41\n    |\n43  |                           addr if addr >= $range_offset && addr < $range_offset + ($range_size * 4) => {\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0x0e00..$range_offset + ($range_size * 4)).contains(&addr)`\n...\n60  | / generate_gic_registers! {\n61  | |     singles {\n62  | |         // Distributor Control Register\n63  | |         GicdCtlr = 0x0000,\n...   |\n152 | | }\n    | |_- in this macro invocation\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: this warning originates in the macro `generate_gic_registers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: manual `Range::contains` implementation\n   --> src/registers.rs:43:41\n    |\n43  |                           addr if addr >= $range_offset && addr < $range_offset + ($range_size * 4) => {\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0x0f00..$range_offset + ($range_size * 4)).contains(&addr)`\n...\n60  | / generate_gic_registers! {\n61  | |     singles {\n62  | |         // Distributor Control Register\n63  | |         GicdCtlr = 0x0000,\n...   |\n152 | | }\n    | |_- in this macro invocation\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: this warning originates in the macro `generate_gic_registers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: manual `Range::contains` implementation\n   --> src/registers.rs:43:41\n    |\n43  |                           addr if addr >= $range_offset && addr < $range_offset + ($range_size * 4) => {\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0x0f10..$range_offset + ($range_size * 4)).contains(&addr)`\n...\n60  | / generate_gic_registers! {\n61  | |     singles {\n62  | |         // Distributor Control Register\n63  | |         GicdCtlr = 0x0000,\n...   |\n152 | | }\n    | |_- in this macro invocation\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: this warning originates in the macro `generate_gic_registers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "warning: manual `Range::contains` implementation\n   --> src/registers.rs:43:41\n    |\n43  |                           addr if addr >= $range_offset && addr < $range_offset + ($range_size * 4) => {\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0x0f20..$range_offset + ($range_size * 4)).contains(&addr)`\n...\n60  | / generate_gic_registers! {\n61  | |     singles {\n62  | |         // Distributor Control Register\n63  | |         GicdCtlr = 0x0000,\n...   |\n152 | | }\n    | |_- in this macro invocation\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n    = note: this warning originates in the macro `generate_gic_registers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
            ]
          }
        },
        {
          "file": "src/vgic.rs",
          "features": "",
          "count": 6,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unused import: `current_vm_vcpu_num`\n --> src/vgic.rs:5:41\n  |\n5 | use axvisor_api::vmm::{current_vcpu_id, current_vm_vcpu_num};\n  |                                         ^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n",
              "warning: unused variable: `vcpu_id`\n  --> src/vgic.rs:61:13\n   |\n61 |         let vcpu_id = current_vcpu_id();\n   |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_vcpu_id`\n   |\n   = note: `#[warn(unused_variables)]` on by default\n\n",
              "warning: you should consider adding a `Default` implementation for `Vgic`\n  --> src/vgic.rs:14:5\n   |\n14 | /     pub fn new() -> Vgic {\n15 | |         Vgic {\n16 | |             vgicd: Mutex::new(Vgicd::new()),\n17 | |         }\n18 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n   = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n   |\n13 + impl Default for Vgic {\n14 +     fn default() -> Self {\n15 +         Self::new()\n16 +     }\n17 + }\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/vgic.rs:21:9\n   |\n21 |         return Ok((value >> (8 * (addr & 0x3))) & 0xff);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n21 -         return Ok((value >> (8 * (addr & 0x3))) & 0xff);\n21 +         Ok((value >> (8 * (addr & 0x3))) & 0xff)\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/vgic.rs:26:9\n   |\n26 |         return Ok((value >> (8 * (addr & 0x3))) & 0xffff);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n26 -         return Ok((value >> (8 * (addr & 0x3))) & 0xffff);\n26 +         Ok((value >> (8 * (addr & 0x3))) & 0xffff)\n   |\n\n",
              "warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n  --> src/vgic.rs:62:9\n   |\n62 | /         match GicRegister::from_addr(addr as u32) {\n63 | |             Some(reg) => {\n64 | |                 match reg {\n65 | |                     GicRegister::GicdCtlr => self.vgicd.lock().vgicd_ctrlr_write(value),\n...  |\n75 | |             None => {} //error!(\"Invalid write register address: {addr:#x}\"),\n76 | |         }\n   | |_________^\n   |\n   = note: you might want to preserve the comments from inside the `match`\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match\n   = note: `#[warn(clippy::single_match)]` on by default\nhelp: try\n   |\n62 ~         if let Some(reg) = GicRegister::from_addr(addr as u32) {\n63 +             match reg {\n64 +                 GicRegister::GicdCtlr => self.vgicd.lock().vgicd_ctrlr_write(value),\n65 +                 // GicRegister::GicdIsenabler(idx) => self.write_isenabler(idx, value),\n66 +                 GicRegister::GicdIsenabler(idx) => {\n67 +                     self.vgicd.lock().vgicd_isenabler_write(idx, value)\n68 +                 }\n69 +                 _ => {\n70 +                     //error!(\"Write register address: {:#x}\", addr);\n71 +                 }\n72 +             }\n73 +         }\n   |\n\n"
            ]
          }
        },
        {
          "file": "src/list_register.rs",
          "features": "",
          "count": 5,
          "kinds": {
            "Clippy(Warn)": [
              "warning: struct `ListRegister` is never constructed\n --> src/list_register.rs:1:12\n  |\n1 | pub struct ListRegister {\n  |            ^^^^^^^^^^^^\n\n",
              "warning: associated items `new`, `set`, and `get` are never used\n  --> src/list_register.rs:6:12\n   |\n5  | impl ListRegister {\n   | ----------------- associated items in this implementation\n6  |     pub fn new(value: u32) -> Self {\n   |            ^^^\n...\n10 |     pub fn set(mut self, value: u32) {\n   |            ^^^\n...\n14 |     pub fn get(&self) -> u32 {\n   |            ^^^\n\n",
              "warning: associated items `new`, `set`, and `get` are never used\n  --> src/list_register.rs:6:12\n   |\n5  | impl ListRegister {\n   | ----------------- associated items in this implementation\n6  |     pub fn new(value: u32) -> Self {\n   |            ^^^\n...\n10 |     pub fn set(mut self, value: u32) {\n   |            ^^^\n...\n14 |     pub fn get(&self) -> u32 {\n   |            ^^^\n\n",
              "warning: associated items `new`, `set`, and `get` are never used\n  --> src/list_register.rs:6:12\n   |\n5  | impl ListRegister {\n   | ----------------- associated items in this implementation\n6  |     pub fn new(value: u32) -> Self {\n   |            ^^^\n...\n10 |     pub fn set(mut self, value: u32) {\n   |            ^^^\n...\n14 |     pub fn get(&self) -> u32 {\n   |            ^^^\n\n",
              "warning: useless conversion to the same type: `u32`\n  --> src/list_register.rs:11:19\n   |\n11 |         self.lr = value.into();\n   |                   ^^^^^^^^^^^^ help: consider removing `.into()`: `value`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n   = note: `#[warn(clippy::useless_conversion)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "src/lib.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unused imports: `get_host_gicd_base`, `get_host_gicr_base`, and `hardware_inject_virtual_interrupt`\n  --> src/lib.rs:24:9\n   |\n24 |         get_host_gicd_base, get_host_gicr_base, hardware_inject_virtual_interrupt, read_vgicd_iidr,\n   |         ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unused imports: `get_host_gicd_base`, `get_host_gicr_base`, and `hardware_inject_virtual_interrupt`\n  --> src/lib.rs:24:9\n   |\n24 |         get_host_gicd_base, get_host_gicr_base, hardware_inject_virtual_interrupt, read_vgicd_iidr,\n   |         ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: unused imports: `get_host_gicd_base`, `get_host_gicr_base`, and `hardware_inject_virtual_interrupt`\n  --> src/lib.rs:24:9\n   |\n24 |         get_host_gicd_base, get_host_gicr_base, hardware_inject_virtual_interrupt, read_vgicd_iidr,\n   |         ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: the feature `unbounded_shifts` has been stable since 1.87.0 and no longer requires an attribute to enable\n --> src/lib.rs:2:12\n  |\n2 | #![feature(unbounded_shifts)]\n  |            ^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "src/devops_impl.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unneeded `return` statement\n  --> src/devops_impl.rs:57:17\n   |\n57 |                 return self.handle_read8(addr);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n57 -                 return self.handle_read8(addr);\n57 +                 self.handle_read8(addr)\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/devops_impl.rs:61:17\n   |\n61 |                 return self.handle_read16(addr);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n61 -                 return self.handle_read16(addr);\n61 +                 self.handle_read16(addr)\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/devops_impl.rs:65:17\n   |\n65 |                 return self.handle_read32(addr);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n65 -                 return self.handle_read32(addr);\n65 +                 self.handle_read32(addr)\n   |\n\n"
            ]
          }
        },
        {
          "file": "src/vgicd.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unused imports: `PPI_ID_MAX` and `SGI_ID_MAX`\n --> src/vgicd.rs:2:21\n  |\n2 | use crate::consts::{PPI_ID_MAX, SGI_ID_MAX, SPI_ID_MAX};\n  |                     ^^^^^^^^^^  ^^^^^^^^^^\n\n",
              "warning: unused imports: `PPI_ID_MAX` and `SGI_ID_MAX`\n --> src/vgicd.rs:2:21\n  |\n2 | use crate::consts::{PPI_ID_MAX, SGI_ID_MAX, SPI_ID_MAX};\n  |                     ^^^^^^^^^^  ^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "src/vtimer/cntp_ctl_el0.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: variables can be used directly in the `format!` string\n  --> src/vtimer/cntp_ctl_el0.rs:33:9\n   |\n33 |         info!(\"Write to emulator register: {:?}, value: {}\", addr, val);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n   = note: `#[warn(clippy::uninlined_format_args)]` on by default\nhelp: change this to\n   |\n33 -         info!(\"Write to emulator register: {:?}, value: {}\", addr, val);\n33 +         info!(\"Write to emulator register: {addr:?}, value: {val}\");\n   |\n\n",
              "warning: you should consider adding a `Default` implementation for `SysCntpCtlEl0`\n  --> src/vtimer/cntp_ctl_el0.rs:43:5\n   |\n43 | /     pub fn new() -> Self {\n44 | |         Self {\n...  |\n47 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\nhelp: try adding this\n   |\n42 + impl Default for SysCntpCtlEl0 {\n43 +     fn default() -> Self {\n44 +         Self::new()\n45 +     }\n46 + }\n   |\n\n"
            ]
          }
        },
        {
          "file": "src/vtimer/cntp_tval_el0.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: variables can be used directly in the `format!` string\n  --> src/vtimer/cntp_tval_el0.rs:39:9\n   |\n39 |         info!(\"Write to emulator register: {:?}, value: {}\", addr, val);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n39 -         info!(\"Write to emulator register: {:?}, value: {}\", addr, val);\n39 +         info!(\"Write to emulator register: {addr:?}, value: {val}\");\n   |\n\n",
              "warning: you should consider adding a `Default` implementation for `SysCntpTvalEl0`\n  --> src/vtimer/cntp_tval_el0.rs:57:5\n   |\n57 | /     pub fn new() -> Self {\n58 | |         Self {\n...  |\n61 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\nhelp: try adding this\n   |\n56 + impl Default for SysCntpTvalEl0 {\n57 +     fn default() -> Self {\n58 +         Self::new()\n59 +     }\n60 + }\n   |\n\n"
            ]
          }
        },
        {
          "file": "src/vtimer/cntpct_el0.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: variables can be used directly in the `format!` string\n  --> src/vtimer/cntpct_el0.rs:34:9\n   |\n34 |         info!(\"Write to emulator register: {:?}, value: {}\", addr, val);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n34 -         info!(\"Write to emulator register: {:?}, value: {}\", addr, val);\n34 +         info!(\"Write to emulator register: {addr:?}, value: {val}\");\n   |\n\n",
              "warning: you should consider adding a `Default` implementation for `SysCntpctEl0`\n  --> src/vtimer/cntpct_el0.rs:44:5\n   |\n44 | /     pub fn new() -> Self {\n45 | |         Self {\n...  |\n48 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\nhelp: try adding this\n   |\n43 + impl Default for SysCntpctEl0 {\n44 +     fn default() -> Self {\n45 +         Self::new()\n46 +     }\n47 + }\n   |\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"lazy::LazyUsize::unsync_init\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:36:23: 36:43 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:39:13: 39:39 (#0)\",\n    \"dep_kind\": \"Both\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=arm_vgic, checker=Rapx\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/arceos-hypervisor/arm_vgic\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target aarch64-unknown-none \n// timestamp=2025-07-15 4:35:14.24742381 +08:00:00\n    Updating crates.io index\n    Updating git repository `https://github.com/arceos-hypervisor/axaddrspace.git`\nerror: failed to get `axaddrspace` as a dependency of package `arm_vgic v0.0.0 (/home/runner/check/batch_1/arceos-hypervisor/arm_vgic)`\n\nCaused by:\n  failed to load source for dependency `axaddrspace`\n\nCaused by:\n  Unable to update https://github.com/arceos-hypervisor/axaddrspace.git#dcc7ac91\n\nCaused by:\n  failed to parse manifest at `/home/runner/.cargo/git/checkouts/axaddrspace-5bb78a0f021e2f93/dcc7ac9/Cargo.toml`\n\nCaused by:\n  feature `edition2024` is required\n\n  The package requires the Cargo feature called `edition2024`, but that feature is not stabilized in this version of Cargo (1.83.0-nightly (15fbd2f60 2024-10-08)).\n  Consider trying a more recent nightly release.\n  See https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#edition-2024 for more information about the status of this feature.\n20:35:14|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=arm_vgic, checker=SemverChecks\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=aarch64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_1/arceos-hypervisor/arm_vgic\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none \n// timestamp=2025-07-15 4:34:41.377635033 +08:00:00\n    Building arm_vgic v0.0.0 (current)\n       Built [  13.038s] (current)\n     Parsing arm_vgic v0.0.0 (current)\n      Parsed [   0.010s] (current)\nerror: arm_vgic not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        },
        {
          "file": "Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n└── riscv 0.14.0\n    └── page_table_multiarch 0.5.5\n        └── axaddrspace 0.1.0\n            ├── axvisor_api 0.1.0\n            │   └── arm_vgic 0.0.0\n            ├── axdevice_base 0.1.0\n            │   └── arm_vgic 0.0.0\n            └── arm_vgic 0.0.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 790,\n    \"last-commit\": \"c67f7726a9188b40c37534589293fec688892e42\",\n    \"last-updated\": \"2025-07-14T22:21:09+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 74\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[Lockbud] deadlock detection",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-07-14T20:34:57Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"lazy::LazyUsize::unsync_init\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:36:23: 36:43 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lazy.rs:39:13: 39:39 (#0)\",\n            \"dep_kind\": \"Both\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-07-14T20:34:57Z WARN  lockbud::callbacks] crate getrandom contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n[2025-07-14T20:34:59Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-07-14T20:34:59Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[Udeps] Unused dependencies",
          "features": "",
          "count": 1,
          "kinds": {
            "Unused Deps": [
              "pkg=arm_vgic, checker=Udeps\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/arceos-hypervisor/arm_vgic\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target aarch64-unknown-none \ntimestamp=2025-07-15 4:35:28.544770916 +08:00:00\n\n\nstdout:\nunused dependencies:\n`arm_vgic v0.0.0 (/home/runner/check/batch_1/arceos-hypervisor/arm_vgic)`\n└─── dependencies\n     ├─── \"bitmaps\"\n     └─── \"tock-registers\"\nNote: These dependencies might be used by other targets.\n      To find dependencies that are not used by any target, enable `--all-targets`.\nNote: They might be false-positive.\n      For example, `cargo-udeps` cannot detect usage of crates that are only used in doc-tests.\n      To ignore some dependencies, write `package.metadata.cargo-udeps.ignore` in Cargo.toml.\n\nstderr:\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling libc v0.2.174\n   Compiling crunchy v0.2.4\n   Compiling tiny-keccak v2.0.2\n   Compiling hashbrown v0.15.4\n   Compiling cfg-if v1.0.1\n   Compiling equivalent v1.0.2\n   Compiling serde v1.0.219\n   Compiling quote v1.0.40\n   Compiling indexmap v2.10.0\n   Compiling syn v2.0.104\n   Compiling getrandom v0.2.16\n   Compiling version_check v0.9.5\n   Compiling zerocopy v0.8.26\n   Compiling winnow v0.7.12\n   Compiling toml_datetime v0.6.11\n   Compiling once_cell v1.21.3\n   Compiling const-random-macro v0.1.16\n   Compiling ahash v0.8.12\n    Checking const-random v0.1.18\n    Checking tock-registers v0.9.0\n    Checking log v0.4.27\n    Checking memory_addr v0.4.0\n   Compiling axerrno v0.1.0\n    Checking aarch64-cpu v10.0.0\n   Compiling toml_edit v0.22.27\n    Checking bitflags v2.9.1\n    Checking allocator-api2 v0.2.21\n    Checking hashbrown v0.14.5\n   Compiling proc-macro-crate v3.3.0\n    Checking page_table_entry v0.5.5\n    Checking winnow v0.6.26\n   Compiling autocfg v1.5.0\n   Compiling serde_derive v1.0.219\n   Compiling lock_api v0.4.13\n    Checking page_table_multiarch v0.5.5\n    Checking memory_set v0.4.0\n    Checking numeric-enum-macro v0.2.0\n    Checking bit_field v0.10.2\n    Checking lazyinit v0.2.2\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#dcc7ac91)\n   Compiling enumerable_derive v1.2.0\n   Compiling serde_repr v0.1.20\n    Checking scopeguard v1.2.0\n   Compiling axvisor_api_proc v0.1.0 (https://github.com/arceos-hypervisor/axvisor_api.git#4102b0a4)\n   Compiling crate_interface v0.1.4\n    Checking spin v0.9.8\n    Checking axvisor_api v0.1.0 (https://github.com/arceos-hypervisor/axvisor_api.git#4102b0a4)\n    Checking aarch64_sysreg v0.1.1\n    Checking tock-registers v0.10.0\n    Checking enumerable v1.2.0\n    Checking bitmaps v3.2.1\n    Checking toml_datetime v0.6.6 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n    Checking serde_spanned v0.6.6 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n    Checking toml_edit v0.22.15 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n    Checking toml v0.8.14 (https://github.com/arceos-hypervisor/toml.git?branch=no_std#fdb24a16)\n    Checking axvmconfig v0.1.0 (https://github.com/arceos-hypervisor/axvmconfig.git#6704074b)\n    Checking axdevice_base v0.1.0 (https://github.com/arceos-hypervisor/axdevice_crates.git#a4745807)\n    Checking arm_vgic v0.0.0 (/home/runner/check/batch_1/arceos-hypervisor/arm_vgic)\nwarning: unused import: `current_vm_vcpu_num`\n --> src/vgic.rs:5:41\n  |\n5 | use axvisor_api::vmm::{current_vcpu_id, current_vm_vcpu_num};\n  |                                         ^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nwarning: unused imports: `PPI_ID_MAX` and `SGI_ID_MAX`\n --> src/vgicd.rs:2:21\n  |\n2 | use crate::consts::{PPI_ID_MAX, SGI_ID_MAX, SPI_ID_MAX};\n  |                     ^^^^^^^^^^  ^^^^^^^^^^\n\nwarning: unused imports: `get_host_gicd_base`, `get_host_gicr_base`, and `hardware_inject_virtual_interrupt`\n  --> src/lib.rs:24:9\n   |\n24 |         get_host_gicd_base, get_host_gicr_base, hardware_inject_virtual_interrupt, read_vgicd_iidr,\n   |         ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `unbounded_shifts` has been stable since 1.87.0 and no longer requires an attribute to enable\n --> src/lib.rs:2:12\n  |\n2 | #![feature(unbounded_shifts)]\n  |            ^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: unused variable: `vcpu_id`\n  --> src/vgic.rs:61:13\n   |\n61 |         let vcpu_id = current_vcpu_id();\n   |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_vcpu_id`\n   |\n   = note: `#[warn(unused_variables)]` on by default\n\nwarning: unused variable: `interrupt_type`\n  --> src/interrupt.rs:59:13\n   |\n59 |         let interrupt_type = if interrupt_id < SGI_ID_MAX as u32 {\n   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_interrupt_type`\n\nwarning: type `InterruptStatus` is more private than the item `VgicInt::set_status`\n   --> src/interrupt.rs:104:5\n    |\n104 |     pub(crate) fn set_status(&mut self, status: InterruptStatus) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method `VgicInt::set_status` is reachable at visibility `pub(crate)`\n    |\nnote: but type `InterruptStatus` is only usable at visibility `pub(self)`\n   --> src/interrupt.rs:20:1\n    |\n20  | enum InterruptStatus {\n    | ^^^^^^^^^^^^^^^^^^^^\n    = note: `#[warn(private_interfaces)]` on by default\n\nwarning: type `InterruptStatus` is more private than the item `VgicInt::get_status`\n   --> src/interrupt.rs:108:5\n    |\n108 |     pub(crate) fn get_status(&self) -> InterruptStatus {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method `VgicInt::get_status` is reachable at visibility `pub(crate)`\n    |\nnote: but type `InterruptStatus` is only usable at visibility `pub(self)`\n   --> src/interrupt.rs:20:1\n    |\n20  | enum InterruptStatus {\n    | ^^^^^^^^^^^^^^^^^^^^\n\nwarning: variant `Level` is never constructed\n --> src/interrupt.rs:8:5\n  |\n6 | pub enum TriggerMode {\n  |          ----------- variant in this enum\n7 |     Edge = 0,\n8 |     Level = 1,\n  |     ^^^^^\n  |\n  = note: `TriggerMode` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n  = note: `#[warn(dead_code)]` on by default\n\nwarning: variants `Pending`, `Active`, and `ActivePending` are never constructed\n  --> src/interrupt.rs:22:5\n   |\n20 | enum InterruptStatus {\n   |      --------------- variants in this enum\n21 |     Inactive,\n22 |     Pending,\n   |     ^^^^^^^\n23 |     Active,\n   |     ^^^^^^\n24 |     ActivePending,\n   |     ^^^^^^^^^^^^^\n   |\n   = note: `InterruptStatus` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n\nwarning: fields `vcpu_id`, `priority`, `status`, `trigger_mode`, and `interrupt_type` are never read\n  --> src/interrupt.rs:30:5\n   |\n28 | pub struct Interrupt {\n   |            --------- fields in this struct\n29 |     interrupt_id: u32,\n30 |     vcpu_id: u32,\n   |     ^^^^^^^\n31 |     priority: u32,\n   |     ^^^^^^^^\n32 |     status: InterruptStatus,\n   |     ^^^^^^\n33 |     enable: bool,\n34 |     trigger_mode: TriggerMode,\n   |     ^^^^^^^^^^^^\n35 |     interrupt_type: InterruptType,\n   |     ^^^^^^^^^^^^^^\n   |\n   = note: `Interrupt` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n\nwarning: multiple methods are never used\n   --> src/interrupt.rs:87:19\n    |\n57  | impl VgicInt {\n    | ------------ methods in this implementation\n...\n87  |     pub(crate) fn set_priority(&mut self, priority: u32) {\n    |                   ^^^^^^^^^^^^\n...\n92  |     pub(crate) fn get_priority(&self) -> u32 {\n    |                   ^^^^^^^^^^^^\n...\n96  |     pub(crate) fn set_vcpu_id(&mut self, vcpu_id: u32) {\n    |                   ^^^^^^^^^^^\n...\n100 |     pub(crate) fn get_vcpu_id(&self) -> u32 {\n    |                   ^^^^^^^^^^^\n...\n104 |     pub(crate) fn set_status(&mut self, status: InterruptStatus) {\n    |                   ^^^^^^^^^^\n...\n108 |     pub(crate) fn get_status(&self) -> InterruptStatus {\n    |                   ^^^^^^^^^^\n...\n112 |     pub(crate) fn set_trigger_mode(&mut self, trigger_mode: TriggerMode) {\n    |                   ^^^^^^^^^^^^^^^^\n...\n116 |     pub(crate) fn get_trigger_mode(&self) -> &TriggerMode {\n    |                   ^^^^^^^^^^^^^^^^\n...\n120 |     pub(crate) fn get_interrupt_type(&self) -> &InterruptType {\n    |                   ^^^^^^^^^^^^^^^^^^\n\nwarning: struct `ListRegister` is never constructed\n --> src/list_register.rs:1:12\n  |\n1 | pub struct ListRegister {\n  |            ^^^^^^^^^^^^\n\nwarning: associated items `new`, `set`, and `get` are never used\n  --> src/list_register.rs:6:12\n   |\n5  | impl ListRegister {\n   | ----------------- associated items in this implementation\n6  |     pub fn new(value: u32) -> Self {\n   |            ^^^\n...\n10 |     pub fn set(mut self, value: u32) {\n   |            ^^^\n...\n14 |     pub fn get(&self) -> u32 {\n   |            ^^^\n\nwarning: `arm_vgic` (lib) generated 14 warnings (run `cargo fix --lib -p arm_vgic` to apply 3 suggestions)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 12.57s\ninfo: Loading depinfo from \"/home/runner/check/batch_1/arceos-hypervisor/arm_vgic/target/aarch64-unknown-none/debug/deps/arm_vgic-05a88b85bd984c24.d\"\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=arm_vgic, checker=Outdated\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/arceos-hypervisor/arm_vgic\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-07-15 4:35:15.932622336 +08:00:00\n\nName  Project  Compat  Latest  Kind    Platform\n----  -------  ------  ------  ----    --------\nspin  0.9.8    ---     0.10.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks violation]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=arm_vgic, checker=SemverChecks\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=aarch64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_1/arceos-hypervisor/arm_vgic\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none \ntimestamp=2025-07-15 4:34:55.440648284 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building arm_vgic v0.0.0 (current)\n       Built [  13.038s] (current)\n     Parsing arm_vgic v0.0.0 (current)\n      Parsed [   0.010s] (current)\nerror: arm_vgic not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Atomvchecker",
    "Outdated",
    "Geiger",
    "Unused Deps",
    "Unformatted"
  ]
}