{
  "repo": {
    "user": "arceos-hypervisor",
    "repo": "arm_vgic"
  },
  "data": [
    {
      "user": "arceos-hypervisor",
      "repo": "arm_vgic",
      "pkg": "arm_vgic",
      "count": 38,
      "raw_reports": [
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs",
          "features": "",
          "count": 16,
          "kinds": {
            "Mirai": [
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:74:39\n    |\n74  |         *entry = GenericPTE::new_page(target.align_down(page_size), flags, page_size.is_huge());\n    |                  -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: associated function defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:43:8\n    |\n43  |     fn new_page(paddr: PhysAddr, flags: MappingFlags, is_huge: bool) -> Self;\n    |        ^^^^^^^^\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:92:25\n    |\n92  |         entry.set_paddr(paddr);\n    |               --------- ^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |               |\n    |               arguments to this method are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: method defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:53:8\n    |\n53  |     fn set_paddr(&mut self, paddr: PhysAddr);\n    |        ^^^^^^^^^\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:128:13\n    |\n128 |         Ok((paddr, size, TlbFlush::new(vaddr)))\n    |             ^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:144:13\n    |\n144 |         Ok((entry.paddr().add(off), entry.flags(), size))\n    |             ^^^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:388:30\n    |\n388 |             Ok(self.table_of(entry.paddr()))\n    |                     -------- ^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |                     |\n    |                     arguments to this method are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: method defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:372:8\n    |\n372 |     fn table_of<'a>(&self, paddr: PhysAddr) -> &'a [PTE] {\n    |        ^^^^^^^^            ---------------\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:398:34\n    |\n398 |             Ok(self.table_of_mut(entry.paddr()))\n    |                     ------------ ^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |                     |\n    |                     arguments to this method are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: method defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:377:8\n    |\n377 |     fn table_of_mut<'a>(&mut self, paddr: PhysAddr) -> &'a mut [PTE] {\n    |        ^^^^^^^^^^^^                ---------------\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:405:44\n    |\n405 |             *entry = GenericPTE::new_table(paddr);\n    |                      --------------------- ^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |                      |\n    |                      arguments to this function are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: associated function defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:45:8\n    |\n45  |     fn new_table(paddr: PhysAddr) -> Self;\n    |        ^^^^^^^^^\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:542:34\n    |\n542 |                 H::dealloc_frame(table_entry.paddr());\n    |                 ---------------- ^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |                 |\n    |                 arguments to this function are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: associated function defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/lib.rs:87:8\n    |\n87  |     fn dealloc_frame(paddr: PhysAddr);\n    |        ^^^^^^^^^^^^^\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
            ],
            "Clippy(Error)": [
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:74:39\n    |\n74  |         *entry = GenericPTE::new_page(target.align_down(page_size), flags, page_size.is_huge());\n    |                  -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: associated function defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:43:8\n    |\n43  |     fn new_page(paddr: PhysAddr, flags: MappingFlags, is_huge: bool) -> Self;\n    |        ^^^^^^^^\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:92:25\n    |\n92  |         entry.set_paddr(paddr);\n    |               --------- ^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |               |\n    |               arguments to this method are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: method defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:53:8\n    |\n53  |     fn set_paddr(&mut self, paddr: PhysAddr);\n    |        ^^^^^^^^^\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:128:13\n    |\n128 |         Ok((paddr, size, TlbFlush::new(vaddr)))\n    |             ^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:144:13\n    |\n144 |         Ok((entry.paddr().add(off), entry.flags(), size))\n    |             ^^^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:388:30\n    |\n388 |             Ok(self.table_of(entry.paddr()))\n    |                     -------- ^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |                     |\n    |                     arguments to this method are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: method defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:372:8\n    |\n372 |     fn table_of<'a>(&self, paddr: PhysAddr) -> &'a [PTE] {\n    |        ^^^^^^^^            ---------------\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:398:34\n    |\n398 |             Ok(self.table_of_mut(entry.paddr()))\n    |                     ------------ ^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |                     |\n    |                     arguments to this method are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: method defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:377:8\n    |\n377 |     fn table_of_mut<'a>(&mut self, paddr: PhysAddr) -> &'a mut [PTE] {\n    |        ^^^^^^^^^^^^                ---------------\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:405:44\n    |\n405 |             *entry = GenericPTE::new_table(paddr);\n    |                      --------------------- ^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |                      |\n    |                      arguments to this function are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: associated function defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:45:8\n    |\n45  |     fn new_table(paddr: PhysAddr) -> Self;\n    |        ^^^^^^^^^\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:542:34\n    |\n542 |                 H::dealloc_frame(table_entry.paddr());\n    |                 ---------------- ^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |                 |\n    |                 arguments to this function are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: associated function defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/lib.rs:87:8\n    |\n87  |     fn dealloc_frame(paddr: PhysAddr);\n    |        ^^^^^^^^^^^^^ -----\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
            ]
          }
        },
        {
          "file": "src/vgic.rs",
          "features": "",
          "count": 6,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_2/arceos-hypervisor/arm_vgic/src/vgic.rs (original lines from 95 to 95)\n-            },\n+            }\n",
              "file: /home/runner/check/batch_2/arceos-hypervisor/arm_vgic/src/vgic.rs (original lines from 98 to 101)\n-            },\n-            VGICD_ISENABLER_SPI..=VGICD_ICENABLER_SGI_PPI => {\n-                \n-            },\n+            }\n+            VGICD_ISENABLER_SPI..=VGICD_ICENABLER_SGI_PPI => {}\n",
              "file: /home/runner/check/batch_2/arceos-hypervisor/arm_vgic/src/vgic.rs (original lines from 113 to 113)\n-            },\n+            }\n",
              "file: /home/runner/check/batch_2/arceos-hypervisor/arm_vgic/src/vgic.rs (original lines from 116 to 117)\n-            },\n-            \n+            }\n",
              "file: /home/runner/check/batch_2/arceos-hypervisor/arm_vgic/src/vgic.rs (original lines from 126 to 126)\n-            },\n+            }\n",
              "file: /home/runner/check/batch_2/arceos-hypervisor/arm_vgic/src/vgic.rs (original lines from 129 to 130)\n-            },\n-            \n+            }\n"
            ]
          }
        },
        {
          "file": "src/lib.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_2/arceos-hypervisor/arm_vgic/src/lib.rs (original lines from 5 to 5)\n-\n",
              "file: /home/runner/check/batch_2/arceos-hypervisor/arm_vgic/src/lib.rs (original lines from 11 to 11)\n+\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "(virtual) clippy",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=arm_vgic, checker=Clippy\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/arm_vgic\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu  --no-deps\n// timestamp=2025-06-28 14:45:46.472830995 +08:00:00\n   Compiling proc-macro2 v1.0.86\n   Compiling unicode-ident v1.0.13\n   Compiling rustversion v1.0.17\n    Checking bit_field v0.10.2\n   Compiling x86 v0.52.0\n    Checking bitflags v2.6.0\n    Checking memory_addr v0.3.0\n    Checking bitflags v1.3.2\n    Checking volatile v0.4.6\n    Checking raw-cpuid v10.7.0\n    Checking log v0.4.22\n   Compiling axerrno v0.1.0\n   Compiling autocfg v1.3.0\n   Compiling quote v1.0.37\n    Checking x86_64 v0.15.2\n   Compiling syn v2.0.77\n   Compiling lock_api v0.4.12\n   Compiling serde v1.0.210\n    Checking memory_addr v0.4.0\n    Checking memory_set v0.3.2\n    Checking numeric-enum-macro v0.2.0\n    Checking cfg-if v1.0.0\n    Checking scopeguard v1.2.0\n    Checking lazyinit v0.2.1\n    Checking tock-registers v0.8.1\n    Checking page_table_entry v0.5.3\n    Checking spin v0.9.8\n    Checking page_table_multiarch v0.5.4\nerror: could not compile `page_table_multiarch` (lib) due to 8 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) geiger",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=arm_vgic, checker=Geiger\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/arm_vgic\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu geiger --output-format Ascii\n// timestamp=2025-06-28 14:46:05.616917582 +08:00:00\n     Removed 0 files\n   Compiling proc-macro2 v1.0.86\n   Compiling unicode-ident v1.0.13\n   Compiling rustversion v1.0.17\n    Checking bit_field v0.10.2\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/build/proc-macro2-02f0bff437f4516f/build_script_build-02f0bff437f4516f.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/build/rustversion-e7462cf90d80ac7a/build_script_build-e7462cf90d80ac7a.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/bit_field-1cb827c223858202.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/unicode_ident-793771a042f0ebd6.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libunicode_ident-793771a042f0ebd6.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libunicode_ident-793771a042f0ebd6.rlib\",\"emit\":\"link\"}\n   Compiling x86 v0.52.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libbit_field-1cb827c223858202.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/build/x86-cff6e8417eca5035/build_script_build-cff6e8417eca5035.d\",\"emit\":\"dep-info\"}\n    Checking memory_addr v0.3.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/memory_addr-c69c32fab8596b31.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/build/x86-cff6e8417eca5035/build_script_build-cff6e8417eca5035\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libmemory_addr-c69c32fab8596b31.rmeta\",\"emit\":\"metadata\"}\n    Checking bitflags v1.3.2\n    Checking bitflags v2.6.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/bitflags-e452f082b53802d5.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libbitflags-e452f082b53802d5.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/bitflags-8c877ad2f2553aab.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/build/proc-macro2-02f0bff437f4516f/build_script_build-02f0bff437f4516f\",\"emit\":\"link\"}\n    Checking volatile v0.4.6\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/build/rustversion-e7462cf90d80ac7a/build_script_build-e7462cf90d80ac7a\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/volatile-9c3a5d9b8a46e4be.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libvolatile-9c3a5d9b8a46e4be.rmeta\",\"emit\":\"metadata\"}\n    Checking raw-cpuid v10.7.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libbitflags-8c877ad2f2553aab.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/rustversion-06aeb1d6bec855a9.d\",\"emit\":\"dep-info\"}\n    Checking log v0.4.22\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/log-efeb65d5810a99b5.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/proc_macro2-7164de5bfe293dfa.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/liblog-efeb65d5810a99b5.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/raw_cpuid-5f4ca47649f2be1c.d\",\"emit\":\"dep-info\"}\n   Compiling autocfg v1.3.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/autocfg-aa407069b1cd32a9.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libautocfg-aa407069b1cd32a9.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libproc_macro2-7164de5bfe293dfa.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libautocfg-aa407069b1cd32a9.rlib\",\"emit\":\"link\"}\n   Compiling axerrno v0.1.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/build/axerrno-09d22c82c598154d/build_script_build-09d22c82c598154d.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/librustversion-06aeb1d6bec855a9.so\",\"emit\":\"link\"}\n    Checking x86_64 v0.15.2\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/build/axerrno-09d22c82c598154d/build_script_build-09d22c82c598154d\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libproc_macro2-7164de5bfe293dfa.rlib\",\"emit\":\"link\"}\n   Compiling quote v1.0.37\n   Compiling lock_api v0.4.12\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/build/lock_api-243fa9e258f898ca/build_script_build-243fa9e258f898ca.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/quote-0f0d6cfe1cd27372.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/x86_64-03d2efd40cdcaff7.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/build/lock_api-243fa9e258f898ca/build_script_build-243fa9e258f898ca\",\"emit\":\"link\"}\n    Checking memory_addr v0.4.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/memory_addr-05cd10bcf213a3f9.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libquote-0f0d6cfe1cd27372.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libmemory_addr-05cd10bcf213a3f9.rmeta\",\"emit\":\"metadata\"}\n   Compiling serde v1.0.210\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/build/serde-51e86e76f96a5eec/build_script_build-51e86e76f96a5eec.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libraw_cpuid-5f4ca47649f2be1c.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libquote-0f0d6cfe1cd27372.rlib\",\"emit\":\"link\"}\n   Compiling syn v2.0.77\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/build/serde-51e86e76f96a5eec/build_script_build-51e86e76f96a5eec\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/x86-71daba8f6c3e4c2a.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/axerrno-52dddda3ff206161.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libaxerrno-52dddda3ff206161.rmeta\",\"emit\":\"metadata\"}\n    Checking memory_set v0.3.2\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/syn-cd564d6151819534.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/memory_set-7ef9a9772665332d.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libmemory_set-7ef9a9772665332d.rmeta\",\"emit\":\"metadata\"}\n    Checking cfg-if v1.0.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/cfg_if-ad924814d1857747.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libcfg_if-ad924814d1857747.rmeta\",\"emit\":\"metadata\"}\n    Checking scopeguard v1.2.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/scopeguard-f9f4a2b4ed0dfe04.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libscopeguard-f9f4a2b4ed0dfe04.rmeta\",\"emit\":\"metadata\"}\n    Checking numeric-enum-macro v0.2.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/numeric_enum_macro-796a58d6f2689351.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libnumeric_enum_macro-796a58d6f2689351.rmeta\",\"emit\":\"metadata\"}\n    Checking lazyinit v0.2.1\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/lazyinit-82e032372c2842bd.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/liblazyinit-82e032372c2842bd.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/lock_api-29a2e08d1ed3d69d.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/liblock_api-29a2e08d1ed3d69d.rmeta\",\"emit\":\"metadata\"}\n    Checking tock-registers v0.8.1\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/tock_registers-bb8a2dc5ce9c6849.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libtock_registers-bb8a2dc5ce9c6849.rmeta\",\"emit\":\"metadata\"}\n    Checking spin v0.9.8\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/spin-7f2206b7dc6fd60f.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libx86_64-03d2efd40cdcaff7.rmeta\",\"emit\":\"metadata\"}\n    Checking page_table_entry v0.5.3\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libspin-7f2206b7dc6fd60f.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/page_table_entry-4a681e781b806350.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libpage_table_entry-4a681e781b806350.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libx86-71daba8f6c3e4c2a.rmeta\",\"emit\":\"metadata\"}\n    Checking page_table_multiarch v0.5.4\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/page_table_multiarch-510bc92c0965b330.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\\n\\nErroneous code examples:\\n\\n```compile_fail,E0308\\nfn plus_one(x: i32) -> i32 {\\n    x + 1\\n}\\n\\nplus_one(\\\"Not a number\\\");\\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\\n\\nif \\\"Not a bool\\\" {\\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\\n}\\n\\nlet x: f32 = \\\"Not a float\\\";\\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\\n//     |\\n//     expected due to this\\n```\\n\\nThis error occurs when an expression was used in a place where the compiler\\nexpected an expression of a different type. It can occur in several cases, the\\nmost common being when calling a function and passing an argument which has a\\ndifferent type than the matching type in the function declaration.\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":2500,\"byte_end\":2528,\"line_start\":74,\"line_end\":74,\"column_start\":39,\"column_end\":67,\"is_primary\":true,\"text\":[{\"text\":\"        *entry = GenericPTE::new_page(target.align_down(page_size), flags, page_size.is_huge());\",\"highlight_start\":39,\"highlight_end\":67}],\"label\":\"expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":2479,\"byte_end\":2499,\"line_start\":74,\"line_end\":74,\"column_start\":18,\"column_end\":38,\"is_primary\":false,\"text\":[{\"text\":\"        *entry = GenericPTE::new_page(target.align_down(page_size), flags, page_size.is_huge());\",\"highlight_start\":18,\"highlight_end\":38}],\"label\":\"arguments to this function are incorrect\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the expected type `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the found type `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs\",\"byte_start\":87,\"byte_end\":103,\"line_start\":4,\"line_end\":4,\"column_start\":5,\"column_end\":21,\"is_primary\":false,\"text\":[{\"text\":\"use page_table_entry::x86_64::X64PTE;\",\"highlight_start\":5,\"highlight_end\":21}],\"label\":\"one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":178,\"byte_end\":189,\"line_start\":4,\"line_end\":4,\"column_start\":5,\"column_end\":16,\"is_primary\":false,\"text\":[{\"text\":\"use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\",\"highlight_start\":5,\"highlight_end\":16}],\"label\":\"one version of crate `memory_addr` used here, as a direct dependency of the current crate\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"you can use `cargo tree` to explore your dependency tree\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"associated function defined here\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs\",\"byte_start\":1283,\"byte_end\":1291,\"line_start\":43,\"line_end\":43,\"column_start\":8,\"column_end\":16,\"is_primary\":true,\"text\":[{\"text\":\"    fn new_page(paddr: PhysAddr, flags: MappingFlags, is_huge: bool) -> Self;\",\"highlight_start\":8,\"highlight_end\":16}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0308]\\u001b[0m\\u001b[0m\\u001b[1m: mismatched types\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:74:39\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m74\\u001b[0m\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        *entry = GenericPTE::new_page(target.align_down(page_size), flags, page_size.is_huge());\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--------------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mexpected `memory_addr::addr::PhysAddr`, found `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12marguments to this function are incorrect\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m450\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m/\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0mdef_usize_addr! {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m451\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    /// A physical memory address.\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m452\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type PhysAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m...\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m455\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type VirtAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|_^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the found type `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m4\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m-----------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a direct dependency of the current crate\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the expected type `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m4\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse page_table_entry::x86_64::X64PTE;\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m----------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mhelp\\u001b[0m\\u001b[0m: you can use `cargo tree` to explore your dependency tree\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: associated function defined here\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:43:8\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m43\\u001b[0m\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    fn new_page(paddr: PhysAddr, flags: MappingFlags, is_huge: bool) -> Self;\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m        \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\\n\\nErroneous code examples:\\n\\n```compile_fail,E0308\\nfn plus_one(x: i32) -> i32 {\\n    x + 1\\n}\\n\\nplus_one(\\\"Not a number\\\");\\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\\n\\nif \\\"Not a bool\\\" {\\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\\n}\\n\\nlet x: f32 = \\\"Not a float\\\";\\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\\n//     |\\n//     expected due to this\\n```\\n\\nThis error occurs when an expression was used in a place where the compiler\\nexpected an expression of a different type. It can occur in several cases, the\\nmost common being when calling a function and passing an argument which has a\\ndifferent type than the matching type in the function declaration.\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":3153,\"byte_end\":3158,\"line_start\":92,\"line_end\":92,\"column_start\":25,\"column_end\":30,\"is_primary\":true,\"text\":[{\"text\":\"        entry.set_paddr(paddr);\",\"highlight_start\":25,\"highlight_end\":30}],\"label\":\"expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":3143,\"byte_end\":3152,\"line_start\":92,\"line_end\":92,\"column_start\":15,\"column_end\":24,\"is_primary\":false,\"text\":[{\"text\":\"        entry.set_paddr(paddr);\",\"highlight_start\":15,\"highlight_end\":24}],\"label\":\"arguments to this method are incorrect\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the expected type `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the found type `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs\",\"byte_start\":87,\"byte_end\":103,\"line_start\":4,\"line_end\":4,\"column_start\":5,\"column_end\":21,\"is_primary\":false,\"text\":[{\"text\":\"use page_table_entry::x86_64::X64PTE;\",\"highlight_start\":5,\"highlight_end\":21}],\"label\":\"one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":178,\"byte_end\":189,\"line_start\":4,\"line_end\":4,\"column_start\":5,\"column_end\":16,\"is_primary\":false,\"text\":[{\"text\":\"use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\",\"highlight_start\":5,\"highlight_end\":16}],\"label\":\"one version of crate `memory_addr` used here, as a direct dependency of the current crate\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"you can use `cargo tree` to explore your dependency tree\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"method defined here\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs\",\"byte_start\":1695,\"byte_end\":1704,\"line_start\":53,\"line_end\":53,\"column_start\":8,\"column_end\":17,\"is_primary\":true,\"text\":[{\"text\":\"    fn set_paddr(&mut self, paddr: PhysAddr);\",\"highlight_start\":8,\"highlight_end\":17}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0308]\\u001b[0m\\u001b[0m\\u001b[1m: mismatched types\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:92:25\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m92\\u001b[0m\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        entry.set_paddr(paddr);\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m               \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m---------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mexpected `memory_addr::addr::PhysAddr`, found `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m               \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m               \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12marguments to this method are incorrect\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m450\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m/\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0mdef_usize_addr! {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m451\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    /// A physical memory address.\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m452\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type PhysAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m...\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m455\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type VirtAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|_^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the found type `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m4\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m-----------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a direct dependency of the current crate\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the expected type `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m4\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse page_table_entry::x86_64::X64PTE;\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m----------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mhelp\\u001b[0m\\u001b[0m: you can use `cargo tree` to explore your dependency tree\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: method defined here\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:53:8\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m53\\u001b[0m\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    fn set_paddr(&mut self, paddr: PhysAddr);\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m        \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\\n\\nErroneous code examples:\\n\\n```compile_fail,E0308\\nfn plus_one(x: i32) -> i32 {\\n    x + 1\\n}\\n\\nplus_one(\\\"Not a number\\\");\\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\\n\\nif \\\"Not a bool\\\" {\\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\\n}\\n\\nlet x: f32 = \\\"Not a float\\\";\\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\\n//     |\\n//     expected due to this\\n```\\n\\nThis error occurs when an expression was used in a place where the compiler\\nexpected an expression of a different type. It can occur in several cases, the\\nmost common being when calling a function and passing an argument which has a\\ndifferent type than the matching type in the function declaration.\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":4392,\"byte_end\":4397,\"line_start\":128,\"line_end\":128,\"column_start\":13,\"column_end\":18,\"is_primary\":true,\"text\":[{\"text\":\"        Ok((paddr, size, TlbFlush::new(vaddr)))\",\"highlight_start\":13,\"highlight_end\":18}],\"label\":\"expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the expected type `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the found type `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":178,\"byte_end\":189,\"line_start\":4,\"line_end\":4,\"column_start\":5,\"column_end\":16,\"is_primary\":false,\"text\":[{\"text\":\"use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\",\"highlight_start\":5,\"highlight_end\":16}],\"label\":\"one version of crate `memory_addr` used here, as a direct dependency of the current crate\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs\",\"byte_start\":87,\"byte_end\":103,\"line_start\":4,\"line_end\":4,\"column_start\":5,\"column_end\":21,\"is_primary\":false,\"text\":[{\"text\":\"use page_table_entry::x86_64::X64PTE;\",\"highlight_start\":5,\"highlight_end\":21}],\"label\":\"one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"you can use `cargo tree` to explore your dependency tree\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0308]\\u001b[0m\\u001b[0m\\u001b[1m: mismatched types\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:128:13\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m128\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        Ok((paddr, size, TlbFlush::new(vaddr)))\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m             \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mexpected `PhysAddr`, found `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m4\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m-----------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a direct dependency of the current crate\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m4\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse page_table_entry::x86_64::X64PTE;\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m----------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the expected type `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m450\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m/\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0mdef_usize_addr! {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m451\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    /// A physical memory address.\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m452\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type PhysAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m...\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m455\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type VirtAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|_^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the found type `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mhelp\\u001b[0m\\u001b[0m: you can use `cargo tree` to explore your dependency tree\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\\n\\nErroneous code examples:\\n\\n```compile_fail,E0308\\nfn plus_one(x: i32) -> i32 {\\n    x + 1\\n}\\n\\nplus_one(\\\"Not a number\\\");\\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\\n\\nif \\\"Not a bool\\\" {\\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\\n}\\n\\nlet x: f32 = \\\"Not a float\\\";\\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\\n//     |\\n//     expected due to this\\n```\\n\\nThis error occurs when an expression was used in a place where the compiler\\nexpected an expression of a different type. It can occur in several cases, the\\nmost common being when calling a function and passing an argument which has a\\ndifferent type than the matching type in the function declaration.\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":5029,\"byte_end\":5051,\"line_start\":144,\"line_end\":144,\"column_start\":13,\"column_end\":35,\"is_primary\":true,\"text\":[{\"text\":\"        Ok((entry.paddr().add(off), entry.flags(), size))\",\"highlight_start\":13,\"highlight_end\":35}],\"label\":\"expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the expected type `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the found type `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":178,\"byte_end\":189,\"line_start\":4,\"line_end\":4,\"column_start\":5,\"column_end\":16,\"is_primary\":false,\"text\":[{\"text\":\"use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\",\"highlight_start\":5,\"highlight_end\":16}],\"label\":\"one version of crate `memory_addr` used here, as a direct dependency of the current crate\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs\",\"byte_start\":87,\"byte_end\":103,\"line_start\":4,\"line_end\":4,\"column_start\":5,\"column_end\":21,\"is_primary\":false,\"text\":[{\"text\":\"use page_table_entry::x86_64::X64PTE;\",\"highlight_start\":5,\"highlight_end\":21}],\"label\":\"one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"you can use `cargo tree` to explore your dependency tree\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0308]\\u001b[0m\\u001b[0m\\u001b[1m: mismatched types\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:144:13\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m144\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m        Ok((entry.paddr().add(off), entry.flags(), size))\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m             \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mexpected `PhysAddr`, found `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m4\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m-----------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a direct dependency of the current crate\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m4\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse page_table_entry::x86_64::X64PTE;\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m----------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the expected type `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m450\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m/\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0mdef_usize_addr! {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m451\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    /// A physical memory address.\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m452\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type PhysAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m...\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m455\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type VirtAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|_^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the found type `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mhelp\\u001b[0m\\u001b[0m: you can use `cargo tree` to explore your dependency tree\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\\n\\nErroneous code examples:\\n\\n```compile_fail,E0308\\nfn plus_one(x: i32) -> i32 {\\n    x + 1\\n}\\n\\nplus_one(\\\"Not a number\\\");\\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\\n\\nif \\\"Not a bool\\\" {\\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\\n}\\n\\nlet x: f32 = \\\"Not a float\\\";\\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\\n//     |\\n//     expected due to this\\n```\\n\\nThis error occurs when an expression was used in a place where the compiler\\nexpected an expression of a different type. It can occur in several cases, the\\nmost common being when calling a function and passing an argument which has a\\ndifferent type than the matching type in the function declaration.\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":13952,\"byte_end\":13965,\"line_start\":388,\"line_end\":388,\"column_start\":30,\"column_end\":43,\"is_primary\":true,\"text\":[{\"text\":\"            Ok(self.table_of(entry.paddr()))\",\"highlight_start\":30,\"highlight_end\":43}],\"label\":\"expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":13943,\"byte_end\":13951,\"line_start\":388,\"line_end\":388,\"column_start\":21,\"column_end\":29,\"is_primary\":false,\"text\":[{\"text\":\"            Ok(self.table_of(entry.paddr()))\",\"highlight_start\":21,\"highlight_end\":29}],\"label\":\"arguments to this method are incorrect\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the expected type `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the found type `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":178,\"byte_end\":189,\"line_start\":4,\"line_end\":4,\"column_start\":5,\"column_end\":16,\"is_primary\":false,\"text\":[{\"text\":\"use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\",\"highlight_start\":5,\"highlight_end\":16}],\"label\":\"one version of crate `memory_addr` used here, as a direct dependency of the current crate\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs\",\"byte_start\":87,\"byte_end\":103,\"line_start\":4,\"line_end\":4,\"column_start\":5,\"column_end\":21,\"is_primary\":false,\"text\":[{\"text\":\"use page_table_entry::x86_64::X64PTE;\",\"highlight_start\":5,\"highlight_end\":21}],\"label\":\"one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"you can use `cargo tree` to explore your dependency tree\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"method defined here\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":13302,\"byte_end\":13317,\"line_start\":372,\"line_end\":372,\"column_start\":28,\"column_end\":43,\"is_primary\":false,\"text\":[{\"text\":\"    fn table_of<'a>(&self, paddr: PhysAddr) -> &'a [PTE] {\",\"highlight_start\":28,\"highlight_end\":43}],\"label\":\"\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":13282,\"byte_end\":13290,\"line_start\":372,\"line_end\":372,\"column_start\":8,\"column_end\":16,\"is_primary\":true,\"text\":[{\"text\":\"    fn table_of<'a>(&self, paddr: PhysAddr) -> &'a [PTE] {\",\"highlight_start\":8,\"highlight_end\":16}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0308]\\u001b[0m\\u001b[0m\\u001b[1m: mismatched types\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:388:30\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m388\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m            Ok(self.table_of(entry.paddr()))\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mexpected `PhysAddr`, found `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12marguments to this method are incorrect\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m4\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m-----------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a direct dependency of the current crate\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m4\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse page_table_entry::x86_64::X64PTE;\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m----------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the expected type `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m450\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m/\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0mdef_usize_addr! {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m451\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    /// A physical memory address.\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m452\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type PhysAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m...\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m455\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type VirtAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|_^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the found type `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mhelp\\u001b[0m\\u001b[0m: you can use `cargo tree` to explore your dependency tree\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: method defined here\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:372:8\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m372\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    fn table_of<'a>(&self, paddr: PhysAddr) -> &'a [PTE] {\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m        \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^\\u001b[0m\\u001b[0m            \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m---------------\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\\n\\nErroneous code examples:\\n\\n```compile_fail,E0308\\nfn plus_one(x: i32) -> i32 {\\n    x + 1\\n}\\n\\nplus_one(\\\"Not a number\\\");\\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\\n\\nif \\\"Not a bool\\\" {\\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\\n}\\n\\nlet x: f32 = \\\"Not a float\\\";\\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\\n//     |\\n//     expected due to this\\n```\\n\\nThis error occurs when an expression was used in a place where the compiler\\nexpected an expression of a different type. It can occur in several cases, the\\nmost common being when calling a function and passing an argument which has a\\ndifferent type than the matching type in the function declaration.\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":14284,\"byte_end\":14297,\"line_start\":398,\"line_end\":398,\"column_start\":34,\"column_end\":47,\"is_primary\":true,\"text\":[{\"text\":\"            Ok(self.table_of_mut(entry.paddr()))\",\"highlight_start\":34,\"highlight_end\":47}],\"label\":\"expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":14271,\"byte_end\":14283,\"line_start\":398,\"line_end\":398,\"column_start\":21,\"column_end\":33,\"is_primary\":false,\"text\":[{\"text\":\"            Ok(self.table_of_mut(entry.paddr()))\",\"highlight_start\":21,\"highlight_end\":33}],\"label\":\"arguments to this method are incorrect\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the expected type `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the found type `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":178,\"byte_end\":189,\"line_start\":4,\"line_end\":4,\"column_start\":5,\"column_end\":16,\"is_primary\":false,\"text\":[{\"text\":\"use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\",\"highlight_start\":5,\"highlight_end\":16}],\"label\":\"one version of crate `memory_addr` used here, as a direct dependency of the current crate\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs\",\"byte_start\":87,\"byte_end\":103,\"line_start\":4,\"line_end\":4,\"column_start\":5,\"column_end\":21,\"is_primary\":false,\"text\":[{\"text\":\"use page_table_entry::x86_64::X64PTE;\",\"highlight_start\":5,\"highlight_end\":21}],\"label\":\"one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"you can use `cargo tree` to explore your dependency tree\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"method defined here\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":13497,\"byte_end\":13512,\"line_start\":377,\"line_end\":377,\"column_start\":36,\"column_end\":51,\"is_primary\":false,\"text\":[{\"text\":\"    fn table_of_mut<'a>(&mut self, paddr: PhysAddr) -> &'a mut [PTE] {\",\"highlight_start\":36,\"highlight_end\":51}],\"label\":\"\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":13469,\"byte_end\":13481,\"line_start\":377,\"line_end\":377,\"column_start\":8,\"column_end\":20,\"is_primary\":true,\"text\":[{\"text\":\"    fn table_of_mut<'a>(&mut self, paddr: PhysAddr) -> &'a mut [PTE] {\",\"highlight_start\":8,\"highlight_end\":20}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0308]\\u001b[0m\\u001b[0m\\u001b[1m: mismatched types\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:398:34\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m398\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m            Ok(self.table_of_mut(entry.paddr()))\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mexpected `PhysAddr`, found `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12marguments to this method are incorrect\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m4\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m-----------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a direct dependency of the current crate\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m4\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse page_table_entry::x86_64::X64PTE;\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m----------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the expected type `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m450\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m/\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0mdef_usize_addr! {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m451\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    /// A physical memory address.\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m452\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type PhysAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m...\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m455\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type VirtAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|_^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the found type `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mhelp\\u001b[0m\\u001b[0m: you can use `cargo tree` to explore your dependency tree\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: method defined here\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:377:8\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m377\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    fn table_of_mut<'a>(&mut self, paddr: PhysAddr) -> &'a mut [PTE] {\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m        \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^^^^\\u001b[0m\\u001b[0m                \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m---------------\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\\n\\nErroneous code examples:\\n\\n```compile_fail,E0308\\nfn plus_one(x: i32) -> i32 {\\n    x + 1\\n}\\n\\nplus_one(\\\"Not a number\\\");\\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\\n\\nif \\\"Not a bool\\\" {\\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\\n}\\n\\nlet x: f32 = \\\"Not a float\\\";\\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\\n//     |\\n//     expected due to this\\n```\\n\\nThis error occurs when an expression was used in a place where the compiler\\nexpected an expression of a different type. It can occur in several cases, the\\nmost common being when calling a function and passing an argument which has a\\ndifferent type than the matching type in the function declaration.\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":14534,\"byte_end\":14539,\"line_start\":405,\"line_end\":405,\"column_start\":44,\"column_end\":49,\"is_primary\":true,\"text\":[{\"text\":\"            *entry = GenericPTE::new_table(paddr);\",\"highlight_start\":44,\"highlight_end\":49}],\"label\":\"expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":14512,\"byte_end\":14533,\"line_start\":405,\"line_end\":405,\"column_start\":22,\"column_end\":43,\"is_primary\":false,\"text\":[{\"text\":\"            *entry = GenericPTE::new_table(paddr);\",\"highlight_start\":22,\"highlight_end\":43}],\"label\":\"arguments to this function are incorrect\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the expected type `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the found type `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs\",\"byte_start\":87,\"byte_end\":103,\"line_start\":4,\"line_end\":4,\"column_start\":5,\"column_end\":21,\"is_primary\":false,\"text\":[{\"text\":\"use page_table_entry::x86_64::X64PTE;\",\"highlight_start\":5,\"highlight_end\":21}],\"label\":\"one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":178,\"byte_end\":189,\"line_start\":4,\"line_end\":4,\"column_start\":5,\"column_end\":16,\"is_primary\":false,\"text\":[{\"text\":\"use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\",\"highlight_start\":5,\"highlight_end\":16}],\"label\":\"one version of crate `memory_addr` used here, as a direct dependency of the current crate\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"you can use `cargo tree` to explore your dependency tree\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"associated function defined here\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs\",\"byte_start\":1430,\"byte_end\":1439,\"line_start\":45,\"line_end\":45,\"column_start\":8,\"column_end\":17,\"is_primary\":true,\"text\":[{\"text\":\"    fn new_table(paddr: PhysAddr) -> Self;\",\"highlight_start\":8,\"highlight_end\":17}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0308]\\u001b[0m\\u001b[0m\\u001b[1m: mismatched types\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:405:44\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m405\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m            *entry = GenericPTE::new_table(paddr);\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                      \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m---------------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mexpected `memory_addr::addr::PhysAddr`, found `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                      \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                      \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12marguments to this function are incorrect\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m450\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m/\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0mdef_usize_addr! {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m451\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    /// A physical memory address.\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m452\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type PhysAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m...\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m455\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type VirtAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|_^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the found type `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m4\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m-----------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a direct dependency of the current crate\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the expected type `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m4\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse page_table_entry::x86_64::X64PTE;\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m----------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mhelp\\u001b[0m\\u001b[0m: you can use `cargo tree` to explore your dependency tree\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: associated function defined here\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:45:8\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m45\\u001b[0m\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    fn new_table(paddr: PhysAddr) -> Self;\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m        \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\\n\\nErroneous code examples:\\n\\n```compile_fail,E0308\\nfn plus_one(x: i32) -> i32 {\\n    x + 1\\n}\\n\\nplus_one(\\\"Not a number\\\");\\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\\n\\nif \\\"Not a bool\\\" {\\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\\n}\\n\\nlet x: f32 = \\\"Not a float\\\";\\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\\n//     |\\n//     expected due to this\\n```\\n\\nThis error occurs when an expression was used in a place where the compiler\\nexpected an expression of a different type. It can occur in several cases, the\\nmost common being when calling a function and passing an argument which has a\\ndifferent type than the matching type in the function declaration.\\n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":18921,\"byte_end\":18940,\"line_start\":542,\"line_end\":542,\"column_start\":34,\"column_end\":53,\"is_primary\":true,\"text\":[{\"text\":\"                H::dealloc_frame(table_entry.paddr());\",\"highlight_start\":34,\"highlight_end\":53}],\"label\":\"expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":18904,\"byte_end\":18920,\"line_start\":542,\"line_end\":542,\"column_start\":17,\"column_end\":33,\"is_primary\":false,\"text\":[{\"text\":\"                H::dealloc_frame(table_entry.paddr());\",\"highlight_start\":17,\"highlight_end\":33}],\"label\":\"arguments to this function are incorrect\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the expected type `PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":11762,\"byte_end\":11786,\"line_start\":313,\"line_end\":313,\"column_start\":9,\"column_end\":33,\"is_primary\":true,\"text\":[{\"text\":\"        pub struct $name(usize);\",\"highlight_start\":9,\"highlight_end\":33}],\"label\":\"this is the found type `memory_addr::addr::PhysAddr`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":{\"span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":15826,\"byte_end\":15961,\"line_start\":450,\"line_end\":456,\"column_start\":1,\"column_end\":2,\"is_primary\":false,\"text\":[{\"text\":\"def_usize_addr! {\",\"highlight_start\":1,\"highlight_end\":18},{\"text\":\"    /// A physical memory address.\",\"highlight_start\":1,\"highlight_end\":35},{\"text\":\"    pub type PhysAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"\",\"highlight_start\":1,\"highlight_end\":1},{\"text\":\"    /// A virtual memory address.\",\"highlight_start\":1,\"highlight_end\":34},{\"text\":\"    pub type VirtAddr;\",\"highlight_start\":1,\"highlight_end\":23},{\"text\":\"}\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},\"macro_decl_name\":\"def_usize_addr!\",\"def_site_span\":{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs\",\"byte_start\":11504,\"byte_end\":11531,\"line_start\":303,\"line_end\":303,\"column_start\":1,\"column_end\":28,\"is_primary\":false,\"text\":[{\"text\":\"macro_rules! def_usize_addr {\",\"highlight_start\":1,\"highlight_end\":28}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}}},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs\",\"byte_start\":178,\"byte_end\":189,\"line_start\":4,\"line_end\":4,\"column_start\":5,\"column_end\":16,\"is_primary\":false,\"text\":[{\"text\":\"use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\",\"highlight_start\":5,\"highlight_end\":16}],\"label\":\"one version of crate `memory_addr` used here, as a direct dependency of the current crate\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs\",\"byte_start\":87,\"byte_end\":103,\"line_start\":4,\"line_end\":4,\"column_start\":5,\"column_end\":21,\"is_primary\":false,\"text\":[{\"text\":\"use page_table_entry::x86_64::X64PTE;\",\"highlight_start\":5,\"highlight_end\":21}],\"label\":\"one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"you can use `cargo tree` to explore your dependency tree\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"associated function defined here\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/lib.rs\",\"byte_start\":2748,\"byte_end\":2753,\"line_start\":87,\"line_end\":87,\"column_start\":22,\"column_end\":27,\"is_primary\":false,\"text\":[{\"text\":\"    fn dealloc_frame(paddr: PhysAddr);\",\"highlight_start\":22,\"highlight_end\":27}],\"label\":\"\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/lib.rs\",\"byte_start\":2734,\"byte_end\":2747,\"line_start\":87,\"line_end\":87,\"column_start\":8,\"column_end\":21,\"is_primary\":true,\"text\":[{\"text\":\"    fn dealloc_frame(paddr: PhysAddr);\",\"highlight_start\":8,\"highlight_end\":21}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0308]\\u001b[0m\\u001b[0m\\u001b[1m: mismatched types\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:542:34\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m542\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m                H::dealloc_frame(table_entry.paddr());\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                 \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m----------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mexpected `PhysAddr`, found `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                 \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                 \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12marguments to this function are incorrect\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m4\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m-----------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a direct dependency of the current crate\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m4\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0muse page_table_entry::x86_64::X64PTE;\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m----------------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mone version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the expected type `PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m::: \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m450\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m/\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0mdef_usize_addr! {\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m451\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    /// A physical memory address.\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m452\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type PhysAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m...\\u001b[0m\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m455\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub type VirtAddr;\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m456\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m}\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m|_^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10mthis is the found type `memory_addr::addr::PhysAddr`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mhelp\\u001b[0m\\u001b[0m: you can use `cargo tree` to explore your dependency tree\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;10mnote\\u001b[0m\\u001b[0m: associated function defined here\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/lib.rs:87:8\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m87\\u001b[0m\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    fn dealloc_frame(paddr: PhysAddr);\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m        \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;10m^^^^^^^^^^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m-----\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"aborting due to 8 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror\\u001b[0m\\u001b[0m\\u001b[1m: aborting due to 8 previous errors\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"For more information about this error, try `rustc --explain E0308`.\",\"code\":null,\"level\":\"failure-note\",\"spans\":[],\"children\":[],\"rendered\":\"\\u001b[0m\\u001b[1mFor more information about this error, try `rustc --explain E0308`.\\u001b[0m\\n\"}\nerror: could not compile `page_table_multiarch` (lib)\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.rustup/toolchains/nightly-2025-06-26-x86_64-unknown-linux-gnu/bin/rustc --crate-name page_table_multiarch --edition=2024 /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg 'feature=\"default\"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values(\"copy-from\", \"default\"))' -C metadata=8d6f2fe401ea641e -C extra-filename=-510bc92c0965b330 --out-dir /home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps -L dependency=/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps --extern log=/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/liblog-efeb65d5810a99b5.rmeta --extern memory_addr=/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libmemory_addr-05cd10bcf213a3f9.rmeta --extern page_table_entry=/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libpage_table_entry-4a681e781b806350.rmeta --extern x86=/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libx86-71daba8f6c3e4c2a.rmeta --cap-lints allow` (exit status: 1)\nwarning: build failed, waiting for other jobs to finish...\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libsyn-cd564d6151819534.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_2/arceos-hypervisor/arm_vgic/target/debug/deps/libsyn-cd564d6151819534.rlib\",\"emit\":\"link\"}\nerror: Cargo(\"1 job failed\")\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=arm_vgic, checker=Lockbud\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/arm_vgic\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-linux-gnu \n// timestamp=2025-06-28 14:45:58.975407665 +08:00:00\n   Compiling proc-macro2 v1.0.86\n   Compiling unicode-ident v1.0.13\n   Compiling rustversion v1.0.17\n   Compiling bit_field v0.10.2\n   Compiling bitflags v2.6.0\n   Compiling memory_addr v0.3.0\n   Compiling volatile v0.4.6\n   Compiling bitflags v1.3.2\n   Compiling x86 v0.52.0\n   Compiling raw-cpuid v10.7.0\n   Compiling log v0.4.22\n[2025-06-28T06:45:59Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:45:59Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling autocfg v1.3.0\n   Compiling quote v1.0.37\n   Compiling x86_64 v0.15.2\n   Compiling syn v2.0.77\n   Compiling axerrno v0.1.0\n   Compiling lock_api v0.4.12\n   Compiling serde v1.0.210\n   Compiling memory_addr v0.4.0\n   Compiling memory_set v0.3.2\n   Compiling lazyinit v0.2.1\n   Compiling page_table_entry v0.5.3\n   Compiling cfg-if v1.0.0\n   Compiling scopeguard v1.2.0\n   Compiling numeric-enum-macro v0.2.0\n   Compiling tock-registers v0.8.1\n   Compiling page_table_multiarch v0.5.4\n   Compiling spin v0.9.8\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:74:39\n    |\n74  |         *entry = GenericPTE::new_page(target.align_down(page_size), flags, page_size.is_huge());\n    |                  -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: associated function defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:43:8\n    |\n43  |     fn new_page(paddr: PhysAddr, flags: MappingFlags, is_huge: bool) -> Self;\n    |        ^^^^^^^^\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:92:25\n    |\n92  |         entry.set_paddr(paddr);\n    |               --------- ^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |               |\n    |               arguments to this method are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: method defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:53:8\n    |\n53  |     fn set_paddr(&mut self, paddr: PhysAddr);\n    |        ^^^^^^^^^\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:128:13\n    |\n128 |         Ok((paddr, size, TlbFlush::new(vaddr)))\n    |             ^^^^^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:144:13\n    |\n144 |         Ok((entry.paddr().add(off), entry.flags(), size))\n    |             ^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:388:30\n    |\n388 |             Ok(self.table_of(entry.paddr()))\n    |                     -------- ^^^^^^^^^^^^^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |                     |\n    |                     arguments to this method are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: method defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:372:8\n    |\n372 |     fn table_of<'a>(&self, paddr: PhysAddr) -> &'a [PTE] {\n    |        ^^^^^^^^            ---------------\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:398:34\n    |\n398 |             Ok(self.table_of_mut(entry.paddr()))\n    |                     ------------ ^^^^^^^^^^^^^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |                     |\n    |                     arguments to this method are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: method defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:377:8\n    |\n377 |     fn table_of_mut<'a>(&mut self, paddr: PhysAddr) -> &'a mut [PTE] {\n    |        ^^^^^^^^^^^^                ---------------\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:405:44\n    |\n405 |             *entry = GenericPTE::new_table(paddr);\n    |                      --------------------- ^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |                      |\n    |                      arguments to this function are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: associated function defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:45:8\n    |\n45  |     fn new_table(paddr: PhysAddr) -> Self;\n    |        ^^^^^^^^^\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:542:34\n    |\n542 |                 H::dealloc_frame(table_entry.paddr());\n    |                 ---------------- ^^^^^^^^^^^^^^^^^^^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |                 |\n    |                 arguments to this function are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: associated function defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/lib.rs:87:8\n    |\n87  |     fn dealloc_frame(paddr: PhysAddr);\n    |        ^^^^^^^^^^^^^\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `page_table_multiarch` (lib) due to 8 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) mirai",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=arm_vgic, checker=Mirai\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/arm_vgic\n// cmd=cargo +nightly-2025-01-10 mirai --target x86_64-unknown-linux-gnu \n// timestamp=2025-06-28 14:45:55.182829052 +08:00:00\n   Compiling proc-macro2 v1.0.86\n   Compiling unicode-ident v1.0.13\n   Compiling rustversion v1.0.17\n    Checking bit_field v0.10.2\n    Checking bitflags v2.6.0\n   Compiling x86 v0.52.0\n    Checking bitflags v1.3.2\n    Checking memory_addr v0.3.0\n    Checking volatile v0.4.6\n    Checking raw-cpuid v10.7.0\n   Compiling axerrno v0.1.0\n    Checking log v0.4.22\n   Compiling autocfg v1.3.0\n   Compiling quote v1.0.37\n    Checking x86_64 v0.15.2\n   Compiling syn v2.0.77\n   Compiling lock_api v0.4.12\n    Checking memory_addr v0.4.0\n   Compiling serde v1.0.210\n    Checking memory_set v0.3.2\n    Checking scopeguard v1.2.0\n    Checking cfg-if v1.0.0\n    Checking numeric-enum-macro v0.2.0\n    Checking lazyinit v0.2.1\n    Checking tock-registers v0.8.1\n    Checking spin v0.9.8\n    Checking page_table_entry v0.5.3\n    Checking page_table_multiarch v0.5.4\nerror: could not compile `page_table_multiarch` (lib) due to 8 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=arm_vgic, checker=Rapx\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/arm_vgic\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-linux-gnu \n// timestamp=2025-06-28 14:46:03.750896012 +08:00:00\n    Updating git repository `https://github.com/luodeb/arm_gicv2.git`\n    Updating git repository `https://github.com/arceos-hypervisor/axaddrspace.git`\nerror: failed to get `axaddrspace` as a dependency of package `arm_vgic v0.0.0 (/home/runner/check/batch_2/arceos-hypervisor/arm_vgic)`\n\nCaused by:\n  failed to load source for dependency `axaddrspace`\n\nCaused by:\n  Unable to update https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076\n\nCaused by:\n  failed to parse manifest at `/home/runner/.cargo/git/checkouts/axaddrspace-5bb78a0f021e2f93/2ed4d07/Cargo.toml`\n\nCaused by:\n  feature `edition2024` is required\n\n  The package requires the Cargo feature called `edition2024`, but that feature is not stabilized in this version of Cargo (1.83.0-nightly (15fbd2f60 2024-10-08)).\n  Consider trying a more recent nightly release.\n  See https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#edition-2024 for more information about the status of this feature.\n06:46:04|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=arm_vgic, checker=SemverChecks\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/arm_vgic\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \n// timestamp=2025-06-28 14:45:50.176541313 +08:00:00\n    Building arm_vgic v0.0.0 (current)\nerror: running cargo-doc on crate 'arm_vgic' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling rustversion v1.0.21\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n   Compiling x86 v0.52.0\n    Checking volatile v0.4.6\n    Checking bitflags v2.9.1\n    Checking raw-cpuid v10.7.0\n    Checking memory_addr v0.4.0\n   Compiling axerrno v0.1.0\n   Compiling autocfg v1.5.0\n   Compiling quote v1.0.40\n    Checking x86_64 v0.15.2\n    Checking log v0.4.27\n   Compiling lock_api v0.4.13\n   Compiling syn v2.0.104\n    Checking memory_addr v0.3.2\n   Compiling serde v1.0.219\n    Checking memory_set v0.3.2\n    Checking scopeguard v1.2.0\n    Checking lazyinit v0.2.2\n    Checking numeric-enum-macro v0.2.0\n    Checking cfg-if v1.0.1\n    Checking tock-registers v0.8.1\n    Checking spin v0.9.8\n    Checking page_table_entry v0.5.4\n    Checking page_table_multiarch v0.5.4\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n110 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> EPTEntry`\n               found signature `fn(PhysAddr) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 -     fn new_table(paddr: HostPhysAddr) -> Self {\n117 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&EPTEntry) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 -     fn paddr(&self) -> HostPhysAddr {\n121 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut EPTEntry, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n127 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate arm_vgic v0.0.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_2/arceos-hypervisor/arm_vgic &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate arm_vgic v0.0.0\n"
            ]
          }
        },
        {
          "file": "(virtual) udeps",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=arm_vgic, checker=Udeps\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/arm_vgic\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target x86_64-unknown-linux-gnu \n// timestamp=2025-06-28 14:46:08.954897239 +08:00:00\n   Compiling proc-macro2 v1.0.86\n   Compiling unicode-ident v1.0.13\n   Compiling rustversion v1.0.17\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n    Checking memory_addr v0.3.0\n   Compiling x86 v0.52.0\n    Checking bitflags v2.6.0\n    Checking volatile v0.4.6\n    Checking raw-cpuid v10.7.0\n   Compiling axerrno v0.1.0\n   Compiling autocfg v1.3.0\n   Compiling quote v1.0.37\n    Checking x86_64 v0.15.2\n   Compiling syn v2.0.77\n    Checking log v0.4.22\n   Compiling lock_api v0.4.12\n   Compiling serde v1.0.210\n    Checking memory_addr v0.4.0\n    Checking memory_set v0.3.2\n    Checking numeric-enum-macro v0.2.0\n    Checking cfg-if v1.0.0\n    Checking lazyinit v0.2.1\n    Checking scopeguard v1.2.0\n    Checking page_table_entry v0.5.3\n    Checking tock-registers v0.8.1\n    Checking spin v0.9.8\n    Checking page_table_multiarch v0.5.4\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:74:39\n    |\n74  |         *entry = GenericPTE::new_page(target.align_down(page_size), flags, page_size.is_huge());\n    |                  -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: associated function defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:43:8\n    |\n43  |     fn new_page(paddr: PhysAddr, flags: MappingFlags, is_huge: bool) -> Self;\n    |        ^^^^^^^^\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:92:25\n    |\n92  |         entry.set_paddr(paddr);\n    |               --------- ^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |               |\n    |               arguments to this method are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: method defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:53:8\n    |\n53  |     fn set_paddr(&mut self, paddr: PhysAddr);\n    |        ^^^^^^^^^\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:128:13\n    |\n128 |         Ok((paddr, size, TlbFlush::new(vaddr)))\n    |             ^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:144:13\n    |\n144 |         Ok((entry.paddr().add(off), entry.flags(), size))\n    |             ^^^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:388:30\n    |\n388 |             Ok(self.table_of(entry.paddr()))\n    |                     -------- ^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |                     |\n    |                     arguments to this method are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: method defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:372:8\n    |\n372 |     fn table_of<'a>(&self, paddr: PhysAddr) -> &'a [PTE] {\n    |        ^^^^^^^^            ---------------\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:398:34\n    |\n398 |             Ok(self.table_of_mut(entry.paddr()))\n    |                     ------------ ^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |                     |\n    |                     arguments to this method are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: method defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:377:8\n    |\n377 |     fn table_of_mut<'a>(&mut self, paddr: PhysAddr) -> &'a mut [PTE] {\n    |        ^^^^^^^^^^^^                ---------------\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:405:44\n    |\n405 |             *entry = GenericPTE::new_table(paddr);\n    |                      --------------------- ^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |                      |\n    |                      arguments to this function are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: associated function defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:45:8\n    |\n45  |     fn new_table(paddr: PhysAddr) -> Self;\n    |        ^^^^^^^^^\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:542:34\n    |\n542 |                 H::dealloc_frame(table_entry.paddr());\n    |                 ---------------- ^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |                 |\n    |                 arguments to this function are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: associated function defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/lib.rs:87:8\n    |\n87  |     fn dealloc_frame(paddr: PhysAddr);\n    |        ^^^^^^^^^^^^^ -----\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `page_table_multiarch` (lib) due to 8 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n└── riscv 0.14.0\n    └── page_table_multiarch 0.5.4\n        └── axaddrspace 0.1.0\n            ├── axdevice_base 0.1.0\n            │   └── arm_vgic 0.0.0\n            └── arm_vgic 0.0.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 787,\n    \"last-commit\": \"7573f55ba337263f61167dbb0ea926cdc7c8eb5d\",\n    \"last-updated\": \"2025-06-17T11:04:25+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 41\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[Lockbud] deadlock detection",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-06-28T06:45:59Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:45:59Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[Udeps] Unused dependencies",
          "features": "",
          "count": 1,
          "kinds": {
            "Unused Deps": [
              "pkg=arm_vgic, checker=Udeps\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/arm_vgic\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target x86_64-unknown-linux-gnu \ntimestamp=2025-06-28 14:46:12.604892112 +08:00:00\n\n\nstdout:\n\nstderr:\n   Compiling proc-macro2 v1.0.86\n   Compiling unicode-ident v1.0.13\n   Compiling rustversion v1.0.17\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n    Checking memory_addr v0.3.0\n   Compiling x86 v0.52.0\n    Checking bitflags v2.6.0\n    Checking volatile v0.4.6\n    Checking raw-cpuid v10.7.0\n   Compiling axerrno v0.1.0\n   Compiling autocfg v1.3.0\n   Compiling quote v1.0.37\n    Checking x86_64 v0.15.2\n   Compiling syn v2.0.77\n    Checking log v0.4.22\n   Compiling lock_api v0.4.12\n   Compiling serde v1.0.210\n    Checking memory_addr v0.4.0\n    Checking memory_set v0.3.2\n    Checking numeric-enum-macro v0.2.0\n    Checking cfg-if v1.0.0\n    Checking lazyinit v0.2.1\n    Checking scopeguard v1.2.0\n    Checking page_table_entry v0.5.3\n    Checking tock-registers v0.8.1\n    Checking spin v0.9.8\n    Checking page_table_multiarch v0.5.4\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:74:39\n    |\n74  |         *entry = GenericPTE::new_page(target.align_down(page_size), flags, page_size.is_huge());\n    |                  -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |                  |\n    |                  arguments to this function are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: associated function defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:43:8\n    |\n43  |     fn new_page(paddr: PhysAddr, flags: MappingFlags, is_huge: bool) -> Self;\n    |        ^^^^^^^^\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:92:25\n    |\n92  |         entry.set_paddr(paddr);\n    |               --------- ^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |               |\n    |               arguments to this method are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: method defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:53:8\n    |\n53  |     fn set_paddr(&mut self, paddr: PhysAddr);\n    |        ^^^^^^^^^\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:128:13\n    |\n128 |         Ok((paddr, size, TlbFlush::new(vaddr)))\n    |             ^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:144:13\n    |\n144 |         Ok((entry.paddr().add(off), entry.flags(), size))\n    |             ^^^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:388:30\n    |\n388 |             Ok(self.table_of(entry.paddr()))\n    |                     -------- ^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |                     |\n    |                     arguments to this method are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: method defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:372:8\n    |\n372 |     fn table_of<'a>(&self, paddr: PhysAddr) -> &'a [PTE] {\n    |        ^^^^^^^^            ---------------\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:398:34\n    |\n398 |             Ok(self.table_of_mut(entry.paddr()))\n    |                     ------------ ^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |                     |\n    |                     arguments to this method are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: method defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:377:8\n    |\n377 |     fn table_of_mut<'a>(&mut self, paddr: PhysAddr) -> &'a mut [PTE] {\n    |        ^^^^^^^^^^^^                ---------------\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:405:44\n    |\n405 |             *entry = GenericPTE::new_table(paddr);\n    |                      --------------------- ^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |                      |\n    |                      arguments to this function are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: associated function defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_entry-0.5.3/src/lib.rs:45:8\n    |\n45  |     fn new_table(paddr: PhysAddr) -> Self;\n    |        ^^^^^^^^^\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:542:34\n    |\n542 |                 H::dealloc_frame(table_entry.paddr());\n    |                 ---------------- ^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |                 |\n    |                 arguments to this function are incorrect\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/bits64.rs:4:5\n    |\n4   |   use memory_addr::{MemoryAddr, PAGE_SIZE_4K, PhysAddr};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/arch/x86_64.rs:4:5\n    |\n4   |   use page_table_entry::x86_64::X64PTE;\n    |       ---------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\nnote: associated function defined here\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/page_table_multiarch-0.5.4/src/lib.rs:87:8\n    |\n87  |     fn dealloc_frame(paddr: PhysAddr);\n    |        ^^^^^^^^^^^^^ -----\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `page_table_multiarch` (lib) due to 8 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=arm_vgic, checker=Outdated\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/arm_vgic\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-06-28 14:46:05.552446785 +08:00:00\n\nName         Project  Compat  Latest  Kind    Platform\n----         -------  ------  ------  ----    --------\nlog          0.4.22   0.4.27  0.4.27  Normal  ---\nmemory_addr  0.3.0    0.3.2   0.4.0   Normal  ---\nspin         0.9.8    ---     0.10.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks violation]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=arm_vgic, checker=SemverChecks\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/arm_vgic\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \ntimestamp=2025-06-28 14:45:54.77379498 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building arm_vgic v0.0.0 (current)\nerror: running cargo-doc on crate 'arm_vgic' failed with output:\n-----\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling rustversion v1.0.21\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n   Compiling x86 v0.52.0\n    Checking volatile v0.4.6\n    Checking bitflags v2.9.1\n    Checking raw-cpuid v10.7.0\n    Checking memory_addr v0.4.0\n   Compiling axerrno v0.1.0\n   Compiling autocfg v1.5.0\n   Compiling quote v1.0.40\n    Checking x86_64 v0.15.2\n    Checking log v0.4.27\n   Compiling lock_api v0.4.13\n   Compiling syn v2.0.104\n    Checking memory_addr v0.3.2\n   Compiling serde v1.0.219\n    Checking memory_set v0.3.2\n    Checking scopeguard v1.2.0\n    Checking lazyinit v0.2.2\n    Checking numeric-enum-macro v0.2.0\n    Checking cfg-if v1.0.1\n    Checking tock-registers v0.8.1\n    Checking spin v0.9.8\n    Checking page_table_entry v0.5.4\n    Checking page_table_multiarch v0.5.4\n    Checking axaddrspace v0.1.0 (https://github.com/arceos-hypervisor/axaddrspace.git#2ed4d076)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n110 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> EPTEntry`\n               found signature `fn(PhysAddr) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 -     fn new_table(paddr: HostPhysAddr) -> Self {\n117 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&EPTEntry) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 -     fn paddr(&self) -> HostPhysAddr {\n121 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut EPTEntry, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n127 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: /home/runner/.cargo/git/checkouts/axaddrspace-0a115128c9343544/2ed4d07/src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate arm_vgic v0.0.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_2/arceos-hypervisor/arm_vgic &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate arm_vgic v0.0.0\n"
            ]
          }
        },
        {
          "file": "src/vgicc.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_2/arceos-hypervisor/arm_vgic/src/vgicc.rs (original lines from 1 to 1)\n-\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Atomvchecker",
    "Outdated",
    "Geiger",
    "Unused Deps",
    "Unformatted"
  ]
}