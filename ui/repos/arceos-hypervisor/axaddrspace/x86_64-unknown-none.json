{
  "repo": {
    "user": "arceos-hypervisor",
    "repo": "axaddrspace"
  },
  "data": [
    {
      "user": "arceos-hypervisor",
      "repo": "axaddrspace",
      "pkg": "axaddrspace",
      "count": 19,
      "raw_reports": [
        {
          "file": "src/npt/arch/x86_64.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Error)": [
              "error[E0053]: method `new_page` has an incompatible type for trait\n   --> src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> npt::arch::x86_64::EPTEntry`\n               found signature `fn(memory_addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> npt::arch::x86_64::EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n110 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\n",
              "error[E0053]: method `new_table` has an incompatible type for trait\n   --> src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> npt::arch::x86_64::EPTEntry`\n               found signature `fn(memory_addr::PhysAddr) -> npt::arch::x86_64::EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 -     fn new_table(paddr: HostPhysAddr) -> Self {\n117 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\n",
              "error[E0053]: method `paddr` has an incompatible type for trait\n   --> src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(&npt::arch::x86_64::EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&npt::arch::x86_64::EPTEntry) -> memory_addr::PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 -     fn paddr(&self) -> HostPhysAddr {\n121 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\n",
              "error[E0053]: method `set_paddr` has an incompatible type for trait\n   --> src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(&mut npt::arch::x86_64::EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut npt::arch::x86_64::EPTEntry, memory_addr::PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n127 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\n"
            ]
          }
        },
        {
          "file": "src/address_space/mod.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Clippy(Error)": [
              "error[E0308]: mismatched types\n   --> src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `memory_addr::PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `core::option::Option<memory_addr::PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
              "error[E0308]: mismatched types\n   --> src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `core::option::Option<(memory_addr::PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "(virtual) clippy",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=axaddrspace, checker=Clippy\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axaddrspace\n// cmd=cargo clippy --target x86_64-unknown-none  --no-deps\n// timestamp=2025-06-28 14:46:19.301021399 +08:00:00\n    Checking bit_field v0.10.2\n    Checking volatile v0.4.6\n    Checking bitflags v1.3.2\n    Checking bitflags v2.9.1\n    Checking raw-cpuid v10.7.0\n   Compiling x86 v0.52.0\n    Checking log v0.4.27\n    Checking memory_addr v0.4.0\n    Checking x86_64 v0.15.2\n   Compiling axerrno v0.1.0\n    Checking memory_addr v0.3.2\n    Checking lazyinit v0.2.2\n    Checking memory_set v0.3.2\n    Checking numeric-enum-macro v0.2.0\n    Checking cfg-if v1.0.1\n    Checking page_table_entry v0.5.4\n    Checking page_table_multiarch v0.5.4\n    Checking axaddrspace v0.1.0 (/home/runner/check/batch_2/arceos-hypervisor/axaddrspace)\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=axaddrspace, checker=Lockbud\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axaddrspace\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-none \n// timestamp=2025-06-28 14:46:34.910858249 +08:00:00\n   Compiling rustversion v1.0.21\n   Compiling bit_field v0.10.2\n   Compiling volatile v0.4.6\n   Compiling bitflags v2.9.1\n   Compiling bitflags v1.3.2\n   Compiling x86 v0.52.0\n   Compiling raw-cpuid v10.7.0\n   Compiling log v0.4.27\n   Compiling axerrno v0.1.0\n[2025-06-28T06:46:35Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:46:35Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling memory_addr v0.4.0\n   Compiling memory_addr v0.3.2\n   Compiling memory_set v0.3.2\n   Compiling numeric-enum-macro v0.2.0\n   Compiling cfg-if v1.0.1\n   Compiling lazyinit v0.2.2\n   Compiling x86_64 v0.15.2\n   Compiling page_table_entry v0.5.4\n   Compiling page_table_multiarch v0.5.4\n   Compiling axaddrspace v0.1.0 (/home/runner/check/batch_2/arceos-hypervisor/axaddrspace)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> npt::arch::x86_64::EPTEntry`\n               found signature `fn(memory_addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> npt::arch::x86_64::EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 |     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> npt::arch::x86_64::EPTEntry`\n               found signature `fn(memory_addr::PhysAddr) -> npt::arch::x86_64::EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 |     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(&npt::arch::x86_64::EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&npt::arch::x86_64::EPTEntry) -> memory_addr::PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 |     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(&mut npt::arch::x86_64::EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut npt::arch::x86_64::EPTEntry, memory_addr::PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 |     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n   --> src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `memory_addr::PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `core::option::Option<memory_addr::PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `core::option::Option<(memory_addr::PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `memory_addr::PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::PhysAddr`\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=axaddrspace, checker=SemverChecks\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axaddrspace\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \n// timestamp=2025-06-28 14:46:25.825265867 +08:00:00\n    Building axaddrspace v0.1.0 (current)\nerror: running cargo-doc on crate 'axaddrspace' failed with output:\n-----\n   Compiling rustversion v1.0.21\n    Checking bit_field v0.10.2\n    Checking volatile v0.4.6\n    Checking bitflags v2.9.1\n    Checking bitflags v1.3.2\n   Compiling x86 v0.52.0\n    Checking raw-cpuid v10.7.0\n   Compiling axerrno v0.1.0\n    Checking memory_addr v0.4.0\n    Checking log v0.4.27\n    Checking memory_addr v0.3.2\n    Checking cfg-if v1.0.1\n    Checking memory_set v0.3.2\n    Checking numeric-enum-macro v0.2.0\n    Checking lazyinit v0.2.2\n    Checking x86_64 v0.15.2\n    Checking page_table_entry v0.5.4\n    Checking page_table_multiarch v0.5.4\n Documenting axaddrspace v0.1.0 (/home/runner/check/batch_2/arceos-hypervisor/axaddrspace)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/check/batch_2/arceos-hypervisor/axaddrspace/src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> npt::arch::x86_64::EPTEntry`\n               found signature `fn(memory_addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> npt::arch::x86_64::EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n110 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/check/batch_2/arceos-hypervisor/axaddrspace/src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> npt::arch::x86_64::EPTEntry`\n               found signature `fn(memory_addr::PhysAddr) -> npt::arch::x86_64::EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 -     fn new_table(paddr: HostPhysAddr) -> Self {\n117 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/check/batch_2/arceos-hypervisor/axaddrspace/src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(&npt::arch::x86_64::EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&npt::arch::x86_64::EPTEntry) -> memory_addr::PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 -     fn paddr(&self) -> HostPhysAddr {\n121 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/check/batch_2/arceos-hypervisor/axaddrspace/src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(&mut npt::arch::x86_64::EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut npt::arch::x86_64::EPTEntry, memory_addr::PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n127 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nFor more information about this error, try `rustc --explain E0053`.\nerror: could not document `axaddrspace`\n\n-----\n\nerror: failed to build rustdoc for crate axaddrspace v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_2/arceos-hypervisor/axaddrspace --features arm-el2,default &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axaddrspace v0.1.0\n"
            ]
          }
        },
        {
          "file": "(virtual) udeps",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=axaddrspace, checker=Udeps\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axaddrspace\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target x86_64-unknown-none \n// timestamp=2025-06-28 14:46:48.144983202 +08:00:00\n    Checking bit_field v0.10.2\n    Checking bitflags v2.9.1\n    Checking volatile v0.4.6\n    Checking bitflags v1.3.2\n    Checking raw-cpuid v10.7.0\n   Compiling x86 v0.52.0\n    Checking memory_addr v0.4.0\n    Checking log v0.4.27\n    Checking x86_64 v0.15.2\n   Compiling axerrno v0.1.0\n    Checking memory_addr v0.3.2\n    Checking memory_set v0.3.2\n    Checking numeric-enum-macro v0.2.0\n    Checking lazyinit v0.2.2\n    Checking cfg-if v1.0.1\n    Checking page_table_entry v0.5.4\n    Checking page_table_multiarch v0.5.4\n    Checking axaddrspace v0.1.0 (/home/runner/check/batch_2/arceos-hypervisor/axaddrspace)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n110 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> EPTEntry`\n               found signature `fn(PhysAddr) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 -     fn new_table(paddr: HostPhysAddr) -> Self {\n117 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&EPTEntry) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 -     fn paddr(&self) -> HostPhysAddr {\n121 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut EPTEntry, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n127 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nerror[E0308]: mismatched types\n   --> src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\n"
            ]
          }
        },
        {
          "file": "Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n└── riscv 0.14.0\n    └── page_table_multiarch 0.5.4\n        └── axaddrspace 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 787,\n    \"last-commit\": \"7573f55ba337263f61167dbb0ea926cdc7c8eb5d\",\n    \"last-updated\": \"2025-06-17T11:04:25+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 26\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[Lockbud] deadlock detection",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-06-28T06:46:35Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T06:46:35Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[Udeps] Unused dependencies",
          "features": "",
          "count": 1,
          "kinds": {
            "Unused Deps": [
              "pkg=axaddrspace, checker=Udeps\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axaddrspace\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target x86_64-unknown-none \ntimestamp=2025-06-28 14:46:49.603327748 +08:00:00\n\n\nstdout:\n\nstderr:\n    Checking bit_field v0.10.2\n    Checking bitflags v2.9.1\n    Checking volatile v0.4.6\n    Checking bitflags v1.3.2\n    Checking raw-cpuid v10.7.0\n   Compiling x86 v0.52.0\n    Checking memory_addr v0.4.0\n    Checking log v0.4.27\n    Checking x86_64 v0.15.2\n   Compiling axerrno v0.1.0\n    Checking memory_addr v0.3.2\n    Checking memory_set v0.3.2\n    Checking numeric-enum-macro v0.2.0\n    Checking lazyinit v0.2.2\n    Checking cfg-if v1.0.1\n    Checking page_table_entry v0.5.4\n    Checking page_table_multiarch v0.5.4\n    Checking axaddrspace v0.1.0 (/home/runner/check/batch_2/arceos-hypervisor/axaddrspace)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\n               found signature `fn(PhysAddr, page_table_multiarch::MappingFlags, _) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n110 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> EPTEntry`\n               found signature `fn(PhysAddr) -> EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 -     fn new_table(paddr: HostPhysAddr) -> Self {\n117 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&EPTEntry) -> PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 -     fn paddr(&self) -> HostPhysAddr {\n121 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\n    = note: expected signature `fn(&mut EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut EPTEntry, PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n127 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nerror[E0308]: mismatched types\n   --> src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> src/address_space/mod.rs:47:9\n    |\n46  |     pub const fn page_table_root(&self) -> PhysAddr {\n    |                                            -------- expected `PhysAddr` because of return type\n47  |         self.pt.root_paddr()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> src/address_space/mod.rs:170:9\n    |\n166 |       pub fn translate(&self, vaddr: GuestPhysAddr) -> Option<PhysAddr> {\n    |                                                        ---------------- expected `Option<PhysAddr>` because of return type\n...\n170 | /         self.pt\n171 | |             .query(vaddr)\n172 | |             .map(|(phys_addr, _, _)| {\n173 | |                 debug!(\"vaddr {:?} translate to {:?}\", vaddr, phys_addr);\n174 | |                 phys_addr\n175 | |             })\n176 | |             .ok()\n    | |_________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n   --> src/address_space/mod.rs:239:13\n    |\n234 |       pub fn translate_and_get_limit(&self, vaddr: GuestPhysAddr) -> Option<(PhysAddr, usize)> {\n    |                                                                      ------------------------- expected `Option<(PhysAddr, usize)>` because of return type\n...\n239 | /             self.pt\n240 | |                 .query(vaddr)\n241 | |                 .map(|(phys_addr, _, _)| (phys_addr, area.size()))\n242 | |                 .ok()\n    | |_____________________^ expected `PhysAddr`, found `memory_addr::addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n456 |   }\n    |   ^ this is the expected type `PhysAddr`\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nSome errors have detailed explanations: E0053, E0308.\nFor more information about an error, try `rustc --explain E0053`.\nerror: could not compile `axaddrspace` (lib) due to 9 previous errors\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=axaddrspace, checker=Outdated\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axaddrspace\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-06-28 14:46:44.305256859 +08:00:00\n\nName         Project  Compat  Latest  Kind    Platform\n----         -------  ------  ------  ----    --------\nmemory_addr  0.3.2    ---     0.4.0   Normal  ---\nmemory_set   0.3.2    ---     0.4.0   Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks violation]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=axaddrspace, checker=SemverChecks\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_2/arceos-hypervisor/axaddrspace\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \ntimestamp=2025-06-28 14:46:27.69653832 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building axaddrspace v0.1.0 (current)\nerror: running cargo-doc on crate 'axaddrspace' failed with output:\n-----\n   Compiling rustversion v1.0.21\n    Checking bit_field v0.10.2\n    Checking volatile v0.4.6\n    Checking bitflags v2.9.1\n    Checking bitflags v1.3.2\n   Compiling x86 v0.52.0\n    Checking raw-cpuid v10.7.0\n   Compiling axerrno v0.1.0\n    Checking memory_addr v0.4.0\n    Checking log v0.4.27\n    Checking memory_addr v0.3.2\n    Checking cfg-if v1.0.1\n    Checking memory_set v0.3.2\n    Checking numeric-enum-macro v0.2.0\n    Checking lazyinit v0.2.2\n    Checking x86_64 v0.15.2\n    Checking page_table_entry v0.5.4\n    Checking page_table_multiarch v0.5.4\n Documenting axaddrspace v0.1.0 (/home/runner/check/batch_2/arceos-hypervisor/axaddrspace)\nerror[E0053]: method `new_page` has an incompatible type for trait\n   --> /home/runner/check/batch_2/arceos-hypervisor/axaddrspace/src/npt/arch/x86_64.rs:110:24\n    |\n110 |     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> npt::arch::x86_64::EPTEntry`\n               found signature `fn(memory_addr::PhysAddr, page_table_multiarch::MappingFlags, _) -> npt::arch::x86_64::EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n110 -     fn new_page(paddr: HostPhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n110 +     fn new_page(paddr: memory_addr::addr::PhysAddr, flags: MappingFlags, is_huge: bool) -> Self {\n    |\n\nerror[E0053]: method `new_table` has an incompatible type for trait\n   --> /home/runner/check/batch_2/arceos-hypervisor/axaddrspace/src/npt/arch/x86_64.rs:117:25\n    |\n117 |     fn new_table(paddr: HostPhysAddr) -> Self {\n    |                         ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(memory_addr::addr::PhysAddr) -> npt::arch::x86_64::EPTEntry`\n               found signature `fn(memory_addr::PhysAddr) -> npt::arch::x86_64::EPTEntry`\nhelp: change the parameter type to match the trait\n    |\n117 -     fn new_table(paddr: HostPhysAddr) -> Self {\n117 +     fn new_table(paddr: memory_addr::addr::PhysAddr) -> Self {\n    |\n\nerror[E0053]: method `paddr` has an incompatible type for trait\n   --> /home/runner/check/batch_2/arceos-hypervisor/axaddrspace/src/npt/arch/x86_64.rs:121:24\n    |\n121 |     fn paddr(&self) -> HostPhysAddr {\n    |                        ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(&npt::arch::x86_64::EPTEntry) -> memory_addr::addr::PhysAddr`\n               found signature `fn(&npt::arch::x86_64::EPTEntry) -> memory_addr::PhysAddr`\nhelp: change the output type to match the trait\n    |\n121 -     fn paddr(&self) -> HostPhysAddr {\n121 +     fn paddr(&self) -> memory_addr::addr::PhysAddr {\n    |\n\nerror[E0053]: method `set_paddr` has an incompatible type for trait\n   --> /home/runner/check/batch_2/arceos-hypervisor/axaddrspace/src/npt/arch/x86_64.rs:127:36\n    |\n127 |     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n    |                                    ^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\n    = note: expected signature `fn(&mut npt::arch::x86_64::EPTEntry, memory_addr::addr::PhysAddr)`\n               found signature `fn(&mut npt::arch::x86_64::EPTEntry, memory_addr::PhysAddr)`\nhelp: change the parameter type to match the trait\n    |\n127 -     fn set_paddr(&mut self, paddr: HostPhysAddr) {\n127 +     fn set_paddr(&mut self, paddr: memory_addr::addr::PhysAddr) {\n    |\n\nFor more information about this error, try `rustc --explain E0053`.\nerror: could not document `axaddrspace`\n\n-----\n\nerror: failed to build rustdoc for crate axaddrspace v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_2/arceos-hypervisor/axaddrspace --features arm-el2,default &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axaddrspace v0.1.0\n"
            ]
          }
        },
        {
          "file": "src/address_space/backend/alloc.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Error)": [
              "error[E0308]: mismatched types\n   --> src/address_space/backend/alloc.rs:46:23\n    |\n46  |                 |_va| PhysAddr::from(0),\n    |                       ^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
            ]
          }
        },
        {
          "file": "src/address_space/backend/linear.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Error)": [
              "error[E0308]: mismatched types\n   --> src/address_space/backend/linear.rs:32:18\n    |\n32  |             |va| PhysAddr::from(va.as_usize() - pa_va_offset),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `memory_addr::addr::PhysAddr`, found `memory_addr::PhysAddr`\n    |\nnote: two different versions of crate `memory_addr` are being used; two types coming from two different versions of the same crate are different types even if they look the same\n    |\n   ::: src/address_space/mod.rs:7:5\n    |\n7   |   use page_table_multiarch::PagingHandler;\n    |       -------------------- one version of crate `memory_addr` used here, as a dependency of crate `page_table_entry`\n    |\n   ::: src/addr.rs:1:5\n    |\n1   |   use memory_addr::{AddrRange, PhysAddr, VirtAddr, def_usize_addr, def_usize_addr_formatter};\n    |       ----------- one version of crate `memory_addr` used here, as a direct dependency of the current crate\n    |\n   ::: /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.4.0/src/addr.rs:456:1\n    |\n456 |   }\n    |   ^ this is the expected type `memory_addr::addr::PhysAddr`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memory_addr-0.3.2/src/addr.rs:450:1\n    |\n450 | / def_usize_addr! {\n451 | |     /// A physical memory address.\n452 | |     pub type PhysAddr;\n...   |\n455 | |     pub type VirtAddr;\n456 | | }\n    | |_^ this is the found type `memory_addr::PhysAddr`\n    = help: you can use `cargo tree` to explore your dependency tree\n    = note: this error originates in the macro `def_usize_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Atomvchecker",
    "Outdated",
    "Geiger",
    "Unused Deps",
    "Unformatted"
  ]
}