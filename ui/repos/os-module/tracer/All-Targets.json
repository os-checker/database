{
  "repo": {
    "user": "os-module",
    "repo": "tracer"
  },
  "data": [
    {
      "user": "os-module",
      "repo": "tracer",
      "pkg": "tracer",
      "count": 24,
      "raw_reports": [
        {
          "file": "src/dwarf/unwinder.rs",
          "features": "",
          "count": 10,
          "kinds": {
            "Clippy(Warn)": [
              "warning: field `0` is never read\n  --> src/dwarf/unwinder.rs:99:24\n   |\n99 |     UnexpectedRegister(Register),\n   |     ------------------ ^^^^^^^^\n   |     |\n   |     field in this variant\n   |\n   = note: `UnwinderError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n   = note: `#[warn(dead_code)]` on by default\nhelp: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\n   |\n99 -     UnexpectedRegister(Register),\n99 +     UnexpectedRegister(()),\n   |\n\n",
              "warning: field `0` is never read\n   --> src/dwarf/unwinder.rs:101:28\n    |\n101 |     CfaRuleUnknownRegister(Register),\n    |     ---------------------- ^^^^^^^^\n    |     |\n    |     field in this variant\n    |\n    = note: `UnwinderError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\nhelp: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\n    |\n101 -     CfaRuleUnknownRegister(Register),\n101 +     CfaRuleUnknownRegister(()),\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/dwarf/unwinder.rs:123:9\n    |\n123 |         trace!(\"hdr: {:#x?}, len: {}\", hdr, hdr_len);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n123 -         trace!(\"hdr: {:#x?}, len: {}\", hdr, hdr_len);\n123 +         trace!(\"hdr: {hdr:#x?}, len: {hdr_len}\");\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/dwarf/unwinder.rs:124:9\n    |\n124 |         trace!(\"eh_frame: {:#x?}, len: {}\", eh_frame, eh_frame_len);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n124 -         trace!(\"eh_frame: {:#x?}, len: {}\", eh_frame, eh_frame_len);\n124 +         trace!(\"eh_frame: {eh_frame:#x?}, len: {eh_frame_len}\");\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/dwarf/unwinder.rs:197:9\n    |\n197 |         trace!(\"row: {:#x?}\", row);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n197 -         trace!(\"row: {:#x?}\", row);\n197 +         trace!(\"row: {row:#x?}\");\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/dwarf/unwinder.rs:213:13\n    |\n213 |             trace!(\"reg: {:?}, rule: {:?}\", reg, rule);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n213 -             trace!(\"reg: {:?}, rule: {:?}\", reg, rule);\n213 +             trace!(\"reg: {reg:?}, rule: {rule:?}\");\n    |\n\n"
            ],
            "Mirai": [
              "warning: field `0` is never read\n  --> src/dwarf/unwinder.rs:99:24\n   |\n99 |     UnexpectedRegister(Register),\n   |     ------------------ ^^^^^^^^\n   |     |\n   |     field in this variant\n   |\n   = note: `UnwinderError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n   = note: `#[warn(dead_code)]` on by default\nhelp: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\n   |\n99 |     UnexpectedRegister(()),\n   |                        ~~\n\n",
              "warning: field `0` is never read\n   --> src/dwarf/unwinder.rs:101:28\n    |\n101 |     CfaRuleUnknownRegister(Register),\n    |     ---------------------- ^^^^^^^^\n    |     |\n    |     field in this variant\n    |\n    = note: `UnwinderError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\nhelp: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\n    |\n101 |     CfaRuleUnknownRegister(()),\n    |                            ~~\n\n"
            ],
            "Unformatted": [
              "file: /home/runner/check/batch_6/os-module/tracer/src/dwarf/unwinder.rs (original lines from 2 to 2)\n+use crate::utils::read_value;\n",
              "file: /home/runner/check/batch_6/os-module/tracer/src/dwarf/unwinder.rs (original lines from 13 to 13)\n-use crate::utils::read_value;\n"
            ]
          }
        },
        {
          "file": "src/compiler.rs",
          "features": "",
          "count": 6,
          "kinds": {
            "Clippy(Warn)": [
              "warning: variables can be used directly in the `format!` string\n  --> src/compiler.rs:57:25\n   |\n57 |                         trace!(\"[CADDI] {:#b}\", imm);\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n   = note: `#[warn(clippy::uninlined_format_args)]` on by default\nhelp: change this to\n   |\n57 -                         trace!(\"[CADDI] {:#b}\", imm);\n57 +                         trace!(\"[CADDI] {imm:#b}\");\n   |\n\n",
              "warning: unneeded `return` statement\n   --> src/compiler.rs:97:5\n    |\n97  | /     return match opcode {\n98  | |         0b0100011 => {\n99  | |             // 四字节的sd指令\n100 | |             let func = ins.get_bits(12..=14);\n...   |\n139 | |     };\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n    = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n    |\n97  ~     match opcode {\n98  +         0b0100011 => {\n99  ~             // 四字节的sd指令\n100 +             let func = ins.get_bits(12..=14);\n101 +             if func != 0b011 {\n102 +                 return None;\n103 +             }\n104 +             let rd = ins.get_bits(15..=19); // sp\n105 +             let rt = ins.get_bits(20..=24); // ra\n106 +             if rd != 2 || rt != 1 {\n107 +                 return None;\n108 +             }\n109 +             let mut imm = 0u32;\n110 +             imm.set_bits(0..=4, ins.get_bits(7..=11));\n111 +             imm.set_bits(5..=11, ins.get_bits(25..=31));\n112 +             for i in 12..32 {\n113 +                 imm.set_bit(i, imm.get_bit(11));\n114 +             }\n115 +             let imm = imm as isize;\n116 +             if imm > 0 {\n117 +                 Some(imm as u32)\n118 +             } else {\n119 +                 None\n120 +             }\n121 +         }\n122 +         _ => {\n123 ~             // 2字节的sd指令\n124 +             // c.sdsp\n125 +             // 111 [uimm5:3 8:6] rt 10\n126 +             let short_ins = ins.get_bits(0..16);\n127 +             let high = short_ins.get_bits(13..16);\n128 +             let low = short_ins.get_bits(0..2);\n129 +             match (high, low) {\n130 +                 (0b111, 0b10) => {\n131 +                     let mut imm = 0u32;\n132 +                     imm.set_bits(3..6, short_ins.get_bits(10..13));\n133 +                     imm.set_bits(6..9, short_ins.get_bits(7..10));\n134 +                     Some(imm)\n135 +                 }\n136 +                 (_, _) => None,\n137 +             }\n138 +         }\n139 ~     }\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/compiler.rs:234:17\n    |\n234 |                 info!(\"addr: {:#x}, scan short_ins: {:?}\", start, ins);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n234 -                 info!(\"addr: {:#x}, scan short_ins: {:?}\", start, ins);\n234 +                 info!(\"addr: {start:#x}, scan short_ins: {ins:?}\");\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/compiler.rs:252:17\n    |\n252 |                 info!(\"addr: {:#x}, scan ins: {:?}\", start, ins);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n252 -                 info!(\"addr: {:#x}, scan ins: {:?}\", start, ins);\n252 +                 info!(\"addr: {start:#x}, scan ins: {ins:?}\");\n    |\n\n",
              "warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> src/compiler.rs:253:17\n    |\n253 | /                 match ins {\n254 | |                     InstructionSp::Addi(x) => {\n255 | |                         stack_size += x;\n...   |\n258 | |                 }\n    | |_________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match\n    = note: `#[warn(clippy::single_match)]` on by default\nhelp: try\n    |\n253 ~                 if let InstructionSp::Addi(x) = ins {\n254 +                     stack_size += x;\n255 +                 }\n    |\n\n",
              "warning: variables can be used directly in the `format!` string\n   --> src/compiler.rs:266:9\n    |\n266 | /         info!(\n267 | |             \"after scan, stack size :{} ra_addr:{:#x}, ra: {:#x}\",\n268 | |             stack_size, ra_addr, ra\n269 | |         );\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n"
            ]
          }
        },
        {
          "file": "src/lib.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: the feature `return_position_impl_trait_in_trait` has been stable since 1.75.0 and no longer requires an attribute to enable\n --> src/lib.rs:1:12\n  |\n1 | #![feature(return_position_impl_trait_in_trait)]\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\n"
            ],
            "Mirai": [
              "warning: the feature `return_position_impl_trait_in_trait` has been stable since 1.75.0 and no longer requires an attribute to enable\n --> src/lib.rs:1:12\n  |\n1 | #![feature(return_position_impl_trait_in_trait)]\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=tracer, checker=SemverChecks\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_6/os-module/tracer\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \n// timestamp=2025-06-28 15:59:07.082782789 +08:00:00\n    Building tracer v0.2.0 (current)\n       Built [   1.263s] (current)\n     Parsing tracer v0.2.0 (current)\n      Parsed [   0.002s] (current)\nerror: `cargo metadata` exited with an error:     Updating crates.io index\nerror: failed to select a version for the requirement `tracer = \"=0.1.0\"`\n  version 0.1.0 is yanked\nlocation searched: crates.io index\nrequired by package `placeholder v0.0.0 (/home/runner/check/batch_6/os-module/tracer/target/semver-checks/registry-tracer-0_1_0-x86_64_unknown_linux_gnu-01666ec060466c14)`\n\n"
            ]
          }
        },
        {
          "file": "[Geiger] Unsafe code statistics",
          "features": "",
          "count": 1,
          "kinds": {
            "Geiger": [
              "pkg=tracer, checker=Geiger\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_6/os-module/tracer\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu geiger --output-format Ascii\ntimestamp=2025-06-28 15:59:16.619891089 +08:00:00\n\n\nMetric output format: x/y\n    x = unsafe code used by the build\n    y = total unsafe code found in the crate\n\nSymbols:\n    :) = No `unsafe` usage found, declares #![forbid(unsafe_code)]\n    ?  = No `unsafe` usage found, missing #![forbid(unsafe_code)]\n    !  = `unsafe` usage found\n\nFunctions  Expressions  Impls  Traits  Methods  Dependency\n\n0/0        16/16        0/0    0/0     0/0      !  tracer 0.2.0\n0/0        0/0          0/0    0/0     0/0      ?  |-- bit_field 0.10.2\n0/0        29/48        1/3    1/1     0/0      !  |-- gimli 0.26.2\n2/2        18/18        1/1    0/0     0/0      !  `-- log 0.4.27\n\n2/2        63/82        2/4    1/1     0/0\n\n"
            ]
          }
        },
        {
          "file": "[Lockbud] deadlock detection",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-06-28T07:59:10Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-06-28T07:59:10Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=tracer, checker=Outdated\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_6/os-module/tracer\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-06-28 15:59:14.693543028 +08:00:00\n\nName   Project  Compat  Latest  Kind    Platform\n----   -------  ------  ------  ----    --------\ngimli  0.26.2   ---     0.32.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks violation]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=tracer, checker=SemverChecks\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_6/os-module/tracer\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \ntimestamp=2025-06-28 15:59:08.975295926 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building tracer v0.2.0 (current)\n       Built [   1.263s] (current)\n     Parsing tracer v0.2.0 (current)\n      Parsed [   0.002s] (current)\nerror: `cargo metadata` exited with an error:     Updating crates.io index\nerror: failed to select a version for the requirement `tracer = \"=0.1.0\"`\n  version 0.1.0 is yanked\nlocation searched: crates.io index\nrequired by package `placeholder v0.0.0 (/home/runner/check/batch_6/os-module/tracer/target/semver-checks/registry-tracer-0_1_0-x86_64_unknown_linux_gnu-01666ec060466c14)`\n\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Atomvchecker",
    "Outdated",
    "Geiger",
    "Unused Deps",
    "Unformatted"
  ]
}