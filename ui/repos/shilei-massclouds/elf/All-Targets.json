{
  "repo": {
    "user": "shilei-massclouds",
    "repo": "elf"
  },
  "data": [
    {
      "user": "shilei-massclouds",
      "repo": "elf",
      "pkg": "elf",
      "count": 30,
      "raw_reports": [
        {
          "file": "src/parse.rs",
          "features": "",
          "count": 12,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unexpected `cfg` condition value: `std`\n  --> src/parse.rs:62:7\n   |\n62 | #[cfg(feature = \"std\")]\n   |       ^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `nightly`\n   = help: consider adding `std` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: unexpected `cfg` condition value: `std`\n  --> src/parse.rs:86:36\n   |\n86 | #[cfg(all(feature = \"nightly\", not(feature = \"std\")))]\n   |                                    ^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `nightly`\n   = help: consider adding `std` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: unexpected `cfg` condition value: `std`\n   --> src/parse.rs:193:7\n    |\n193 | #[cfg(feature = \"std\")]\n    |       ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: unexpected `cfg` condition value: `std`\n  --> src/parse.rs:56:11\n   |\n56 |     #[cfg(feature = \"std\")]\n   |           ^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `nightly`\n   = help: consider adding `std` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: unexpected `cfg` condition value: `std`\n   --> src/parse.rs:169:19\n    |\n169 |             #[cfg(feature = \"std\")]\n    |                   ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: the following explicit lifetimes could be elided: 'data\n   --> src/parse.rs:256:6\n    |\n256 | impl<'data, E: EndianParse, P: ParseAt> Iterator for ParsingIterator<'data, E, P> {\n    |      ^^^^^                                                           ^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n256 - impl<'data, E: EndianParse, P: ParseAt> Iterator for ParsingIterator<'data, E, P> {\n256 + impl<E: EndianParse, P: ParseAt> Iterator for ParsingIterator<'_, E, P> {\n    |\n\n",
              "warning: the following explicit lifetimes could be elided: 'data\n   --> src/parse.rs:256:6\n    |\n256 | impl<'data, E: EndianParse, P: ParseAt> Iterator for ParsingIterator<'data, E, P> {\n    |      ^^^^^                                                           ^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n256 - impl<'data, E: EndianParse, P: ParseAt> Iterator for ParsingIterator<'data, E, P> {\n256 + impl<E: EndianParse, P: ParseAt> Iterator for ParsingIterator<'_, E, P> {\n    |\n\n"
            ],
            "Mirai": [
              "warning: unexpected `cfg` condition value: `std`\n  --> src/parse.rs:62:7\n   |\n62 | #[cfg(feature = \"std\")]\n   |       ^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `nightly`\n   = help: consider adding `std` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: unexpected `cfg` condition value: `std`\n  --> src/parse.rs:86:36\n   |\n86 | #[cfg(all(feature = \"nightly\", not(feature = \"std\")))]\n   |                                    ^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `nightly`\n   = help: consider adding `std` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: unexpected `cfg` condition value: `std`\n   --> src/parse.rs:193:7\n    |\n193 | #[cfg(feature = \"std\")]\n    |       ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: unexpected `cfg` condition value: `std`\n  --> src/parse.rs:56:11\n   |\n56 |     #[cfg(feature = \"std\")]\n   |           ^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `nightly`\n   = help: consider adding `std` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: unexpected `cfg` condition value: `std`\n   --> src/parse.rs:169:19\n    |\n169 |             #[cfg(feature = \"std\")]\n    |                   ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
            ]
          }
        },
        {
          "file": "src/lib.rs",
          "features": "",
          "count": 10,
          "kinds": {
            "Mirai": [
              "warning: unexpected `cfg` condition value: `std`\n   --> src/lib.rs:128:17\n    |\n128 | #![cfg_attr(not(feature = \"std\"), no_std)]\n    |                 ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
              "warning: unexpected `cfg` condition value: `std`\n   --> src/lib.rs:129:42\n    |\n129 | #![cfg_attr(all(feature = \"nightly\", not(feature = \"std\")), feature(error_in_core))]\n    |                                          ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: unexpected `cfg` condition value: `to_str`\n   --> src/lib.rs:148:7\n    |\n148 | #[cfg(feature = \"to_str\")]\n    |       ^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `to_str` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: unexpected `cfg` condition value: `std`\n   --> src/lib.rs:158:7\n    |\n158 | #[cfg(feature = \"std\")]\n    |       ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: unexpected `cfg` condition value: `std`\n   --> src/lib.rs:160:7\n    |\n160 | #[cfg(feature = \"std\")]\n    |       ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
            ],
            "Clippy(Warn)": [
              "warning: unexpected `cfg` condition value: `std`\n   --> src/lib.rs:128:17\n    |\n128 | #![cfg_attr(not(feature = \"std\"), no_std)]\n    |                 ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
              "warning: unexpected `cfg` condition value: `std`\n   --> src/lib.rs:129:42\n    |\n129 | #![cfg_attr(all(feature = \"nightly\", not(feature = \"std\")), feature(error_in_core))]\n    |                                          ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: unexpected `cfg` condition value: `to_str`\n   --> src/lib.rs:148:7\n    |\n148 | #[cfg(feature = \"to_str\")]\n    |       ^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `to_str` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: unexpected `cfg` condition value: `std`\n   --> src/lib.rs:158:7\n    |\n158 | #[cfg(feature = \"std\")]\n    |       ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
              "warning: unexpected `cfg` condition value: `std`\n   --> src/lib.rs:160:7\n    |\n160 | #[cfg(feature = \"std\")]\n    |       ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
            ]
          }
        },
        {
          "file": "src/gnu_symver.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning: the following explicit lifetimes could be elided: 'data\n   --> src/gnu_symver.rs:394:6\n    |\n394 | impl<'data, E: EndianParse> Iterator for VerDefAuxIterator<'data, E> {\n    |      ^^^^^                                                 ^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n    = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n    |\n394 - impl<'data, E: EndianParse> Iterator for VerDefAuxIterator<'data, E> {\n394 + impl<E: EndianParse> Iterator for VerDefAuxIterator<'_, E> {\n    |\n\n",
              "warning: the following explicit lifetimes could be elided: 'data\n   --> src/gnu_symver.rs:394:6\n    |\n394 | impl<'data, E: EndianParse> Iterator for VerDefAuxIterator<'data, E> {\n    |      ^^^^^                                                 ^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n    = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n    |\n394 - impl<'data, E: EndianParse> Iterator for VerDefAuxIterator<'data, E> {\n394 + impl<E: EndianParse> Iterator for VerDefAuxIterator<'_, E> {\n    |\n\n",
              "warning: the following explicit lifetimes could be elided: 'data\n   --> src/gnu_symver.rs:631:6\n    |\n631 | impl<'data, E: EndianParse> Iterator for VerNeedAuxIterator<'data, E> {\n    |      ^^^^^                                                  ^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n631 - impl<'data, E: EndianParse> Iterator for VerNeedAuxIterator<'data, E> {\n631 + impl<E: EndianParse> Iterator for VerNeedAuxIterator<'_, E> {\n    |\n\n",
              "warning: the following explicit lifetimes could be elided: 'data\n   --> src/gnu_symver.rs:631:6\n    |\n631 | impl<'data, E: EndianParse> Iterator for VerNeedAuxIterator<'data, E> {\n    |      ^^^^^                                                  ^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n631 - impl<'data, E: EndianParse> Iterator for VerNeedAuxIterator<'data, E> {\n631 + impl<E: EndianParse> Iterator for VerNeedAuxIterator<'_, E> {\n    |\n\n"
            ]
          }
        },
        {
          "file": "src/abi.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Warn)": [
              "warning: empty lines after doc comment\n   --> src/abi.rs:101:1\n    |\n101 | / /// 64-255 Architecture-specific value range\n...   |\n106 | |\n    | |_^\n107 |   /// No file type\n108 |   pub const ET_NONE: u16 = 0;\n    |   ---------------------- the comment documents this constant\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = note: `#[warn(clippy::empty_line_after_doc_comments)]` on by default\n    = help: if the empty lines are unintentional remove them\nhelp: if the doc comment should not document `ET_NONE` comment it out\n    |\n101 | // /// 64-255 Architecture-specific value range\n    | ++\n\n",
              "warning: empty line after doc comment\n   --> src/abi.rs:790:1\n    |\n790 | / /// STV_* define constants for the ELF Symbol's st_visibility (encoded in the st_other field).\n791 | |\n    | |_^\n...\n798 |   pub const STV_DEFAULT: u8 = 0;\n    |   ------------------------- the comment documents this constant\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional remove it\nhelp: if the documentation should include the empty line include it in the comment\n    |\n791 | ///\n    |\n\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=elf, checker=SemverChecks\n// toolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_59/shilei-massclouds/elf/elf\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \n// timestamp=2025-02-16 22:16:03.08107528 +08:00:00\n    Building elf v0.7.4 (current)\n       Built [   0.368s] (current)\n     Parsing elf v0.7.4 (current)\nerror: unsupported rustdoc format v39 for file: /home/runner/check/batch_59/shilei-massclouds/elf/elf/target/semver-checks/local-elf-0_7_4-01666ec060466c14/target/x86_64-unknown-linux-gnu/doc/elf.json\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=elf, checker=SemverChecks\ntoolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_60/shilei-massclouds/elf/elf\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \ntimestamp=2025-03-07 18:28:05.219578209 +08:00:00\n\n\nstdout:\n\n--- failure enum_variant_missing: pub enum variant removed or renamed ---\n\nDescription:\nA publicly-visible enum has at least one variant that is no longer available under its prior name. It may have been renamed or removed entirely.\n        ref: https://doc.rust-lang.org/cargo/reference/semver.html#item-remove\n       impl: https://github.com/obi1kenobi/cargo-semver-checks/tree/v0.39.0/src/lints/enum_variant_missing.ron\n\nFailed in:\n  variant ParseError::IOError, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/parse.rs:59\n  variant ParseError::IOError, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/parse.rs:59\n\n--- failure feature_missing: package feature removed or renamed ---\n\nDescription:\nA feature has been removed from this package's Cargo.toml. This will break downstream crates which enable that feature.\n        ref: https://doc.rust-lang.org/cargo/reference/semver.html#cargo-feature-remove\n       impl: https://github.com/obi1kenobi/cargo-semver-checks/tree/v0.39.0/src/lints/feature_missing.ron\n\nFailed in:\n  feature std in the package's Cargo.toml\n  feature to_str in the package's Cargo.toml\n\n--- failure function_missing: pub fn removed or renamed ---\n\nDescription:\nA publicly-visible function cannot be imported by its prior path. A `pub use` may have been removed, or the function itself may have been renamed or removed entirely.\n        ref: https://doc.rust-lang.org/cargo/reference/semver.html#item-remove\n       impl: https://github.com/obi1kenobi/cargo-semver-checks/tree/v0.39.0/src/lints/function_missing.ron\n\nFailed in:\n  function elf::to_str::st_symtype_to_string, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:541\n  function elf::to_str::e_machine_to_str, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:258\n  function elf::to_str::st_vis_to_str, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:565\n  function elf::to_str::sh_type_to_string, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:483\n  function elf::to_str::note_abi_tag_os_to_str, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:590\n  function elf::to_str::p_type_to_string, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:520\n  function elf::to_str::e_type_to_string, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:56\n  function elf::to_str::st_bind_to_str, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:548\n  function elf::to_str::e_machine_to_string, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:447\n  function elf::to_str::e_osabi_to_str, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:4\n  function elf::to_str::st_vis_to_string, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:575\n  function elf::to_str::p_flags_to_string, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:490\n  function elf::to_str::e_type_to_human_str, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:34\n  function elf::to_str::d_tag_to_str, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:600\n  function elf::to_str::st_symtype_to_str, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:527\n  function elf::to_str::e_machine_to_human_str, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:63\n  function elf::to_str::st_bind_to_string, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:558\n  function elf::to_str::sh_type_to_str, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:454\n  function elf::to_str::e_osabi_to_string, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:27\n  function elf::to_str::ch_type_to_str, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:582\n  function elf::to_str::p_type_to_str, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:502\n  function elf::to_str::e_type_to_str, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:45\n\n--- failure module_missing: pub module removed or renamed ---\n\nDescription:\nA publicly-visible module cannot be imported by its prior path. A `pub use` may have been removed, or the module may have been renamed, removed, or made non-public.\n        ref: https://doc.rust-lang.org/cargo/reference/semver.html#item-remove\n       impl: https://github.com/obi1kenobi/cargo-semver-checks/tree/v0.39.0/src/lints/module_missing.ron\n\nFailed in:\n  mod elf::to_str, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/to_str.rs:1\n\n--- failure struct_missing: pub struct removed or renamed ---\n\nDescription:\nA publicly-visible struct cannot be imported by its prior path. A `pub use` may have been removed, or the struct itself may have been renamed or removed entirely.\n        ref: https://doc.rust-lang.org/cargo/reference/semver.html#item-remove\n       impl: https://github.com/obi1kenobi/cargo-semver-checks/tree/v0.39.0/src/lints/struct_missing.ron\n\nFailed in:\n  struct elf::ElfStream, previously in file /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/elf-0.7.4/src/elf_stream.rs:27\n\nstderr:\n    Building elf v0.7.4 (current)\n       Built [   0.337s] (current)\n     Parsing elf v0.7.4 (current)\n      Parsed [   0.012s] (current)\n    Building elf v0.7.4 (baseline)\n       Built [   0.423s] (baseline)\n     Parsing elf v0.7.4 (baseline)\n      Parsed [   0.012s] (baseline)\n    Checking elf v0.7.4 -> v0.7.4 (no change)\n     Checked [   0.054s] 148 checks: 143 pass, 5 fail, 0 warn, 0 skip\n\n     Summary semver requires new major version: 5 major and 0 minor checks failed\n    Finished [   1.033s] elf\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Outdated",
    "Geiger",
    "Unformatted"
  ]
}