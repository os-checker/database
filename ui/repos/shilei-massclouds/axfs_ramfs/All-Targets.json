{
  "repo": {
    "user": "shilei-massclouds",
    "repo": "axfs_ramfs"
  },
  "data": [
    {
      "user": "shilei-massclouds",
      "repo": "axfs_ramfs",
      "pkg": "axfs_ramfs",
      "count": 108,
      "raw_reports": [
        {
          "file": "src/dir.rs",
          "features": "",
          "count": 48,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 1 to 3)\n-use core::mem;\n-use core::mem::transmute;\n-use core::ptr::copy_nonoverlapping;\n+use alloc::borrow::ToOwned;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 7 to 7)\n-use alloc::borrow::ToOwned;\n+use axfs_devfs::ConsoleDev;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 10 to 10)\n-use axfs_devfs::ConsoleDev;\n+use core::mem;\n+use core::mem::transmute;\n+use core::ptr::copy_nonoverlapping;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 12 to 13)\n-use axfs_vfs::{VfsDirEntry, VfsNodeAttr, VfsNodeOps, VfsNodeRef, VfsNodeType};\n-use axfs_vfs::{VfsError, VfsResult, DT_, LinuxDirent64};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 15 to 15)\n+use axfs_vfs::{LinuxDirent64, VfsError, VfsResult, DT_};\n+use axfs_vfs::{VfsDirEntry, VfsNodeAttr, VfsNodeOps, VfsNodeRef, VfsNodeType};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 34 to 34)\n-    pub(super) fn new(parent: Option<Weak<dyn VfsNodeOps>>, uid: u32, gid: u32, mode: i32) -> Arc<Self> {\n+    pub(super) fn new(\n+        parent: Option<Weak<dyn VfsNodeOps>>,\n+        uid: u32,\n+        gid: u32,\n+        mode: i32,\n+    ) -> Arc<Self> {\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 61 to 61)\n-    pub fn create_node(&self, name: &str, ty: VfsNodeType, uid: u32, mut gid: u32, mode: i32) -> VfsResult<VfsNodeRef> {\n+    pub fn create_node(\n+        &self,\n+        name: &str,\n+        ty: VfsNodeType,\n+        uid: u32,\n+        mut gid: u32,\n+        mode: i32,\n+    ) -> VfsResult<VfsNodeRef> {\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 153 to 153)\n-                \"..\" => self.parent().ok_or(VfsError::NotFound)?.symlink(rest, target, uid, gid, mode),\n+                \"..\" => self\n+                    .parent()\n+                    .ok_or(VfsError::NotFound)?\n+                    .symlink(rest, target, uid, gid, mode),\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 179 to 179)\n-            4096, 0, *self.uid.read(), *self.gid.read(), *self.mode.read()\n+            4096,\n+            0,\n+            *self.uid.read(),\n+            *self.gid.read(),\n+            *self.mode.read(),\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 215 to 215)\n-            debug!(\"name {} rest {:?} {} flags {:#o}\", name, rest, node.get_attr()?.is_symlink(), flags);\n+            debug!(\n+                \"name {} rest {:?} {} flags {:#o}\",\n+                name,\n+                rest,\n+                node.get_attr()?.is_symlink(),\n+                flags\n+            );\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 258 to 258)\n-                \"..\" => self.parent().ok_or(VfsError::NotFound)?.create(rest, ty, uid, gid, mode),\n+                \"..\" => self\n+                    .parent()\n+                    .ok_or(VfsError::NotFound)?\n+                    .create(rest, ty, uid, gid, mode),\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 317 to 317)\n-            warn!(\"NOTICE! todo: check offset[{}] and real length of directory!\", offset);\n+            warn!(\n+                \"NOTICE! todo: check offset[{}] and real length of directory!\",\n+                offset\n+            );\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 350 to 350)\n-            log::info!(\"[{}] name:{:?} [{}] {}\", i, name.as_bytes(), name_len, name.len());\n+            log::info!(\n+                \"[{}] name:{:?} [{}] {}\",\n+                i,\n+                name.as_bytes(),\n+                name_len,\n+                name.len()\n+            );\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 360 to 361)\n-            let dirent: &mut LinuxDirent64 = unsafe {\n-                transmute(buf.as_mut_ptr().offset(count as isize))\n+            let dirent: &mut LinuxDirent64 =\n+                unsafe { transmute(buf.as_mut_ptr().offset(count as isize)) };\n+            dirent.d_ino = unsafe {\n+                INO_SEQ += 1;\n+                INO_SEQ\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 363 to 363)\n-            dirent.d_ino = unsafe { INO_SEQ += 1; INO_SEQ };\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 368 to 374)\n-            unsafe {\n-                copy_nonoverlapping(\n-                    name.as_ptr(),\n-                    dirent.d_name.as_mut_ptr(),\n-                    name_len\n-                )\n-            };\n+            unsafe { copy_nonoverlapping(name.as_ptr(), dirent.d_name.as_mut_ptr(), name_len) };\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 1 to 3)\n-use core::mem;\n-use core::mem::transmute;\n-use core::ptr::copy_nonoverlapping;\n+use alloc::borrow::ToOwned;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 7 to 7)\n-use alloc::borrow::ToOwned;\n+use axfs_devfs::ConsoleDev;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 10 to 10)\n-use axfs_devfs::ConsoleDev;\n+use core::mem;\n+use core::mem::transmute;\n+use core::ptr::copy_nonoverlapping;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 12 to 13)\n-use axfs_vfs::{VfsDirEntry, VfsNodeAttr, VfsNodeOps, VfsNodeRef, VfsNodeType};\n-use axfs_vfs::{VfsError, VfsResult, DT_, LinuxDirent64};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 15 to 15)\n+use axfs_vfs::{LinuxDirent64, VfsError, VfsResult, DT_};\n+use axfs_vfs::{VfsDirEntry, VfsNodeAttr, VfsNodeOps, VfsNodeRef, VfsNodeType};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 34 to 34)\n-    pub(super) fn new(parent: Option<Weak<dyn VfsNodeOps>>, uid: u32, gid: u32, mode: i32) -> Arc<Self> {\n+    pub(super) fn new(\n+        parent: Option<Weak<dyn VfsNodeOps>>,\n+        uid: u32,\n+        gid: u32,\n+        mode: i32,\n+    ) -> Arc<Self> {\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 61 to 61)\n-    pub fn create_node(&self, name: &str, ty: VfsNodeType, uid: u32, mut gid: u32, mode: i32) -> VfsResult<VfsNodeRef> {\n+    pub fn create_node(\n+        &self,\n+        name: &str,\n+        ty: VfsNodeType,\n+        uid: u32,\n+        mut gid: u32,\n+        mode: i32,\n+    ) -> VfsResult<VfsNodeRef> {\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 153 to 153)\n-                \"..\" => self.parent().ok_or(VfsError::NotFound)?.symlink(rest, target, uid, gid, mode),\n+                \"..\" => self\n+                    .parent()\n+                    .ok_or(VfsError::NotFound)?\n+                    .symlink(rest, target, uid, gid, mode),\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 179 to 179)\n-            4096, 0, *self.uid.read(), *self.gid.read(), *self.mode.read()\n+            4096,\n+            0,\n+            *self.uid.read(),\n+            *self.gid.read(),\n+            *self.mode.read(),\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 215 to 215)\n-            debug!(\"name {} rest {:?} {} flags {:#o}\", name, rest, node.get_attr()?.is_symlink(), flags);\n+            debug!(\n+                \"name {} rest {:?} {} flags {:#o}\",\n+                name,\n+                rest,\n+                node.get_attr()?.is_symlink(),\n+                flags\n+            );\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 258 to 258)\n-                \"..\" => self.parent().ok_or(VfsError::NotFound)?.create(rest, ty, uid, gid, mode),\n+                \"..\" => self\n+                    .parent()\n+                    .ok_or(VfsError::NotFound)?\n+                    .create(rest, ty, uid, gid, mode),\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 317 to 317)\n-            warn!(\"NOTICE! todo: check offset[{}] and real length of directory!\", offset);\n+            warn!(\n+                \"NOTICE! todo: check offset[{}] and real length of directory!\",\n+                offset\n+            );\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 350 to 350)\n-            log::info!(\"[{}] name:{:?} [{}] {}\", i, name.as_bytes(), name_len, name.len());\n+            log::info!(\n+                \"[{}] name:{:?} [{}] {}\",\n+                i,\n+                name.as_bytes(),\n+                name_len,\n+                name.len()\n+            );\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 360 to 361)\n-            let dirent: &mut LinuxDirent64 = unsafe {\n-                transmute(buf.as_mut_ptr().offset(count as isize))\n+            let dirent: &mut LinuxDirent64 =\n+                unsafe { transmute(buf.as_mut_ptr().offset(count as isize)) };\n+            dirent.d_ino = unsafe {\n+                INO_SEQ += 1;\n+                INO_SEQ\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 363 to 363)\n-            dirent.d_ino = unsafe { INO_SEQ += 1; INO_SEQ };\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 368 to 374)\n-            unsafe {\n-                copy_nonoverlapping(\n-                    name.as_ptr(),\n-                    dirent.d_name.as_mut_ptr(),\n-                    name_len\n-                )\n-            };\n+            unsafe { copy_nonoverlapping(name.as_ptr(), dirent.d_name.as_mut_ptr(), name_len) };\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 1 to 3)\n-use core::mem;\n-use core::mem::transmute;\n-use core::ptr::copy_nonoverlapping;\n+use alloc::borrow::ToOwned;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 7 to 7)\n-use alloc::borrow::ToOwned;\n+use axfs_devfs::ConsoleDev;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 10 to 10)\n-use axfs_devfs::ConsoleDev;\n+use core::mem;\n+use core::mem::transmute;\n+use core::ptr::copy_nonoverlapping;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 12 to 13)\n-use axfs_vfs::{VfsDirEntry, VfsNodeAttr, VfsNodeOps, VfsNodeRef, VfsNodeType};\n-use axfs_vfs::{VfsError, VfsResult, DT_, LinuxDirent64};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 15 to 15)\n+use axfs_vfs::{LinuxDirent64, VfsError, VfsResult, DT_};\n+use axfs_vfs::{VfsDirEntry, VfsNodeAttr, VfsNodeOps, VfsNodeRef, VfsNodeType};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 34 to 34)\n-    pub(super) fn new(parent: Option<Weak<dyn VfsNodeOps>>, uid: u32, gid: u32, mode: i32) -> Arc<Self> {\n+    pub(super) fn new(\n+        parent: Option<Weak<dyn VfsNodeOps>>,\n+        uid: u32,\n+        gid: u32,\n+        mode: i32,\n+    ) -> Arc<Self> {\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 61 to 61)\n-    pub fn create_node(&self, name: &str, ty: VfsNodeType, uid: u32, mut gid: u32, mode: i32) -> VfsResult<VfsNodeRef> {\n+    pub fn create_node(\n+        &self,\n+        name: &str,\n+        ty: VfsNodeType,\n+        uid: u32,\n+        mut gid: u32,\n+        mode: i32,\n+    ) -> VfsResult<VfsNodeRef> {\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 153 to 153)\n-                \"..\" => self.parent().ok_or(VfsError::NotFound)?.symlink(rest, target, uid, gid, mode),\n+                \"..\" => self\n+                    .parent()\n+                    .ok_or(VfsError::NotFound)?\n+                    .symlink(rest, target, uid, gid, mode),\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 179 to 179)\n-            4096, 0, *self.uid.read(), *self.gid.read(), *self.mode.read()\n+            4096,\n+            0,\n+            *self.uid.read(),\n+            *self.gid.read(),\n+            *self.mode.read(),\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 215 to 215)\n-            debug!(\"name {} rest {:?} {} flags {:#o}\", name, rest, node.get_attr()?.is_symlink(), flags);\n+            debug!(\n+                \"name {} rest {:?} {} flags {:#o}\",\n+                name,\n+                rest,\n+                node.get_attr()?.is_symlink(),\n+                flags\n+            );\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 258 to 258)\n-                \"..\" => self.parent().ok_or(VfsError::NotFound)?.create(rest, ty, uid, gid, mode),\n+                \"..\" => self\n+                    .parent()\n+                    .ok_or(VfsError::NotFound)?\n+                    .create(rest, ty, uid, gid, mode),\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 317 to 317)\n-            warn!(\"NOTICE! todo: check offset[{}] and real length of directory!\", offset);\n+            warn!(\n+                \"NOTICE! todo: check offset[{}] and real length of directory!\",\n+                offset\n+            );\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 350 to 350)\n-            log::info!(\"[{}] name:{:?} [{}] {}\", i, name.as_bytes(), name_len, name.len());\n+            log::info!(\n+                \"[{}] name:{:?} [{}] {}\",\n+                i,\n+                name.as_bytes(),\n+                name_len,\n+                name.len()\n+            );\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 360 to 361)\n-            let dirent: &mut LinuxDirent64 = unsafe {\n-                transmute(buf.as_mut_ptr().offset(count as isize))\n+            let dirent: &mut LinuxDirent64 =\n+                unsafe { transmute(buf.as_mut_ptr().offset(count as isize)) };\n+            dirent.d_ino = unsafe {\n+                INO_SEQ += 1;\n+                INO_SEQ\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 363 to 363)\n-            dirent.d_ino = unsafe { INO_SEQ += 1; INO_SEQ };\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/dir.rs (original lines from 368 to 374)\n-            unsafe {\n-                copy_nonoverlapping(\n-                    name.as_ptr(),\n-                    dirent.d_name.as_mut_ptr(),\n-                    name_len\n-                )\n-            };\n+            unsafe { copy_nonoverlapping(name.as_ptr(), dirent.d_name.as_mut_ptr(), name_len) };\n"
            ]
          }
        },
        {
          "file": "src/file.rs",
          "features": "",
          "count": 30,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 1 to 4)\n-use core::ops::Bound;\n-use core::cmp::min;\n-use core::sync::atomic::{AtomicUsize, Ordering};\n-use alloc::{vec, vec::Vec};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 6 to 6)\n-use axfs_vfs::{impl_vfs_non_dir_default, VfsNodeAttr, VfsNodeOps, VfsResult};\n+use alloc::{vec, vec::Vec};\n+use axfs_vfs::alloc_ino;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 8 to 8)\n+use axfs_vfs::{impl_vfs_non_dir_default, VfsNodeAttr, VfsNodeOps, VfsResult};\n+use axtype::{PAGE_SHIFT, PAGE_SIZE};\n+use core::cmp::min;\n+use core::ops::Bound;\n+use core::sync::atomic::{AtomicUsize, Ordering};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 9 to 10)\n-use axtype::{PAGE_SIZE, PAGE_SHIFT};\n-use axfs_vfs::alloc_ino;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 69 to 69)\n-    content: RwLock<BTreeMap::<usize, [u8; PAGE_SIZE]>>,\n+    content: RwLock<BTreeMap<usize, [u8; PAGE_SIZE]>>,\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 111 to 112)\n-        Ok(VfsNodeAttr::new_file(self.size() as u64, 0,\n-            *self.uid.read(), *self.gid.read(), self.mode))\n+        Ok(VfsNodeAttr::new_file(\n+            self.size() as u64,\n+            0,\n+            *self.uid.read(),\n+            *self.gid.read(),\n+            self.mode,\n+        ))\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 156 to 156)\n-        info!(\"read_at pos {}, buf.len {}, total: {}\", pos, buf.len(), self.size());\n+        info!(\n+            \"read_at pos {}, buf.len {}, total: {}\",\n+            pos,\n+            buf.len(),\n+            self.size()\n+        );\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 167 to 168)\n-                let src = &page[offset..offset+size];\n-                buf[buf_pos..buf_pos+size].copy_from_slice(src);\n+                let src = &page[offset..offset + size];\n+                buf[buf_pos..buf_pos + size].copy_from_slice(src);\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 170 to 170)\n-                buf[buf_pos..buf_pos+size].fill(0);\n+                buf[buf_pos..buf_pos + size].fill(0);\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 195 to 195)\n-            page[offset..offset+size].copy_from_slice(&buf[buf_pos..buf_pos+size]);\n+            page[offset..offset + size].copy_from_slice(&buf[buf_pos..buf_pos + size]);\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 1 to 4)\n-use core::ops::Bound;\n-use core::cmp::min;\n-use core::sync::atomic::{AtomicUsize, Ordering};\n-use alloc::{vec, vec::Vec};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 6 to 6)\n-use axfs_vfs::{impl_vfs_non_dir_default, VfsNodeAttr, VfsNodeOps, VfsResult};\n+use alloc::{vec, vec::Vec};\n+use axfs_vfs::alloc_ino;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 8 to 8)\n+use axfs_vfs::{impl_vfs_non_dir_default, VfsNodeAttr, VfsNodeOps, VfsResult};\n+use axtype::{PAGE_SHIFT, PAGE_SIZE};\n+use core::cmp::min;\n+use core::ops::Bound;\n+use core::sync::atomic::{AtomicUsize, Ordering};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 9 to 10)\n-use axtype::{PAGE_SIZE, PAGE_SHIFT};\n-use axfs_vfs::alloc_ino;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 69 to 69)\n-    content: RwLock<BTreeMap::<usize, [u8; PAGE_SIZE]>>,\n+    content: RwLock<BTreeMap<usize, [u8; PAGE_SIZE]>>,\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 111 to 112)\n-        Ok(VfsNodeAttr::new_file(self.size() as u64, 0,\n-            *self.uid.read(), *self.gid.read(), self.mode))\n+        Ok(VfsNodeAttr::new_file(\n+            self.size() as u64,\n+            0,\n+            *self.uid.read(),\n+            *self.gid.read(),\n+            self.mode,\n+        ))\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 156 to 156)\n-        info!(\"read_at pos {}, buf.len {}, total: {}\", pos, buf.len(), self.size());\n+        info!(\n+            \"read_at pos {}, buf.len {}, total: {}\",\n+            pos,\n+            buf.len(),\n+            self.size()\n+        );\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 167 to 168)\n-                let src = &page[offset..offset+size];\n-                buf[buf_pos..buf_pos+size].copy_from_slice(src);\n+                let src = &page[offset..offset + size];\n+                buf[buf_pos..buf_pos + size].copy_from_slice(src);\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 170 to 170)\n-                buf[buf_pos..buf_pos+size].fill(0);\n+                buf[buf_pos..buf_pos + size].fill(0);\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 195 to 195)\n-            page[offset..offset+size].copy_from_slice(&buf[buf_pos..buf_pos+size]);\n+            page[offset..offset + size].copy_from_slice(&buf[buf_pos..buf_pos + size]);\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 1 to 4)\n-use core::ops::Bound;\n-use core::cmp::min;\n-use core::sync::atomic::{AtomicUsize, Ordering};\n-use alloc::{vec, vec::Vec};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 6 to 6)\n-use axfs_vfs::{impl_vfs_non_dir_default, VfsNodeAttr, VfsNodeOps, VfsResult};\n+use alloc::{vec, vec::Vec};\n+use axfs_vfs::alloc_ino;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 8 to 8)\n+use axfs_vfs::{impl_vfs_non_dir_default, VfsNodeAttr, VfsNodeOps, VfsResult};\n+use axtype::{PAGE_SHIFT, PAGE_SIZE};\n+use core::cmp::min;\n+use core::ops::Bound;\n+use core::sync::atomic::{AtomicUsize, Ordering};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 9 to 10)\n-use axtype::{PAGE_SIZE, PAGE_SHIFT};\n-use axfs_vfs::alloc_ino;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 69 to 69)\n-    content: RwLock<BTreeMap::<usize, [u8; PAGE_SIZE]>>,\n+    content: RwLock<BTreeMap<usize, [u8; PAGE_SIZE]>>,\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 111 to 112)\n-        Ok(VfsNodeAttr::new_file(self.size() as u64, 0,\n-            *self.uid.read(), *self.gid.read(), self.mode))\n+        Ok(VfsNodeAttr::new_file(\n+            self.size() as u64,\n+            0,\n+            *self.uid.read(),\n+            *self.gid.read(),\n+            self.mode,\n+        ))\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 156 to 156)\n-        info!(\"read_at pos {}, buf.len {}, total: {}\", pos, buf.len(), self.size());\n+        info!(\n+            \"read_at pos {}, buf.len {}, total: {}\",\n+            pos,\n+            buf.len(),\n+            self.size()\n+        );\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 167 to 168)\n-                let src = &page[offset..offset+size];\n-                buf[buf_pos..buf_pos+size].copy_from_slice(src);\n+                let src = &page[offset..offset + size];\n+                buf[buf_pos..buf_pos + size].copy_from_slice(src);\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 170 to 170)\n-                buf[buf_pos..buf_pos+size].fill(0);\n+                buf[buf_pos..buf_pos + size].fill(0);\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/file.rs (original lines from 195 to 195)\n-            page[offset..offset+size].copy_from_slice(&buf[buf_pos..buf_pos+size]);\n+            page[offset..offset + size].copy_from_slice(&buf[buf_pos..buf_pos + size]);\n"
            ]
          }
        },
        {
          "file": "src/lib.rs",
          "features": "",
          "count": 9,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/lib.rs (original lines from 22 to 22)\n-use axfs_vfs::{VfsNodeRef, VfsOps, VfsResult, FileSystemInfo};\n+use axfs_vfs::{FileSystemInfo, VfsNodeRef, VfsOps, VfsResult};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/lib.rs (original lines from 24 to 24)\n-use spin::once::Once;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/lib.rs (original lines from 26 to 26)\n+use spin::once::Once;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/lib.rs (original lines from 22 to 22)\n-use axfs_vfs::{VfsNodeRef, VfsOps, VfsResult, FileSystemInfo};\n+use axfs_vfs::{FileSystemInfo, VfsNodeRef, VfsOps, VfsResult};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/lib.rs (original lines from 24 to 24)\n-use spin::once::Once;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/lib.rs (original lines from 26 to 26)\n+use spin::once::Once;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/lib.rs (original lines from 22 to 22)\n-use axfs_vfs::{VfsNodeRef, VfsOps, VfsResult, FileSystemInfo};\n+use axfs_vfs::{FileSystemInfo, VfsNodeRef, VfsOps, VfsResult};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/lib.rs (original lines from 24 to 24)\n-use spin::once::Once;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs/src/lib.rs (original lines from 26 to 26)\n+use spin::once::Once;\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/Cargo.lock",
          "features": "",
          "count": 3,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n└── x2apic 0.4.3\n    ├── axhal 0.1.0\n    │   ├── taskctx 0.1.0\n    │   │   └── run_queue 0.1.0\n    │   │       ├── pipefs 0.1.0\n    │   │       │   ├── axfs_ramfs 0.1.0\n    │   │       │   │   └── rt_ramfs 0.1.0\n    │   │       │   └── axfs_ramfs 0.1.0\n    │   │       └── axfs_devfs 0.1.0\n    │   │           ├── axfs_ramfs 0.1.0\n    │   │           └── axfs_ramfs 0.1.0\n    │   ├── run_queue 0.1.0\n    │   ├── rt_ramfs 0.1.0\n    │   ├── page_table_entry 0.1.0\n    │   │   └── page_table 0.1.0\n    │   │       └── taskctx 0.1.0\n    │   ├── page_table 0.1.0\n    │   ├── axfs_devfs 0.1.0\n    │   └── axalloc 0.1.0\n    │       ├── rt_ramfs 0.1.0\n    │       └── page_table 0.1.0\n    └── arch_boot 0.1.0\n        └── rt_ramfs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 778,\n    \"last-commit\": \"c5421337865bb6eae6d67811bbb7f5257a5f3faa\",\n    \"last-updated\": \"2025-05-07T10:32:09+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 77\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}",
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n└── x2apic 0.4.3\n    ├── axhal 0.1.0\n    │   ├── taskctx 0.1.0\n    │   │   └── run_queue 0.1.0\n    │   │       ├── pipefs 0.1.0\n    │   │       │   ├── axfs_ramfs 0.1.0\n    │   │       │   │   └── rt_ramfs 0.1.0\n    │   │       │   └── axfs_ramfs 0.1.0\n    │   │       └── axfs_devfs 0.1.0\n    │   │           ├── axfs_ramfs 0.1.0\n    │   │           └── axfs_ramfs 0.1.0\n    │   ├── run_queue 0.1.0\n    │   ├── rt_ramfs 0.1.0\n    │   ├── page_table_entry 0.1.0\n    │   │   └── page_table 0.1.0\n    │   │       └── taskctx 0.1.0\n    │   ├── page_table 0.1.0\n    │   ├── axfs_devfs 0.1.0\n    │   └── axalloc 0.1.0\n    │       ├── rt_ramfs 0.1.0\n    │       └── page_table 0.1.0\n    └── arch_boot 0.1.0\n        └── rt_ramfs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 778,\n    \"last-commit\": \"c5421337865bb6eae6d67811bbb7f5257a5f3faa\",\n    \"last-updated\": \"2025-05-07T10:32:09+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 77\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}",
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n└── x2apic 0.4.3\n    ├── axhal 0.1.0\n    │   ├── taskctx 0.1.0\n    │   │   └── run_queue 0.1.0\n    │   │       ├── pipefs 0.1.0\n    │   │       │   ├── axfs_ramfs 0.1.0\n    │   │       │   │   └── rt_ramfs 0.1.0\n    │   │       │   └── axfs_ramfs 0.1.0\n    │   │       └── axfs_devfs 0.1.0\n    │   │           ├── axfs_ramfs 0.1.0\n    │   │           └── axfs_ramfs 0.1.0\n    │   ├── run_queue 0.1.0\n    │   ├── rt_ramfs 0.1.0\n    │   ├── page_table_entry 0.1.0\n    │   │   └── page_table 0.1.0\n    │   │       └── taskctx 0.1.0\n    │   ├── page_table 0.1.0\n    │   ├── axfs_devfs 0.1.0\n    │   └── axalloc 0.1.0\n    │       ├── rt_ramfs 0.1.0\n    │       └── page_table 0.1.0\n    └── arch_boot 0.1.0\n        └── rt_ramfs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 778,\n    \"last-commit\": \"c5421337865bb6eae6d67811bbb7f5257a5f3faa\",\n    \"last-updated\": \"2025-05-07T10:32:09+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 77\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 3,
          "kinds": {
            "Cargo": [
              "// pkg_name=axfs_ramfs, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-07 21:29:21.884707222 +08:00:00\n   Compiling cfg-if v1.0.0\n   Compiling bit_field v0.10.2\n   Compiling nb v1.1.0\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\n   Compiling static_assertions v1.1.0\n   Compiling riscv v0.10.1\n   Compiling void v1.0.2\n   Compiling nb v0.1.3\n   Compiling log v0.4.27\n   Compiling embedded-hal v0.2.7\n   Compiling sbi-spec v0.0.4\n   Compiling bitflags v2.9.0\n[2025-05-07T13:29:22Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n   Compiling critical-section v1.2.0\n[2025-05-07T13:29:22Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling sbi-rt v0.0.2\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling percpu_macros2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase.git#a3496db8)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\n   Compiling const-default v1.0.0\n   Compiling lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n   Compiling ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n   Compiling memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n   Compiling rlsf v0.2.1\n   Compiling bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\n   Compiling tock-registers v0.8.1\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 4 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=axfs_ramfs, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-07 21:29:13.728224852 +08:00:00\n   Compiling serde v1.0.219\n   Compiling hashbrown v0.15.3\n   Compiling equivalent v1.0.2\n   Compiling winnow v0.5.40\n   Compiling toml_datetime v0.6.9\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling indexmap v2.9.0\n   Compiling quote v1.0.40\n   Compiling cfg-if v1.0.0\n   Compiling log v0.4.27\n[2025-05-07T13:29:15Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-07T13:29:15Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling bitflags v2.9.0\n   Compiling syn v1.0.109\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling toml_edit v0.19.15\n   Compiling syn v2.0.101\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase.git#a3496db8)\n   Compiling unicode-width v0.1.14\n   Compiling tock-registers v0.8.1\n   Compiling base64 v0.13.1\n   Compiling aarch64-cpu v9.4.0\n   Compiling svgbobdoc v0.3.0\n   Compiling lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n   Compiling ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n   Compiling bit_field v0.10.2\n   Compiling static_assertions v1.1.0\n   Compiling const-default v1.0.0\n   Compiling memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\n   Compiling rlsf v0.2.1\n   Compiling bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\n   Compiling autocfg v1.4.0\nerror[E0583]: file not found for module `aarch64_common`\n --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/mod.rs:5:9\n  |\n5 |         mod aarch64_common;\n  |         ^^^^^^^^^^^^^^^^^^^\n  |\n  = help: to create the module `aarch64_common`, create file \"/home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/aarch64_common.rs\" or \"/home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/aarch64_common/mod.rs\"\n  = note: if there is a `mod aarch64_common` elsewhere in the crate already, import it with `use crate::...` instead\n\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433, E0583.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=axfs_ramfs, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-none \n// timestamp=2025-05-07 21:29:22.744216541 +08:00:00\n   Compiling bit_field v0.10.2\n   Compiling cfg-if v1.0.0\n   Compiling bitflags v2.9.0\n   Compiling rustversion v1.0.20\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\n   Compiling bitflags v1.3.2\n   Compiling log v0.4.27\n   Compiling volatile v0.4.6\n   Compiling raw-cpuid v10.7.0\n[2025-05-07T13:29:23Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-07T13:29:23Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling paste v1.0.15\n   Compiling x86 v0.52.0\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase.git#a3496db8)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling bit v0.1.1\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\n   Compiling raw-cpuid v11.5.0\n   Compiling static_assertions v1.1.0\n   Compiling x86_64 v0.14.13\n   Compiling ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n   Compiling const-default v1.0.0\n   Compiling memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n   Compiling lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n   Compiling rlsf v0.2.1\n   Compiling bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\n   Compiling tock-registers v0.8.1\n   Compiling aarch64-cpu v9.4.0\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `console_init` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:17:15\n   |\n17 |     platform::console_init();\n   |               ^^^^^^^^^^^^ not found in `platform`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 3,
          "kinds": {
            "Cargo": [
              "// pkg_name=axfs_ramfs, checker=Rapx\n// toolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-07 21:29:29.690598973 +08:00:00\n   Compiling equivalent v1.0.2\n   Compiling hashbrown v0.15.3\n   Compiling serde v1.0.219\n   Compiling winnow v0.5.40\n   Compiling toml_datetime v0.6.9\n   Compiling proc-macro2 v1.0.95\n   Compiling indexmap v2.9.0\n   Compiling unicode-ident v1.0.18\n    Checking cfg-if v1.0.0\n    Checking nb v1.1.0\n   Compiling quote v1.0.40\n   Compiling toml_edit v0.19.15\n    Checking bit_field v0.10.2\n    Checking nb v0.1.3\n    Checking log v0.4.27\n    Checking void v1.0.2\n    Checking static_assertions v1.1.0\n   Compiling riscv v0.10.1\n    Checking sbi-spec v0.0.4\n    Checking embedded-hal v0.2.7\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n    Checking critical-section v1.2.0\n   Compiling syn v1.0.109\n    Checking bitflags v2.9.0\n    Checking sbi-rt v0.0.2\n   Compiling syn v2.0.101\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n    Checking spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase.git#a3496db8)\n   Compiling unicode-width v0.1.14\n   Compiling base64 v0.13.1\n    Checking ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n    Checking memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n    Checking const-default v1.0.0\n    Checking lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n    Checking bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\n   Compiling autocfg v1.4.0\n    Checking tock-registers v0.8.1\n    Checking aarch64-cpu v9.4.0\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 4 previous errors\nwarning: build failed, waiting for other jobs to finish...\n13:29:38|RAP|ERROR|: Finished with non-zero exit code.\n",
              "// pkg_name=axfs_ramfs, checker=Rapx\n// toolchain=nightly-2024-01-18, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-07 21:29:38.082870119 +08:00:00\n   Compiling hashbrown v0.15.3\n   Compiling serde v1.0.219\n   Compiling equivalent v1.0.2\n   Compiling toml_datetime v0.6.9\n   Compiling winnow v0.5.40\n   Compiling proc-macro2 v1.0.95\n   Compiling indexmap v2.9.0\n   Compiling unicode-ident v1.0.18\n   Compiling quote v1.0.40\n    Checking cfg-if v1.0.0\n    Checking log v0.4.27\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling toml_edit v0.19.15\n    Checking bitflags v2.9.0\n   Compiling syn v1.0.109\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling syn v2.0.101\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n    Checking spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase.git#a3496db8)\n    Checking tock-registers v0.8.1\n   Compiling base64 v0.13.1\n   Compiling unicode-width v0.1.14\n    Checking aarch64-cpu v9.4.0\n   Compiling svgbobdoc v0.3.0\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\n    Checking lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n    Checking const-default v1.0.0\n    Checking memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\n    Checking static_assertions v1.1.0\n    Checking bit_field v0.10.2\n    Checking ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\nerror[E0583]: file not found for module `aarch64_common`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/mod.rs:5:9\n  |\n5 |         mod aarch64_common;\n  |         ^^^^^^^^^^^^^^^^^^^\n  |\n  = help: to create the module `aarch64_common`, create file \"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/aarch64_common.rs\" or \"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/aarch64_common/mod.rs\"\n  = note: if there is a `mod aarch64_common` elsewhere in the crate already, import it with `use crate::...` instead\n\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433, E0583.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n13:29:46|RAP|ERROR|: Finished with non-zero exit code.\n",
              "// pkg_name=axfs_ramfs, checker=Rapx\n// toolchain=nightly-2024-01-18, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-none \n// timestamp=2025-05-07 21:29:46.114001875 +08:00:00\n   Compiling hashbrown v0.15.3\n   Compiling equivalent v1.0.2\n   Compiling serde v1.0.219\n   Compiling winnow v0.5.40\n   Compiling toml_datetime v0.6.9\n   Compiling proc-macro2 v1.0.95\n   Compiling indexmap v2.9.0\n   Compiling unicode-ident v1.0.18\n    Checking bit_field v0.10.2\n   Compiling quote v1.0.40\n   Compiling toml_edit v0.19.15\n    Checking cfg-if v1.0.0\n    Checking bitflags v2.9.0\n   Compiling rustversion v1.0.20\n    Checking bitflags v1.3.2\n    Checking log v0.4.27\n    Checking volatile v0.4.6\n    Checking raw-cpuid v10.7.0\n    Checking x86_64 v0.14.13\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling syn v1.0.109\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\nerror[E0053]: method `steps_between` has an incompatible type for trait\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/x86_64-0.14.13/src/addr.rs:387:51\n    |\n387 |     fn steps_between(start: &Self, end: &Self) -> (usize, Option<usize>) {\n    |                                                   ^^^^^^^^^^^^^^^^^^^^^^ expected `Option<usize>`, found `(usize, Option<usize>)`\n    |\n    = note: expected signature `fn(&addr::VirtAddr, &addr::VirtAddr) -> Option<usize>`\n               found signature `fn(&addr::VirtAddr, &addr::VirtAddr) -> (usize, Option<usize>)`\nhelp: change the output type to match the trait\n    |\n387 |     fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n    |                                                   ~~~~~~~~~~~~~\n\nerror[E0053]: method `steps_between` has an incompatible type for trait\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/x86_64-0.14.13/src/structures/paging/page.rs:284:51\n    |\n284 |     fn steps_between(start: &Self, end: &Self) -> (usize, Option<usize>) {\n    |                                                   ^^^^^^^^^^^^^^^^^^^^^^ expected `Option<usize>`, found `(usize, Option<usize>)`\n    |\n    = note: expected signature `fn(&Page<_>, &Page<_>) -> Option<usize>`\n               found signature `fn(&Page<_>, &Page<_>) -> (usize, Option<usize>)`\nhelp: change the output type to match the trait\n    |\n284 |     fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n    |                                                   ~~~~~~~~~~~~~\n\n   Compiling x86 v0.52.0\n   Compiling paste v1.0.15\n    Checking spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase.git#a3496db8)\n   Compiling syn v2.0.101\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\nFor more information about this error, try `rustc --explain E0053`.\nerror: could not compile `x86_64` (lib) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n13:29:53|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 3,
          "kinds": {
            "Cargo": [
              "// pkg_name=axfs_ramfs, checker=SemverChecks\n// toolchain=nightly-2024-01-18, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-07 21:28:36.294484397 +08:00:00\n    Building axfs_ramfs v0.1.0 (current)\nerror: running cargo-doc on crate 'axfs_ramfs' failed with output:\n-----\n   Compiling serde v1.0.219\n   Compiling hashbrown v0.15.3\n   Compiling equivalent v1.0.2\n   Compiling winnow v0.5.40\n   Compiling toml_datetime v0.6.9\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling indexmap v2.9.0\n   Compiling quote v1.0.40\n    Checking cfg-if v1.0.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `cfg-if` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate axfs_ramfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axfs_ramfs v0.1.0\n",
              "// pkg_name=axfs_ramfs, checker=SemverChecks\n// toolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-07 21:28:48.114493124 +08:00:00\n    Building axfs_ramfs v0.1.0 (current)\nerror: running cargo-doc on crate 'axfs_ramfs' failed with output:\n-----\n   Compiling toml_edit v0.19.15\n    Checking cfg-if v1.0.0\n    Checking nb v1.1.0\n    Checking bit_field v0.10.2\n    Checking static_assertions v1.1.0\n    Checking nb v0.1.3\n    Checking void v1.0.2\n    Checking log v0.4.27\n   Compiling riscv v0.10.1\n    Checking embedded-hal v0.2.7\n    Checking sbi-spec v0.0.4\n    Checking bitflags v2.9.0\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling syn v1.0.109\n    Checking critical-section v1.2.0\n    Checking sbi-rt v0.0.2\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling syn v2.0.101\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n    Checking spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase.git#a3496db8)\n   Compiling unicode-width v0.1.14\n   Compiling base64 v0.13.1\n    Checking memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n    Checking const-default v1.0.0\n    Checking ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n    Checking lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n    Checking bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\n   Compiling autocfg v1.4.0\n    Checking tock-registers v0.8.1\n    Checking aarch64-cpu v9.4.0\n   Compiling svgbobdoc v0.3.0\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\n   Compiling lock_api v0.4.12\n    Checking scopeguard v1.2.0\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\n    Checking rlsf v0.2.1\n    Checking spin v0.9.8\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 4 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate axfs_ramfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axfs_ramfs v0.1.0\n",
              "// pkg_name=axfs_ramfs, checker=SemverChecks\n// toolchain=nightly-2024-01-18, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \n// timestamp=2025-05-07 21:29:02.326813664 +08:00:00\n    Building axfs_ramfs v0.1.0 (current)\nerror: running cargo-doc on crate 'axfs_ramfs' failed with output:\n-----\n    Checking bit_field v0.10.2\n    Checking cfg-if v1.0.0\n    Checking bitflags v2.9.0\n   Compiling rustversion v1.0.20\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `x86_64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add x86_64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `bit_field` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `cfg-if` (lib) due to 1 previous error\nerror: could not compile `bitflags` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate axfs_ramfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axfs_ramfs v0.1.0\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 3,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-07T13:29:15Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-07T13:29:15Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }",
              "[2025-05-07T13:29:23Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-07T13:29:23Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }",
              "[2025-05-07T13:29:22Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n\u001b[1m\u001b[32m   Compiling\u001b[0m critical-section v1.2.0\n[2025-05-07T13:29:22Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 3,
          "kinds": {
            "Outdated": [
              "pkg=axfs_ramfs, checker=Outdated\ntoolchain=nightly-2024-01-18, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-07 21:30:40.445913245 +08:00:00\n\nName  Project  Compat  Latest  Kind    Platform\n----  -------  ------  ------  ----    --------\nspin  0.9.8    ---     0.10.0  Normal  ---\n",
              "pkg=axfs_ramfs, checker=Outdated\ntoolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-07 21:31:06.271274909 +08:00:00\n\nName  Project  Compat  Latest  Kind    Platform\n----  -------  ------  ------  ----    --------\nspin  0.9.8    ---     0.10.0  Normal  ---\n",
              "pkg=axfs_ramfs, checker=Outdated\ntoolchain=nightly-2024-01-18, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-05-07 21:31:31.593353774 +08:00:00\n\nName  Project  Compat  Latest  Kind    Platform\n----  -------  ------  ------  ----    --------\nspin  0.9.8    ---     0.10.0  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 3,
          "kinds": {
            "Semver Violation": [
              "pkg=axfs_ramfs, checker=SemverChecks\ntoolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\nfeatures=\npkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target riscv64gc-unknown-none-elf \ntimestamp=2025-05-07 21:29:02.32501759 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building axfs_ramfs v0.1.0 (current)\nerror: running cargo-doc on crate 'axfs_ramfs' failed with output:\n-----\n   Compiling toml_edit v0.19.15\n    Checking cfg-if v1.0.0\n    Checking nb v1.1.0\n    Checking bit_field v0.10.2\n    Checking static_assertions v1.1.0\n    Checking nb v0.1.3\n    Checking void v1.0.2\n    Checking log v0.4.27\n   Compiling riscv v0.10.1\n    Checking embedded-hal v0.2.7\n    Checking sbi-spec v0.0.4\n    Checking bitflags v2.9.0\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling syn v1.0.109\n    Checking critical-section v1.2.0\n    Checking sbi-rt v0.0.2\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling syn v2.0.101\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n    Checking spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase.git#a3496db8)\n   Compiling unicode-width v0.1.14\n   Compiling base64 v0.13.1\n    Checking memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n    Checking const-default v1.0.0\n    Checking ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n    Checking lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n    Checking bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\n   Compiling autocfg v1.4.0\n    Checking tock-registers v0.8.1\n    Checking aarch64-cpu v9.4.0\n   Compiling svgbobdoc v0.3.0\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\n   Compiling lock_api v0.4.12\n    Checking scopeguard v1.2.0\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\n    Checking rlsf v0.2.1\n    Checking spin v0.9.8\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 4 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate axfs_ramfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axfs_ramfs v0.1.0\n",
              "pkg=axfs_ramfs, checker=SemverChecks\ntoolchain=nightly-2024-01-18, target=aarch64-unknown-none-softfloat\nfeatures=\npkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target aarch64-unknown-none-softfloat \ntimestamp=2025-05-07 21:28:48.112706655 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building axfs_ramfs v0.1.0 (current)\nerror: running cargo-doc on crate 'axfs_ramfs' failed with output:\n-----\n   Compiling serde v1.0.219\n   Compiling hashbrown v0.15.3\n   Compiling equivalent v1.0.2\n   Compiling winnow v0.5.40\n   Compiling toml_datetime v0.6.9\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling indexmap v2.9.0\n   Compiling quote v1.0.40\n    Checking cfg-if v1.0.0\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `aarch64-unknown-none-softfloat` target may not be installed\n  = help: consider downloading the target with `rustup target add aarch64-unknown-none-softfloat`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `cfg-if` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate axfs_ramfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axfs_ramfs v0.1.0\n",
              "pkg=axfs_ramfs, checker=SemverChecks\ntoolchain=nightly-2024-01-18, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \ntimestamp=2025-05-07 21:29:11.760845714 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building axfs_ramfs v0.1.0 (current)\nerror: running cargo-doc on crate 'axfs_ramfs' failed with output:\n-----\n    Checking bit_field v0.10.2\n    Checking cfg-if v1.0.0\n    Checking bitflags v2.9.0\n   Compiling rustversion v1.0.20\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `x86_64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add x86_64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `bit_field` (lib) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: could not compile `cfg-if` (lib) due to 1 previous error\nerror: could not compile `bitflags` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate axfs_ramfs v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/axfs_ramfs &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axfs_ramfs v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "shilei-massclouds",
      "repo": "axfs_ramfs",
      "pkg": "rt_ramfs",
      "count": 54,
      "raw_reports": [
        {
          "file": "src/basic.rs",
          "features": "",
          "count": 18,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 3 to 3)\n-use axfs_vfs::{VfsError, VfsNodeType, VfsResult, VfsOps};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 5 to 5)\n+use axfs_vfs::{VfsError, VfsNodeType, VfsOps, VfsResult};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 24 to 25)\n-    dir_foo.create(\"f3\", VfsNodeType::File, 0, 0, 0o777).unwrap();\n-    dir_foo.create(\"bar\", VfsNodeType::Dir, 0, 0, 0o777).unwrap();\n+    dir_foo\n+        .create(\"f3\", VfsNodeType::File, 0, 0, 0o777)\n+        .unwrap();\n+    dir_foo\n+        .create(\"bar\", VfsNodeType::Dir, 0, 0, 0o777)\n+        .unwrap();\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 28 to 28)\n-    dir_bar.create(\"f4\", VfsNodeType::File, 0, 0, 0o777).unwrap();\n+    dir_bar\n+        .create(\"f4\", VfsNodeType::File, 0, 0, 0o777)\n+        .unwrap();\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 88 to 91)\n-    assert_eq!(\n-        foo.getdents(10, &mut buf).err(),\n-        None\n-    );\n+    assert_eq!(foo.getdents(10, &mut buf).err(), None);\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 129 to 129)\n-        &root.clone().lookup(\"././/foo//./../foo//bar///..//././\", 0)?.0,\n+        &root\n+            .clone()\n+            .lookup(\"././/foo//./../foo//bar///..//././\", 0)?\n+            .0,\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 3 to 3)\n-use axfs_vfs::{VfsError, VfsNodeType, VfsResult, VfsOps};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 5 to 5)\n+use axfs_vfs::{VfsError, VfsNodeType, VfsOps, VfsResult};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 24 to 25)\n-    dir_foo.create(\"f3\", VfsNodeType::File, 0, 0, 0o777).unwrap();\n-    dir_foo.create(\"bar\", VfsNodeType::Dir, 0, 0, 0o777).unwrap();\n+    dir_foo\n+        .create(\"f3\", VfsNodeType::File, 0, 0, 0o777)\n+        .unwrap();\n+    dir_foo\n+        .create(\"bar\", VfsNodeType::Dir, 0, 0, 0o777)\n+        .unwrap();\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 28 to 28)\n-    dir_bar.create(\"f4\", VfsNodeType::File, 0, 0, 0o777).unwrap();\n+    dir_bar\n+        .create(\"f4\", VfsNodeType::File, 0, 0, 0o777)\n+        .unwrap();\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 88 to 91)\n-    assert_eq!(\n-        foo.getdents(10, &mut buf).err(),\n-        None\n-    );\n+    assert_eq!(foo.getdents(10, &mut buf).err(), None);\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 129 to 129)\n-        &root.clone().lookup(\"././/foo//./../foo//bar///..//././\", 0)?.0,\n+        &root\n+            .clone()\n+            .lookup(\"././/foo//./../foo//bar///..//././\", 0)?\n+            .0,\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 3 to 3)\n-use axfs_vfs::{VfsError, VfsNodeType, VfsResult, VfsOps};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 5 to 5)\n+use axfs_vfs::{VfsError, VfsNodeType, VfsOps, VfsResult};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 24 to 25)\n-    dir_foo.create(\"f3\", VfsNodeType::File, 0, 0, 0o777).unwrap();\n-    dir_foo.create(\"bar\", VfsNodeType::Dir, 0, 0, 0o777).unwrap();\n+    dir_foo\n+        .create(\"f3\", VfsNodeType::File, 0, 0, 0o777)\n+        .unwrap();\n+    dir_foo\n+        .create(\"bar\", VfsNodeType::Dir, 0, 0, 0o777)\n+        .unwrap();\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 28 to 28)\n-    dir_bar.create(\"f4\", VfsNodeType::File, 0, 0, 0o777).unwrap();\n+    dir_bar\n+        .create(\"f4\", VfsNodeType::File, 0, 0, 0o777)\n+        .unwrap();\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 88 to 91)\n-    assert_eq!(\n-        foo.getdents(10, &mut buf).err(),\n-        None\n-    );\n+    assert_eq!(foo.getdents(10, &mut buf).err(), None);\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/basic.rs (original lines from 129 to 129)\n-        &root.clone().lookup(\"././/foo//./../foo//bar///..//././\", 0)?.0,\n+        &root\n+            .clone()\n+            .lookup(\"././/foo//./../foo//bar///..//././\", 0)?\n+            .0,\n"
            ]
          }
        },
        {
          "file": "src/boundary.rs",
          "features": "",
          "count": 15,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/boundary.rs (original lines from 3 to 3)\n-use axfs_vfs::{VfsNodeType, VfsResult, VfsOps, VfsNodeOps};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/boundary.rs (original lines from 5 to 5)\n+use axfs_vfs::{VfsNodeOps, VfsNodeType, VfsOps, VfsResult};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/boundary.rs (original lines from 14 to 14)\n-    root.create(\"testfile\", VfsNodeType::File, 0, 0, 0o777).unwrap();\n+    root.create(\"testfile\", VfsNodeType::File, 0, 0, 0o777)\n+        .unwrap();\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/boundary.rs (original lines from 45 to 45)\n-    let pos = index*PAGE_SIZE - BUF_SIZE/2;\n+    let pos = index * PAGE_SIZE - BUF_SIZE / 2;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/boundary.rs (original lines from 52 to 52)\n-    let pos = index*PAGE_SIZE - BUF_SIZE/2;\n+    let pos = index * PAGE_SIZE - BUF_SIZE / 2;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/boundary.rs (original lines from 3 to 3)\n-use axfs_vfs::{VfsNodeType, VfsResult, VfsOps, VfsNodeOps};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/boundary.rs (original lines from 5 to 5)\n+use axfs_vfs::{VfsNodeOps, VfsNodeType, VfsOps, VfsResult};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/boundary.rs (original lines from 14 to 14)\n-    root.create(\"testfile\", VfsNodeType::File, 0, 0, 0o777).unwrap();\n+    root.create(\"testfile\", VfsNodeType::File, 0, 0, 0o777)\n+        .unwrap();\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/boundary.rs (original lines from 45 to 45)\n-    let pos = index*PAGE_SIZE - BUF_SIZE/2;\n+    let pos = index * PAGE_SIZE - BUF_SIZE / 2;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/boundary.rs (original lines from 52 to 52)\n-    let pos = index*PAGE_SIZE - BUF_SIZE/2;\n+    let pos = index * PAGE_SIZE - BUF_SIZE / 2;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/boundary.rs (original lines from 3 to 3)\n-use axfs_vfs::{VfsNodeType, VfsResult, VfsOps, VfsNodeOps};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/boundary.rs (original lines from 5 to 5)\n+use axfs_vfs::{VfsNodeOps, VfsNodeType, VfsOps, VfsResult};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/boundary.rs (original lines from 14 to 14)\n-    root.create(\"testfile\", VfsNodeType::File, 0, 0, 0o777).unwrap();\n+    root.create(\"testfile\", VfsNodeType::File, 0, 0, 0o777)\n+        .unwrap();\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/boundary.rs (original lines from 45 to 45)\n-    let pos = index*PAGE_SIZE - BUF_SIZE/2;\n+    let pos = index * PAGE_SIZE - BUF_SIZE / 2;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/boundary.rs (original lines from 52 to 52)\n-    let pos = index*PAGE_SIZE - BUF_SIZE/2;\n+    let pos = index * PAGE_SIZE - BUF_SIZE / 2;\n"
            ]
          }
        },
        {
          "file": "src/bench.rs",
          "features": "",
          "count": 9,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/bench.rs (original lines from 1 to 1)\n-use axfs_vfs::{VfsNodeType, VfsResult, VfsOps};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/bench.rs (original lines from 3 to 3)\n+use axfs_vfs::{VfsNodeType, VfsOps, VfsResult};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/bench.rs (original lines from 15 to 15)\n-    root.create(\"test_file\", VfsNodeType::File, 0, 0, 0o777).unwrap();\n+    root.create(\"test_file\", VfsNodeType::File, 0, 0, 0o777)\n+        .unwrap();\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/bench.rs (original lines from 1 to 1)\n-use axfs_vfs::{VfsNodeType, VfsResult, VfsOps};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/bench.rs (original lines from 3 to 3)\n+use axfs_vfs::{VfsNodeType, VfsOps, VfsResult};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/bench.rs (original lines from 15 to 15)\n-    root.create(\"test_file\", VfsNodeType::File, 0, 0, 0o777).unwrap();\n+    root.create(\"test_file\", VfsNodeType::File, 0, 0, 0o777)\n+        .unwrap();\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/bench.rs (original lines from 1 to 1)\n-use axfs_vfs::{VfsNodeType, VfsResult, VfsOps};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/bench.rs (original lines from 3 to 3)\n+use axfs_vfs::{VfsNodeType, VfsOps, VfsResult};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs/src/bench.rs (original lines from 15 to 15)\n-    root.create(\"test_file\", VfsNodeType::File, 0, 0, 0o777).unwrap();\n+    root.create(\"test_file\", VfsNodeType::File, 0, 0, 0o777)\n+        .unwrap();\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/Cargo.lock",
          "features": "",
          "count": 3,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n└── x2apic 0.4.3\n    ├── axhal 0.1.0\n    │   ├── taskctx 0.1.0\n    │   │   └── run_queue 0.1.0\n    │   │       ├── pipefs 0.1.0\n    │   │       │   ├── axfs_ramfs 0.1.0\n    │   │       │   │   └── rt_ramfs 0.1.0\n    │   │       │   └── axfs_ramfs 0.1.0\n    │   │       └── axfs_devfs 0.1.0\n    │   │           ├── axfs_ramfs 0.1.0\n    │   │           └── axfs_ramfs 0.1.0\n    │   ├── run_queue 0.1.0\n    │   ├── rt_ramfs 0.1.0\n    │   ├── page_table_entry 0.1.0\n    │   │   └── page_table 0.1.0\n    │   │       └── taskctx 0.1.0\n    │   ├── page_table 0.1.0\n    │   ├── axfs_devfs 0.1.0\n    │   └── axalloc 0.1.0\n    │       ├── rt_ramfs 0.1.0\n    │       └── page_table 0.1.0\n    └── arch_boot 0.1.0\n        └── rt_ramfs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 778,\n    \"last-commit\": \"c5421337865bb6eae6d67811bbb7f5257a5f3faa\",\n    \"last-updated\": \"2025-05-07T10:32:09+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 77\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}",
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n└── x2apic 0.4.3\n    ├── axhal 0.1.0\n    │   ├── taskctx 0.1.0\n    │   │   └── run_queue 0.1.0\n    │   │       ├── pipefs 0.1.0\n    │   │       │   ├── axfs_ramfs 0.1.0\n    │   │       │   │   └── rt_ramfs 0.1.0\n    │   │       │   └── axfs_ramfs 0.1.0\n    │   │       └── axfs_devfs 0.1.0\n    │   │           ├── axfs_ramfs 0.1.0\n    │   │           └── axfs_ramfs 0.1.0\n    │   ├── run_queue 0.1.0\n    │   ├── rt_ramfs 0.1.0\n    │   ├── page_table_entry 0.1.0\n    │   │   └── page_table 0.1.0\n    │   │       └── taskctx 0.1.0\n    │   ├── page_table 0.1.0\n    │   ├── axfs_devfs 0.1.0\n    │   └── axalloc 0.1.0\n    │       ├── rt_ramfs 0.1.0\n    │       └── page_table 0.1.0\n    └── arch_boot 0.1.0\n        └── rt_ramfs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 778,\n    \"last-commit\": \"c5421337865bb6eae6d67811bbb7f5257a5f3faa\",\n    \"last-updated\": \"2025-05-07T10:32:09+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 77\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}",
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n└── x2apic 0.4.3\n    ├── axhal 0.1.0\n    │   ├── taskctx 0.1.0\n    │   │   └── run_queue 0.1.0\n    │   │       ├── pipefs 0.1.0\n    │   │       │   ├── axfs_ramfs 0.1.0\n    │   │       │   │   └── rt_ramfs 0.1.0\n    │   │       │   └── axfs_ramfs 0.1.0\n    │   │       └── axfs_devfs 0.1.0\n    │   │           ├── axfs_ramfs 0.1.0\n    │   │           └── axfs_ramfs 0.1.0\n    │   ├── run_queue 0.1.0\n    │   ├── rt_ramfs 0.1.0\n    │   ├── page_table_entry 0.1.0\n    │   │   └── page_table 0.1.0\n    │   │       └── taskctx 0.1.0\n    │   ├── page_table 0.1.0\n    │   ├── axfs_devfs 0.1.0\n    │   └── axalloc 0.1.0\n    │       ├── rt_ramfs 0.1.0\n    │       └── page_table 0.1.0\n    └── arch_boot 0.1.0\n        └── rt_ramfs 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 778,\n    \"last-commit\": \"c5421337865bb6eae6d67811bbb7f5257a5f3faa\",\n    \"last-updated\": \"2025-05-07T10:32:09+02:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 77\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 3,
          "kinds": {
            "Cargo": [
              "// pkg_name=rt_ramfs, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-07 21:29:27.242420068 +08:00:00\n[2025-05-07T13:29:22Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-07T13:29:22Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling aarch64-cpu v9.4.0\n   Compiling allocator v0.1.0 (ssh://git@github.com/shilei-massclouds/allocator#d93ad046)\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 4 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=rt_ramfs, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-07 21:29:27.027805203 +08:00:00\n[2025-05-07T13:29:15Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-07T13:29:15Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling allocator v0.1.0 (ssh://git@github.com/shilei-massclouds/allocator#d93ad046)\n   Compiling lock_api v0.4.12\nerror[E0583]: file not found for module `aarch64_common`\n --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/mod.rs:5:9\n  |\n5 |         mod aarch64_common;\n  |         ^^^^^^^^^^^^^^^^^^^\n  |\n  = help: to create the module `aarch64_common`, create file \"/home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/aarch64_common.rs\" or \"/home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/aarch64_common/mod.rs\"\n  = note: if there is a `mod aarch64_common` elsewhere in the crate already, import it with `use crate::...` instead\n\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433, E0583.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n",
              "// pkg_name=rt_ramfs, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-none \n// timestamp=2025-05-07 21:29:29.156940002 +08:00:00\n[2025-05-07T13:29:23Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-07T13:29:23Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling x2apic v0.4.3\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling allocator v0.1.0 (ssh://git@github.com/shilei-massclouds/allocator#d93ad046)\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `console_init` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:17:15\n   |\n17 |     platform::console_init();\n   |               ^^^^^^^^^^^^ not found in `platform`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 3,
          "kinds": {
            "Cargo": [
              "// pkg_name=rt_ramfs, checker=Rapx\n// toolchain=nightly-2024-01-18, target=aarch64-unknown-none-softfloat\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target aarch64-unknown-none-softfloat \n// timestamp=2025-05-07 21:29:53.688447164 +08:00:00\n   Compiling equivalent v1.0.2\n   Compiling hashbrown v0.15.3\n   Compiling serde v1.0.219\n   Compiling toml_datetime v0.6.9\n   Compiling winnow v0.5.40\n   Compiling proc-macro2 v1.0.95\n   Compiling indexmap v2.9.0\n   Compiling unicode-ident v1.0.18\n    Checking cfg-if v1.0.0\n   Compiling quote v1.0.40\n    Checking log v0.4.27\n    Checking bitflags v2.9.0\n   Compiling toml_edit v0.19.15\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling syn v1.0.109\n   Compiling syn v2.0.101\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n    Checking tock-registers v0.8.1\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n    Checking aarch64-cpu v9.4.0\n    Checking spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase.git#a3496db8)\n   Compiling base64 v0.13.1\n   Compiling unicode-width v0.1.14\n    Checking const-default v1.0.0\n    Checking memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\n    Checking lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n    Checking static_assertions v1.1.0\n    Checking bit_field v0.10.2\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\n    Checking ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n   Compiling svgbobdoc v0.3.0\nerror[E0583]: file not found for module `aarch64_common`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/mod.rs:5:9\n  |\n5 |         mod aarch64_common;\n  |         ^^^^^^^^^^^^^^^^^^^\n  |\n  = help: to create the module `aarch64_common`, create file \"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/aarch64_common.rs\" or \"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/aarch64_common/mod.rs\"\n  = note: if there is a `mod aarch64_common` elsewhere in the crate already, import it with `use crate::...` instead\n\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433, E0583.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n13:30:01|RAP|ERROR|: Finished with non-zero exit code.\n",
              "// pkg_name=rt_ramfs, checker=Rapx\n// toolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target riscv64gc-unknown-none-elf \n// timestamp=2025-05-07 21:30:01.630718705 +08:00:00\n   Compiling equivalent v1.0.2\n   Compiling hashbrown v0.15.3\n   Compiling serde v1.0.219\n   Compiling toml_datetime v0.6.9\n   Compiling winnow v0.5.40\n   Compiling proc-macro2 v1.0.95\n   Compiling indexmap v2.9.0\n   Compiling unicode-ident v1.0.18\n    Checking cfg-if v1.0.0\n   Compiling quote v1.0.40\n    Checking bit_field v0.10.2\n    Checking nb v1.1.0\n   Compiling toml_edit v0.19.15\n    Checking nb v0.1.3\n    Checking void v1.0.2\n   Compiling riscv v0.10.1\n    Checking log v0.4.27\n    Checking static_assertions v1.1.0\n    Checking embedded-hal v0.2.7\n    Checking sbi-spec v0.0.4\n    Checking critical-section v1.2.0\n    Checking sbi-rt v0.0.2\n   Compiling syn v1.0.109\n    Checking bitflags v2.9.0\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling syn v2.0.101\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n    Checking spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase.git#a3496db8)\n   Compiling unicode-width v0.1.14\n   Compiling base64 v0.13.1\n    Checking ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n    Checking lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n    Checking const-default v1.0.0\n    Checking memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n    Checking bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\n   Compiling autocfg v1.4.0\n    Checking tock-registers v0.8.1\n    Checking aarch64-cpu v9.4.0\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 4 previous errors\nwarning: build failed, waiting for other jobs to finish...\n13:30:10|RAP|ERROR|: Finished with non-zero exit code.\n",
              "// pkg_name=rt_ramfs, checker=Rapx\n// toolchain=nightly-2024-01-18, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axfs_ramfs/rt_ramfs\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-none \n// timestamp=2025-05-07 21:30:10.075115462 +08:00:00\n   Compiling equivalent v1.0.2\n   Compiling hashbrown v0.15.3\n   Compiling serde v1.0.219\n   Compiling winnow v0.5.40\n   Compiling toml_datetime v0.6.9\n   Compiling proc-macro2 v1.0.95\n   Compiling indexmap v2.9.0\n    Checking bit_field v0.10.2\n   Compiling unicode-ident v1.0.18\n    Checking cfg-if v1.0.0\n   Compiling rustversion v1.0.20\n   Compiling quote v1.0.40\n   Compiling toml_edit v0.19.15\n    Checking bitflags v2.9.0\n    Checking volatile v0.4.6\n    Checking log v0.4.27\n    Checking bitflags v1.3.2\n    Checking raw-cpuid v10.7.0\n    Checking x86_64 v0.14.13\nerror[E0053]: method `steps_between` has an incompatible type for trait\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/x86_64-0.14.13/src/addr.rs:387:51\n    |\n387 |     fn steps_between(start: &Self, end: &Self) -> (usize, Option<usize>) {\n    |                                                   ^^^^^^^^^^^^^^^^^^^^^^ expected `Option<usize>`, found `(usize, Option<usize>)`\n    |\n    = note: expected signature `fn(&addr::VirtAddr, &addr::VirtAddr) -> Option<usize>`\n               found signature `fn(&addr::VirtAddr, &addr::VirtAddr) -> (usize, Option<usize>)`\nhelp: change the output type to match the trait\n    |\n387 |     fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n    |                                                   ~~~~~~~~~~~~~\n\n   Compiling paste v1.0.15\nerror[E0053]: method `steps_between` has an incompatible type for trait\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/x86_64-0.14.13/src/structures/paging/page.rs:284:51\n    |\n284 |     fn steps_between(start: &Self, end: &Self) -> (usize, Option<usize>) {\n    |                                                   ^^^^^^^^^^^^^^^^^^^^^^ expected `Option<usize>`, found `(usize, Option<usize>)`\n    |\n    = note: expected signature `fn(&Page<_>, &Page<_>) -> Option<usize>`\n               found signature `fn(&Page<_>, &Page<_>) -> (usize, Option<usize>)`\nhelp: change the output type to match the trait\n    |\n284 |     fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n    |                                                   ~~~~~~~~~~~~~\n\n   Compiling x86 v0.52.0\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling syn v1.0.109\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\nFor more information about this error, try `rustc --explain E0053`.\nerror: could not compile `x86_64` (lib) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n13:30:15|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 3,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-07T13:29:22Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-07T13:29:22Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }",
              "[2025-05-07T13:29:15Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-07T13:29:15Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }",
              "[2025-05-07T13:29:23Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-07T13:29:23Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Outdated",
    "Geiger",
    "Unformatted"
  ]
}