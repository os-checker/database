{"repo":{"user":"shilei-massclouds","repo":"axhal"},"data":[{"user":"shilei-massclouds","repo":"axhal","pkg":"axhal","count":21,"raw_reports":[{"file":"src/arch/riscv/mod.rs","count":6,"kinds":{"Unformatted":["file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/arch/riscv/mod.rs (original lines from 10 to 10)\n+use axerrno::{linux_err, LinuxError};\n","file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/arch/riscv/mod.rs (original lines from 13 to 13)\n-use axerrno::{LinuxError, linux_err};\n","file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/arch/riscv/mod.rs (original lines from 37 to 38)\n-pub const SR_SPIE:  usize = 0x00000020; /* Previous Supervisor IE */\n-pub const SR_SPP:   usize = 0x00000100; /* Previously Supervisor */\n+pub const SR_SPIE: usize = 0x00000020; /* Previous Supervisor IE */\n+pub const SR_SPP: usize = 0x00000100; /* Previously Supervisor */\n","file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/arch/riscv/mod.rs (original lines from 172 to 192)\n-    unsafe { core::arch::asm!(\n-        \"1:\",\n-        \"   lb {x}, ({ptr})\",\n-        \"2:\",\n-        \"   .section .fixup,\\\"ax\\\"\",\n-        \"   .balign 4\",\n-        \"3:\",\n-        \"   li {err}, {err_val}\",\n-        \"   li {x}, 0\",\n-        \"   jump 2b, {_tmp}\",\n-        \"   .previous\",\n-        \"   .section __ex_table,\\\"a\\\"\",\n-        \"   .balign 8\",\n-        \"   .dword 1b, 3b\",\n-        \"   .previous\",\n-        err = inout(reg) err,\n-        x = out(reg) x,\n-        ptr = in(reg) ptr,\n-        err_val = const (-(LinuxError::EFAULT as isize)),\n-        _tmp = out(reg) _tmp,\n-    )}\n+    unsafe {\n+        core::arch::asm!(\n+            \"1:\",\n+            \"   lb {x}, ({ptr})\",\n+            \"2:\",\n+            \"   .section .fixup,\\\"ax\\\"\",\n+            \"   .balign 4\",\n+            \"3:\",\n+            \"   li {err}, {err_val}\",\n+            \"   li {x}, 0\",\n+            \"   jump 2b, {_tmp}\",\n+            \"   .previous\",\n+            \"   .section __ex_table,\\\"a\\\"\",\n+            \"   .balign 8\",\n+            \"   .dword 1b, 3b\",\n+            \"   .previous\",\n+            err = inout(reg) err,\n+            x = out(reg) x,\n+            ptr = in(reg) ptr,\n+            err_val = const (-(LinuxError::EFAULT as isize)),\n+            _tmp = out(reg) _tmp,\n+        )\n+    }\n","file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/arch/riscv/mod.rs (original lines from 200 to 219)\n-    unsafe { core::arch::asm!(\n-        \"1:\",\n-        \"   sb {x}, ({ptr})\",\n-        \"2:\",\n-        \"   .section .fixup,\\\"ax\\\"\",\n-        \"   .balign 4\",\n-        \"3:\",\n-        \"   li {err}, {err_val}\",\n-        \"   jump 2b, {_tmp}\",\n-        \"   .previous\",\n-        \"   .section __ex_table,\\\"a\\\"\",\n-        \"   .balign 8\",\n-        \"   .dword 1b, 3b\",\n-        \"   .previous\",\n-        err = inout(reg) err,\n-        x = in(reg) x,\n-        ptr = in(reg) ptr,\n-        err_val = const (-(LinuxError::EFAULT as isize)),\n-        _tmp = out(reg) _tmp,\n-    )}\n+    unsafe {\n+        core::arch::asm!(\n+            \"1:\",\n+            \"   sb {x}, ({ptr})\",\n+            \"2:\",\n+            \"   .section .fixup,\\\"ax\\\"\",\n+            \"   .balign 4\",\n+            \"3:\",\n+            \"   li {err}, {err_val}\",\n+            \"   jump 2b, {_tmp}\",\n+            \"   .previous\",\n+            \"   .section __ex_table,\\\"a\\\"\",\n+            \"   .balign 8\",\n+            \"   .dword 1b, 3b\",\n+            \"   .previous\",\n+            err = inout(reg) err,\n+            x = in(reg) x,\n+            ptr = in(reg) ptr,\n+            err_val = const (-(LinuxError::EFAULT as isize)),\n+            _tmp = out(reg) _tmp,\n+        )\n+    }\n","file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/arch/riscv/mod.rs (original lines from 276 to 277)\n-pub fn early_init() {\n-}\n+pub fn early_init() {}\n"]}},{"file":"src/arch/aarch64/trap.rs","count":4,"kinds":{"Unformatted":["file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/arch/aarch64/trap.rs (original lines from 3 to 3)\n+use crate::trap::SyscallArgs;\n","file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/arch/aarch64/trap.rs (original lines from 5 to 5)\n-use crate::trap::SyscallArgs;\n","file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/arch/aarch64/trap.rs (original lines from 91 to 94)\n-    [\n-        tf.r[0], tf.r[1], tf.r[2],\n-        tf.r[3], tf.r[4], tf.r[5],\n-    ].map(|x| x as usize)\n+    [tf.r[0], tf.r[1], tf.r[2], tf.r[3], tf.r[4], tf.r[5]].map(|x| x as usize)\n","file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/arch/aarch64/trap.rs (original lines from 99 to 99)\n-    F: FnOnce(SyscallArgs, usize) -> usize\n+    F: FnOnce(SyscallArgs, usize) -> usize,\n"]}},{"file":"src/misc.rs","count":4,"kinds":{"Unformatted":["file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/misc.rs (original lines from 5 to 5)\n-use spinbase::SpinNoIrq;\n","file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/misc.rs (original lines from 7 to 7)\n+use spinbase::SpinNoIrq;\n","file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/misc.rs (original lines from 12 to 12)\n-\tlet mut seed = PARK_MILLER_LEHMER_SEED.lock();\n+    let mut seed = PARK_MILLER_LEHMER_SEED.lock();\n","file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/misc.rs (original lines from 19 to 19)\n-\t    *seed = ((u64::from(*seed) * 48271) % RAND_MAX) as u32;\n+        *seed = ((u64::from(*seed) * 48271) % RAND_MAX) as u32;\n"]}},{"file":"src/arch/riscv/sysno.rs","count":2,"kinds":{"Unformatted":["file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/arch/riscv/sysno.rs (original lines from 17 to 17)\n-pub const LINUX_SYSCALL_MOUNT:usize = 0x28;\n+pub const LINUX_SYSCALL_MOUNT: usize = 0x28;\n","file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/arch/riscv/sysno.rs (original lines from 47 to 47)\n-pub const LINUX_SYSCALL_SETGID:usize = 0x90;\n+pub const LINUX_SYSCALL_SETGID: usize = 0x90;\n"]}},{"file":"(virtual) lockbud","count":1,"kinds":{"Cargo":["// pkg_name=axhal, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_12/shilei-massclouds/axhal/axhal\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target riscv64gc-unknown-none-elf\n   Compiling nb v1.1.0\n   Compiling cfg-if v1.0.0\n   Compiling void v1.0.2\n   Compiling riscv v0.10.1\n   Compiling static_assertions v1.1.0\n   Compiling nb v0.1.3\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\n   Compiling log v0.4.22\n   Compiling sbi-spec v0.0.4\n   Compiling embedded-hal v0.2.7\n   Compiling critical-section v1.2.0\n   Compiling bit_field v0.10.2\n[2024-11-22T10:29:59Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:29:59Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling sbi-rt v0.0.2\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling bitflags v2.6.0\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling axhal v0.1.0 (/home/runner/check/batch_12/shilei-massclouds/axhal/axhal)\n   Compiling spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n   Compiling memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n   Compiling ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n   Compiling lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 4 previous errors\n"]}},{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-11-22T10:29:59Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:29:59Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}},{"file":"[semver checks]","count":1,"kinds":{"Semver Violation":["pkg=axhal, checker=SemverChecks\ntoolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\npkg_dir=/home/runner/check/batch_14/shilei-massclouds/axhal/axhal\ncmd=cargo semver-checks --target riscv64gc-unknown-none-elf\n\n"]}},{"file":"src/arch/aarch64/context.rs","count":1,"kinds":{"Unformatted":["file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/arch/aarch64/context.rs (original lines from 185 to 189)\n-    let mut regs = unsafe {\n-        core::slice::from_raw_parts_mut(\n-            regs as *mut TrapFrame, 1\n-        )\n-    };\n+    let mut regs = unsafe { core::slice::from_raw_parts_mut(regs as *mut TrapFrame, 1) };\n"]}},{"file":"src/arch/x86_64/sysno.rs","count":1,"kinds":{"Unformatted":["file: /home/runner/check/batch_12/shilei-massclouds/axhal/axhal/src/arch/x86_64/sysno.rs (original lines from 85 to 85)\n-pub const LINUX_SYSCALL_SETGID:usize = 106;\n+pub const LINUX_SYSCALL_SETGID: usize = 106;\n"]}}]},{"user":"shilei-massclouds","repo":"axhal","pkg":"rt_axhal","count":4,"raw_reports":[{"file":"src/main.rs","count":2,"kinds":{"Unformatted":["file: /home/runner/check/batch_12/shilei-massclouds/axhal/rt_axhal/src/main.rs (original lines from 7 to 7)\n-use core::panic::PanicInfo;\n","file: /home/runner/check/batch_12/shilei-massclouds/axhal/rt_axhal/src/main.rs (original lines from 9 to 9)\n+use core::panic::PanicInfo;\n"]}},{"file":"(virtual) lockbud","count":1,"kinds":{"Cargo":["// pkg_name=rt_axhal, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_12/shilei-massclouds/axhal/rt_axhal\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target riscv64gc-unknown-none-elf\n[2024-11-22T10:29:59Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:29:59Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling arch_boot v0.1.0 (ssh://git@github.com/shilei-massclouds/arch_boot.git#8663e839)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 4 previous errors\n"]}},{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-11-22T10:29:59Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:29:59Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Semver Violation","Audit","Mirai","Rap","Rudra","Lockbud(Probably)","Lockbud(Possibly)","Outdated","Geiger","Unformatted"]}