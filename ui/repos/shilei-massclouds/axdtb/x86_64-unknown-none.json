{
  "repo": {
    "user": "shilei-massclouds",
    "repo": "axdtb"
  },
  "data": [
    {
      "user": "shilei-massclouds",
      "repo": "axdtb",
      "pkg": "axdtb",
      "count": 28,
      "raw_reports": [
        {
          "file": "src/lib.rs",
          "features": "",
          "count": 14,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 3 to 3)\n-use core::str;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 5 to 5)\n+use core::str;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 12 to 12)\n-const MAGIC_NUMBER     : u32 = 0xd00dfeed;\n+const MAGIC_NUMBER: u32 = 0xd00dfeed;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 14 to 16)\n-const OF_DT_BEGIN_NODE : u32 = 0x00000001;\n-const OF_DT_END_NODE   : u32 = 0x00000002;\n-const OF_DT_PROP       : u32 = 0x00000003;\n+const OF_DT_BEGIN_NODE: u32 = 0x00000001;\n+const OF_DT_END_NODE: u32 = 0x00000002;\n+const OF_DT_PROP: u32 = 0x00000003;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 38 to 40)\n-        let buf = unsafe {\n-            core::slice::from_raw_parts(ptr as *const u8, 24)\n-        };\n+        let buf = unsafe { core::slice::from_raw_parts(ptr as *const u8, 24) };\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 43 to 43)\n-            return Err(DeviceTreeError::BadMagicNumber)\n+            return Err(DeviceTreeError::BadMagicNumber);\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 53 to 55)\n-        Ok(\n-            Self {ptr, totalsize, off_struct, off_strings}\n-        )\n+        Ok(Self {\n+            ptr,\n+            totalsize,\n+            off_struct,\n+            off_strings,\n+        })\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 61 to 61)\n-        &self, mut pos: usize,\n+        &self,\n+        mut pos: usize,\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 64 to 64)\n-        cb: &mut dyn FnMut(String, usize, usize, Vec<(String, Vec<u8>)>)\n+        cb: &mut dyn FnMut(String, usize, usize, Vec<(String, Vec<u8>)>),\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 66 to 68)\n-        let buf = unsafe {\n-            core::slice::from_raw_parts(self.ptr as *const u8, self.totalsize)\n-        };\n+        let buf = unsafe { core::slice::from_raw_parts(self.ptr as *const u8, self.totalsize) };\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 72 to 72)\n-            return Err(DeviceTreeError::ParseError(pos))\n+            return Err(DeviceTreeError::ParseError(pos));\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 82 to 83)\n-            let val_size = buf.read_be_u32(pos+4)? as usize;\n-            let name_offset = buf.read_be_u32(pos+8)? as usize;\n+            let val_size = buf.read_be_u32(pos + 4)? as usize;\n+            let name_offset = buf.read_be_u32(pos + 8)? as usize;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 115 to 115)\n-            return Err(DeviceTreeError::ParseError(pos))\n+            return Err(DeviceTreeError::ParseError(pos));\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 131 to 131)\n-where F: FnMut(String, usize, usize, Vec<(String, Vec<u8>)>)\n+where\n+    F: FnMut(String, usize, usize, Vec<(String, Vec<u8>)>),\n"
            ]
          }
        },
        {
          "file": "src/util.rs",
          "features": "",
          "count": 6,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 1 to 1)\n-use crate::{DeviceTreeResult, DeviceTreeError};\n+use crate::{DeviceTreeError, DeviceTreeResult};\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 13 to 14)\n-        if ! (pos+4 <= self.len()) {\n-            return Err(DeviceTreeError::SliceReadError)\n+        if !(pos + 4 <= self.len()) {\n+            return Err(DeviceTreeError::SliceReadError);\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 17 to 22)\n-        Ok(\n-            (self[pos] as u32) << 24\n-            | (self[pos+1] as u32) << 16\n-            | (self[pos+2] as u32) << 8\n-            | (self[pos+3] as u32)\n-        )\n+        Ok((self[pos] as u32) << 24\n+            | (self[pos + 1] as u32) << 16\n+            | (self[pos + 2] as u32) << 8\n+            | (self[pos + 3] as u32))\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 26 to 26)\n-        let lo: u64 = self.read_be_u32(pos+4)?.into();\n+        let lo: u64 = self.read_be_u32(pos + 4)?.into();\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 33 to 33)\n-                return Ok(&self[pos..cur])\n+                return Ok(&self[pos..cur]);\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 40 to 41)\n-        if ! (end < self.len()) {\n-            return Err(DeviceTreeError::SliceReadError)\n+        if !(end < self.len()) {\n+            return Err(DeviceTreeError::SliceReadError);\n"
            ]
          }
        },
        {
          "file": "tests/test_dtb.rs",
          "features": "",
          "count": 6,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 1 to 2)\n-use std::str;\n-use std::io::Read;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 4 to 4)\n+use std::io::Read;\n+use std::str;\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 11 to 18)\n-    let mut cb = |name: String, addr_cells: usize, size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n-        match name.as_str() {\n-            \"\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"riscv-virtio\\0\"));\n+    let mut cb =\n+        |name: String, addr_cells: usize, size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n+            match name.as_str() {\n+                \"\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"riscv-virtio\\0\"));\n+                        }\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 21 to 27)\n-            },\n-            \"soc\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"simple-bus\\0\"));\n+                \"soc\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"simple-bus\\0\"));\n+                        }\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 30 to 40)\n-            },\n-            \"virtio_mmio@10001000\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"virtio,mmio\\0\"));\n-                    } else if prop.0.as_str() == \"reg\" {\n-                        let reg = &(prop.1);\n-                        assert_eq!(reg.as_slice().read_be_u64(0).unwrap(), 0x10001000);\n-                        assert_eq!(reg.as_slice().read_be_u64(8).unwrap(), 0x1000);\n+                \"virtio_mmio@10001000\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"virtio,mmio\\0\"));\n+                        } else if prop.0.as_str() == \"reg\" {\n+                            let reg = &(prop.1);\n+                            assert_eq!(reg.as_slice().read_be_u64(0).unwrap(), 0x10001000);\n+                            assert_eq!(reg.as_slice().read_be_u64(8).unwrap(), 0x1000);\n+                        }\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 43 to 46)\n-            },\n-            _ => {}\n-        }\n-    };\n+                _ => {}\n+            }\n+        };\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=axdtb, checker=SemverChecks\n// toolchain=nightly-2024-01-18, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \n// timestamp=2025-05-24 23:58:47.854916787 +08:00:00\n    Building axdtb v0.1.0 (current)\nerror: running cargo-doc on crate 'axdtb' failed with output:\n-----\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `x86_64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add x86_64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `axconfig` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate axdtb v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axdtb v0.1.0\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=axdtb, checker=SemverChecks\ntoolchain=nightly-2024-01-18, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \ntimestamp=2025-05-24 23:58:48.630718455 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building axdtb v0.1.0 (current)\nerror: running cargo-doc on crate 'axdtb' failed with output:\n-----\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `x86_64-unknown-none` target may not be installed\n  = help: consider downloading the target with `rustup target add x86_64-unknown-none`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `axconfig` (lib) due to 1 previous error\n\n-----\n\nerror: failed to build rustdoc for crate axdtb v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_7/shilei-massclouds/axdtb/axdtb &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate axdtb v0.1.0\n"
            ]
          }
        }
      ]
    },
    {
      "user": "shilei-massclouds",
      "repo": "axdtb",
      "pkg": "rt_axdtb",
      "count": 9,
      "raw_reports": [
        {
          "file": "src/main.rs",
          "features": "",
          "count": 5,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 27 to 41)\n-    let mut cb = |name: String,\n-                  _addr_cells: usize,\n-                  _size_cells: usize,\n-                  props: Vec<(String, Vec<u8>)>| {\n-        match name.as_str() {\n-            \"chosen\" => {\n-                for prop in props {\n-                    match prop.0.as_str() {\n-                        \"bootargs\" => {\n-                            if let Ok(cmd) = core::str::from_utf8(&prop.1) {\n-                                let cmd = cmd.trim_end_matches(char::from(0));\n-                                assert!(cmd.len() > 0);\n-                                assert!(cmd.starts_with(\"init=\"));\n-                                let cmd = cmd.strip_prefix(\"init=\").unwrap();\n-                                assert!(cmd == \"/sbin/init\" || cmd == \"/btp/sbin/hello\");\n+    let mut cb =\n+        |name: String, _addr_cells: usize, _size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n+            match name.as_str() {\n+                \"chosen\" => {\n+                    for prop in props {\n+                        match prop.0.as_str() {\n+                            \"bootargs\" => {\n+                                if let Ok(cmd) = core::str::from_utf8(&prop.1) {\n+                                    let cmd = cmd.trim_end_matches(char::from(0));\n+                                    assert!(cmd.len() > 0);\n+                                    assert!(cmd.starts_with(\"init=\"));\n+                                    let cmd = cmd.strip_prefix(\"init=\").unwrap();\n+                                    assert!(cmd == \"/sbin/init\" || cmd == \"/btp/sbin/hello\");\n+                                }\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 43 to 43)\n+                            _ => (),\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 44 to 44)\n-                        _ => (),\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 47 to 50)\n-            },\n-            _ => (),\n-        }\n-    };\n+                _ => (),\n+            }\n+        };\n",
              "file: /home/runner/check/batch_7/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 56 to 57)\n-fn test_dtb(_dtb_pa: usize) {\n-}\n+fn test_dtb(_dtb_pa: usize) {}\n"
            ]
          }
        },
        {
          "file": "/home/runner/check/batch_7/shilei-massclouds/axdtb/Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     paste\nVersion:   1.0.15\nWarning:   unmaintained\nTitle:     paste - no longer maintained\nDate:      2024-10-07\nID:        RUSTSEC-2024-0436\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0436\nDependency tree:\npaste 1.0.15\n└── x2apic 0.4.3\n    ├── axhal 0.1.0\n    │   ├── rt_axdtb 0.1.0\n    │   └── axalloc 0.1.0\n    │       └── rt_axdtb 0.1.0\n    └── arch_boot 0.1.0\n        └── rt_axdtb 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 782,\n    \"last-commit\": \"bccf313a98c034573ac4170e6271749113343d97\",\n    \"last-updated\": \"2025-05-22T19:04:33+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 69\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"paste\",\n          \"version\": \"1.0.15\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\",\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0436\",\n          \"package\": \"paste\",\n          \"title\": \"paste - no longer maintained\",\n          \"description\": \"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \\nthat this project is not longer maintained as well as archived the repository\",\n          \"date\": \"2024-10-07\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/dtolnay/paste\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=rt_axdtb, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axdtb/rt_axdtb\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-none \n// timestamp=2025-05-24 23:58:59.742941881 +08:00:00\n   Compiling bit_field v0.10.2\n   Compiling cfg-if v1.0.0\n   Compiling rustversion v1.0.21\n   Compiling bitflags v2.9.1\n   Compiling volatile v0.4.6\n   Compiling bitflags v1.3.2\n   Compiling raw-cpuid v10.7.0\n   Compiling log v0.4.27\n   Compiling x86 v0.52.0\n[2025-05-24T15:59:00Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-24T15:59:00Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling paste v1.0.15\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n   Compiling bit v0.1.1\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling svgbobdoc v0.3.0\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling percpu_macros2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling x86_64 v0.14.13\n   Compiling raw-cpuid v11.5.0\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal#db90ff50)\n   Compiling const-default v1.0.0\n   Compiling rlsf v0.2.1\n   Compiling bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\n   Compiling arch_boot v0.1.0 (ssh://git@github.com/shilei-massclouds/arch_boot#8663e839)\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `console_init` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:17:15\n   |\n17 |     platform::console_init();\n   |               ^^^^^^^^^^^^ not found in `platform`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=rt_axdtb, checker=Rapx\n// toolchain=nightly-2024-01-18, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_7/shilei-massclouds/axdtb/rt_axdtb\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-none \n// timestamp=2025-05-24 23:59:31.012896985 +08:00:00\n   Compiling equivalent v1.0.2\n   Compiling hashbrown v0.15.3\n   Compiling serde v1.0.219\n   Compiling winnow v0.5.40\n   Compiling toml_datetime v0.6.9\n   Compiling proc-macro2 v1.0.95\n   Compiling indexmap v2.9.0\n   Compiling unicode-ident v1.0.18\n    Checking bit_field v0.10.2\n    Checking cfg-if v1.0.0\n   Compiling rustversion v1.0.21\n   Compiling toml_edit v0.19.15\n   Compiling quote v1.0.40\n    Checking bitflags v2.9.1\n    Checking bitflags v1.3.2\n    Checking volatile v0.4.6\n    Checking raw-cpuid v10.7.0\n    Checking x86_64 v0.14.13\n   Compiling syn v1.0.109\nerror[E0053]: method `steps_between` has an incompatible type for trait\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/x86_64-0.14.13/src/addr.rs:387:51\n    |\n387 |     fn steps_between(start: &Self, end: &Self) -> (usize, Option<usize>) {\n    |                                                   ^^^^^^^^^^^^^^^^^^^^^^ expected `Option<usize>`, found `(usize, Option<usize>)`\n    |\n    = note: expected signature `fn(&addr::VirtAddr, &addr::VirtAddr) -> Option<usize>`\n               found signature `fn(&addr::VirtAddr, &addr::VirtAddr) -> (usize, Option<usize>)`\nhelp: change the output type to match the trait\n    |\n387 |     fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n    |                                                   ~~~~~~~~~~~~~\n\nerror[E0053]: method `steps_between` has an incompatible type for trait\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/x86_64-0.14.13/src/structures/paging/page.rs:284:51\n    |\n284 |     fn steps_between(start: &Self, end: &Self) -> (usize, Option<usize>) {\n    |                                                   ^^^^^^^^^^^^^^^^^^^^^^ expected `Option<usize>`, found `(usize, Option<usize>)`\n    |\n    = note: expected signature `fn(&Page<_>, &Page<_>) -> Option<usize>`\n               found signature `fn(&Page<_>, &Page<_>) -> (usize, Option<usize>)`\nhelp: change the output type to match the trait\n    |\n284 |     fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n    |                                                   ~~~~~~~~~~~~~\n\n   Compiling x86 v0.52.0\n    Checking log v0.4.27\n   Compiling paste v1.0.15\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n    Checking spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\nFor more information about this error, try `rustc --explain E0053`.\nerror: could not compile `x86_64` (lib) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n15:59:36|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "[lockbud] Not supported to display yet.",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-05-24T15:59:00Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1455:11: 1455:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs:1458:13: 1458:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-05-24T15:59:00Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Outdated",
    "Geiger",
    "Unformatted"
  ]
}