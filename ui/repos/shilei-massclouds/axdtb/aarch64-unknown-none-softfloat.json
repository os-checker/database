{"repo":{"user":"shilei-massclouds","repo":"axdtb"},"data":[{"user":"shilei-massclouds","repo":"axdtb","pkg":"rt_axdtb","count":14,"raw_reports":[{"file":"src/main.rs","count":5,"kinds":{"Unformatted":["file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 27 to 41)\n-    let mut cb = |name: String,\n-                  _addr_cells: usize,\n-                  _size_cells: usize,\n-                  props: Vec<(String, Vec<u8>)>| {\n-        match name.as_str() {\n-            \"chosen\" => {\n-                for prop in props {\n-                    match prop.0.as_str() {\n-                        \"bootargs\" => {\n-                            if let Ok(cmd) = core::str::from_utf8(&prop.1) {\n-                                let cmd = cmd.trim_end_matches(char::from(0));\n-                                assert!(cmd.len() > 0);\n-                                assert!(cmd.starts_with(\"init=\"));\n-                                let cmd = cmd.strip_prefix(\"init=\").unwrap();\n-                                assert!(cmd == \"/sbin/init\" || cmd == \"/btp/sbin/hello\");\n+    let mut cb =\n+        |name: String, _addr_cells: usize, _size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n+            match name.as_str() {\n+                \"chosen\" => {\n+                    for prop in props {\n+                        match prop.0.as_str() {\n+                            \"bootargs\" => {\n+                                if let Ok(cmd) = core::str::from_utf8(&prop.1) {\n+                                    let cmd = cmd.trim_end_matches(char::from(0));\n+                                    assert!(cmd.len() > 0);\n+                                    assert!(cmd.starts_with(\"init=\"));\n+                                    let cmd = cmd.strip_prefix(\"init=\").unwrap();\n+                                    assert!(cmd == \"/sbin/init\" || cmd == \"/btp/sbin/hello\");\n+                                }\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 43 to 43)\n+                            _ => (),\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 44 to 44)\n-                        _ => (),\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 47 to 50)\n-            },\n-            _ => (),\n-        }\n-    };\n+                _ => (),\n+            }\n+        };\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 56 to 57)\n-fn test_dtb(_dtb_pa: usize) {\n-}\n+fn test_dtb(_dtb_pa: usize) {}\n"]}},{"file":"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs","count":4,"kinds":{"Clippy(Error)":["error[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:6:20\n  |\n6 | pub use platform::{getchar, putchar};\n  |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n  |                    |\n  |                    no `getchar` in `platform`\n\n","error[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:6:20\n  |\n6 | pub use platform::{getchar, putchar};\n  |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n  |                    |\n  |                    no `getchar` in `platform`\n\n","error[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:16:19\n   |\n16 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n6  + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n16 -         platform::putchar(*c);\n16 +         putchar(*c);\n   |\n\n","error[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:23:36\n   |\n23 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n6  + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n23 -         if let Some(c) = platform::getchar() {\n23 +         if let Some(c) = getchar() {\n   |\n\n"]}},{"file":"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/dummy/mod.rs","count":1,"kinds":{"Clippy(Error)":["error[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\n"]}},{"file":"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/mod.rs","count":1,"kinds":{"Clippy(Error)":["error[E0583]: file not found for module `aarch64_common`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/mod.rs:5:9\n  |\n5 |         mod aarch64_common;\n  |         ^^^^^^^^^^^^^^^^^^^\n  |\n  = help: to create the module `aarch64_common`, create file \"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/aarch64_common.rs\" or \"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/aarch64_common/mod.rs\"\n  = note: if there is a `mod aarch64_common` elsewhere in the crate already, import it with `use crate::...` instead\n\n"]}},{"file":"(virtual) clippy","count":1,"kinds":{"Cargo":["// pkg_name=rt_axdtb, checker=Clippy\n// toolchain=nightly-2024-01-18, target=aarch64-unknown-none-softfloat\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb\n// cmd=cargo clippy --target aarch64-unknown-none-softfloat --no-deps --message-format=json\n    Updating git repository `ssh://git@github.com/shilei-massclouds/arch_boot`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axalloc`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axdtb`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axhal`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axlog2`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axtype`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axconfig.git`\n    Updating crates.io index\n    Updating git repository `ssh://git@github.com/shilei-massclouds/allocator`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axerrno`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/memory_addr`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/spinbase`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/early_console`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/kernel_guard_base`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/lazy_init`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/percpu2`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/ratio`\n    Updating git repository `https://github.com/rcore-os/bitmap-allocator.git`\n   Compiling equivalent v1.0.1\n   Compiling serde v1.0.210\n   Compiling hashbrown v0.15.0\n   Compiling winnow v0.5.40\n   Compiling toml_datetime v0.6.8\n   Compiling proc-macro2 v1.0.87\n   Compiling indexmap v2.6.0\n   Compiling unicode-ident v1.0.13\n    Checking cfg-if v1.0.0\n   Compiling quote v1.0.37\n    Checking log v0.4.22\n   Compiling syn v1.0.109\n   Compiling toml_edit v0.19.15\n    Checking bitflags v2.6.0\n   Compiling syn v2.0.79\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n    Checking tock-registers v0.8.1\n   Compiling unicode-width v0.1.14\n   Compiling base64 v0.13.1\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#52d4fca1)\n    Checking aarch64-cpu v9.4.0\n   Compiling svgbobdoc v0.3.0\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig.git#51b81e4a)\n    Checking spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n    Checking const-default v1.0.0\n    Checking bit_field v0.10.2\n    Checking rlsf v0.2.1\n    Checking bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\n    Checking static_assertions v1.1.0\n    Checking memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n    Checking ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n    Checking lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n    Checking allocator v0.1.0 (ssh://git@github.com/shilei-massclouds/allocator#d93ad046)\n    Checking axtype v0.1.0 (ssh://git@github.com/shilei-massclouds/axtype#e48d1d9f)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#4de587b7)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal#83ec99c0)\n   Compiling arch_boot v0.1.0 (ssh://git@github.com/shilei-massclouds/arch_boot#8663e839)\n    Checking axdtb v0.1.0 (ssh://git@github.com/shilei-massclouds/axdtb#91506091)\nerror: could not compile `early_console` (lib) due to 6 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"]}},{"file":"(virtual) lockbud","count":1,"kinds":{"Cargo":["// pkg_name=rt_axdtb, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=aarch64-unknown-none-softfloat\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target aarch64-unknown-none-softfloat\n   Compiling hashbrown v0.15.0\n   Compiling serde v1.0.210\n   Compiling equivalent v1.0.1\n   Compiling toml_datetime v0.6.8\n   Compiling winnow v0.5.40\n   Compiling proc-macro2 v1.0.87\n   Compiling unicode-ident v1.0.13\n   Compiling indexmap v2.6.0\n   Compiling cfg-if v1.0.0\n   Compiling quote v1.0.37\n   Compiling log v0.4.22\n   Compiling syn v1.0.109\n[2024-10-08T16:43:18Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-08T16:43:18Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling bitflags v2.6.0\n   Compiling toml_edit v0.19.15\n   Compiling syn v2.0.79\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling tock-registers v0.8.1\n   Compiling base64 v0.13.1\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#52d4fca1)\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling unicode-width v0.1.14\n   Compiling aarch64-cpu v9.4.0\n   Compiling svgbobdoc v0.3.0\n   Compiling spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n   Compiling const-default v1.0.0\n   Compiling bit_field v0.10.2\n   Compiling bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\n   Compiling rlsf v0.2.1\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig.git#51b81e4a)\n   Compiling memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n   Compiling static_assertions v1.1.0\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#4de587b7)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal#83ec99c0)\n   Compiling arch_boot v0.1.0 (ssh://git@github.com/shilei-massclouds/arch_boot#8663e839)\nerror[E0583]: file not found for module `aarch64_common`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/mod.rs:5:9\n  |\n5 |         mod aarch64_common;\n  |         ^^^^^^^^^^^^^^^^^^^\n  |\n  = help: to create the module `aarch64_common`, create file \"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/aarch64_common.rs\" or \"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/aarch64_common/mod.rs\"\n  = note: if there is a `mod aarch64_common` elsewhere in the crate already, import it with `use crate::...` instead\n\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:6:20\n  |\n6 | pub use platform::{getchar, putchar};\n  |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n  |                    |\n  |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:16:19\n   |\n16 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n6  + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n16 -         platform::putchar(*c);\n16 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:23:36\n   |\n23 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n6  + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n23 -         if let Some(c) = platform::getchar() {\n23 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433, E0583.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"]}},{"file":"Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-10-08T16:43:18Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-08T16:43:18Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Mirai","Lockbud(Probably)","Lockbud(Possibly)","Unformatted"]}