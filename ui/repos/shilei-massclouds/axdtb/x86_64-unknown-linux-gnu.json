{"repo":{"user":"shilei-massclouds","repo":"axdtb"},"data":[{"user":"shilei-massclouds","repo":"axdtb","pkg":"axdtb","count":32,"raw_reports":[{"file":"src/lib.rs","count":16,"kinds":{"Unformatted":["file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 3 to 3)\n-use core::str;\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 5 to 5)\n+use core::str;\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 12 to 12)\n-const MAGIC_NUMBER     : u32 = 0xd00dfeed;\n+const MAGIC_NUMBER: u32 = 0xd00dfeed;\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 14 to 16)\n-const OF_DT_BEGIN_NODE : u32 = 0x00000001;\n-const OF_DT_END_NODE   : u32 = 0x00000002;\n-const OF_DT_PROP       : u32 = 0x00000003;\n+const OF_DT_BEGIN_NODE: u32 = 0x00000001;\n+const OF_DT_END_NODE: u32 = 0x00000002;\n+const OF_DT_PROP: u32 = 0x00000003;\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 38 to 40)\n-        let buf = unsafe {\n-            core::slice::from_raw_parts(ptr as *const u8, 24)\n-        };\n+        let buf = unsafe { core::slice::from_raw_parts(ptr as *const u8, 24) };\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 43 to 43)\n-            return Err(DeviceTreeError::BadMagicNumber)\n+            return Err(DeviceTreeError::BadMagicNumber);\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 53 to 55)\n-        Ok(\n-            Self {ptr, totalsize, off_struct, off_strings}\n-        )\n+        Ok(Self {\n+            ptr,\n+            totalsize,\n+            off_struct,\n+            off_strings,\n+        })\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 61 to 61)\n-        &self, mut pos: usize,\n+        &self,\n+        mut pos: usize,\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 64 to 64)\n-        cb: &mut dyn FnMut(String, usize, usize, Vec<(String, Vec<u8>)>)\n+        cb: &mut dyn FnMut(String, usize, usize, Vec<(String, Vec<u8>)>),\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 66 to 68)\n-        let buf = unsafe {\n-            core::slice::from_raw_parts(self.ptr as *const u8, self.totalsize)\n-        };\n+        let buf = unsafe { core::slice::from_raw_parts(self.ptr as *const u8, self.totalsize) };\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 72 to 72)\n-            return Err(DeviceTreeError::ParseError(pos))\n+            return Err(DeviceTreeError::ParseError(pos));\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 82 to 83)\n-            let val_size = buf.read_be_u32(pos+4)? as usize;\n-            let name_offset = buf.read_be_u32(pos+8)? as usize;\n+            let val_size = buf.read_be_u32(pos + 4)? as usize;\n+            let name_offset = buf.read_be_u32(pos + 8)? as usize;\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 115 to 115)\n-            return Err(DeviceTreeError::ParseError(pos))\n+            return Err(DeviceTreeError::ParseError(pos));\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 131 to 131)\n-where F: FnMut(String, usize, usize, Vec<(String, Vec<u8>)>)\n+where\n+    F: FnMut(String, usize, usize, Vec<(String, Vec<u8>)>),\n"],"Clippy(Warn)":["warning: very complex type used. Consider factoring parts into `type` definitions\n  --> src/lib.rs:64:13\n   |\n64 |         cb: &mut dyn FnMut(String, usize, usize, Vec<(String, Vec<u8>)>)\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity\n   = note: `#[warn(clippy::type_complexity)]` on by default\n\n","warning: useless conversion to the same type: `usize`\n   --> src/lib.rs:133:31\n    |\n133 |     let dt = DeviceTree::init(dtb_va.into()).unwrap();\n    |                               ^^^^^^^^^^^^^ help: consider removing `.into()`: `dtb_va`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n    = note: `#[warn(clippy::useless_conversion)]` on by default\n\n"]}},{"file":"src/util.rs","count":10,"kinds":{"Clippy(Warn)":["warning: the following explicit lifetimes could be elided: 'a\n  --> src/util.rs:10:6\n   |\n10 | impl<'a> SliceRead for &'a [u8] {\n   |      ^^                 ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n   = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n   |\n10 - impl<'a> SliceRead for &'a [u8] {\n10 + impl SliceRead for &[u8] {\n   |\n\n","warning: the following explicit lifetimes could be elided: 'a\n  --> src/util.rs:10:6\n   |\n10 | impl<'a> SliceRead for &'a [u8] {\n   |      ^^                 ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n   = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n   |\n10 - impl<'a> SliceRead for &'a [u8] {\n10 + impl SliceRead for &[u8] {\n   |\n\n","warning: this boolean expression can be simplified\n  --> src/util.rs:13:12\n   |\n13 |         if ! (pos+4 <= self.len()) {\n   |            ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `pos+4 > self.len()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool\n   = note: `#[warn(clippy::nonminimal_bool)]` on by default\n\n","warning: this boolean expression can be simplified\n  --> src/util.rs:40:12\n   |\n40 |         if ! (end < self.len()) {\n   |            ^^^^^^^^^^^^^^^^^^^^ help: try: `end >= self.len()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool\n\n"],"Unformatted":["file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 1 to 1)\n-use crate::{DeviceTreeResult, DeviceTreeError};\n+use crate::{DeviceTreeError, DeviceTreeResult};\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 13 to 14)\n-        if ! (pos+4 <= self.len()) {\n-            return Err(DeviceTreeError::SliceReadError)\n+        if !(pos + 4 <= self.len()) {\n+            return Err(DeviceTreeError::SliceReadError);\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 17 to 22)\n-        Ok(\n-            (self[pos] as u32) << 24\n-            | (self[pos+1] as u32) << 16\n-            | (self[pos+2] as u32) << 8\n-            | (self[pos+3] as u32)\n-        )\n+        Ok((self[pos] as u32) << 24\n+            | (self[pos + 1] as u32) << 16\n+            | (self[pos + 2] as u32) << 8\n+            | (self[pos + 3] as u32))\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 26 to 26)\n-        let lo: u64 = self.read_be_u32(pos+4)?.into();\n+        let lo: u64 = self.read_be_u32(pos + 4)?.into();\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 33 to 33)\n-                return Ok(&self[pos..cur])\n+                return Ok(&self[pos..cur]);\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 40 to 41)\n-        if ! (end < self.len()) {\n-            return Err(DeviceTreeError::SliceReadError)\n+        if !(end < self.len()) {\n+            return Err(DeviceTreeError::SliceReadError);\n"]}},{"file":"tests/test_dtb.rs","count":6,"kinds":{"Unformatted":["file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 1 to 2)\n-use std::str;\n-use std::io::Read;\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 4 to 4)\n+use std::io::Read;\n+use std::str;\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 11 to 18)\n-    let mut cb = |name: String, addr_cells: usize, size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n-        match name.as_str() {\n-            \"\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"riscv-virtio\\0\"));\n+    let mut cb =\n+        |name: String, addr_cells: usize, size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n+            match name.as_str() {\n+                \"\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"riscv-virtio\\0\"));\n+                        }\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 21 to 27)\n-            },\n-            \"soc\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"simple-bus\\0\"));\n+                \"soc\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"simple-bus\\0\"));\n+                        }\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 30 to 40)\n-            },\n-            \"virtio_mmio@10001000\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"virtio,mmio\\0\"));\n-                    } else if prop.0.as_str() == \"reg\" {\n-                        let reg = &(prop.1);\n-                        assert_eq!(reg.as_slice().read_be_u64(0).unwrap(), 0x10001000);\n-                        assert_eq!(reg.as_slice().read_be_u64(8).unwrap(), 0x1000);\n+                \"virtio_mmio@10001000\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"virtio,mmio\\0\"));\n+                        } else if prop.0.as_str() == \"reg\" {\n+                            let reg = &(prop.1);\n+                            assert_eq!(reg.as_slice().read_be_u64(0).unwrap(), 0x10001000);\n+                            assert_eq!(reg.as_slice().read_be_u64(8).unwrap(), 0x1000);\n+                        }\n","file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 43 to 46)\n-            },\n-            _ => {}\n-        }\n-    };\n+                _ => {}\n+            }\n+        };\n"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Audit","Mirai","Lockbud(Probably)","Lockbud(Possibly)","Unformatted"]}