{
  "repo": {
    "user": "bullhh",
    "repo": "igb_driver"
  },
  "data": [
    {
      "user": "bullhh",
      "repo": "igb_driver",
      "pkg": "igb_driver",
      "count": 44,
      "raw_reports": [
        {
          "file": "src/igb.rs",
          "features": "",
          "count": 11,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/igb.rs (original lines from 541 to 541)\n-        info!(\"CTRL:{:x}, STATUS:{:x}\", self.get_reg32(IGB_CTRL), self.get_reg32(IGB_STATUS));\n+        info!(\n+            \"CTRL:{:x}, STATUS:{:x}\",\n+            self.get_reg32(IGB_CTRL),\n+            self.get_reg32(IGB_STATUS)\n+        );\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/igb.rs (original lines from 547 to 547)\n-        info!(\"CTRL:{:x}, STATUS:{:x}\", self.get_reg32(IGB_CTRL), self.get_reg32(IGB_STATUS));\n+        info!(\n+            \"CTRL:{:x}, STATUS:{:x}\",\n+            self.get_reg32(IGB_CTRL),\n+            self.get_reg32(IGB_STATUS)\n+        );\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/igb.rs (original lines from 560 to 560)\n-        \n+\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/igb.rs (original lines from 566 to 566)\n-        info!(\"CTRL:{:x}, STATUS:{:x}\", self.get_reg32(IGB_CTRL), self.get_reg32(IGB_STATUS));\n+        info!(\n+            \"CTRL:{:x}, STATUS:{:x}\",\n+            self.get_reg32(IGB_CTRL),\n+            self.get_reg32(IGB_STATUS)\n+        );\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/igb.rs (original lines from 587 to 587)\n-        info!(\"CTRL:{:x}, STATUS:{:x}\", self.get_reg32(IGB_CTRL), self.get_reg32(IGB_STATUS));\n+        info!(\n+            \"CTRL:{:x}, STATUS:{:x}\",\n+            self.get_reg32(IGB_CTRL),\n+            self.get_reg32(IGB_STATUS)\n+        );\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/igb.rs (original lines from 597 to 597)\n-        info!(\"CTRL:{:x}, STATUS:{:x}\", self.get_reg32(IGB_CTRL), self.get_reg32(IGB_STATUS));\n+        info!(\n+            \"CTRL:{:x}, STATUS:{:x}\",\n+            self.get_reg32(IGB_CTRL),\n+            self.get_reg32(IGB_STATUS)\n+        );\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/igb.rs (original lines from 601 to 601)\n-        \n+\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/igb.rs (original lines from 604 to 604)\n-        info!(\"CTRL:{:x}, STATUS:{:x}\", self.get_reg32(IGB_CTRL), self.get_reg32(IGB_STATUS));\n+        info!(\n+            \"CTRL:{:x}, STATUS:{:x}\",\n+            self.get_reg32(IGB_CTRL),\n+            self.get_reg32(IGB_STATUS)\n+        );\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/igb.rs (original lines from 687 to 687)\n-\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/igb.rs (original lines from 735 to 735)\n-        // final step: enable \n+        // final step: enable\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/igb.rs (original lines from 812 to 812)\n-        \n+\n"
            ]
          }
        },
        {
          "file": "src/constants.rs",
          "features": "",
          "count": 8,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/constants.rs (original lines from 66 to 66)\n-\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/constants.rs (original lines from 81 to 81)\n-    } else if i <= 3{\n+    } else if i <= 3 {\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/constants.rs (original lines from 91 to 91)\n-        0x0C008 + i * 0x40\n+    0x0C008 + i * 0x40\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/constants.rs (original lines from 94 to 94)\n-        0x0C010 + i * 0x40\n+    0x0C010 + i * 0x40\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/constants.rs (original lines from 97 to 97)\n-        0x0C018 + (i * 0x40)\n+    0x0C018 + (i * 0x40)\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/constants.rs (original lines from 100 to 100)\n-        0x0C028 + i * 0x40\n+    0x0C028 + i * 0x40\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/constants.rs (original lines from 197 to 197)\n-\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/constants.rs (original lines from 227 to 227)\n+\n"
            ]
          }
        },
        {
          "file": "src/lib.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/lib.rs (original lines from 13 to 13)\n-mod interrupts;\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/lib.rs (original lines from 15 to 15)\n+mod interrupts;\n"
            ],
            "Clippy(Error)": [
              "error: the feature `const_mut_refs` has been stable since 1.83.0 and no longer requires an attribute to enable\n --> src/lib.rs:7:12\n  |\n7 | #![feature(const_mut_refs)]\n  |            ^^^^^^^^^^^^^^\n  |\nnote: the lint level is defined here\n --> src/lib.rs:4:9\n  |\n4 | #![deny(warnings)]\n  |         ^^^^^^^^\n  = note: `#[deny(stable_features)]` implied by `#[deny(warnings)]`\n\n",
              "error: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0 and no longer requires an attribute to enable\n --> src/lib.rs:8:12\n  |\n8 | #![feature(const_slice_from_raw_parts_mut)]\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "src/net_igb.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/net_igb.rs (original lines from 7 to 8)\n-use core::convert::From;\n-use core::{mem::ManuallyDrop, ptr::NonNull};\n+use crate::{IgbDevice, IgbError, IgbNetBuf, MemPool, NicDevice};\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/net_igb.rs (original lines from 11 to 11)\n-use crate::{IgbDevice, IgbError, IgbNetBuf, MemPool, NicDevice};\n+use core::convert::From;\n+use core::{mem::ManuallyDrop, ptr::NonNull};\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/net_igb.rs (original lines from 16 to 16)\n-\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/net_igb.rs (original lines from 107 to 107)\n-\n"
            ]
          }
        },
        {
          "file": "src/net_buf.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/net_buf.rs (original lines from 1 to 1)\n-\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/net_buf.rs (original lines from 4 to 4)\n-pub use axdriver_base::{ DevError, DevResult};\n",
              "file: /home/runner/check/batch_4/bullhh/igb_driver/src/net_buf.rs (original lines from 7 to 7)\n+pub use axdriver_base::{DevError, DevResult};\n"
            ]
          }
        },
        {
          "file": "src/memory.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Clippy(Error)": [
              "error: manual implementation of `.is_multiple_of()`\n  --> src/memory.rs:45:12\n   |\n45 |         if HUGE_PAGE_SIZE % entry_size != 0 {\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `!HUGE_PAGE_SIZE.is_multiple_of(entry_size)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_is_multiple_of\n   = note: `#[deny(clippy::manual_is_multiple_of)]` implied by `#[deny(warnings)]`\n\n",
              "error: using `contains()` instead of `iter().any()` is more efficient\n  --> src/memory.rs:90:12\n   |\n90 |         if free_stack.iter().any(|&x| x == id) {\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `free_stack.contains(&id)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_contains\n   = note: `#[deny(clippy::manual_contains)]` implied by `#[deny(warnings)]`\n\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1525:11: 1525:40 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1528:13: 1528:56 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "(virtual) clippy",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=igb_driver, checker=Clippy\n// toolchain=nightly, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/bullhh/igb_driver\n// cmd=cargo clippy --target x86_64-unknown-none  --no-deps\n// timestamp=2025-10-28 4:40:25.545889958 +08:00:00\n   Compiling semver v1.0.27\n    Checking scopeguard v1.2.0\n    Checking byteorder v1.5.0\n    Checking stable_deref_trait v1.2.1\n   Compiling smoltcp v0.10.0 (https://github.com/rcore-os/smoltcp.git?rev=2ade274#2ade2747)\n    Checking lock_api v0.4.14\n    Checking hash32 v0.2.1\n   Compiling rustc_version v0.4.1\n    Checking spin v0.9.8\n    Checking log v0.4.28\n    Checking cfg-if v1.0.4\n    Checking bitflags v1.3.2\n    Checking managed v0.8.0\n    Checking core_detect v1.0.0\n    Checking axdriver_base v0.1.0 (https://github.com/arceos-org/axdriver_crates.git?tag=v0.1.0#78686a7e)\n    Checking bit_field v0.10.3\n    Checking volatile v0.3.0\n   Compiling heapless v0.7.17\n    Checking igb_driver v0.1.0 (/home/runner/check/batch_4/bullhh/igb_driver)\nerror: could not compile `igb_driver` (lib) due to 4 previous errors\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=igb_driver, checker=Lockbud\n// toolchain=nightly, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/bullhh/igb_driver\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-none \n// timestamp=2025-10-28 4:40:30.254235188 +08:00:00\n   Compiling semver v1.0.27\n   Compiling scopeguard v1.2.0\n   Compiling byteorder v1.5.0\n   Compiling stable_deref_trait v1.2.1\n   Compiling smoltcp v0.10.0 (https://github.com/rcore-os/smoltcp.git?rev=2ade274#2ade2747)\n   Compiling lock_api v0.4.14\n   Compiling hash32 v0.2.1\n   Compiling rustc_version v0.4.1\n   Compiling spin v0.9.8\n   Compiling managed v0.8.0\n   Compiling log v0.4.28\n   Compiling cfg-if v1.0.4\n[2025-10-27T20:40:30Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1525:11: 1525:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1528:13: 1528:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-10-27T20:40:30Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling bitflags v1.3.2\n   Compiling core_detect v1.0.0\n   Compiling axdriver_base v0.1.0 (https://github.com/arceos-org/axdriver_crates.git?tag=v0.1.0#78686a7e)\n   Compiling volatile v0.3.0\n   Compiling bit_field v0.10.3\n   Compiling heapless v0.7.17\n   Compiling igb_driver v0.1.0 (/home/runner/check/batch_4/bullhh/igb_driver)\nerror: the feature `const_mut_refs` has been stable since 1.83.0 and no longer requires an attribute to enable\n --> src/lib.rs:7:12\n  |\n7 | #![feature(const_mut_refs)]\n  |            ^^^^^^^^^^^^^^\n  |\nnote: the lint level is defined here\n --> src/lib.rs:4:9\n  |\n4 | #![deny(warnings)]\n  |         ^^^^^^^^\n  = note: `#[deny(stable_features)]` implied by `#[deny(warnings)]`\n\nerror: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0 and no longer requires an attribute to enable\n --> src/lib.rs:8:12\n  |\n8 | #![feature(const_slice_from_raw_parts_mut)]\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: could not compile `igb_driver` (lib) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
            ]
          }
        },
        {
          "file": "(virtual) rapx",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=igb_driver, checker=Rapx\n// toolchain=nightly, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/bullhh/igb_driver\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-none \n// timestamp=2025-10-28 4:40:32.919520085 +08:00:00\n    Updating git repository `https://github.com/arceos-org/axdriver_crates.git`\n    Updating crates.io index\n    Updating git repository `https://github.com/rcore-os/smoltcp.git`\n Downloading crates ...\n  Downloaded rustc_version v0.4.1\n  Downloaded bitflags v1.3.2\n  Downloaded proc-macro-error2 v2.0.1\n  Downloaded spin v0.9.8\n  Downloaded thiserror v2.0.17\n  Downloaded volatile v0.3.0\n  Downloaded thiserror-impl v2.0.17\n  Downloaded scopeguard v1.2.0\n  Downloaded heapless v0.7.17\n  Downloaded proc-macro-error-attr2 v2.0.0\n  Downloaded lock_api v0.4.14\n  Downloaded hash32 v0.2.1\n  Downloaded defmt v0.3.100\n  Downloaded core_detect v1.0.0\n  Downloaded byteorder v1.5.0\n  Downloaded stable_deref_trait v1.2.1\n  Downloaded semver v1.0.27\n  Downloaded managed v0.8.0\n  Downloaded log v0.4.28\n  Downloaded defmt-parser v1.0.0\n  Downloaded defmt v1.0.1\n  Downloaded cfg-if v1.0.4\n  Downloaded bit_field v0.10.3\n  Downloaded defmt-macros v1.0.1\n   Compiling semver v1.0.27\n    Checking scopeguard v1.2.0\n    Checking byteorder v1.5.0\n   Compiling smoltcp v0.10.0 (https://github.com/rcore-os/smoltcp.git?rev=2ade274#2ade2747)\n    Checking lock_api v0.4.14\n    Checking hash32 v0.2.1\n   Compiling rustc_version v0.4.1\n    Checking spin v0.9.8\n    Checking stable_deref_trait v1.2.1\n    Checking bitflags v1.3.2\n    Checking cfg-if v1.0.4\n    Checking managed v0.8.0\n    Checking log v0.4.28\n    Checking bit_field v0.10.3\n    Checking axdriver_base v0.1.0 (https://github.com/arceos-org/axdriver_crates.git?tag=v0.1.0#78686a7e)\n    Checking core_detect v1.0.0\n    Checking volatile v0.3.0\n   Compiling heapless v0.7.17\n    Checking igb_driver v0.1.0 (/home/runner/check/batch_4/bullhh/igb_driver)\nerror: the feature `const_mut_refs` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n --> src/lib.rs:7:12\n  |\n7 | #![feature(const_mut_refs)]\n  |            ^^^^^^^^^^^^^^\n  |\nnote: the lint level is defined here\n --> src/lib.rs:4:9\n  |\n4 | #![deny(warnings)]\n  |         ^^^^^^^^\n  = note: `#[deny(stable_features)]` implied by `#[deny(warnings)]`\n\nerror: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n --> src/lib.rs:8:12\n  |\n8 | #![feature(const_slice_from_raw_parts_mut)]\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n20:40:38|RAP|WARN|: Memory Leak detected in function into_buf_ptr\n20:40:38|RAP|WARN|: Dangling pointer detected in function \"alloc\"\nerror: could not compile `igb_driver` (lib) due to 2 previous errors\n20:40:38|RAP|ERROR|: Finished with non-zero exit code.\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=igb_driver, checker=SemverChecks\n// toolchain=nightly, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/bullhh/igb_driver\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \n// timestamp=2025-10-28 4:40:27.436027203 +08:00:00\n    Building igb_driver v0.1.0 (current)\n       Built [   1.891s] (current)\n     Parsing igb_driver v0.1.0 (current)\n      Parsed [   0.004s] (current)\nerror: igb_driver not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        },
        {
          "file": "(virtual) udeps",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=igb_driver, checker=Udeps\n// toolchain=nightly, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_4/bullhh/igb_driver\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target x86_64-unknown-none \n// timestamp=2025-10-28 4:40:39.348512039 +08:00:00\n   Compiling semver v1.0.27\n    Checking scopeguard v1.2.0\n    Checking byteorder v1.5.0\n    Checking stable_deref_trait v1.2.1\n   Compiling smoltcp v0.10.0 (https://github.com/rcore-os/smoltcp.git?rev=2ade274#2ade2747)\n    Checking lock_api v0.4.14\n    Checking hash32 v0.2.1\n   Compiling rustc_version v0.4.1\n    Checking spin v0.9.8\n    Checking log v0.4.28\n    Checking bitflags v1.3.2\n    Checking cfg-if v1.0.4\n    Checking managed v0.8.0\n    Checking core_detect v1.0.0\n    Checking volatile v0.3.0\n    Checking axdriver_base v0.1.0 (https://github.com/arceos-org/axdriver_crates.git?tag=v0.1.0#78686a7e)\n    Checking bit_field v0.10.3\n   Compiling heapless v0.7.17\n    Checking igb_driver v0.1.0 (/home/runner/check/batch_4/bullhh/igb_driver)\nerror: the feature `const_mut_refs` has been stable since 1.83.0 and no longer requires an attribute to enable\n --> src/lib.rs:7:12\n  |\n7 | #![feature(const_mut_refs)]\n  |            ^^^^^^^^^^^^^^\n  |\nnote: the lint level is defined here\n --> src/lib.rs:4:9\n  |\n4 | #![deny(warnings)]\n  |         ^^^^^^^^\n  = note: `#[deny(stable_features)]` implied by `#[deny(warnings)]`\n\nerror: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0 and no longer requires an attribute to enable\n --> src/lib.rs:8:12\n  |\n8 | #![feature(const_slice_from_raw_parts_mut)]\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: could not compile `igb_driver` (lib) due to 2 previous errors\n"
            ]
          }
        },
        {
          "file": "Cargo.lock",
          "features": "",
          "count": 1,
          "kinds": {
            "Audit": [
              "Crate:     atomic-polyfill\nVersion:   1.0.3\nWarning:   unmaintained\nTitle:     atomic-polyfill is unmaintained\nDate:      2023-07-11\nID:        RUSTSEC-2023-0089\nURL:       https://rustsec.org/advisories/RUSTSEC-2023-0089\nDependency tree:\natomic-polyfill 1.0.3\n└── heapless 0.7.17\n    └── smoltcp 0.10.0\n        └── igb_driver 0.1.0\n\n\n{\n  \"database\": {\n    \"advisory-count\": 861,\n    \"last-commit\": \"32546e97dfa0ad59baab4166705156d8dd0fbfa8\",\n    \"last-updated\": \"2025-10-27T17:45:41+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 33\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"atomic-polyfill\",\n          \"version\": \"1.0.3\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"8cf2bce30dfe09ef0bfaef228b9d414faaf7e563035494d7fe092dba54b300f4\",\n          \"dependencies\": [\n            {\n              \"name\": \"critical-section\",\n              \"version\": \"1.2.0\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2023-0089\",\n          \"package\": \"atomic-polyfill\",\n          \"title\": \"atomic-polyfill is unmaintained\",\n          \"description\": \"The author has archived the GitHub repository and mentions deprecation in\\nproject's\\n[README](https://github.com/embassy-rs/atomic-polyfill/blob/48e55c166684f37af0b00fbee5a0809b1a2bae8e/README.md).\\n\\n## Possible alternatives\\n\\n * [portable-atomic](https://crates.io/crates/portable-atomic)\",\n          \"date\": \"2023-07-11\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/embassy-rs/atomic-polyfill/commit/48e55c166684f37af0b00fbee5a0809b1a2bae8e\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
            ]
          }
        },
        {
          "file": "[Lockbud] deadlock detection",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-10-27T20:40:30Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1525:11: 1525:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.28/src/lib.rs:1528:13: 1528:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-10-27T20:40:30Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[Rapx] memory safety detection",
          "features": "",
          "count": 1,
          "kinds": {
            "Rapx": [
              "pkg=igb_driver, checker=Rapx\ntoolchain=nightly, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_4/bullhh/igb_driver\ncmd=cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-none \ntimestamp=2025-10-28 4:40:38.756158679 +08:00:00\n\nwarning: Memory Leak detected.\n   --> src/net_buf.rs:111:26\n    |\n107 | pub fn into_buf_ptr(mut self: Box<Self>) -> NetBufPtr {\n108 |         let buf_ptr = self.packet_mut().as_mut_ptr();\n109 |         let len = self.packet_len;\n110 |         NetBufPtr::new(\n111 |             NonNull::new(Box::into_raw(self) as *mut u8).unwrap(),\n    |                          ------------------- Memory Leak Candidates.\n112 |             NonNull::new(buf_ptr).unwrap(),\n113 |             len,\n114 |         )\n115 |     }\n    |\nwarning: Dangling pointer detected.\n  --> src/igb.rs:84:1\n   |\n84 | / pub fn alloc(pool: &Arc<MemPool>, size: usize) -> IgbResult<Self> {\n85 | |         if let Some(pkt) = alloc_pkt(pool, size) {\n...  |\n89 | |         }\n90 | |     }\n   | |_____- Dangling pointer detected.\n   |\nOver visited: DefId(0:229 ~ igb_driver[fc83]::igb::{impl#3}::send)\nOver visited: DefId(0:241 ~ igb_driver[fc83]::igb::{impl#5}::reset_and_init)\n"
            ]
          }
        },
        {
          "file": "[Udeps] Unused dependencies",
          "features": "",
          "count": 1,
          "kinds": {
            "Unused Deps": [
              "pkg=igb_driver, checker=Udeps\ntoolchain=nightly, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_4/bullhh/igb_driver\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu udeps --target x86_64-unknown-none \ntimestamp=2025-10-28 4:40:41.121123596 +08:00:00\n\n\nstdout:\n\nstderr:\n   Compiling semver v1.0.27\n    Checking scopeguard v1.2.0\n    Checking byteorder v1.5.0\n    Checking stable_deref_trait v1.2.1\n   Compiling smoltcp v0.10.0 (https://github.com/rcore-os/smoltcp.git?rev=2ade274#2ade2747)\n    Checking lock_api v0.4.14\n    Checking hash32 v0.2.1\n   Compiling rustc_version v0.4.1\n    Checking spin v0.9.8\n    Checking log v0.4.28\n    Checking bitflags v1.3.2\n    Checking cfg-if v1.0.4\n    Checking managed v0.8.0\n    Checking core_detect v1.0.0\n    Checking volatile v0.3.0\n    Checking axdriver_base v0.1.0 (https://github.com/arceos-org/axdriver_crates.git?tag=v0.1.0#78686a7e)\n    Checking bit_field v0.10.3\n   Compiling heapless v0.7.17\n    Checking igb_driver v0.1.0 (/home/runner/check/batch_4/bullhh/igb_driver)\nerror: the feature `const_mut_refs` has been stable since 1.83.0 and no longer requires an attribute to enable\n --> src/lib.rs:7:12\n  |\n7 | #![feature(const_mut_refs)]\n  |            ^^^^^^^^^^^^^^\n  |\nnote: the lint level is defined here\n --> src/lib.rs:4:9\n  |\n4 | #![deny(warnings)]\n  |         ^^^^^^^^\n  = note: `#[deny(stable_features)]` implied by `#[deny(warnings)]`\n\nerror: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0 and no longer requires an attribute to enable\n --> src/lib.rs:8:12\n  |\n8 | #![feature(const_slice_from_raw_parts_mut)]\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: could not compile `igb_driver` (lib) due to 2 previous errors\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=igb_driver, checker=Outdated\ntoolchain=nightly, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_4/bullhh/igb_driver\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-10-28 4:40:39.347674316 +08:00:00\n\nName      Project  Compat  Latest  Kind    Platform\n----      -------  ------  ------  ----    --------\nspin      0.9.8    ---     0.10.0  Normal  ---\nvolatile  0.3.0    ---     0.6.1   Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks violation]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=igb_driver, checker=SemverChecks\ntoolchain=nightly, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_4/bullhh/igb_driver\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \ntimestamp=2025-10-28 4:40:29.764040703 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building igb_driver v0.1.0 (current)\n       Built [   1.891s] (current)\n     Parsing igb_driver v0.1.0 (current)\n      Parsed [   0.004s] (current)\nerror: igb_driver not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Atomvchecker",
    "Outdated",
    "Geiger",
    "Unused Deps",
    "Unformatted"
  ]
}