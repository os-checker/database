{"repo":{"user":"kern-crates","repo":"pconst"},"data":[{"user":"kern-crates","repo":"pconst","pkg":"pconst","count":13,"raw_reports":[{"file":"src/signal/mod.rs","count":6,"kinds":{"Clippy(Warn)":["warning: you should consider adding a `Default` implementation for `SignalHandlers`\n  --> src/signal/mod.rs:30:5\n   |\n30 | /     pub fn new() -> Self {\n31 | |         Self {\n32 | |             actions: [None; SIGSET_SIZE_IN_BIT],\n33 | |         }\n34 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n   = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n   |\n28 + impl Default for SignalHandlers {\n29 +     fn default() -> Self {\n30 +         Self::new()\n31 +     }\n32 + }\n   |\n\n","warning: this lifetime isn't used in the function definition\n  --> src/signal/mod.rs:44:23\n   |\n44 |     pub fn get_action<'a>(&self, signum: usize, action_pos: &mut SigAction) {\n   |                       ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes\n   = note: `#[warn(clippy::extra_unused_lifetimes)]` on by default\n\n","warning: you should consider adding a `Default` implementation for `SignalReceivers`\n  --> src/signal/mod.rs:80:5\n   |\n80 | /     pub fn new() -> Self {\n81 | |         Self {\n82 | |             mask: SimpleBitSet::default(),\n83 | |             sig_received: SimpleBitSet::default(),\n84 | |         }\n85 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\nhelp: try adding this\n   |\n78 + impl Default for SignalReceivers {\n79 +     fn default() -> Self {\n80 +         Self::new()\n81 +     }\n82 + }\n   |\n\n","warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n   --> src/signal/mod.rs:165:1\n    |\n165 | impl Into<Vec<SignalNumber>> for SimpleBitSet {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n            https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n    = note: `#[warn(clippy::from_over_into)]` on by default\nhelp: replace the `Into` implementation with `From<signal::SimpleBitSet>`\n    |\n165 ~ impl From<SimpleBitSet> for Vec<SignalNumber> {\n166 ~     fn from(val: SimpleBitSet) -> Self {\n167 |         let mut ans = Vec::new();\n168 |         for i in 0..64 {\n169 ~             if val.0 & (1 << i) != 0 {\n    |\n\n","warning: suspicious use of `|` in `Add` impl\n   --> src/signal/mod.rs:201:21\n    |\n201 |         Self(self.0 | rhs.0)\n    |                     ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_arithmetic_impl\n    = note: `#[warn(clippy::suspicious_arithmetic_impl)]` on by default\n\n","warning: suspicious use of `|` in `AddAssign` impl\n   --> src/signal/mod.rs:207:16\n    |\n207 |         self.0 |= rhs.0;\n    |                ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_op_assign_impl\n    = note: `#[warn(clippy::suspicious_op_assign_impl)]` on by default\n\n"]}},{"file":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs","count":4,"kinds":{"Clippy(Error)":["error: &-masking with zero\n   --> src/io.rs:176:1\n    |\n176 | / bitflags! {\n177 | |     pub struct FaccessatMode: u32 {\n178 | |         const F_OK = 0;\n179 | |         const R_OK = 4;\n...   |\n186 | |     }\n187 | | }\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bad_bit_mask\n    = note: `#[deny(clippy::bad_bit_mask)]` on by default\n    = note: this error originates in the macro `__impl_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","error: &-masking with zero\n   --> src/io.rs:345:1\n    |\n345 | / bitflags::bitflags! {\n346 | |     pub struct OpenFlags: usize {\n347 | |         // reserve 3 bits for the access mode\n348 | |         const O_RDONLY      = 0;\n...   |\n371 | |     }\n372 | | }\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bad_bit_mask\n    = note: this error originates in the macro `__impl_bitflags` which comes from the expansion of the macro `bitflags::bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","error: &-masking with zero\n   --> src/io.rs:612:1\n    |\n612 | / bitflags! {\n613 | |      /// renameat flag\n614 | |     pub struct Renameat2Flags: u32 {\n615 | |         /// Go back to renameat\n...   |\n623 | |     }\n624 | | }\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bad_bit_mask\n    = note: this error originates in the macro `__impl_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","error: &-masking with zero\n   --> src/io.rs:625:1\n    |\n625 | / bitflags! {\n626 | |     pub struct ProtFlags: u32 {\n627 | |         const PROT_NONE = 0x0;\n628 | |         const PROT_READ = 0x1;\n...   |\n631 | |     }\n632 | | }\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bad_bit_mask\n    = note: this error originates in the macro `__impl_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"]}},{"file":"src/io.rs","count":2,"kinds":{"Clippy(Warn)":["warning: this `impl` can be derived\n   --> src/io.rs:93:1\n    |\n93  | / impl Default for FsStat {\n94  | |     fn default() -> Self {\n95  | |         Self {\n96  | |             f_type: 0,\n...   |\n109 | |     }\n110 | | }\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls\n    = note: `#[warn(clippy::derivable_impls)]` on by default\n    = help: remove the manual implementation...\nhelp: ...and instead derive it\n    |\n66  + #[derive(Default)]\n67  | pub struct FsStat {\n    |\n\n","warning: struct `Dirent64` has a public `len` method, but no `is_empty` method\n   --> src/io.rs:456:5\n    |\n456 |     pub fn len(&self) -> usize {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_without_is_empty\n    = note: `#[warn(clippy::len_without_is_empty)]` on by default\n\n"]}},{"file":"(virtual) clippy","count":1,"kinds":{"Cargo":["// pkg_name=pconst, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_8/kern-crates/pconst\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n   Compiling proc-macro2 v1.0.87\n   Compiling unicode-ident v1.0.13\n   Compiling version_check v0.9.5\n   Compiling syn v1.0.109\n   Compiling yansi v1.0.1\n    Checking bitflags v1.3.2\n   Compiling proc-macro2-diagnostics v0.10.1\n   Compiling int-enum v1.1.2\n   Compiling quote v1.0.37\n   Compiling syn v2.0.79\n   Compiling pod-derive v0.1.0 (https://github.com/asterinas/pod?rev=d7dba56#d7dba56c)\n    Checking pod v0.1.0 (https://github.com/asterinas/pod?rev=d7dba56#d7dba56c)\n    Checking pconst v0.1.0 (/home/runner/check/batch_8/kern-crates/pconst)\nerror: could not compile `pconst` (lib) due to 4 previous errors; 8 warnings emitted\n"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Audit","Mirai","Lockbud(Probably)","Lockbud(Possibly)","Unformatted"]}