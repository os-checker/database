{"repo":{"user":"kern-crates","repo":"axvm"},"data":[{"user":"kern-crates","repo":"axvm","pkg":"axvm","count":3,"raw_reports":[{"file":"src/vm.rs","count":2,"kinds":{"Clippy(Warn)":["warning: this let-binding has unit value\n  --> src/vm.rs:81:17\n   |\n81 |                 let arch_config = AxVCpuCreateConfig::default();\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value\n   = note: `#[warn(clippy::let_unit_value)]` on by default\nhelp: omit the `let` binding\n   |\n81 |                 AxVCpuCreateConfig::default();\n   |\nhelp: variable `arch_config` of type `()` can be replaced with explicit `()`\n   |\n87 |                     (),\n   |                     ~~\n\n","warning: usage of an `Arc` that is not `Send` and `Sync`\n  --> src/vm.rs:83:32\n   |\n83 |                   vcpu_list.push(Arc::new(VCpu::new(\n   |  ________________________________^\n84 | |                     vcpu_id,\n85 | |                     0, // Currently not used.\n86 | |                     phys_cpu_set,\n87 | |                     arch_config,\n88 | |                 )?));\n   | |___________________^\n   |\n   = note: `Arc<AxVCpu<VmxArchVCpu>>` is not `Send` and `Sync` as `AxVCpu<VmxArchVCpu>` is not `Sync`\n   = help: if the `Arc` will not used be across threads replace it with an `Rc`\n   = help: otherwise make `AxVCpu<VmxArchVCpu>` `Send` and `Sync` or consider a wrapper type such as `Mutex`\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arc_with_non_send_sync\n   = note: `#[warn(clippy::arc_with_non_send_sync)]` on by default\n\n"]}},{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-11-01T12:42:32Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"lazy::LazyUsize::unsync_init\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.2.15/src/lazy.rs:36:23: 36:43 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.2.15/src/lazy.rs:39:13: 39:39 (#0)\",\n            \"dep_kind\": \"Both\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-01T12:42:32Z WARN  lockbud::callbacks] crate getrandom contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n[2024-11-01T12:42:56Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-01T12:42:56Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Audit","Mirai","Rap","Rudra","Lockbud(Probably)","Lockbud(Possibly)","Outdated","Geiger","Unformatted"]}