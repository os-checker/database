{"repo":{"user":"kern-crates","repo":"arm_gic"},"data":[{"user":"kern-crates","repo":"arm_gic","pkg":"arm_gic","count":6,"raw_reports":[{"file":"src/sysregs.rs","count":3,"kinds":{"Mirai":["warning: Inline assembly code cannot be analyzed by MIRAI.\n   --> src/sysregs.rs:5:13\n    |\n5   | /             ::core::arch::asm!(\n6   | |                 concat!(\"mrs {value}, \", ::core::stringify!($name)),\n7   | |                 value = out(reg) value,\n8   | |                 options(nomem, nostack),\n9   | |             );\n    | |_____________^\n    |\n   ::: src/gic_v3.rs:478:30\n    |\n478 |           let intid = unsafe { read_sysreg!(icc_iar1_el1) } as usize;\n    |                                -------------------------- in this macro invocation\n    |\n    = note: this warning originates in the macro `read_sysreg` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","warning: Inline assembly code cannot be analyzed by MIRAI.\n   --> src/sysregs.rs:21:13\n    |\n21  | /             ::core::arch::asm!(\n22  | |                 concat!(\"msr \", ::core::stringify!($name), \", {value}\"),\n23  | |                 value = in(reg) v,\n24  | |                 options(nomem, nostack),\n25  | |             )\n    | |_____________^\n    |\n   ::: src/gic_v3.rs:406:13\n    |\n406 |               write_sysreg!(icc_sre_el1, 0x01);\n    |               -------------------------------- in this macro invocation\n    |\n    = note: this warning originates in the macro `write_sysreg` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","warning: Inline assembly code cannot be analyzed by MIRAI.\n   --> src/sysregs.rs:21:13\n    |\n21  | /             ::core::arch::asm!(\n22  | |                 concat!(\"msr \", ::core::stringify!($name), \", {value}\"),\n23  | |                 value = in(reg) v,\n24  | |                 options(nomem, nostack),\n25  | |             )\n    | |_____________^\n    |\n   ::: src/gic_v3.rs:490:18\n    |\n490 |           unsafe { write_sysreg!(icc_eoir1_el1, intid.0 as u64) }\n    |                    -------------------------------------------- in this macro invocation\n    |\n    = note: this warning originates in the macro `write_sysreg` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"]}},{"file":"src/lib.rs","count":2,"kinds":{"Clippy(Warn)":["warning: doc list item without indentation\n  --> src/lib.rs:11:5\n   |\n11 | //! Please contact the developer if you need this function\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\n   = note: `#[warn(clippy::doc_lazy_continuation)]` on by default\nhelp: indent this line\n   |\n11 | //!    Please contact the developer if you need this function\n   |     +++\n\n","warning: first doc comment paragraph is too long\n   --> src/lib.rs:174:1\n    |\n174 | / /// [`GenericArmGic`].\n175 | | /// It is used to implement the interface abstraction that the interrupt chip\n176 | | /// driver should provide to the outside world.\n177 | | /// I hope that the versatility of the driver interface should support more chip architectures.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n    = note: `#[warn(clippy::too_long_first_doc_paragraph)]` on by default\nhelp: add an empty line\n    |\n174 ~ /// [`GenericArmGic`].\n175 + ///\n    |\n\n"]}},{"file":"(virtual) lockbud","count":1,"kinds":{"Cargo":["// pkg_name=arm_gic, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_2/kern-crates/arm_gic\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n   Compiling tock-registers v0.8.1\n   Compiling bitflags v2.6.0\n   Compiling cfg-if v1.0.0\n   Compiling aarch64-cpu v9.4.0\n   Compiling arm_gic v0.1.0 (/home/runner/check/batch_2/kern-crates/arm_gic)\nerror: invalid instruction mnemonic 'msr'\n  --> src/sysregs.rs:22:17\n   |\n22 |                 concat!(\"msr \", ::core::stringify!($name), \", {value}\"),\n   |                 ^\n   |\nnote: instantiated into assembly here\n  --> <inline asm>:2:2\n   |\n2  |     msr icc_sre_el1, rax\n   |     ^^^\n\nerror: invalid instruction mnemonic 'msr'\n  --> src/sysregs.rs:22:17\n   |\n22 |                 concat!(\"msr \", ::core::stringify!($name), \", {value}\"),\n   |                 ^\n   |\nnote: instantiated into assembly here\n  --> <inline asm>:2:2\n   |\n2  |     msr icc_pmr_el1, rax\n   |     ^^^\n\nerror: invalid instruction mnemonic 'msr'\n  --> src/sysregs.rs:22:17\n   |\n22 |                 concat!(\"msr \", ::core::stringify!($name), \", {value}\"),\n   |                 ^\n   |\nnote: instantiated into assembly here\n  --> <inline asm>:2:2\n   |\n2  |     msr icc_ctlr_el1, rax\n   |     ^^^\n\nerror: invalid instruction mnemonic 'msr'\n  --> src/sysregs.rs:22:17\n   |\n22 |                 concat!(\"msr \", ::core::stringify!($name), \", {value}\"),\n   |                 ^\n   |\nnote: instantiated into assembly here\n  --> <inline asm>:2:2\n   |\n2  |     msr icc_igrpen1_el1, rax\n   |     ^^^\n\nerror: invalid instruction mnemonic 'mrs'\n --> src/sysregs.rs:6:17\n  |\n6 |                 concat!(\"mrs {value}, \", ::core::stringify!($name)),\n  |                 ^\n  |\nnote: instantiated into assembly here\n --> <inline asm>:2:2\n  |\n2 |     mrs rax, icc_iar1_el1\n  |     ^^^\n\nerror: invalid instruction mnemonic 'msr'\n  --> src/sysregs.rs:22:17\n   |\n22 |                 concat!(\"msr \", ::core::stringify!($name), \", {value}\"),\n   |                 ^\n   |\nnote: instantiated into assembly here\n  --> <inline asm>:2:2\n   |\n2  |     msr icc_eoir1_el1, rsi\n   |     ^^^\n\nerror: could not compile `arm_gic` (lib) due to 6 previous errors\n"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Mirai","Lockbud(Probably)","Lockbud(Possibly)","Unformatted"]}