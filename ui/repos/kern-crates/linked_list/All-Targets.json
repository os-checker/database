{"repo":{"user":"kern-crates","repo":"linked_list"},"data":[{"user":"kern-crates","repo":"linked_list","pkg":"linked_list","count":6,"raw_reports":[{"file":"src/unsafe_list.rs","count":5,"kinds":{"Clippy(Warn)":["warning: you should consider adding a `Default` implementation for `List<A>`\n   --> src/unsafe_list.rs:99:5\n    |\n99  | /     pub const fn new() -> Self {\n100 | |         Self { first: None }\n101 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n97  + impl<A: Adapter + ?Sized> Default for List<A> {\n98  +     fn default() -> Self {\n99  +         Self::new()\n100 +     }\n101 + }\n    |\n\n","warning: you should consider adding a `Default` implementation for `Links<T>`\n   --> src/unsafe_list.rs:435:5\n    |\n435 | /     pub const fn new() -> Self {\n436 | |         Self(UnsafeCell::new(MaybeUninit::uninit()))\n437 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\nhelp: try adding this\n    |\n433 + impl<T: ?Sized> Default for Links<T> {\n434 +     fn default() -> Self {\n435 +         Self::new()\n436 +     }\n437 + }\n    |\n\n","warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected\n   --> src/unsafe_list.rs:245:12\n    |\n245 |         if self.first.unwrap() == existing {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(ambiguous_wide_pointer_comparisons)]` on by default\nhelp: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses\n    |\n245 |         if std::ptr::addr_eq(self.first.unwrap().as_ptr(), existing.as_ptr()) {\n    |            ++++++++++++++++++                   ~~~~~~~~~~         ++++++++++\nhelp: use explicit `std::ptr::eq` method to compare metadata and addresses\n    |\n245 |         if std::ptr::eq(self.first.unwrap().as_ptr(), existing.as_ptr()) {\n    |            +++++++++++++                   ~~~~~~~~~~         ++++++++++\n\n","warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected\n   --> src/unsafe_list.rs:462:24\n    |\n462 |                     if links.next != head {\n    |                        ^^^^^^^^^^^^^^^^^^\n    |\nhelp: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses\n    |\n462 |                     if !std::ptr::addr_eq(links.next.as_ptr(), head.as_ptr()) {\n    |                        +++++++++++++++++++          ~~~~~~~~~~     ++++++++++\nhelp: use explicit `std::ptr::eq` method to compare metadata and addresses\n    |\n462 |                     if !std::ptr::eq(links.next.as_ptr(), head.as_ptr()) {\n    |                        ++++++++++++++          ~~~~~~~~~~     ++++++++++\n\n","warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected\n   --> src/unsafe_list.rs:483:28\n    |\n483 |                         if cur == head {\n    |                            ^^^^^^^^^^^\n    |\nhelp: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses\n    |\n483 |                         if std::ptr::addr_eq(cur.as_ptr(), head.as_ptr()) {\n    |                            ++++++++++++++++++   ~~~~~~~~~~     ++++++++++\nhelp: use explicit `std::ptr::eq` method to compare metadata and addresses\n    |\n483 |                         if std::ptr::eq(cur.as_ptr(), head.as_ptr()) {\n    |                            +++++++++++++   ~~~~~~~~~~     ++++++++++\n\n"]}},{"file":"[rap] Not supported to display yet.","count":1,"kinds":{"Rap":["2:18|RAP-FRONT|WARN|: RCanary: Leak Function: Unsat DefId(0:22 ~ linked_list[81a7]::linked_list::{impl#0}::into_pointer) src/linked_list.rs:36:5: 38:6 (#0)\n2:18|RAP-FRONT|WARN|: RCanary: LeakItem Candidates: _3 = linked_list::alloc::boxed::Box::<T>::into_raw(move _4) -> [return: bb1, unwind: bb4], src/linked_list.rs:37:22: 37:41 (#0)\n"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Audit","Mirai","Rap","Lockbud(Probably)","Lockbud(Possibly)","Unformatted"]}