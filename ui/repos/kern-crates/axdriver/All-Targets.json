{"repo":{"user":"kern-crates","repo":"axdriver"},"data":[{"user":"kern-crates","repo":"axdriver","pkg":"axdriver","count":29,"raw_reports":[{"file":"src/drivers.rs","count":9,"kinds":{"Clippy(Warn)":["warning: unexpected `cfg` condition name: `net_dev`\n  --> src/drivers.rs:36:7\n   |\n36 | #[cfg(net_dev = \"virtio-net\")]\n   |       ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(net_dev, values(\"virtio-net\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(net_dev, values(\\\"virtio-net\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n","warning: unexpected `cfg` condition name: `block_dev`\n  --> src/drivers.rs:42:7\n   |\n42 | #[cfg(block_dev = \"virtio-blk\")]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(block_dev, values(\"virtio-blk\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(block_dev, values(\\\"virtio-blk\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n","warning: unexpected `cfg` condition name: `display_dev`\n  --> src/drivers.rs:48:7\n   |\n48 | #[cfg(display_dev = \"virtio-gpu\")]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(display_dev, values(\"virtio-gpu\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(display_dev, values(\\\"virtio-gpu\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n","warning: unexpected `cfg` condition name: `block_dev`\n  --> src/drivers.rs:55:14\n   |\n55 |     if #[cfg(block_dev = \"ramdisk\")] {\n   |              ^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(block_dev, values(\"ramdisk\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(block_dev, values(\\\"ramdisk\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n","warning: unexpected `cfg` condition name: `block_dev`\n  --> src/drivers.rs:71:14\n   |\n71 |     if #[cfg(block_dev = \"bcm2835-sdhci\")]{\n   |              ^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(block_dev, values(\"bcm2835-sdhci\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(block_dev, values(\\\"bcm2835-sdhci\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n","warning: unexpected `cfg` condition name: `net_dev`\n  --> src/drivers.rs:85:14\n   |\n85 |     if #[cfg(net_dev = \"ixgbe\")] {\n   |              ^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(net_dev, values(\"ixgbe\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(net_dev, values(\\\"ixgbe\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n","warning: unexpected `cfg` condition name: `bus`\n  --> src/drivers.rs:21:11\n   |\n21 |     #[cfg(bus = \"mmio\")]\n   |           ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bus, values(\"mmio\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bus, values(\\\"mmio\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n","warning: unexpected `cfg` condition name: `bus`\n  --> src/drivers.rs:26:11\n   |\n26 |     #[cfg(bus = \"pci\")]\n   |           ^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bus, values(\"pci\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bus, values(\\\"pci\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n","warning: trait `DriverProbe` is never used\n  --> src/drivers.rs:16:11\n   |\n16 | pub trait DriverProbe {\n   |           ^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n"]}},{"file":"src/lib.rs","count":8,"kinds":{"Clippy(Warn)":["warning: doc list item without indentation\n  --> src/lib.rs:19:5\n   |\n19 | //!  time by corresponding cargo features. For example, [`AxNetDevice`] will be\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\n   = note: `#[warn(clippy::doc_lazy_continuation)]` on by default\nhelp: indent this line\n   |\n19 | //!   time by corresponding cargo features. For example, [`AxNetDevice`] will be\n   |      +\n\n","warning: doc list item without indentation\n  --> src/lib.rs:20:5\n   |\n20 | //! an alias of [`VirtioNetDev`] if the `virtio-net` feature is enabled. This\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n20 | //!   an alias of [`VirtioNetDev`] if the `virtio-net` feature is enabled. This\n   |     ++\n\n","warning: doc list item without indentation\n  --> src/lib.rs:21:5\n   |\n21 | //! model provides the best performance as it avoids dynamic dispatch. But on\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n21 | //!   model provides the best performance as it avoids dynamic dispatch. But on\n   |     ++\n\n","warning: doc list item without indentation\n  --> src/lib.rs:22:5\n   |\n22 | //! limitation, only one device instance is supported for each device category.\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n22 | //!   limitation, only one device instance is supported for each device category.\n   |     ++\n\n","warning: doc list item without indentation\n  --> src/lib.rs:24:5\n   |\n24 | //! `Box<dyn Trait>`. For example, [`AxNetDevice`] will be [`Box<dyn NetDriverOps>`].\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n24 | //!   `Box<dyn Trait>`. For example, [`AxNetDevice`] will be [`Box<dyn NetDriverOps>`].\n   |     ++\n\n","warning: doc list item without indentation\n  --> src/lib.rs:25:5\n   |\n25 | //! When call a method provided by the device, it uses [dynamic dispatch][dyn]\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n25 | //!   When call a method provided by the device, it uses [dynamic dispatch][dyn]\n   |     ++\n\n","warning: doc list item without indentation\n  --> src/lib.rs:26:5\n   |\n26 | //! that may introduce a little overhead. But on the other hand, it is more\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n26 | //!   that may introduce a little overhead. But on the other hand, it is more\n   |     ++\n\n","warning: doc list item without indentation\n  --> src/lib.rs:27:5\n   |\n27 | //! flexible, multiple instances of each device category are supported.\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n27 | //!   flexible, multiple instances of each device category are supported.\n   |     ++\n\n"]}},{"file":"src/macros.rs","count":6,"kinds":{"Clippy(Warn)":["warning: unexpected `cfg` condition name: `net_dev`\n   --> src/macros.rs:37:15\n    |\n37  |           #[cfg(net_dev = \"virtio-net\")]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^\n    |\n   ::: src/lib.rs:125:9\n    |\n125 | /         for_each_drivers!(type Driver, {\n126 | |             if let Some(dev) = Driver::probe_global() {\n127 | |                 info!(\n128 | |                     \"registered a new {:?} device: {:?}\",\n...   |\n133 | |             }\n134 | |         });\n    | |__________- in this macro invocation\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(net_dev, values(\"virtio-net\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(net_dev, values(\\\"virtio-net\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: this warning originates in the macro `for_each_drivers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","warning: unexpected `cfg` condition name: `block_dev`\n   --> src/macros.rs:42:15\n    |\n42  |           #[cfg(block_dev = \"virtio-blk\")]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n   ::: src/lib.rs:125:9\n    |\n125 | /         for_each_drivers!(type Driver, {\n126 | |             if let Some(dev) = Driver::probe_global() {\n127 | |                 info!(\n128 | |                     \"registered a new {:?} device: {:?}\",\n...   |\n133 | |             }\n134 | |         });\n    | |__________- in this macro invocation\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(block_dev, values(\"virtio-blk\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(block_dev, values(\\\"virtio-blk\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: this warning originates in the macro `for_each_drivers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","warning: unexpected `cfg` condition name: `display_dev`\n   --> src/macros.rs:47:15\n    |\n47  |           #[cfg(display_dev = \"virtio-gpu\")]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n   ::: src/lib.rs:125:9\n    |\n125 | /         for_each_drivers!(type Driver, {\n126 | |             if let Some(dev) = Driver::probe_global() {\n127 | |                 info!(\n128 | |                     \"registered a new {:?} device: {:?}\",\n...   |\n133 | |             }\n134 | |         });\n    | |__________- in this macro invocation\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(display_dev, values(\"virtio-gpu\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(display_dev, values(\\\"virtio-gpu\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: this warning originates in the macro `for_each_drivers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","warning: unexpected `cfg` condition name: `block_dev`\n   --> src/macros.rs:52:15\n    |\n52  |           #[cfg(block_dev = \"ramdisk\")]\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n    |\n   ::: src/lib.rs:125:9\n    |\n125 | /         for_each_drivers!(type Driver, {\n126 | |             if let Some(dev) = Driver::probe_global() {\n127 | |                 info!(\n128 | |                     \"registered a new {:?} device: {:?}\",\n...   |\n133 | |             }\n134 | |         });\n    | |__________- in this macro invocation\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(block_dev, values(\"ramdisk\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(block_dev, values(\\\"ramdisk\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: this warning originates in the macro `for_each_drivers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","warning: unexpected `cfg` condition name: `block_dev`\n   --> src/macros.rs:57:15\n    |\n57  |           #[cfg(block_dev = \"bcm2835-sdhci\")]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n   ::: src/lib.rs:125:9\n    |\n125 | /         for_each_drivers!(type Driver, {\n126 | |             if let Some(dev) = Driver::probe_global() {\n127 | |                 info!(\n128 | |                     \"registered a new {:?} device: {:?}\",\n...   |\n133 | |             }\n134 | |         });\n    | |__________- in this macro invocation\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(block_dev, values(\"bcm2835-sdhci\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(block_dev, values(\\\"bcm2835-sdhci\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: this warning originates in the macro `for_each_drivers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","warning: unexpected `cfg` condition name: `net_dev`\n   --> src/macros.rs:62:15\n    |\n62  |           #[cfg(net_dev = \"ixgbe\")]\n    |                 ^^^^^^^^^^^^^^^^^\n    |\n   ::: src/lib.rs:125:9\n    |\n125 | /         for_each_drivers!(type Driver, {\n126 | |             if let Some(dev) = Driver::probe_global() {\n127 | |                 info!(\n128 | |                     \"registered a new {:?} device: {:?}\",\n...   |\n133 | |             }\n134 | |         });\n    | |__________- in this macro invocation\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(net_dev, values(\"ixgbe\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(net_dev, values(\\\"ixgbe\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: this warning originates in the macro `for_each_drivers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"]}},{"file":"src/dummy.rs","count":3,"kinds":{"Clippy(Warn)":["warning: unexpected `cfg` condition name: `net_dev`\n  --> src/dummy.rs:10:14\n   |\n10 |     if #[cfg(net_dev = \"dummy\")] {\n   |              ^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(net_dev, values(\"dummy\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(net_dev, values(\\\"dummy\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n","warning: unexpected `cfg` condition name: `block_dev`\n  --> src/dummy.rs:38:14\n   |\n38 |     if #[cfg(block_dev = \"dummy\")] {\n   |              ^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(block_dev, values(\"dummy\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(block_dev, values(\\\"dummy\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n","warning: unexpected `cfg` condition name: `display_dev`\n  --> src/dummy.rs:73:14\n   |\n73 |     if #[cfg(display_dev = \"dummy\")] {\n   |              ^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(display_dev, values(\"dummy\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(display_dev, values(\\\"dummy\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"]}},{"file":"src/bus/mod.rs","count":2,"kinds":{"Clippy(Warn)":["warning: unexpected `cfg` condition name: `bus`\n --> src/bus/mod.rs:1:7\n  |\n1 | #[cfg(bus = \"mmio\")]\n  |       ^^^^^^^^^^^^\n  |\n  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bus, values(\"mmio\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bus, values(\\\"mmio\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\n","warning: unexpected `cfg` condition name: `bus`\n --> src/bus/mod.rs:3:7\n  |\n3 | #[cfg(bus = \"pci\")]\n  |       ^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bus, values(\"pci\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bus, values(\\\"pci\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"]}},{"file":"Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-10-04T07:28:40Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-04T07:28:40Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Mirai","Lockbud(Probably)","Lockbud(Possibly)","Unformatted"]}