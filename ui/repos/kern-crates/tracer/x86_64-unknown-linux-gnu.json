{"repo":{"user":"kern-crates","repo":"tracer"},"data":[{"user":"kern-crates","repo":"tracer","pkg":"tracer","count":6,"raw_reports":[{"file":"src/dwarf/unwinder.rs","count":4,"kinds":{"Clippy(Warn)":["warning: field `0` is never read\n  --> src/dwarf/unwinder.rs:99:24\n   |\n99 |     UnexpectedRegister(Register),\n   |     ------------------ ^^^^^^^^\n   |     |\n   |     field in this variant\n   |\n   = note: `UnwinderError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n   = note: `#[warn(dead_code)]` on by default\nhelp: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\n   |\n99 |     UnexpectedRegister(()),\n   |                        ~~\n\n","warning: field `0` is never read\n   --> src/dwarf/unwinder.rs:101:28\n    |\n101 |     CfaRuleUnknownRegister(Register),\n    |     ---------------------- ^^^^^^^^\n    |     |\n    |     field in this variant\n    |\n    = note: `UnwinderError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\nhelp: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field\n    |\n101 |     CfaRuleUnknownRegister(()),\n    |                            ~~\n\n"],"Unformatted":["file: /home/runner/check/batch_10/kern-crates/tracer/src/dwarf/unwinder.rs (original lines from 2 to 2)\n+use crate::utils::read_value;\n","file: /home/runner/check/batch_10/kern-crates/tracer/src/dwarf/unwinder.rs (original lines from 13 to 13)\n-use crate::utils::read_value;\n"]}},{"file":"src/compiler.rs","count":1,"kinds":{"Clippy(Warn)":["warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> src/compiler.rs:253:17\n    |\n253 | /                 match ins {\n254 | |                     InstructionSp::Addi(x) => {\n255 | |                         stack_size += x;\n256 | |                     }\n257 | |                     _ => {}\n258 | |                 }\n    | |_________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match\n    = note: `#[warn(clippy::single_match)]` on by default\nhelp: try\n    |\n253 ~                 if let InstructionSp::Addi(x) = ins {\n254 +                     stack_size += x;\n255 +                 }\n    |\n\n"]}},{"file":"src/lib.rs","count":1,"kinds":{"Clippy(Warn)":["warning: the feature `return_position_impl_trait_in_trait` has been stable since 1.75.0 and no longer requires an attribute to enable\n --> src/lib.rs:1:12\n  |\n1 | #![feature(return_position_impl_trait_in_trait)]\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\n"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Lockbud(Probably)","Lockbud(Possibly)","Unformatted"]}