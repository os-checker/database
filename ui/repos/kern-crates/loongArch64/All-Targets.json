{"repo":{"user":"kern-crates","repo":"loongArch64"},"data":[{"user":"kern-crates","repo":"loongArch64","pkg":"loongArch64","count":16,"raw_reports":[{"file":"src/iocsr.rs","count":6,"kinds":{"Clippy(Error)":["error: type `u8` cannot be used with this register class\n  --> src/iocsr.rs:24:41\n   |\n24 |         asm!(\"iocsrwr.b {},{}\", in(reg) value, in(reg) reg);\n   |                                         ^^^^^\n   |\n   = note: register class `reg` supports these types: i16, i32, i64, f16, f32, f64\n   = help: consider using the `reg_byte` register class instead\n\n","error: type `u8` cannot be used with this register class\n  --> src/iocsr.rs:32:41\n   |\n32 |         asm!(\"iocsrrd.b {},{}\",out(reg) val, in(reg) reg);\n   |                                         ^^^\n   |\n   = note: register class `reg` supports these types: i16, i32, i64, f16, f32, f64\n   = help: consider using the `reg_byte` register class instead\n\n"],"Clippy(Warn)":["warning: formatting may not be suitable for sub-register argument\n --> src/iocsr.rs:6:25\n  |\n6 |         asm!(\"iocsrwr.w {},{}\", in(reg) value, in(reg) reg);\n  |                         ^^              ----- for this argument\n  |\n  = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n  = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n  = note: `#[warn(asm_sub_register)]` on by default\n\n","warning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:18:25\n   |\n18 |         asm!(\"iocsrwr.h {},{}\", in(reg) value, in(reg) reg);\n   |                         ^^              ----- for this argument\n   |\n   = help: use `{0:x}` to have the register formatted as `ax` (for 16-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\n","warning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:41:25\n   |\n41 |         asm!(\"iocsrrd.h {},{}\",out(reg) val, in(reg) reg);\n   |                         ^^              --- for this argument\n   |\n   = help: use `{0:x}` to have the register formatted as `ax` (for 16-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\n","warning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:50:25\n   |\n50 |         asm!(\"iocsrrd.w {},{}\",out(reg) val, in(reg) reg);\n   |                         ^^              --- for this argument\n   |\n   = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\n"]}},{"file":"src/lib.rs","count":3,"kinds":{"Clippy(Warn)":["warning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> src/lib.rs:2:12\n  |\n2 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\n"],"Unformatted":["file: /home/runner/check/batch_7/kern-crates/loongArch64/src/lib.rs (original lines from 5 to 5)\n+pub mod consts;\n","file: /home/runner/check/batch_7/kern-crates/loongArch64/src/lib.rs (original lines from 10 to 10)\n-pub mod consts;\n"]}},{"file":"src/ipi.rs","count":2,"kinds":{"Clippy(Warn)":["warning: formatting may not be suitable for sub-register argument\n --> src/ipi.rs:7:25\n  |\n7 |         asm!(\"iocsrwr.w {},{}\", in(reg) value,in(reg) addr);\n  |                         ^^              ----- for this argument\n  |\n  = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n  = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\n","warning: formatting may not be suitable for sub-register argument\n  --> src/ipi.rs:13:25\n   |\n13 |         asm!(\"iocsrrd.w {},{}\", out(reg) value, in(reg) addr);\n   |                         ^^               ----- for this argument\n   |\n   = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\n"]}},{"file":"src/register/base/ecfg.rs","count":2,"kinds":{"Unformatted":["file: /home/runner/check/batch_7/kern-crates/loongArch64/src/register/base/ecfg.rs (original lines from 1 to 1)\n-use core::fmt::Debug;\n","file: /home/runner/check/batch_7/kern-crates/loongArch64/src/register/base/ecfg.rs (original lines from 5 to 5)\n+use core::fmt::Debug;\n"]}},{"file":"(virtual) clippy","count":1,"kinds":{"Cargo":["// pkg_name=loongArch64, checker=Clippy\n// toolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_7/kern-crates/loongArch64\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Checking bitflags v1.3.2\n    Checking bit_field v0.10.2\n    Checking loongArch64 v0.2.4 (/home/runner/check/batch_7/kern-crates/loongArch64)\nerror: could not compile `loongArch64` (lib) due to 2 previous errors; 7 warnings emitted\n"]}},{"file":"(virtual) lockbud","count":1,"kinds":{"Cargo":["// pkg_name=loongArch64, checker=Lockbud\n// toolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_7/kern-crates/loongArch64\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n   Compiling bitflags v1.3.2\n   Compiling bit_field v0.10.2\n   Compiling loongArch64 v0.2.4 (/home/runner/check/batch_7/kern-crates/loongArch64)\nwarning: formatting may not be suitable for sub-register argument\n --> src/iocsr.rs:6:25\n  |\n6 |         asm!(\"iocsrwr.w {},{}\", in(reg) value, in(reg) reg);\n  |                         ^^              ----- for this argument\n  |\n  = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n  = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n  = note: `#[warn(asm_sub_register)]` on by default\n\nwarning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:18:25\n   |\n18 |         asm!(\"iocsrwr.h {},{}\", in(reg) value, in(reg) reg);\n   |                         ^^              ----- for this argument\n   |\n   = help: use `{0:x}` to have the register formatted as `ax` (for 16-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nerror: type `u8` cannot be used with this register class\n  --> src/iocsr.rs:24:41\n   |\n24 |         asm!(\"iocsrwr.b {},{}\", in(reg) value, in(reg) reg);\n   |                                         ^^^^^\n   |\n   = note: register class `reg` supports these types: i16, i32, i64, f32, f64\n   = help: consider using the `reg_byte` register class instead\n\nerror: type `u8` cannot be used with this register class\n  --> src/iocsr.rs:32:41\n   |\n32 |         asm!(\"iocsrrd.b {},{}\",out(reg) val, in(reg) reg);\n   |                                         ^^^\n   |\n   = note: register class `reg` supports these types: i16, i32, i64, f32, f64\n   = help: consider using the `reg_byte` register class instead\n\nwarning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:41:25\n   |\n41 |         asm!(\"iocsrrd.h {},{}\",out(reg) val, in(reg) reg);\n   |                         ^^              --- for this argument\n   |\n   = help: use `{0:x}` to have the register formatted as `ax` (for 16-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nwarning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:50:25\n   |\n50 |         asm!(\"iocsrrd.w {},{}\",out(reg) val, in(reg) reg);\n   |                         ^^              --- for this argument\n   |\n   = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nwarning: formatting may not be suitable for sub-register argument\n --> src/ipi.rs:7:25\n  |\n7 |         asm!(\"iocsrwr.w {},{}\", in(reg) value,in(reg) addr);\n  |                         ^^              ----- for this argument\n  |\n  = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n  = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nwarning: formatting may not be suitable for sub-register argument\n  --> src/ipi.rs:13:25\n   |\n13 |         asm!(\"iocsrrd.w {},{}\", out(reg) value, in(reg) addr);\n   |                         ^^               ----- for this argument\n   |\n   = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nwarning: `loongArch64` (lib) generated 6 warnings\nerror: could not compile `loongArch64` (lib) due to 2 previous errors; 6 warnings emitted\n"]}},{"file":"(virtual) rap","count":1,"kinds":{"Cargo":["// pkg_name=loongArch64, checker=Rap\n// toolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_7/kern-crates/loongArch64\n// cmd=cargo +nightly-2024-06-30 rap -F -M\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n    Checking loongArch64 v0.2.4 (/home/runner/check/batch_7/kern-crates/loongArch64)\nwarning: formatting may not be suitable for sub-register argument\n --> src/iocsr.rs:6:25\n  |\n6 |         asm!(\"iocsrwr.w {},{}\", in(reg) value, in(reg) reg);\n  |                         ^^              ----- for this argument\n  |\n  = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n  = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n  = note: `#[warn(asm_sub_register)]` on by default\n\nwarning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:18:25\n   |\n18 |         asm!(\"iocsrwr.h {},{}\", in(reg) value, in(reg) reg);\n   |                         ^^              ----- for this argument\n   |\n   = help: use `{0:x}` to have the register formatted as `ax` (for 16-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nerror: type `u8` cannot be used with this register class\n  --> src/iocsr.rs:24:41\n   |\n24 |         asm!(\"iocsrwr.b {},{}\", in(reg) value, in(reg) reg);\n   |                                         ^^^^^\n   |\n   = note: register class `reg` supports these types: i16, i32, i64, f16, f32, f64\n   = help: consider using the `reg_byte` register class instead\n\nerror: type `u8` cannot be used with this register class\n  --> src/iocsr.rs:32:41\n   |\n32 |         asm!(\"iocsrrd.b {},{}\",out(reg) val, in(reg) reg);\n   |                                         ^^^\n   |\n   = note: register class `reg` supports these types: i16, i32, i64, f16, f32, f64\n   = help: consider using the `reg_byte` register class instead\n\nwarning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:41:25\n   |\n41 |         asm!(\"iocsrrd.h {},{}\",out(reg) val, in(reg) reg);\n   |                         ^^              --- for this argument\n   |\n   = help: use `{0:x}` to have the register formatted as `ax` (for 16-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nwarning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:50:25\n   |\n50 |         asm!(\"iocsrrd.w {},{}\",out(reg) val, in(reg) reg);\n   |                         ^^              --- for this argument\n   |\n   = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nwarning: formatting may not be suitable for sub-register argument\n --> src/ipi.rs:7:25\n  |\n7 |         asm!(\"iocsrwr.w {},{}\", in(reg) value,in(reg) addr);\n  |                         ^^              ----- for this argument\n  |\n  = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n  = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nwarning: formatting may not be suitable for sub-register argument\n  --> src/ipi.rs:13:25\n   |\n13 |         asm!(\"iocsrrd.w {},{}\", out(reg) value, in(reg) addr);\n   |                         ^^               ----- for this argument\n   |\n   = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nwarning: `loongArch64` (lib) generated 6 warnings\nerror: could not compile `loongArch64` (lib) due to 2 previous errors; 6 warnings emitted\n00:30:51|RAP|ERROR|: Finished with non-zero exit code.\n"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Audit","Mirai","Rap","Rudra","Lockbud(Probably)","Lockbud(Possibly)","Outdated","Geiger","Unformatted"]}