{
  "repo": {
    "user": "Starry-Mix-THU",
    "repo": "axfs-ng-vfs"
  },
  "data": [
    {
      "user": "Starry-Mix-THU",
      "repo": "axfs-ng-vfs",
      "pkg": "axfs-ng-vfs",
      "count": 21,
      "raw_reports": [
        {
          "file": "src/node/dir.rs",
          "features": "",
          "count": 5,
          "kinds": {
            "Mirai": [
              "error[E0658]: `let` expressions in this position are unstable\n   --> src/node/dir.rs:145:12\n    |\n145 |         if let Some(entry) = children.remove(name)\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-01-09; consider upgrading it if it is out of date\n\n",
              "error[E0658]: `let` expressions in this position are unstable\n   --> src/node/dir.rs:146:16\n    |\n146 |             && let Ok(dir) = entry.as_dir()\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-01-09; consider upgrading it if it is out of date\n\n",
              "error[E0658]: `let` expressions in this position are unstable\n   --> src/node/dir.rs:284:20\n    |\n284 |                 if let Ok(dir) = dst.as_dir()\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-01-09; consider upgrading it if it is out of date\n\n",
              "error[E0658]: cannot cast `dyn node::dir::DirNodeOps<M>` to `dyn node::NodeOps<M>`, trait upcasting coercion is experimental\n   --> src/node/dir.rs:113:9\n    |\n113 |         &*self.ops\n    |         ^^^^^^^^^^\n    |\n    = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n    = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-01-09; consider upgrading it if it is out of date\n    = note: required when coercing `&(dyn node::dir::DirNodeOps<M> + 'static)` into `&(dyn node::NodeOps<M> + 'static)`\n\n",
              "error[E0658]: cannot cast `dyn node::dir::DirNodeOps<M>` to `dyn node::NodeOps<M>`, trait upcasting coercion is experimental\n   --> src/node/dir.rs:119:9\n    |\n119 |         node.ops.clone()\n    |         ^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n    = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-01-09; consider upgrading it if it is out of date\n    = note: required when coercing `alloc::sync::Arc<dyn node::dir::DirNodeOps<M>>` into `alloc::sync::Arc<(dyn node::NodeOps<M> + 'static)>`\n\n"
            ]
          }
        },
        {
          "file": "src/node/mod.rs",
          "features": "",
          "count": 3,
          "kinds": {
            "Mirai": [
              "error[E0658]: cannot cast `dyn node::file::FileNodeOps<M>` to `dyn node::NodeOps<M>`, trait upcasting coercion is experimental\n  --> src/node/mod.rs:57:33\n   |\n57 |             Node::File(file) => file.inner().clone(),\n   |                                 ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-09; consider upgrading it if it is out of date\n   = note: required when coercing `alloc::sync::Arc<dyn node::file::FileNodeOps<M>>` into `alloc::sync::Arc<(dyn node::NodeOps<M> + 'static)>`\n\n",
              "error[E0658]: cannot cast `dyn node::dir::DirNodeOps<M>` to `dyn node::NodeOps<M>`, trait upcasting coercion is experimental\n  --> src/node/mod.rs:58:31\n   |\n58 |             Node::Dir(dir) => dir.inner().clone(),\n   |                               ^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-09; consider upgrading it if it is out of date\n   = note: required when coercing `alloc::sync::Arc<dyn node::dir::DirNodeOps<M>>` into `alloc::sync::Arc<(dyn node::NodeOps<M> + 'static)>`\n\n",
              "error[E0658]: cannot cast `dyn node::file::FileNodeOps<M>` to `dyn node::NodeOps<M>`, trait upcasting coercion is experimental\n  --> src/node/mod.rs:68:33\n   |\n68 |             Node::File(file) => file.deref(),\n   |                                 ^^^^^^^^^^^^\n   |\n   = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-09; consider upgrading it if it is out of date\n   = note: required when coercing `&(dyn node::file::FileNodeOps<M> + 'static)` into `&(dyn node::NodeOps<M> + 'static)`\n\n"
            ]
          }
        },
        {
          "file": "src/types.rs",
          "features": "",
          "count": 2,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/src/types.rs (original lines from 7 to 8)\n-    Unknown         = 0,\n-    Fifo            = 0o1,\n+    Unknown = 0,\n+    Fifo = 0o1,\n",
              "file: /home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/src/types.rs (original lines from 10 to 14)\n-    Directory       = 0o4,\n-    BlockDevice     = 0o6,\n-    RegularFile     = 0o10,\n-    Symlink         = 0o12,\n-    Socket          = 0o14,\n+    Directory = 0o4,\n+    BlockDevice = 0o6,\n+    RegularFile = 0o10,\n+    Symlink = 0o12,\n+    Socket = 0o14,\n"
            ]
          }
        },
        {
          "file": "/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.21/src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "{\n  \"bug_kind\": \"AtomicityViolation\",\n  \"possibility\": \"Possibly\",\n  \"diagnosis\": {\n    \"fn_name\": \"set_logger_racy\",\n    \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.21/src/lib.rs:1408:11: 1408:39 (#0)\",\n    \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.21/src/lib.rs:1411:13: 1411:55 (#0)\",\n    \"dep_kind\": \"Control\"\n  },\n  \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n}"
            ]
          }
        },
        {
          "file": "(virtual) geiger",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=axfs-ng-vfs, checker=Geiger\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu geiger --output-format Ascii\n// timestamp=2025-07-13 4:29:50.449642925 +08:00:00\n     Removed 0 files\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling syn v1.0.109\n   Compiling ident_case v1.0.1\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/build/syn-49839b08cea53f70/build_script_build-49839b08cea53f70.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/ident_case-a52beed4582375b5.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/build/proc-macro2-4b131a9cc84a5cde/build_script_build-4b131a9cc84a5cde.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/unicode_ident-1d1395cd7a8bd8da.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libident_case-a52beed4582375b5.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libunicode_ident-1d1395cd7a8bd8da.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libident_case-a52beed4582375b5.rlib\",\"emit\":\"link\"}\n   Compiling strsim v0.10.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libunicode_ident-1d1395cd7a8bd8da.rlib\",\"emit\":\"link\"}\n   Compiling fnv v1.0.7\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/strsim-b8f7b81156e42694.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/fnv-1dce063efb2ea7a2.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libfnv-1dce063efb2ea7a2.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libfnv-1dce063efb2ea7a2.rlib\",\"emit\":\"link\"}\n   Compiling autocfg v1.4.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/autocfg-3efdef99bf5440dc.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libstrsim-b8f7b81156e42694.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/build/proc-macro2-4b131a9cc84a5cde/build_script_build-4b131a9cc84a5cde\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/build/syn-49839b08cea53f70/build_script_build-49839b08cea53f70\",\"emit\":\"link\"}\n   Compiling axerrno v0.1.0 (https://github.com/Starry-Mix-THU/axerrno.git?rev=f5d8f86#f5d8f863)\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/build/axerrno-66c8b2a9000ba4ab/build_script_build-66c8b2a9000ba4ab.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libautocfg-3efdef99bf5440dc.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libstrsim-b8f7b81156e42694.rlib\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/proc_macro2-d52e1b0fd08ab4a5.d\",\"emit\":\"dep-info\"}\n    Checking scopeguard v1.2.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/scopeguard-f9f4a2b4ed0dfe04.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libscopeguard-f9f4a2b4ed0dfe04.rmeta\",\"emit\":\"metadata\"}\n    Checking log v0.4.21\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/log-3e4ab308c424f8a7.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/build/axerrno-66c8b2a9000ba4ab/build_script_build-66c8b2a9000ba4ab\",\"emit\":\"link\"}\n    Checking bitflags v2.9.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/liblog-3e4ab308c424f8a7.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/bitflags-ada8e5ea9f3f626d.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libautocfg-3efdef99bf5440dc.rlib\",\"emit\":\"link\"}\n   Compiling lock_api v0.4.12\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/axerrno-4e1987b8e11b7052.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/build/lock_api-ef6c0ffcba60cb31/build_script_build-ef6c0ffcba60cb31.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libaxerrno-4e1987b8e11b7052.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libbitflags-ada8e5ea9f3f626d.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/build/lock_api-ef6c0ffcba60cb31/build_script_build-ef6c0ffcba60cb31\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/lock_api-ec2d5f78651bfbb7.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libproc_macro2-d52e1b0fd08ab4a5.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libproc_macro2-d52e1b0fd08ab4a5.rlib\",\"emit\":\"link\"}\n   Compiling quote v1.0.40\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/liblock_api-ec2d5f78651bfbb7.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/quote-c8eb33032447793c.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libquote-c8eb33032447793c.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libquote-c8eb33032447793c.rlib\",\"emit\":\"link\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/syn-87d69f0c08a914bc.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libsyn-87d69f0c08a914bc.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libsyn-87d69f0c08a914bc.rlib\",\"emit\":\"link\"}\n   Compiling darling_core v0.13.4\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/darling_core-a2ad92fa46b0f48c.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libdarling_core-a2ad92fa46b0f48c.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libdarling_core-a2ad92fa46b0f48c.rlib\",\"emit\":\"link\"}\n   Compiling darling_macro v0.13.4\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/darling_macro-c3e5e749debd3b22.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libdarling_macro-c3e5e749debd3b22.so\",\"emit\":\"link\"}\n   Compiling darling v0.13.4\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/darling-e2524d064705df6b.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libdarling-e2524d064705df6b.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libdarling-e2524d064705df6b.rlib\",\"emit\":\"link\"}\n   Compiling inherit-methods-macro v0.1.0\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/inherit_methods_macro-d2fd22c644f1de69.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libinherit_methods_macro-d2fd22c644f1de69.so\",\"emit\":\"link\"}\n    Checking axfs-ng-vfs v0.1.0 (/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs)\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/axfs_ng_vfs-db833ae7a9f2e8ff.d\",\"emit\":\"dep-info\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"lifetime flowing from input to output with different syntax can be confusing\",\"code\":{\"code\":\"mismatched_lifetime_syntaxes\",\"explanation\":null},\"level\":\"warning\",\"spans\":[{\"file_name\":\"src/path.rs\",\"byte_start\":4298,\"byte_end\":4303,\"line_start\":166,\"line_end\":166,\"column_start\":23,\"column_end\":28,\"is_primary\":true,\"text\":[{\"text\":\"    pub fn components(&self) -> Components {\",\"highlight_start\":23,\"highlight_end\":28}],\"label\":\"this lifetime flows to the output\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"src/path.rs\",\"byte_start\":4308,\"byte_end\":4318,\"line_start\":166,\"line_end\":166,\"column_start\":33,\"column_end\":43,\"is_primary\":false,\"text\":[{\"text\":\"    pub fn components(&self) -> Components {\",\"highlight_start\":33,\"highlight_end\":43}],\"label\":\"the lifetime gets resolved as `'_`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"`#[warn(mismatched_lifetime_syntaxes)]` on by default\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"one option is to remove the lifetime for references and use the anonymous lifetime for paths\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"src/path.rs\",\"byte_start\":4318,\"byte_end\":4318,\"line_start\":166,\"line_end\":166,\"column_start\":43,\"column_end\":43,\"is_primary\":true,\"text\":[{\"text\":\"    pub fn components(&self) -> Components {\",\"highlight_start\":43,\"highlight_end\":43}],\"label\":null,\"suggested_replacement\":\"<'_>\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"one option is to consistently use `'_`\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"src/path.rs\",\"byte_start\":4299,\"byte_end\":4299,\"line_start\":166,\"line_end\":166,\"column_start\":24,\"column_end\":24,\"is_primary\":true,\"text\":[{\"text\":\"    pub fn components(&self) -> Components {\",\"highlight_start\":24,\"highlight_end\":24}],\"label\":null,\"suggested_replacement\":\"'_ \",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null},{\"file_name\":\"src/path.rs\",\"byte_start\":4318,\"byte_end\":4318,\"line_start\":166,\"line_end\":166,\"column_start\":43,\"column_end\":43,\"is_primary\":true,\"text\":[{\"text\":\"    pub fn components(&self) -> Components {\",\"highlight_start\":43,\"highlight_end\":43}],\"label\":null,\"suggested_replacement\":\"<'_>\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[33mwarning\\u001b[0m\\u001b[0m\\u001b[1m: lifetime flowing from input to output with different syntax can be confusing\\u001b[0m\\n\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0msrc/path.rs:166:23\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m166\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m    pub fn components(&self) -> Components {\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33m^^^^^\\u001b[0m\\u001b[0m     \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m----------\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12mthe lifetime gets resolved as `'_`\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33m|\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                       \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[33mthis lifetime flows to the output\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m= \\u001b[0m\\u001b[0m\\u001b[1mnote\\u001b[0m\\u001b[0m: `#[warn(mismatched_lifetime_syntaxes)]` on by default\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;14mhelp\\u001b[0m\\u001b[0m: one option is to remove the lifetime for references and use the anonymous lifetime for paths\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\n\\u001b[0m\\u001b[1m\\u001b[38;5;12m166\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0m    pub fn components(&self) -> Components\\u001b[0m\\u001b[0m\\u001b[38;5;10m<'_>\\u001b[0m\\u001b[0m {\\u001b[0m\\n\\u001b[0m    \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\\u001b[0m                                           \\u001b[0m\\u001b[0m\\u001b[38;5;10m++++\\u001b[0m\\n\\n\"}\n{\"$message_type\":\"artifact\",\"artifact\":\"/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs/target/debug/deps/libaxfs_ng_vfs-db833ae7a9f2e8ff.rmeta\",\"emit\":\"metadata\"}\n{\"$message_type\":\"diagnostic\",\"message\":\"1 warning emitted\",\"code\":null,\"level\":\"warning\",\"spans\":[],\"children\":[],\"rendered\":\"\\u001b[0m\\u001b[1m\\u001b[33mwarning\\u001b[0m\\u001b[0m\\u001b[1m: 1 warning emitted\\u001b[0m\\n\\n\"}\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 4.45s\n    Scanning done\nWARNING: Dependency file was never scanned: /home/runner/.cargo/git/checkouts/axerrno-8300b385ea7cadcd/f5d8f86/README.md\nerror: Found 1 warnings\n"
            ]
          }
        },
        {
          "file": "(virtual) lockbud",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=axfs-ng-vfs, checker=Lockbud\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs\n// cmd=cargo +nightly-2025-02-01 lockbud -k all -- --target x86_64-unknown-linux-gnu \n// timestamp=2025-07-13 4:29:43.785323658 +08:00:00\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling syn v1.0.109\n   Compiling ident_case v1.0.1\n   Compiling fnv v1.0.7\n   Compiling strsim v0.10.0\n   Compiling autocfg v1.4.0\n   Compiling axerrno v0.1.0 (https://github.com/Starry-Mix-THU/axerrno.git?rev=f5d8f86#f5d8f863)\n   Compiling log v0.4.21\n   Compiling scopeguard v1.2.0\n   Compiling bitflags v2.9.0\n[2025-07-12T20:29:44Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.21/src/lib.rs:1408:11: 1408:39 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.21/src/lib.rs:1411:13: 1411:55 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-07-12T20:29:44Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling lock_api v0.4.12\n   Compiling quote v1.0.40\n   Compiling darling_core v0.13.4\n   Compiling darling_macro v0.13.4\n   Compiling darling v0.13.4\n   Compiling inherit-methods-macro v0.1.0\n   Compiling axfs-ng-vfs v0.1.0 (/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs)\nerror[E0658]: `let` expressions in this position are unstable\n   --> src/node/dir.rs:145:12\n    |\n145 |         if let Some(entry) = children.remove(name)\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n   --> src/node/dir.rs:146:16\n    |\n146 |             && let Ok(dir) = entry.as_dir()\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: `let` expressions in this position are unstable\n   --> src/node/dir.rs:284:20\n    |\n284 |                 if let Ok(dir) = dst.as_dir()\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n\nerror[E0658]: cannot cast `dyn node::dir::DirNodeOps<M>` to `dyn node::NodeOps<M>`, trait upcasting coercion is experimental\n   --> src/node/dir.rs:113:9\n    |\n113 |         &*self.ops\n    |         ^^^^^^^^^^\n    |\n    = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n    = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n    = note: required when coercing `&(dyn node::dir::DirNodeOps<M> + 'static)` into `&(dyn node::NodeOps<M> + 'static)`\n\nerror[E0658]: cannot cast `dyn node::dir::DirNodeOps<M>` to `dyn node::NodeOps<M>`, trait upcasting coercion is experimental\n   --> src/node/dir.rs:119:9\n    |\n119 |         node.ops.clone()\n    |         ^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n    = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n    = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n    = note: required when coercing `alloc::sync::Arc<dyn node::dir::DirNodeOps<M>>` into `alloc::sync::Arc<(dyn node::NodeOps<M> + 'static)>`\n\nerror[E0658]: cannot cast `dyn node::file::FileNodeOps<M>` to `dyn node::NodeOps<M>`, trait upcasting coercion is experimental\n  --> src/node/file.rs:40:9\n   |\n40 |         node.0.clone()\n   |         ^^^^^^^^^^^^^^\n   |\n   = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n   = note: required when coercing `alloc::sync::Arc<dyn node::file::FileNodeOps<M>>` into `alloc::sync::Arc<(dyn node::NodeOps<M> + 'static)>`\n\nerror[E0658]: cannot cast `dyn node::file::FileNodeOps<M>` to `dyn node::NodeOps<M>`, trait upcasting coercion is experimental\n  --> src/node/mod.rs:57:33\n   |\n57 |             Node::File(file) => file.inner().clone(),\n   |                                 ^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n   = note: required when coercing `alloc::sync::Arc<dyn node::file::FileNodeOps<M>>` into `alloc::sync::Arc<(dyn node::NodeOps<M> + 'static)>`\n\nerror[E0658]: cannot cast `dyn node::dir::DirNodeOps<M>` to `dyn node::NodeOps<M>`, trait upcasting coercion is experimental\n  --> src/node/mod.rs:58:31\n   |\n58 |             Node::Dir(dir) => dir.inner().clone(),\n   |                               ^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n   = note: required when coercing `alloc::sync::Arc<dyn node::dir::DirNodeOps<M>>` into `alloc::sync::Arc<(dyn node::NodeOps<M> + 'static)>`\n\nerror[E0658]: cannot cast `dyn node::file::FileNodeOps<M>` to `dyn node::NodeOps<M>`, trait upcasting coercion is experimental\n  --> src/node/mod.rs:68:33\n   |\n68 |             Node::File(file) => file.deref(),\n   |                                 ^^^^^^^^^^^^\n   |\n   = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-31; consider upgrading it if it is out of date\n   = note: required when coercing `&(dyn node::file::FileNodeOps<M> + 'static)` into `&(dyn node::NodeOps<M> + 'static)`\n\nFor more information about this error, try `rustc --explain E0658`.\nerror: could not compile `axfs-ng-vfs` (lib) due to 9 previous errors\n"
            ]
          }
        },
        {
          "file": "(virtual) mirai",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=axfs-ng-vfs, checker=Mirai\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs\n// cmd=cargo +nightly-2025-01-10 mirai --target x86_64-unknown-linux-gnu \n// timestamp=2025-07-13 4:29:38.986524658 +08:00:00\n   Compiling proc-macro2 v1.0.95\n   Compiling unicode-ident v1.0.18\n   Compiling syn v1.0.109\n   Compiling ident_case v1.0.1\n   Compiling strsim v0.10.0\n   Compiling fnv v1.0.7\n   Compiling autocfg v1.4.0\n   Compiling axerrno v0.1.0 (https://github.com/Starry-Mix-THU/axerrno.git?rev=f5d8f86#f5d8f863)\n    Checking log v0.4.21\n    Checking scopeguard v1.2.0\n    Checking bitflags v2.9.0\n   Compiling lock_api v0.4.12\n   Compiling quote v1.0.40\n   Compiling darling_core v0.13.4\n   Compiling darling_macro v0.13.4\n   Compiling darling v0.13.4\n   Compiling inherit-methods-macro v0.1.0\n    Checking axfs-ng-vfs v0.1.0 (/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs)\nerror: could not compile `axfs-ng-vfs` (lib) due to 9 previous errors\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=axfs-ng-vfs, checker=SemverChecks\n// toolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs\n// cmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \n// timestamp=2025-07-13 4:29:33.773282347 +08:00:00\n    Building axfs-ng-vfs v0.1.0 (current)\n       Built [   4.605s] (current)\n     Parsing axfs-ng-vfs v0.1.0 (current)\n      Parsed [   0.005s] (current)\nerror: axfs-ng-vfs not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        },
        {
          "file": "[Geiger] Unsafe code statistics",
          "features": "",
          "count": 1,
          "kinds": {
            "Geiger": [
              "pkg=axfs-ng-vfs, checker=Geiger\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu geiger --output-format Ascii\ntimestamp=2025-07-13 4:29:56.261178252 +08:00:00\n\n\nMetric output format: x/y\n    x = unsafe code used by the build\n    y = total unsafe code found in the crate\n\nSymbols:\n    :) = No `unsafe` usage found, declares #![forbid(unsafe_code)]\n    ?  = No `unsafe` usage found, missing #![forbid(unsafe_code)]\n    !  = `unsafe` usage found\n\nFunctions  Expressions  Impls  Traits  Methods  Dependency\n\n0/0        9/9          0/0    0/0     0/0      !  axfs-ng-vfs 0.1.0\n0/0        0/0          0/0    0/0     0/0      ?  |-- axerrno 0.1.0\n2/2        18/18        1/1    0/0     0/0      !  |   `-- log 0.4.21\n0/0        0/0          0/0    0/0     0/0      ?  |-- bitflags 2.9.0\n0/0        0/0          0/0    0/0     0/0      ?  |-- inherit-methods-macro 0.1.0\n0/0        0/0          0/0    0/0     0/0      ?  |   |-- darling 0.13.4\n0/0        0/0          0/0    0/0     0/0      ?  |   |   |-- darling_core 0.13.4\n0/0        0/0          0/0    0/0     0/0      ?  |   |   |   |-- fnv 1.0.7\n0/0        0/0          0/0    0/0     0/0      ?  |   |   |   |-- ident_case 1.0.1\n0/0        14/14        0/0    0/0     3/3      !  |   |   |   |-- proc-macro2 1.0.95\n0/0        4/4          0/0    0/0     0/0      !  |   |   |   |   `-- unicode-ident 1.0.18\n0/0        0/0          0/0    0/0     0/0      ?  |   |   |   |-- quote 1.0.40\n0/0        14/14        0/0    0/0     3/3      !  |   |   |   |   `-- proc-macro2 1.0.95\n0/0        0/0          0/0    0/0     0/0      :) |   |   |   |-- strsim 0.10.0\n0/0        69/69        3/3    0/0     2/2      !  |   |   |   `-- syn 1.0.109\n0/0        14/14        0/0    0/0     3/3      !  |   |   |       |-- proc-macro2 1.0.95\n0/0        0/0          0/0    0/0     0/0      ?  |   |   |       |-- quote 1.0.40\n0/0        4/4          0/0    0/0     0/0      !  |   |   |       `-- unicode-ident 1.0.18\n0/0        0/0          0/0    0/0     0/0      ?  |   |   `-- darling_macro 0.13.4\n0/0        0/0          0/0    0/0     0/0      ?  |   |       |-- darling_core 0.13.4\n0/0        0/0          0/0    0/0     0/0      ?  |   |       |-- quote 1.0.40\n0/0        69/69        3/3    0/0     2/2      !  |   |       `-- syn 1.0.109\n0/0        14/14        0/0    0/0     3/3      !  |   |-- proc-macro2 1.0.95\n0/0        0/0          0/0    0/0     0/0      ?  |   |-- quote 1.0.40\n0/0        69/69        3/3    0/0     2/2      !  |   `-- syn 1.0.109\n0/0        612/612      32/32  14/14   24/24    !  |-- lock_api 0.4.12\n0/0        16/16        1/1    0/0     0/0      !  |   `-- scopeguard 1.2.0\n2/2        18/18        1/1    0/0     0/0      !  `-- log 0.4.21\n\n2/2        742/742      37/37  14/14   29/29\n\n"
            ]
          }
        },
        {
          "file": "[Lockbud] deadlock detection",
          "features": "",
          "count": 1,
          "kinds": {
            "Lockbud(Possibly)": [
              "[2025-07-12T20:29:44Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.21/src/lib.rs:1408:11: 1408:39 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.21/src/lib.rs:1411:13: 1411:55 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-07-12T20:29:44Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=axfs-ng-vfs, checker=Outdated\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-07-13 4:29:50.384073521 +08:00:00\n\nName      Project  Compat  Latest  Kind    Platform\n----      -------  ------  ------  ----    --------\nbitflags  2.9.0    2.9.1   2.9.1   Normal  ---\nlock_api  0.4.12   0.4.13  0.4.13  Normal  ---\nlog       0.4.21   ---     0.4.27  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks violation]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=axfs-ng-vfs, checker=SemverChecks\ntoolchain=nightly-2025-06-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_1/Starry-Mix-THU/axfs-ng-vfs\ncmd=cargo +nightly-2025-06-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \ntimestamp=2025-07-13 4:29:38.879029817 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building axfs-ng-vfs v0.1.0 (current)\n       Built [   4.605s] (current)\n     Parsing axfs-ng-vfs v0.1.0 (current)\n      Parsed [   0.005s] (current)\nerror: axfs-ng-vfs not found in registry (crates.io). For workarounds check https://github.com/obi1kenobi/cargo-semver-checks#does-the-crate-im-checking-have-to-be-published-on-cratesio\n"
            ]
          }
        },
        {
          "file": "src/node/file.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Mirai": [
              "error[E0658]: cannot cast `dyn node::file::FileNodeOps<M>` to `dyn node::NodeOps<M>`, trait upcasting coercion is experimental\n  --> src/node/file.rs:40:9\n   |\n40 |         node.0.clone()\n   |         ^^^^^^^^^^^^^^\n   |\n   = note: see issue #65991 <https://github.com/rust-lang/rust/issues/65991> for more information\n   = help: add `#![feature(trait_upcasting)]` to the crate attributes to enable\n   = note: this compiler was built on 2025-01-09; consider upgrading it if it is out of date\n   = note: required when coercing `alloc::sync::Arc<dyn node::file::FileNodeOps<M>>` into `alloc::sync::Arc<(dyn node::NodeOps<M> + 'static)>`\n\n"
            ]
          }
        },
        {
          "file": "src/path.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: lifetime flowing from input to output with different syntax can be confusing\n   --> src/path.rs:166:23\n    |\n166 |     pub fn components(&self) -> Components {\n    |                       ^^^^^     ---------- the lifetime gets resolved as `'_`\n    |                       |\n    |                       this lifetime flows to the output\n    |\n    = note: `#[warn(mismatched_lifetime_syntaxes)]` on by default\nhelp: one option is to remove the lifetime for references and use the anonymous lifetime for paths\n    |\n166 |     pub fn components(&self) -> Components<'_> {\n    |                                           ++++\n\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Atomvchecker",
    "Outdated",
    "Geiger",
    "Unused Deps",
    "Unformatted"
  ]
}