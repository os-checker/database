{"repo":{"user":"arceos-org","repo":"arceos-crates"},"data":[{"user":"arceos-org","repo":"arceos-crates","pkg":"kspin","count":8,"raw_reports":[{"file":"src/base.rs","count":8,"kinds":{"Clippy(Warn)":["warning: the following explicit lifetimes could be elided: 'a\n   --> src/base.rs:195:6\n    |\n195 | impl<'a, G: BaseGuard, T: ?Sized> Deref for BaseSpinLockGuard<'a, G, T> {\n    |      ^^                                                       ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n    = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n    |\n195 - impl<'a, G: BaseGuard, T: ?Sized> Deref for BaseSpinLockGuard<'a, G, T> {\n195 + impl<G: BaseGuard, T: ?Sized> Deref for BaseSpinLockGuard<'_, G, T> {\n    |\n\n","warning: the following explicit lifetimes could be elided: 'a\n   --> src/base.rs:195:6\n    |\n195 | impl<'a, G: BaseGuard, T: ?Sized> Deref for BaseSpinLockGuard<'a, G, T> {\n    |      ^^                                                       ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n    = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n    |\n195 - impl<'a, G: BaseGuard, T: ?Sized> Deref for BaseSpinLockGuard<'a, G, T> {\n195 + impl<G: BaseGuard, T: ?Sized> Deref for BaseSpinLockGuard<'_, G, T> {\n    |\n\n","warning: the following explicit lifetimes could be elided: 'a\n   --> src/base.rs:204:6\n    |\n204 | impl<'a, G: BaseGuard, T: ?Sized> DerefMut for BaseSpinLockGuard<'a, G, T> {\n    |      ^^                                                          ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n204 - impl<'a, G: BaseGuard, T: ?Sized> DerefMut for BaseSpinLockGuard<'a, G, T> {\n204 + impl<G: BaseGuard, T: ?Sized> DerefMut for BaseSpinLockGuard<'_, G, T> {\n    |\n\n","warning: the following explicit lifetimes could be elided: 'a\n   --> src/base.rs:204:6\n    |\n204 | impl<'a, G: BaseGuard, T: ?Sized> DerefMut for BaseSpinLockGuard<'a, G, T> {\n    |      ^^                                                          ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n204 - impl<'a, G: BaseGuard, T: ?Sized> DerefMut for BaseSpinLockGuard<'a, G, T> {\n204 + impl<G: BaseGuard, T: ?Sized> DerefMut for BaseSpinLockGuard<'_, G, T> {\n    |\n\n","warning: the following explicit lifetimes could be elided: 'a\n   --> src/base.rs:212:6\n    |\n212 | impl<'a, G: BaseGuard, T: ?Sized + fmt::Debug> fmt::Debug for BaseSpinLockGuard<'a, G, T> {\n    |      ^^                                                                         ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n212 - impl<'a, G: BaseGuard, T: ?Sized + fmt::Debug> fmt::Debug for BaseSpinLockGuard<'a, G, T> {\n212 + impl<G: BaseGuard, T: ?Sized + fmt::Debug> fmt::Debug for BaseSpinLockGuard<'_, G, T> {\n    |\n\n","warning: the following explicit lifetimes could be elided: 'a\n   --> src/base.rs:212:6\n    |\n212 | impl<'a, G: BaseGuard, T: ?Sized + fmt::Debug> fmt::Debug for BaseSpinLockGuard<'a, G, T> {\n    |      ^^                                                                         ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n212 - impl<'a, G: BaseGuard, T: ?Sized + fmt::Debug> fmt::Debug for BaseSpinLockGuard<'a, G, T> {\n212 + impl<G: BaseGuard, T: ?Sized + fmt::Debug> fmt::Debug for BaseSpinLockGuard<'_, G, T> {\n    |\n\n","warning: the following explicit lifetimes could be elided: 'a\n   --> src/base.rs:218:6\n    |\n218 | impl<'a, G: BaseGuard, T: ?Sized> Drop for BaseSpinLockGuard<'a, G, T> {\n    |      ^^                                                      ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n218 - impl<'a, G: BaseGuard, T: ?Sized> Drop for BaseSpinLockGuard<'a, G, T> {\n218 + impl<G: BaseGuard, T: ?Sized> Drop for BaseSpinLockGuard<'_, G, T> {\n    |\n\n","warning: the following explicit lifetimes could be elided: 'a\n   --> src/base.rs:218:6\n    |\n218 | impl<'a, G: BaseGuard, T: ?Sized> Drop for BaseSpinLockGuard<'a, G, T> {\n    |      ^^                                                      ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n218 - impl<'a, G: BaseGuard, T: ?Sized> Drop for BaseSpinLockGuard<'a, G, T> {\n218 + impl<G: BaseGuard, T: ?Sized> Drop for BaseSpinLockGuard<'_, G, T> {\n    |\n\n"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"percpu","count":6,"raw_reports":[{"file":"percpu/src/../README.md","count":6,"kinds":{"Clippy(Warn)":["warning: doc list item without indentation\n  --> percpu/src/../README.md:53:1\n   |\n53 | just a global variable, architecture-specific thread pointer register is\n   | ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\n   = note: `#[warn(clippy::doc_lazy_continuation)]` on by default\nhelp: indent this line\n   |\n53 |   just a global variable, architecture-specific thread pointer register is\n   | ++\n\n","warning: doc list item without indentation\n  --> percpu/src/../README.md:54:1\n   |\n54 | not used.\n   | ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n54 |   not used.\n   | ++\n\n","warning: doc list item without indentation\n  --> percpu/src/../README.md:56:1\n   |\n56 | preemption when accessing per-CPU data. Otherwise, the data may be corrupted\n   | ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n56 |   preemption when accessing per-CPU data. Otherwise, the data may be corrupted\n   | ++\n\n","warning: doc list item without indentation\n  --> percpu/src/../README.md:57:1\n   |\n57 | when it's being accessing and the current thread happens to be preempted.\n   | ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n57 |   when it's being accessing and the current thread happens to be preempted.\n   | ++\n\n","warning: doc list item without indentation\n  --> percpu/src/../README.md:59:1\n   |\n59 | In this case, we use `TPIDR_EL2` instead of `TPIDR_EL1`\n   | ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n59 |   In this case, we use `TPIDR_EL2` instead of `TPIDR_EL1`\n   | ++\n\n","warning: doc list item without indentation\n  --> percpu/src/../README.md:60:1\n   |\n60 | to store the base address of per-CPU data area.\n   | ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n60 |   to store the base address of per-CPU data area.\n   | ++\n\n"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"axdriver_net","count":5,"raw_reports":[{"file":"axdriver_net/src/lib.rs","count":2,"kinds":{"Clippy(Warn)":["warning: the feature `const_mut_refs` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n --> axdriver_net/src/lib.rs:4:12\n  |\n4 | #![feature(const_mut_refs)]\n  |            ^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\n","warning: the feature `const_slice_from_raw_parts_mut` has been stable since 1.83.0-nightly and no longer requires an attribute to enable\n --> axdriver_net/src/lib.rs:5:12\n  |\n5 | #![feature(const_slice_from_raw_parts_mut)]\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"]}},{"file":"/home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/Cargo.lock","count":1,"kinds":{"Audit":["    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 688 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (49 crate dependencies)\nCrate:     proc-macro-error\nVersion:   1.0.4\nWarning:   unmaintained\nTitle:     proc-macro-error is unmaintained\nDate:      2024-09-01\nID:        RUSTSEC-2024-0370\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0370\nDependency tree:\nproc-macro-error 1.0.4\n└── defmt-macros 0.3.9\n    └── defmt 0.3.8\n        └── smoltcp 0.10.0\n            └── ixgbe-driver 0.1.0\n                └── axdriver_net 0.1.0\n                    └── axdriver_virtio 0.1.0\n\nwarning: 1 allowed warning found\n\n{\n  \"database\": {\n    \"advisory-count\": 688,\n    \"last-commit\": \"4676c5529dd5319b9962e42bf984797f0dd57f5b\",\n    \"last-updated\": \"2024-11-25T11:27:40+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 49\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"proc-macro-error\",\n          \"version\": \"1.0.4\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\",\n          \"dependencies\": [\n            {\n              \"name\": \"proc-macro-error-attr\",\n              \"version\": \"1.0.4\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            },\n            {\n              \"name\": \"proc-macro2\",\n              \"version\": \"1.0.92\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            },\n            {\n              \"name\": \"quote\",\n              \"version\": \"1.0.37\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            },\n            {\n              \"name\": \"syn\",\n              \"version\": \"1.0.109\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            },\n            {\n              \"name\": \"version_check\",\n              \"version\": \"0.9.5\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0370\",\n          \"package\": \"proc-macro-error\",\n          \"title\": \"proc-macro-error is unmaintained\",\n          \"description\": \"proc-macro-error's maintainer seems to be unreachable, with no commits for 2 years, no releases pushed for 4 years, and no activity on the GitLab repo or response to email.\\n\\nproc-macro-error also depends on `syn 1.x`, which may be bringing duplicate dependencies into dependant build trees.\\n\\n## Possible Alternative(s)\\n\\n- [manyhow](https://crates.io/crates/manyhow)\\n- [proc-macro-error2](https://crates.io/crates/proc-macro-error2)\\n- [proc-macro2-diagnostics](https://github.com/SergioBenitez/proc-macro2-diagnostics)\",\n          \"date\": \"2024-09-01\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://gitlab.com/CreepySkeleton/proc-macro-error/-/issues/20\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"]}},{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-11-26T09:44:48Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-26T09:44:48Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}},{"file":"[rap] Not supported to display yet.","count":1,"kinds":{"Rap":["pkg=axdriver_net, checker=Rap\ntoolchain=nightly-2024-10-12-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\npkg_dir=/home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/axdriver_net\ncmd=cargo +nightly-2024-10-12 rap -F -M\n\n09:45:28|RAP|WARN|: RCanary: Leak Function: Unsat DefId(0:42 ~ axdriver_net[e6f7]::net_buf::{impl#2}::into_buf_ptr) axdriver_net/src/net_buf.rs:105:5: 113:6 (#0)\n09:45:28|RAP|WARN|: RCanary: LeakItem Candidates: _10 = net_buf::alloc::boxed::Box::<net_buf::NetBuf>::into_raw(move _11) -> [return: bb3, unwind: bb11], axdriver_net/src/net_buf.rs:109:26: 109:45 (#0)\n"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"x86_rtc","count":5,"raw_reports":[{"file":"src/lib.rs","count":5,"kinds":{"Clippy(Warn)":["warning: you should consider adding a `Default` implementation for `Rtc`\n   --> src/lib.rs:97:5\n    |\n97  | /     pub fn new() -> Self {\n98  | |         Self {\n99  | |             cmos_format: read_cmos_register(CMOS_STATUS_REGISTER_B),\n100 | |         }\n101 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n95  + impl Default for Rtc {\n96  +     fn default() -> Self {\n97  +         Self::new()\n98  +     }\n99  + }\n    |\n\n","warning: creating a mutable reference to mutable static is discouraged\n   --> src/lib.rs:208:17\n    |\n208 |                 COMMAND_PORT.write(CMOS_DISABLE_NMI | register);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives\n    = note: `#[warn(static_mut_refs)]` on by default\n\n","warning: creating a mutable reference to mutable static is discouraged\n   --> src/lib.rs:209:17\n    |\n209 |                 DATA_PORT.read()\n    |                 ^^^^^^^^^^^^^^^^ mutable reference to mutable static\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives\n\n","warning: creating a mutable reference to mutable static is discouraged\n   --> src/lib.rs:215:17\n    |\n215 |                 COMMAND_PORT.write(CMOS_DISABLE_NMI | register);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives\n\n","warning: creating a mutable reference to mutable static is discouraged\n   --> src/lib.rs:216:17\n    |\n216 |                 DATA_PORT.write(value)\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>\n    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives\n\n"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"axdriver_virtio","count":3,"raw_reports":[{"file":"/home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/Cargo.lock","count":1,"kinds":{"Audit":["    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 688 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (49 crate dependencies)\nCrate:     proc-macro-error\nVersion:   1.0.4\nWarning:   unmaintained\nTitle:     proc-macro-error is unmaintained\nDate:      2024-09-01\nID:        RUSTSEC-2024-0370\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0370\nDependency tree:\nproc-macro-error 1.0.4\n└── defmt-macros 0.3.9\n    └── defmt 0.3.8\n        └── smoltcp 0.10.0\n            └── ixgbe-driver 0.1.0\n                └── axdriver_net 0.1.0\n                    └── axdriver_virtio 0.1.0\n\nwarning: 1 allowed warning found\n\n{\n  \"database\": {\n    \"advisory-count\": 688,\n    \"last-commit\": \"4676c5529dd5319b9962e42bf984797f0dd57f5b\",\n    \"last-updated\": \"2024-11-25T11:27:40+01:00\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 49\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"proc-macro-error\",\n          \"version\": \"1.0.4\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\",\n          \"dependencies\": [\n            {\n              \"name\": \"proc-macro-error-attr\",\n              \"version\": \"1.0.4\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            },\n            {\n              \"name\": \"proc-macro2\",\n              \"version\": \"1.0.92\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            },\n            {\n              \"name\": \"quote\",\n              \"version\": \"1.0.37\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            },\n            {\n              \"name\": \"syn\",\n              \"version\": \"1.0.109\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            },\n            {\n              \"name\": \"version_check\",\n              \"version\": \"0.9.5\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0370\",\n          \"package\": \"proc-macro-error\",\n          \"title\": \"proc-macro-error is unmaintained\",\n          \"description\": \"proc-macro-error's maintainer seems to be unreachable, with no commits for 2 years, no releases pushed for 4 years, and no activity on the GitLab repo or response to email.\\n\\nproc-macro-error also depends on `syn 1.x`, which may be bringing duplicate dependencies into dependant build trees.\\n\\n## Possible Alternative(s)\\n\\n- [manyhow](https://crates.io/crates/manyhow)\\n- [proc-macro-error2](https://crates.io/crates/proc-macro-error2)\\n- [proc-macro2-diagnostics](https://github.com/SergioBenitez/proc-macro2-diagnostics)\",\n          \"date\": \"2024-09-01\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://gitlab.com/CreepySkeleton/proc-macro-error/-/issues/20\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"]}},{"file":"(virtual) geiger","count":1,"kinds":{"Cargo":["// pkg_name=axdriver_virtio, checker=Geiger\n// toolchain=nightly-2024-10-12-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/axdriver_virtio\n// cmd=cargo geiger --output-format Ascii\nFailed to match (ignoring source) package: path+file:///home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/axdriver_block#0.1.0 \nFailed to match (ignoring source) package: path+file:///home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/axdriver_block#0.1.0 \nFailed to match (ignoring source) package: path+file:///home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/axdriver_block#0.1.0 \nFailed to match (ignoring source) package: path+file:///home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/axdriver_block#0.1.0 \nFailed to match (ignoring source) package: path+file:///home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/axdriver_block#0.1.0 \nFailed to match (ignoring source) package: path+file:///home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/axdriver_display#0.1.0 \nFailed to match (ignoring source) package: path+file:///home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/axdriver_display#0.1.0 \nFailed to match (ignoring source) package: path+file:///home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/axdriver_display#0.1.0 \nFailed to match (ignoring source) package: path+file:///home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/axdriver_display#0.1.0 \nFailed to match (ignoring source) package: path+file:///home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/axdriver_display#0.1.0 \nFailed to match (ignoring source) package: path+file:///home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/axdriver_net#0.1.0 \nFailed to match (ignoring source) package: path+file:///home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/axdriver_net#0.1.0 \nFailed to match (ignoring source) package: path+file:///home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/axdriver_net#0.1.0 \nFailed to match (ignoring source) package: path+file:///home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/axdriver_net#0.1.0 \nFailed to match (ignoring source) package: path+file:///home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/axdriver_net#0.1.0 \nerror: Cargo(\"failed to parse lock file at: /home/runner/check/batch_5/arceos-org/arceos-crates/crates/axdriver_crates/Cargo.lock\")\n"]}},{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-11-26T09:44:48Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-26T09:44:48Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"axerrno","count":3,"raw_reports":[{"file":"src/../README.md","count":2,"kinds":{"Clippy(Warn)":["warning: doc list item without indentation\n  --> src/../README.md:12:1\n   |\n12 | [`std::io::ErrorKind`].\n   | ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\n   = note: `#[warn(clippy::doc_lazy_continuation)]` on by default\nhelp: indent this line\n   |\n12 |   [`std::io::ErrorKind`].\n   | ++\n\n","warning: doc list item without indentation\n  --> src/../README.md:14:1\n   |\n14 | `errno.h`. It can be converted from [`AxError`].\n   | ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n14 |   `errno.h`. It can be converted from [`AxError`].\n   | ++\n\n"]}},{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-11-26T09:44:53Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-26T09:44:53Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"linked_list","count":3,"raw_reports":[{"file":"src/unsafe_list.rs","count":2,"kinds":{"Clippy(Warn)":["warning: you should consider adding a `Default` implementation for `List<A>`\n   --> src/unsafe_list.rs:99:5\n    |\n99  | /     pub const fn new() -> Self {\n100 | |         Self { first: None }\n101 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n97  + impl<A: Adapter + ?Sized> Default for List<A> {\n98  +     fn default() -> Self {\n99  +         Self::new()\n100 +     }\n101 + }\n    |\n\n","warning: you should consider adding a `Default` implementation for `Links<T>`\n   --> src/unsafe_list.rs:435:5\n    |\n435 | /     pub const fn new() -> Self {\n436 | |         Self(UnsafeCell::new(MaybeUninit::uninit()))\n437 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\nhelp: try adding this\n    |\n433 + impl<T: ?Sized> Default for Links<T> {\n434 +     fn default() -> Self {\n435 +         Self::new()\n436 +     }\n437 + }\n    |\n\n"]}},{"file":"[rap] Not supported to display yet.","count":1,"kinds":{"Rap":["pkg=linked_list, checker=Rap\ntoolchain=nightly-2024-10-12-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\npkg_dir=/home/runner/check/batch_5/arceos-org/arceos-crates/crates/linked_list\ncmd=cargo +nightly-2024-10-12 rap -F -M\n\n09:45:57|RAP|WARN|: RCanary: Leak Function: Unsat DefId(0:22 ~ linked_list[d0bf]::linked_list::{impl#0}::into_pointer) src/linked_list.rs:36:5: 38:6 (#0)\n09:45:57|RAP|WARN|: RCanary: LeakItem Candidates: _3 = linked_list::alloc::boxed::Box::<T>::into_raw(move _4) -> [return: bb1, unwind: bb4], src/linked_list.rs:37:22: 37:41 (#0)\n"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"scheduler","count":3,"raw_reports":[{"file":"src/cfs.rs","count":1,"kinds":{"Clippy(Warn)":["warning: you should consider adding a `Default` implementation for `CFScheduler<T>`\n   --> src/cfs.rs:111:5\n    |\n111 | /     pub const fn new() -> Self {\n112 | |         Self {\n113 | |             ready_queue: BTreeMap::new(),\n114 | |             min_vruntime: None,\n115 | |             id_pool: AtomicIsize::new(0_isize),\n116 | |         }\n117 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n109 + impl<T> Default for CFScheduler<T> {\n110 +     fn default() -> Self {\n111 +         Self::new()\n112 +     }\n113 + }\n    |\n\n"]}},{"file":"src/fifo.rs","count":1,"kinds":{"Clippy(Warn)":["warning: you should consider adding a `Default` implementation for `FifoScheduler<T>`\n  --> src/fifo.rs:63:5\n   |\n63 | /     pub const fn new() -> Self {\n64 | |         Self {\n65 | |             ready_queue: List::new(),\n66 | |         }\n67 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\nhelp: try adding this\n   |\n61 + impl<T> Default for FifoScheduler<T> {\n62 +     fn default() -> Self {\n63 +         Self::new()\n64 +     }\n65 + }\n   |\n\n"]}},{"file":"src/round_robin.rs","count":1,"kinds":{"Clippy(Warn)":["warning: you should consider adding a `Default` implementation for `RRScheduler<T, S>`\n  --> src/round_robin.rs:64:5\n   |\n64 | /     pub const fn new() -> Self {\n65 | |         Self {\n66 | |             ready_queue: VecDeque::new(),\n67 | |         }\n68 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\nhelp: try adding this\n   |\n62 + impl<T, const S: usize> Default for RRScheduler<T, S> {\n63 +     fn default() -> Self {\n64 +         Self::new()\n65 +     }\n66 + }\n   |\n\n"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"allocator","count":2,"raw_reports":[{"file":"src/lib.rs","count":2,"kinds":{"Clippy(Warn)":["warning: function `align_down` is never used\n   --> src/lib.rs:126:10\n    |\n126 | const fn align_down(pos: usize, align: usize) -> usize {\n    |          ^^^^^^^^^^\n    |\n    = note: `#[warn(dead_code)]` on by default\n\n","warning: function `align_up` is never used\n   --> src/lib.rs:131:10\n    |\n131 | const fn align_up(pos: usize, align: usize) -> usize {\n    |          ^^^^^^^^\n\n"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"axfs_devfs","count":2,"raw_reports":[{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-11-26T09:44:54Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-26T09:44:54Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}},{"file":"[rap] Not supported to display yet.","count":1,"kinds":{"Rap":["pkg=axfs_devfs, checker=Rap\ntoolchain=nightly-2024-10-12-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\npkg_dir=/home/runner/check/batch_5/arceos-org/arceos-crates/crates/axfs_crates/axfs_devfs\ncmd=cargo +nightly-2024-10-12 rap -F -M\n\n09:45:40|RAP|WARN|: Dangling pointer detected in function \"parent\"!!! \n"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"axfs_ramfs","count":2,"raw_reports":[{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-11-26T09:44:54Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-26T09:44:54Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}},{"file":"[rap] Not supported to display yet.","count":1,"kinds":{"Rap":["pkg=axfs_ramfs, checker=Rap\ntoolchain=nightly-2024-10-12-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\npkg_dir=/home/runner/check/batch_5/arceos-org/arceos-crates/crates/axfs_crates/axfs_ramfs\ncmd=cargo +nightly-2024-10-12 rap -F -M\n\n09:45:42|RAP|WARN|: Dangling pointer detected in function \"parent\"!!! \n"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"kernel_guard","count":2,"raw_reports":[{"file":"src/lib.rs","count":2,"kinds":{"Clippy(Warn)":["warning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n  --> src/lib.rs:55:12\n   |\n55 | #![feature(asm_const)]\n   |            ^^^^^^^^^\n   |\n   = note: `#[warn(stable_features)]` on by default\n\n","warning: you should consider adding a `Default` implementation for `NoOp`\n   --> src/lib.rs:122:5\n    |\n122 | /     pub const fn new() -> Self {\n123 | |         Self\n124 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n120 + impl Default for NoOp {\n121 +     fn default() -> Self {\n122 +         Self::new()\n123 +     }\n124 + }\n    |\n\n"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"axdriver_block","count":1,"raw_reports":[{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-11-26T09:44:48Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-26T09:44:48Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"axdriver_pci","count":1,"raw_reports":[{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-11-26T09:44:48Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-26T09:44:48Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"axfs_vfs","count":1,"raw_reports":[{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-11-26T09:44:54Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-26T09:44:54Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"axio","count":1,"raw_reports":[{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-11-26T09:44:55Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-26T09:44:55Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"flatten_objects","count":1,"raw_reports":[{"file":"src/lib.rs","count":1,"kinds":{"Clippy(Warn)":["warning: you should consider adding a `Default` implementation for `FlattenObjects<T, CAP>`\n  --> src/lib.rs:54:5\n   |\n54 | /     pub const fn new() -> Self {\n55 | |         assert!(CAP <= 1024);\n56 | |         Self {\n57 | |             objects: MaybeUninit::uninit_array(),\n...  |\n61 | |         }\n62 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n   = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n   |\n52 + impl<T, const CAP: usize> Default for FlattenObjects<T, CAP> {\n53 +     fn default() -> Self {\n54 +         Self::new()\n55 +     }\n56 + }\n   |\n\n"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"handler_table","count":1,"raw_reports":[{"file":"src/lib.rs","count":1,"kinds":{"Clippy(Warn)":["warning: you should consider adding a `Default` implementation for `HandlerTable<N>`\n  --> src/lib.rs:21:5\n   |\n21 | /     pub const fn new() -> Self {\n22 | |         const EMPTY: AtomicUsize = AtomicUsize::new(0);\n23 | |         Self {\n24 | |             handlers: [EMPTY; N],\n25 | |         }\n26 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n   = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n   |\n18 + impl<const N: usize> Default for HandlerTable<N> {\n19 +     fn default() -> Self {\n20 +         Self::new()\n21 +     }\n22 + }\n   |\n\n"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"memory_set","count":1,"raw_reports":[{"file":"src/set.rs","count":1,"kinds":{"Clippy(Warn)":["warning: you should consider adding a `Default` implementation for `MemorySet<F, P, B>`\n  --> src/set.rs:15:5\n   |\n15 | /     pub const fn new() -> Self {\n16 | |         Self {\n17 | |             areas: BTreeMap::new(),\n18 | |         }\n19 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n   = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n   |\n13 + impl<F: Copy, P, B: MappingBackend<F, P>> Default for MemorySet<F, P, B> {\n14 +     fn default() -> Self {\n15 +         Self::new()\n16 +     }\n17 + }\n   |\n\n"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"page_table_multiarch","count":1,"raw_reports":[{"file":"[lockbud] Not supported to display yet.","count":1,"kinds":{"Lockbud(Possibly)":["[2024-11-26T09:45:10Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-26T09:45:10Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"]}}]},{"user":"arceos-org","repo":"arceos-crates","pkg":"slab_allocator","count":1,"raw_reports":[{"file":"src/slab.rs","count":1,"kinds":{"Clippy(Warn)":["warning: using `map` over `inspect`\n  --> src/slab.rs:93:26\n   |\n93 |         self.head.take().map(|node| {\n   |                          ^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_inspect\n   = note: `#[warn(clippy::manual_inspect)]` on by default\nhelp: try\n   |\n93 ~         self.head.take().inspect(|node| {\n94 |             self.head = node.next.take();\n95 ~             self.len -= 1;\n   |\n\n"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Audit","Mirai","Rap","Rudra","Lockbud(Probably)","Lockbud(Possibly)","Outdated","Geiger","Unformatted"]}