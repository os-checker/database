{
  "repo": {
    "user": "arceos-org",
    "repo": "scheduler"
  },
  "data": [
    {
      "user": "arceos-org",
      "repo": "scheduler",
      "pkg": "scheduler",
      "count": 5,
      "raw_reports": [
        {
          "file": "(virtual) semver-checks",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=scheduler, checker=SemverChecks\n// toolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\n// features=\n// pkg_dir=/home/runner/check/batch_27/arceos-org/scheduler\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \n// timestamp=2025-01-27 2:39:37.22634058 +08:00:00\n    Building scheduler v0.2.0 (current)\n       Built [   0.271s] (current)\n     Parsing scheduler v0.2.0 (current)\nerror: unsupported rustdoc format v39 for file: /home/runner/check/batch_27/arceos-org/scheduler/target/semver-checks/local-scheduler-0_2_0-01666ec060466c14/target/x86_64-unknown-none/doc/scheduler.json\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=scheduler, checker=SemverChecks\ntoolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-none\nfeatures=\npkg_dir=/home/runner/check/batch_27/arceos-org/scheduler\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-none \ntimestamp=2025-01-27 2:39:37.678150575 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building scheduler v0.2.0 (current)\n       Built [   0.271s] (current)\n     Parsing scheduler v0.2.0 (current)\nerror: unsupported rustdoc format v39 for file: /home/runner/check/batch_27/arceos-org/scheduler/target/semver-checks/local-scheduler-0_2_0-01666ec060466c14/target/x86_64-unknown-none/doc/scheduler.json\n"
            ]
          }
        },
        {
          "file": "src/cfs.rs",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: you should consider adding a `Default` implementation for `CFScheduler<T>`\n   --> src/cfs.rs:111:5\n    |\n111 | /     pub const fn new() -> Self {\n112 | |         Self {\n113 | |             ready_queue: BTreeMap::new(),\n114 | |             min_vruntime: None,\n...   |\n117 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n109 + impl<T> Default for CFScheduler<T> {\n110 +     fn default() -> Self {\n111 +         Self::new()\n112 +     }\n113 + }\n    |\n\n"
            ]
          }
        },
        {
          "file": "src/fifo.rs",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: you should consider adding a `Default` implementation for `FifoScheduler<T>`\n  --> src/fifo.rs:29:5\n   |\n29 | /     pub const fn new() -> Self {\n30 | |         Self {\n31 | |             ready_queue: List::new(),\n32 | |         }\n33 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\nhelp: try adding this\n   |\n27 + impl<T> Default for FifoScheduler<T> {\n28 +     fn default() -> Self {\n29 +         Self::new()\n30 +     }\n31 + }\n   |\n\n"
            ]
          }
        },
        {
          "file": "src/round_robin.rs",
          "count": 1,
          "kinds": {
            "Clippy(Warn)": [
              "warning: you should consider adding a `Default` implementation for `RRScheduler<T, S>`\n  --> src/round_robin.rs:64:5\n   |\n64 | /     pub const fn new() -> Self {\n65 | |         Self {\n66 | |             ready_queue: VecDeque::new(),\n67 | |         }\n68 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\nhelp: try adding this\n   |\n62 + impl<T, const S: usize> Default for RRScheduler<T, S> {\n63 +     fn default() -> Self {\n64 +         Self::new()\n65 +     }\n66 + }\n   |\n\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Outdated",
    "Geiger",
    "Unformatted"
  ]
}