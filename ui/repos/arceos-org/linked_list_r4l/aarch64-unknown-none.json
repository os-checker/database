{"repo":{"user":"arceos-org","repo":"linked_list_r4l"},"data":[{"user":"arceos-org","repo":"linked_list_r4l","pkg":"linked_list_r4l","count":4,"raw_reports":[{"file":"src/raw_list.rs","count":3,"kinds":{"Clippy(Warn)":["warning: you should consider adding a `Default` implementation for `RawList<G>`\n   --> src/raw_list.rs:99:5\n    |\n99  | /     pub const fn new() -> Self {\n100 | |         Self { head: None }\n101 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n97  + impl<G: GetLinks> Default for RawList<G> {\n98  +     fn default() -> Self {\n99  +         Self::new()\n100 +     }\n101 + }\n    |\n\n","warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:186:5\n    |\n186 |     pub unsafe fn push_back(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n","warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:195:5\n    |\n195 |     pub unsafe fn push_front(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"]}},{"file":"[rap] Not supported to display yet.","count":1,"kinds":{"Rapx":["pkg=linked_list_r4l, checker=Rapx\ntoolchain=nightly-2025-01-07-x86_64-unknown-linux-gnu, target=aarch64-unknown-none\npkg_dir=/home/runner/check/batch_7/arceos-org/linked_list_r4l\ncmd=cargo +nightly-2024-10-12 rapx -F -M -- --target aarch64-unknown-none\ntimestamp=2025-01-09 17:09:50.612420216 +08:00:00\n\nwarning: Memory Leak detected.\n  --> src/linked_list.rs:36:22\n   |\n35 | fn into_pointer(self) -> NonNull<T> {\n36 |         NonNull::new(Box::into_raw(self)).unwrap()\n   |                      ------------------- Memory Leak Candidates.\n37 |     }\n   |\n"]}}]}],"kinds_order":["Cargo","Clippy(Error)","Clippy(Warn)","Semver Violation","Audit","Mirai","Rapx","Rudra","Lockbud(Probably)","Lockbud(Possibly)","Outdated","Geiger","Unformatted"]}