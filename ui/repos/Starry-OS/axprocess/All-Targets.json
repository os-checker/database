{
  "repo": {
    "user": "Starry-OS",
    "repo": "axprocess"
  },
  "data": [
    {
      "user": "Starry-OS",
      "repo": "axprocess",
      "pkg": "axprocess",
      "count": 39,
      "raw_reports": [
        {
          "file": "src/process.rs",
          "features": "",
          "count": 10,
          "kinds": {
            "Clippy(Warn)": [
              "warning: this function has too many arguments (8/7)\n   --> src/process.rs:194:5\n    |\n194 | /     pub fn new(\n195 | |         pid: u64,\n196 | |         stack_size: u64,\n197 | |         parent: u64,\n...   |\n202 | |         fd_table: FdTable,\n203 | |     ) -> Self {\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\n    = note: `#[warn(clippy::too_many_arguments)]` on by default\n\n",
              "warning: useless conversion to the same type: `api::alloc::string::String`\n   --> src/process.rs:280:33\n    |\n280 |             Arc::new(Mutex::new(String::from(\"/\").into())),\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `String::from(\"/\")`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n",
              "warning: called `Iterator::last` on a `DoubleEndedIterator`; this will needlessly iterate the entire iterator\n   --> src/process.rs:388:47\n    |\n388 |         current_task.set_name(name.split('/').last().unwrap());\n    |                                               ^^^^^^ help: try: `next_back()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#double_ended_iterator_last\n    = note: `#[warn(clippy::double_ended_iterator_last)]` on by default\n\n",
              "warning: called `unwrap` on `exit_signal` after checking its variant with `is_some`\n   --> src/process.rs:650:47\n    |\n649 |             if exit_signal.is_some() {\n    |             ------------------------ help: try: `if let Some(<item>) = exit_signal`\n650 |                 signal_module.set_exit_signal(exit_signal.unwrap());\n    |                                               ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap\n\n",
              "warning: called `unwrap` on `exit_signal` after checking its variant with `is_some`\n   --> src/process.rs:693:47\n    |\n692 |             if exit_signal.is_some() {\n    |             ------------------------ help: try: `if let Some(<item>) = exit_signal`\n693 |                 signal_module.set_exit_signal(exit_signal.unwrap());\n    |                                               ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap\n\n",
              "warning: called `Iterator::last` on a `DoubleEndedIterator`; this will needlessly iterate the entire iterator\n   --> src/process.rs:529:65\n    |\n529 |             String::from(self.tasks.lock()[0].name().split('/').last().unwrap()),\n    |                                                                 ^^^^^^ help: try: `next_back()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#double_ended_iterator_last\n\n",
              "warning: useless conversion to the same type: `api::alloc::string::String`\n   --> src/process.rs:661:51\n    |\n661 |             let mut cwd_src = Arc::new(Mutex::new(String::from(\"/\").into()));\n    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `String::from(\"/\")`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n",
              "warning: useless conversion to the same type: `api::alloc::string::String`\n   --> src/process.rs:807:39\n    |\n807 |         *self.fd_manager.cwd.lock() = cwd.into();\n    |                                       ^^^^^^^^^^ help: consider removing `.into()`: `cwd`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n"
            ],
            "Unformatted": [
              "file: /home/runner/check/batch_5/Starry-OS/axprocess/src/process.rs (original lines from 3 to 3)\n+use alloc::format;\n",
              "file: /home/runner/check/batch_5/Starry-OS/axprocess/src/process.rs (original lines from 5 to 5)\n-use alloc::format;\n"
            ]
          }
        },
        {
          "file": "src/signal.rs",
          "features": "",
          "count": 8,
          "kinds": {
            "Clippy(Warn)": [
              "warning: manual implementation of `Option::map`\n  --> src/signal.rs:61:9\n   |\n61 | /         match self.signal_set.find_signal() {\n62 | |             Some(sig_num) => Some(\n63 | |                 self.signal_handler\n64 | |                     .lock()\n...  |\n69 | |             None => None,\n70 | |         }\n   | |_________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_map\n   = note: `#[warn(clippy::manual_map)]` on by default\nhelp: try\n   |\n61 ~         self.signal_set.find_signal().map(|sig_num| self.signal_handler\n62 +                     .lock()\n63 +                     .get_action(sig_num)\n64 +                     .need_restart())\n   |\n\n"
            ],
            "Mirai": [
              "warning: [MIRAI] possible attempt to subtract with overflow\n   --> src/signal.rs:252:9\n    |\n252 |         (signal_module.alternate_stack.sp + signal_module.alternate_stack.size - 1) & !0xf\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] possible attempt to add with overflow\n   --> src/signal.rs:252:10\n    |\n252 |         (signal_module.alternate_stack.sp + signal_module.alternate_stack.size - 1) & !0xf\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] possible attempt to subtract with overflow\n   --> src/signal.rs:254:9\n    |\n254 |         trap_frame.get_sp() - USER_SIGNAL_PROTECT\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] possible attempt to subtract with overflow\n   --> src/signal.rs:280:23\n    |\n280 |           let sp_base = (((sp - core::mem::size_of::<SigInfo>()) & !0xf)\n    |  _______________________^\n281 | |             - core::mem::size_of::<SignalUserContext>())\n    | |________________________________________________________^\n\n",
              "warning: [MIRAI] possible attempt to subtract with overflow\n   --> src/signal.rs:280:25\n    |\n280 |         let sp_base = (((sp - core::mem::size_of::<SigInfo>()) & !0xf)\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] possible attempt to subtract with overflow\n   --> src/signal.rs:318:9\n    |\n318 |         sp -= core::mem::size_of::<usize>();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] possible misaligned pointer dereference\n   --> src/signal.rs:319:9\n    |\n319 |         *(sp as *mut usize) = restorer;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "src/futex.rs",
          "features": "",
          "count": 7,
          "kinds": {
            "Clippy(Warn)": [
              "warning: unneeded `return` statement\n  --> src/futex.rs:59:9\n   |\n59 |         return FutexKey::new(pid, aligned, offset);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n59 -         return FutexKey::new(pid, aligned, offset);\n59 +         FutexKey::new(pid, aligned, offset)\n   |\n\n",
              "warning: unneeded `return` statement\n  --> src/futex.rs:64:9\n   |\n64 |         return FutexKey::new(pid, aligned, offset);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n64 -         return FutexKey::new(pid, aligned, offset);\n64 +         FutexKey::new(pid, aligned, offset)\n   |\n\n",
              "warning: unneeded `return` statement\n   --> src/futex.rs:198:13\n    |\n198 |             return true;\n    |             ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n    |\n198 -             return true;\n198 +             true\n    |\n\n"
            ],
            "Mirai": [
              "warning: [MIRAI] possible index out of bounds\n   --> src/futex.rs:149:27\n    |\n149 |     let mut hash_bucket = FUTEXQUEUES.buckets[futex_hash(&key)].lock();\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] possible index out of bounds\n   --> src/futex.rs:185:27\n    |\n185 |     let mut hash_bucket = FUTEXQUEUES.buckets[futex_hash(&key)].lock();\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] possible index out of bounds\n   --> src/futex.rs:222:27\n    |\n222 |     let mut hash_bucket = FUTEXQUEUES.buckets[futex_hash(&key)].lock();\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] possible index out of bounds\n   --> src/futex.rs:239:30\n    |\n239 |         let mut req_bucket = FUTEXQUEUES.buckets[futex_hash(&req_key)].lock();\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "src/stdio.rs",
          "features": "",
          "count": 6,
          "kinds": {
            "Mirai": [
              "warning: [MIRAI] Cannot write to stdin!\n   --> src/stdio.rs:109:9\n    |\n109 |         panic!(\"Cannot write to stdin!\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] Flushing stdin\n   --> src/stdio.rs:112:9\n    |\n112 |         panic!(\"Flushing stdin\")\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] Cannot read from stdin!\n   --> src/stdio.rs:216:9\n    |\n216 |         panic!(\"Cannot read from stdin!\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] Cannot read from stdout!\n   --> src/stdio.rs:335:9\n    |\n335 |         panic!(\"Cannot read from stdout!\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ],
            "Unformatted": [
              "file: /home/runner/check/batch_5/Starry-OS/axprocess/src/stdio.rs (original lines from 59 to 60)\n-    } \n-    else {\n+    } else {\n",
              "file: /home/runner/check/batch_5/Starry-OS/axprocess/src/stdio.rs (original lines from 80 to 80)\n-                        // echo \n+                        // echo\n"
            ]
          }
        },
        {
          "file": "src/api.rs",
          "features": "",
          "count": 4,
          "kinds": {
            "Clippy(Warn)": [
              "warning: useless conversion to the same type: `api::alloc::string::String`\n  --> src/api.rs:44:29\n   |\n44 |         Arc::new(Mutex::new(String::from(\"/\").into())),\n   |                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `String::from(\"/\")`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n   = note: `#[warn(clippy::useless_conversion)]` on by default\n\n",
              "warning: called `unwrap` on `exit_signal` after checking its variant with `is_some`\n  --> src/api.rs:87:17\n   |\n86 |             let signal = if exit_signal.is_some() {\n   |                          ------------------------ help: try: `if let Some(<item>) = exit_signal`\n87 |                 exit_signal.unwrap()\n   |                 ^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap\n   = note: `#[warn(clippy::unnecessary_unwrap)]` on by default\n\n"
            ],
            "Mirai": [
              "warning: [MIRAI] possible attempt to divide by zero\n   --> src/api.rs:285:9\n    |\n285 |         utime_ns / NANOS_PER_SEC as usize,\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
              "warning: [MIRAI] possible attempt to divide by zero\n   --> src/api.rs:286:9\n    |\n286 |         utime_ns / NANOS_PER_MICROS as usize,\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=axprocess, checker=SemverChecks\n// toolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_5/Starry-OS/axprocess\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \n// timestamp=2025-02-16 20:14:57.747294259 +08:00:00\n    Building axprocess v0.1.0 (current)\n       Built [  12.936s] (current)\n     Parsing axprocess v0.1.0 (current)\nerror: unsupported rustdoc format v39 for file: /home/runner/check/batch_5/Starry-OS/axprocess/target/semver-checks/local-axprocess-0_1_0-8bf31115cf79a1a7/target/x86_64-unknown-linux-gnu/doc/axprocess.json\n"
            ]
          }
        },
        {
          "file": "[outdated direct dependencies]",
          "features": "",
          "count": 1,
          "kinds": {
            "Outdated": [
              "pkg=axprocess, checker=Outdated\ntoolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_5/Starry-OS/axprocess\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-02-16 20:16:26.115760523 +08:00:00\n\nName   Project  Compat  Latest  Kind    Platform\n----   -------  ------  ------  ----    --------\nriscv  0.10.1   ---     0.12.1  Normal  ---\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=axprocess, checker=SemverChecks\ntoolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_5/Starry-OS/axprocess\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \ntimestamp=2025-02-16 20:15:13.046436636 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building axprocess v0.1.0 (current)\n       Built [  12.936s] (current)\n     Parsing axprocess v0.1.0 (current)\nerror: unsupported rustdoc format v39 for file: /home/runner/check/batch_5/Starry-OS/axprocess/target/semver-checks/local-axprocess-0_1_0-8bf31115cf79a1a7/target/x86_64-unknown-linux-gnu/doc/axprocess.json\n"
            ]
          }
        },
        {
          "file": "src/link.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Mirai": [
              "warning: [MIRAI] possible attempt to add with overflow\n  --> src/link.rs:81:20\n   |\n81 |         Ok(&self.0[pos + 1..])\n   |                    ^^^^^^^\n\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Outdated",
    "Geiger",
    "Unformatted"
  ]
}