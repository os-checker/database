{
  "repo": {
    "user": "Starry-OS",
    "repo": "spinlock"
  },
  "data": [
    {
      "user": "Starry-OS",
      "repo": "spinlock",
      "pkg": "spinlock",
      "count": 12,
      "raw_reports": [
        {
          "file": "src/base.rs",
          "features": "",
          "count": 9,
          "kinds": {
            "Clippy(Warn)": [
              "warning: `?Sized` bound is ignored because of a `Sized` requirement\n   --> src/base.rs:177:23\n    |\n177 | impl<G: BaseGuard, T: ?Sized + Default> Default for BaseSpinLock<G, T> {\n    |                       ^^^^^^\n    |\nnote: `T` cannot be unsized because of the bound\n   --> src/base.rs:177:32\n    |\n177 | impl<G: BaseGuard, T: ?Sized + Default> Default for BaseSpinLock<G, T> {\n    |                                ^^^^^^^\n    = note: ...because `Default` has the bound `Sized`\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_maybe_sized\n    = note: `#[warn(clippy::needless_maybe_sized)]` on by default\nhelp: change the bounds that require `Sized`, or remove the `?Sized` bound\n    |\n177 - impl<G: BaseGuard, T: ?Sized + Default> Default for BaseSpinLock<G, T> {\n177 + impl<G: BaseGuard, T: Default> Default for BaseSpinLock<G, T> {\n    |\n\n",
              "warning: the following explicit lifetimes could be elided: 'a\n   --> src/base.rs:195:6\n    |\n195 | impl<'a, G: BaseGuard, T: ?Sized> Deref for BaseSpinLockGuard<'a, G, T> {\n    |      ^^                                                       ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n    = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n    |\n195 - impl<'a, G: BaseGuard, T: ?Sized> Deref for BaseSpinLockGuard<'a, G, T> {\n195 + impl<G: BaseGuard, T: ?Sized> Deref for BaseSpinLockGuard<'_, G, T> {\n    |\n\n",
              "warning: the following explicit lifetimes could be elided: 'a\n   --> src/base.rs:195:6\n    |\n195 | impl<'a, G: BaseGuard, T: ?Sized> Deref for BaseSpinLockGuard<'a, G, T> {\n    |      ^^                                                       ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n    = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n    |\n195 - impl<'a, G: BaseGuard, T: ?Sized> Deref for BaseSpinLockGuard<'a, G, T> {\n195 + impl<G: BaseGuard, T: ?Sized> Deref for BaseSpinLockGuard<'_, G, T> {\n    |\n\n",
              "warning: the following explicit lifetimes could be elided: 'a\n   --> src/base.rs:204:6\n    |\n204 | impl<'a, G: BaseGuard, T: ?Sized> DerefMut for BaseSpinLockGuard<'a, G, T> {\n    |      ^^                                                          ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n204 - impl<'a, G: BaseGuard, T: ?Sized> DerefMut for BaseSpinLockGuard<'a, G, T> {\n204 + impl<G: BaseGuard, T: ?Sized> DerefMut for BaseSpinLockGuard<'_, G, T> {\n    |\n\n",
              "warning: the following explicit lifetimes could be elided: 'a\n   --> src/base.rs:204:6\n    |\n204 | impl<'a, G: BaseGuard, T: ?Sized> DerefMut for BaseSpinLockGuard<'a, G, T> {\n    |      ^^                                                          ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n204 - impl<'a, G: BaseGuard, T: ?Sized> DerefMut for BaseSpinLockGuard<'a, G, T> {\n204 + impl<G: BaseGuard, T: ?Sized> DerefMut for BaseSpinLockGuard<'_, G, T> {\n    |\n\n",
              "warning: the following explicit lifetimes could be elided: 'a\n   --> src/base.rs:212:6\n    |\n212 | impl<'a, G: BaseGuard, T: ?Sized + fmt::Debug> fmt::Debug for BaseSpinLockGuard<'a, G, T> {\n    |      ^^                                                                         ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n212 - impl<'a, G: BaseGuard, T: ?Sized + fmt::Debug> fmt::Debug for BaseSpinLockGuard<'a, G, T> {\n212 + impl<G: BaseGuard, T: ?Sized + fmt::Debug> fmt::Debug for BaseSpinLockGuard<'_, G, T> {\n    |\n\n",
              "warning: the following explicit lifetimes could be elided: 'a\n   --> src/base.rs:212:6\n    |\n212 | impl<'a, G: BaseGuard, T: ?Sized + fmt::Debug> fmt::Debug for BaseSpinLockGuard<'a, G, T> {\n    |      ^^                                                                         ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n212 - impl<'a, G: BaseGuard, T: ?Sized + fmt::Debug> fmt::Debug for BaseSpinLockGuard<'a, G, T> {\n212 + impl<G: BaseGuard, T: ?Sized + fmt::Debug> fmt::Debug for BaseSpinLockGuard<'_, G, T> {\n    |\n\n",
              "warning: the following explicit lifetimes could be elided: 'a\n   --> src/base.rs:218:6\n    |\n218 | impl<'a, G: BaseGuard, T: ?Sized> Drop for BaseSpinLockGuard<'a, G, T> {\n    |      ^^                                                      ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n218 - impl<'a, G: BaseGuard, T: ?Sized> Drop for BaseSpinLockGuard<'a, G, T> {\n218 + impl<G: BaseGuard, T: ?Sized> Drop for BaseSpinLockGuard<'_, G, T> {\n    |\n\n",
              "warning: the following explicit lifetimes could be elided: 'a\n   --> src/base.rs:218:6\n    |\n218 | impl<'a, G: BaseGuard, T: ?Sized> Drop for BaseSpinLockGuard<'a, G, T> {\n    |      ^^                                                      ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n218 - impl<'a, G: BaseGuard, T: ?Sized> Drop for BaseSpinLockGuard<'a, G, T> {\n218 + impl<G: BaseGuard, T: ?Sized> Drop for BaseSpinLockGuard<'_, G, T> {\n    |\n\n"
            ]
          }
        },
        {
          "file": "(virtual) semver-checks",
          "features": "",
          "count": 1,
          "kinds": {
            "Cargo": [
              "// pkg_name=spinlock, checker=SemverChecks\n// toolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_7/Starry-OS/spinlock\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \n// timestamp=2025-03-07 17:20:20.12917419 +08:00:00\n    Building spinlock v0.1.0 (current)\n       Built [   3.875s] (current)\n     Parsing spinlock v0.1.0 (current)\n      Parsed [   0.001s] (current)\n    Building spinlock v0.1.0 (baseline)\nerror: running cargo-doc on crate 'spinlock' failed with output:\n-----\n Documenting spinlock v0.1.0\nerror[E0259]: the name `core` is defined multiple times\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/spinlock-0.1.0/src/lib.rs:81:1\n   |\n81 | extern crate core;\n   | ^^^^^^^^^^^^^^^^^^ `core` reimported here\n   |\n   = note: `core` must be defined only once in the type namespace of this module\nhelp: you can use `as` to change the binding name of the import\n   |\n81 | extern crate core as other_core;\n   |\n\nerror[E0432]: unresolved import `core::atomic`\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/spinlock-0.1.0/src/lib.rs:83:11\n   |\n83 | use core::atomic::{AtomicBool, Ordering, ATOMIC_BOOL_INIT};\n   |           ^^^^^^ could not find `atomic` in `core`\n\nerror: cannot find attribute `unsafe_destructor` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/spinlock-0.1.0/src/lib.rs:187:3\n    |\n187 | #[unsafe_destructor]\n    |   ^^^^^^^^^^^^^^^^^\n\nerror[E0433]: failed to resolve: could not resolve path `ATOMIC_BOOL_INIT`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/spinlock-0.1.0/src/lib.rs:124:11\n    |\n124 |     lock: ATOMIC_BOOL_INIT,\n    |           ^^^^^^^^^^^^^^^^ could not resolve path `ATOMIC_BOOL_INIT`\n    |\n    = note: this error was originally ignored because you are running `rustdoc`\n    = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n\nSome errors have detailed explanations: E0259, E0432, E0433.\nFor more information about an error, try `rustc --explain E0259`.\nerror: could not document `spinlock`\n\n-----\n\nerror: failed to build rustdoc for crate spinlock v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add spinlock@=0.1.0 &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate spinlock v0.1.0\n"
            ]
          }
        },
        {
          "file": "[semver checks]",
          "features": "",
          "count": 1,
          "kinds": {
            "Semver Violation": [
              "pkg=spinlock, checker=SemverChecks\ntoolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_7/Starry-OS/spinlock\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \ntimestamp=2025-03-07 17:20:25.713525654 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building spinlock v0.1.0 (current)\n       Built [   3.875s] (current)\n     Parsing spinlock v0.1.0 (current)\n      Parsed [   0.001s] (current)\n    Building spinlock v0.1.0 (baseline)\nerror: running cargo-doc on crate 'spinlock' failed with output:\n-----\n Documenting spinlock v0.1.0\nerror[E0259]: the name `core` is defined multiple times\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/spinlock-0.1.0/src/lib.rs:81:1\n   |\n81 | extern crate core;\n   | ^^^^^^^^^^^^^^^^^^ `core` reimported here\n   |\n   = note: `core` must be defined only once in the type namespace of this module\nhelp: you can use `as` to change the binding name of the import\n   |\n81 | extern crate core as other_core;\n   |\n\nerror[E0432]: unresolved import `core::atomic`\n  --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/spinlock-0.1.0/src/lib.rs:83:11\n   |\n83 | use core::atomic::{AtomicBool, Ordering, ATOMIC_BOOL_INIT};\n   |           ^^^^^^ could not find `atomic` in `core`\n\nerror: cannot find attribute `unsafe_destructor` in this scope\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/spinlock-0.1.0/src/lib.rs:187:3\n    |\n187 | #[unsafe_destructor]\n    |   ^^^^^^^^^^^^^^^^^\n\nerror[E0433]: failed to resolve: could not resolve path `ATOMIC_BOOL_INIT`\n   --> /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/spinlock-0.1.0/src/lib.rs:124:11\n    |\n124 |     lock: ATOMIC_BOOL_INIT,\n    |           ^^^^^^^^^^^^^^^^ could not resolve path `ATOMIC_BOOL_INIT`\n    |\n    = note: this error was originally ignored because you are running `rustdoc`\n    = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n\nSome errors have detailed explanations: E0259, E0432, E0433.\nFor more information about an error, try `rustc --explain E0259`.\nerror: could not document `spinlock`\n\n-----\n\nerror: failed to build rustdoc for crate spinlock v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add spinlock@=0.1.0 &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate spinlock v0.1.0\n"
            ]
          }
        },
        {
          "file": "src/lib.rs",
          "features": "",
          "count": 1,
          "kinds": {
            "Unformatted": [
              "file: /home/runner/check/batch_7/Starry-OS/spinlock/src/lib.rs (original lines from 15 to 15)\n-use kernel_guard::{NoOp, NoPreempt, NoPreemptIrqSave, IrqSave};\n+use kernel_guard::{IrqSave, NoOp, NoPreempt, NoPreemptIrqSave};\n"
            ]
          }
        }
      ]
    }
  ],
  "kinds_order": [
    "Cargo",
    "Clippy(Error)",
    "Clippy(Warn)",
    "Semver Violation",
    "Audit",
    "Mirai",
    "Rapx",
    "Rudra",
    "Lockbud(Probably)",
    "Lockbud(Possibly)",
    "Outdated",
    "Geiger",
    "Unformatted"
  ]
}