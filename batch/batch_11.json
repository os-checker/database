{
  "env": {
    "tools": {
      "rust_toolchains": {
        "host": {
          "version": "1.83.0-nightly (26b5599e4 2024-09-06)",
          "commit_hash": "26b5599e4d6ed2b45152c60493c1788c0a27533d",
          "commit_date": "2024-09-06",
          "host": "x86_64-unknown-linux-gnu",
          "release": "1.83.0-nightly",
          "llvm_version": "19.1.0"
        },
        "installed": [
          {
            "channel": "nightly-x86_64-unknown-linux-gnu (default)",
            "profile": null,
            "targets": [
              "aarch64-unknown-none",
              "aarch64-unknown-none-softfloat",
              "loongarch64-unknown-none",
              "riscv64gc-unknown-none-elf",
              "riscv64imac-unknown-none-elf",
              "x86_64-unknown-linux-gnu",
              "x86_64-unknown-none"
            ],
            "components": [
              "aarch64-unknown-none",
              "aarch64-unknown-none-softfloat",
              "loongarch64-unknown-none",
              "riscv64gc-unknown-none-elf",
              "riscv64imac-unknown-none-elf",
              "x86_64-unknown-linux-gnu",
              "x86_64-unknown-none"
            ],
            "toml_path": ""
          }
        ]
      },
      "os_checker": {
        "start": 1725698562256,
        "finish": 1725698623123,
        "duration_ms": 60867,
        "git_time": "2024-09-07 16:29:52 +0800",
        "git_sha": "bd7ce0163b40153bc5c38540cdde914afd52fc3c"
      }
    },
    "kinds": {
      "order": [
        "Cargo",
        "Clippy(Error)",
        "Clippy(Warn)",
        "Lockbud(Probably)",
        "Lockbud(Possibly)",
        "Unformatted"
      ],
      "mapping": {
        "cargo": [
          "Cargo"
        ],
        "clippy": [
          "Clippy(Error)",
          "Clippy(Warn)"
        ],
        "lockbud": [
          "Lockbud(Probably)",
          "Lockbud(Possibly)"
        ],
        "fmt": [
          "Unformatted"
        ]
      }
    },
    "repos": [
      {
        "user": "kern-crates",
        "repo": "tuple_for_each",
        "rust_toolchain_idxs": []
      },
      {
        "user": "kern-crates",
        "repo": "uart16550",
        "rust_toolchain_idxs": []
      },
      {
        "user": "kern-crates",
        "repo": "virt2slint",
        "rust_toolchain_idxs": []
      },
      {
        "user": "kern-crates",
        "repo": "virtio-input-decoder",
        "rust_toolchain_idxs": []
      },
      {
        "user": "kern-crates",
        "repo": "visionfive2-sd",
        "rust_toolchain_idxs": []
      },
      {
        "user": "shilei-massclouds",
        "repo": "arch_boot",
        "rust_toolchain_idxs": []
      },
      {
        "user": "shilei-massclouds",
        "repo": "early_console",
        "rust_toolchain_idxs": []
      },
      {
        "user": "yuoo655",
        "repo": "ext4_rs",
        "rust_toolchain_idxs": []
      }
    ],
    "packages": [
      {
        "name": "tuple_for_each",
        "repo": {
          "repo_idx": 0,
          "user": "kern-crates",
          "repo": "tuple_for_each"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "uart16550",
        "repo": {
          "repo_idx": 1,
          "user": "kern-crates",
          "repo": "uart16550"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "virt2slint",
        "repo": {
          "repo_idx": 2,
          "user": "kern-crates",
          "repo": "virt2slint"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "virtio-input-decoder",
        "repo": {
          "repo_idx": 3,
          "user": "kern-crates",
          "repo": "virtio-input-decoder"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "testos",
        "repo": {
          "repo_idx": 4,
          "user": "kern-crates",
          "repo": "visionfive2-sd"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "visionfive2-sd",
        "repo": {
          "repo_idx": 4,
          "user": "kern-crates",
          "repo": "visionfive2-sd"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "arch_boot",
        "repo": {
          "repo_idx": 5,
          "user": "shilei-massclouds",
          "repo": "arch_boot"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "early_console",
        "repo": {
          "repo_idx": 6,
          "user": "shilei-massclouds",
          "repo": "early_console"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "rt_early_console",
        "repo": {
          "repo_idx": 6,
          "user": "shilei-massclouds",
          "repo": "early_console"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "ext4_rs",
        "repo": {
          "repo_idx": 7,
          "user": "yuoo655",
          "repo": "ext4_rs"
        },
        "rust_toolchain_idx": null
      }
    ]
  },
  "cmd": [
    {
      "package_idx": 0,
      "tool": "fmt",
      "cmd": "cargo fmt -p tuple_for_each -- --emit=json",
      "count": 0,
      "duration_ms": 228,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 1660,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 10391,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "fmt",
      "cmd": "cargo fmt -p uart16550 -- --emit=json",
      "count": 0,
      "duration_ms": 426,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "fmt",
      "cmd": "cargo fmt -p uart16550 -- --emit=json",
      "count": 0,
      "duration_ms": 730,
      "arch": "riscv64imac",
      "target_triple": "riscv64imac-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 1302,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64imac-unknown-none-elf --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 1081,
      "arch": "riscv64imac",
      "target_triple": "riscv64imac-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 360,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64imac-unknown-none-elf",
      "count": 0,
      "duration_ms": 259,
      "arch": "riscv64imac",
      "target_triple": "riscv64imac-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "fmt",
      "cmd": "cargo fmt -p virt2slint -- --emit=json",
      "count": 2,
      "duration_ms": 232,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 20986,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 1,
      "duration_ms": 38149,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "fmt",
      "cmd": "cargo fmt -p virtio-input-decoder -- --emit=json",
      "count": 0,
      "duration_ms": 343,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 4,
      "duration_ms": 745,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 331,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "fmt",
      "cmd": "cargo fmt -p testos -- --emit=json",
      "count": 6,
      "duration_ms": 414,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "fmt",
      "cmd": "cargo fmt -p testos -- --emit=json",
      "count": 6,
      "duration_ms": 161,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 7,
      "duration_ms": 9899,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 7,
      "duration_ms": 2200,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 10858,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 0,
      "duration_ms": 3377,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 9899,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 2200,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 10858,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "fmt",
      "cmd": "cargo fmt -p visionfive2-sd -- --emit=json",
      "count": 0,
      "duration_ms": 331,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "fmt",
      "cmd": "cargo fmt -p visionfive2-sd -- --emit=json",
      "count": 0,
      "duration_ms": 323,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 19,
      "duration_ms": 10434,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 19,
      "duration_ms": 1538,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 9511,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 0,
      "duration_ms": 747,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "fmt",
      "cmd": "cargo fmt -p arch_boot -- --emit=json",
      "count": 6,
      "duration_ms": 209,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 338,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 355,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 338,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 355,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "fmt",
      "cmd": "cargo fmt -p early_console -- --emit=json",
      "count": 0,
      "duration_ms": 219,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "fmt",
      "cmd": "cargo fmt -p early_console -- --emit=json",
      "count": 0,
      "duration_ms": 210,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 301,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 300,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 951,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 0,
      "duration_ms": 2132,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 301,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 300,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 951,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 2132,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "fmt",
      "cmd": "cargo fmt -p rt_early_console -- --emit=json",
      "count": 0,
      "duration_ms": 129,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "fmt",
      "cmd": "cargo fmt -p rt_early_console -- --emit=json",
      "count": 0,
      "duration_ms": 123,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 605,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 627,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 409,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 0,
      "duration_ms": 610,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 605,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 627,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 409,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 610,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "fmt",
      "cmd": "cargo fmt -p ext4_rs -- --emit=json",
      "count": 253,
      "duration_ms": 662,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 118,
      "duration_ms": 4203,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 4399,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 4203,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    }
  ],
  "data": [
    {
      "cmd_idx": 9,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/kern-crates/virt2slint/src/lib.rs (original lines from 87 to 87)\n-        \n+\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/kern-crates/virt2slint/src/lib.rs (original lines from 144 to 144)\n-    \n+\n"
    },
    {
      "cmd_idx": 11,
      "file": "Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-09-07T08:43:18Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"BufferWriter::print\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/termcolor-1.4.1/src/lib.rs:1146:16: 1146:52 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/termcolor-1.4.1/src/lib.rs:1166:9: 1166:52 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-09-07T08:43:18Z WARN  lockbud::callbacks] crate termcolor contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n[2024-09-07T08:43:28Z WARN  lockbud::callbacks] [\n      {\n        \"UseAfterFree\": {\n          \"bug_kind\": \"UseAfterFree\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": \"Raw ptr is used at /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.19.0/src/imp_std.rs:218:18: 218:55 (#0) after dropped at /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.19.0/src/imp_std.rs:238:5: 238:6 (#0)\",\n          \"explanation\": \"Raw ptr is used or escapes the current function after the pointed value is dropped\"\n        }\n      },\n      {\n        \"UseAfterFree\": {\n          \"bug_kind\": \"UseAfterFree\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": \"Raw ptr is used at /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.19.0/src/imp_std.rs:222:13: 222:53 (#0) after dropped at /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.19.0/src/imp_std.rs:238:5: 238:6 (#0)\",\n          \"explanation\": \"Raw ptr is used or escapes the current function after the pointed value is dropped\"\n        }\n      }\n    ]\n[2024-09-07T08:43:28Z WARN  lockbud::callbacks] crate once_cell contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 0 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 2 }"
    },
    {
      "cmd_idx": 13,
      "file": "src/decoder.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this returns a `Result<_, ()>`\n  --> src/decoder.rs:13:5\n   |\n13 |     pub fn decode(etype: usize, code: usize, value: isize) -> Result<DecodeType, ()> {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: use a custom `Error` type instead\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#result_unit_err\n   = note: `#[warn(clippy::result_unit_err)]` on by default\n\n"
    },
    {
      "cmd_idx": 13,
      "file": "src/decoder.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this returns a `Result<_, ()>`\n  --> src/decoder.rs:34:5\n   |\n34 |     pub fn convert_key(key: Key) -> Result<char, ()> {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: use a custom `Error` type instead\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#result_unit_err\n\n"
    },
    {
      "cmd_idx": 13,
      "file": "src/key.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this returns a `Result<_, ()>`\n   --> src/key.rs:203:5\n    |\n203 |     pub fn from_code(code: usize) -> Result<Key, ()> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a custom `Error` type instead\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#result_unit_err\n\n"
    },
    {
      "cmd_idx": 13,
      "file": "src/key.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this returns a `Result<_, ()>`\n   --> src/key.rs:271:5\n    |\n271 |     pub fn to_char(&self) -> Result<char, ()> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a custom `Error` type instead\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#result_unit_err\n\n"
    },
    {
      "cmd_idx": 15,
      "file": "build.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos/build.rs (original lines from 38 to 38)\n+\n"
    },
    {
      "cmd_idx": 15,
      "file": "src/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos/src/boot.rs (original lines from 5 to 5)\n-use crate::config::{CORES, STACK_SIZE, VF2_FREQ};\n"
    },
    {
      "cmd_idx": 15,
      "file": "src/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos/src/boot.rs (original lines from 7 to 7)\n+use crate::config::{CORES, STACK_SIZE, VF2_FREQ};\n"
    },
    {
      "cmd_idx": 15,
      "file": "src/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos/src/boot.rs (original lines from 67 to 67)\n-\n"
    },
    {
      "cmd_idx": 15,
      "file": "src/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos/src/boot.rs (original lines from 74 to 74)\n-\n"
    },
    {
      "cmd_idx": 15,
      "file": "src/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos/src/boot.rs (original lines from 92 to 92)\n+\n"
    },
    {
      "cmd_idx": 16,
      "file": "build.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos/build.rs (original lines from 38 to 38)\n+\n"
    },
    {
      "cmd_idx": 16,
      "file": "src/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos/src/boot.rs (original lines from 5 to 5)\n-use crate::config::{CORES, STACK_SIZE, VF2_FREQ};\n"
    },
    {
      "cmd_idx": 16,
      "file": "src/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos/src/boot.rs (original lines from 7 to 7)\n+use crate::config::{CORES, STACK_SIZE, VF2_FREQ};\n"
    },
    {
      "cmd_idx": 16,
      "file": "src/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos/src/boot.rs (original lines from 67 to 67)\n-\n"
    },
    {
      "cmd_idx": 16,
      "file": "src/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos/src/boot.rs (original lines from 74 to 74)\n-\n"
    },
    {
      "cmd_idx": 16,
      "file": "src/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos/src/boot.rs (original lines from 92 to 92)\n+\n"
    },
    {
      "cmd_idx": 17,
      "file": "src/boot.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: digits grouped inconsistently by underscores\n  --> src/boot.rs:88:49\n   |\n88 |     while read_time() - start < us * VF2_FREQ / 1000_000 {\n   |                                                 ^^^^^^^^ help: consider: `1_000_000`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\n   = note: `#[warn(clippy::inconsistent_digit_grouping)]` on by default\n\n"
    },
    {
      "cmd_idx": 17,
      "file": "src/config.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: digits grouped inconsistently by underscores\n --> src/config.rs:4:29\n  |\n4 | pub const VF2_FREQ: usize = 4000_000;\n  |                             ^^^^^^^^ help: consider: `4_000_000`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\n\n"
    },
    {
      "cmd_idx": 17,
      "file": "unkonwn-but-maybe-important",
      "kind": "Clippy(Error)",
      "raw": "error: unwinding panics are not supported without std\n  |\n  = help: using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding\n  = note: since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem\n\n"
    },
    {
      "cmd_idx": 17,
      "file": "src/sbi.rs",
      "kind": "Clippy(Error)",
      "raw": "error: invalid register `a7`: unknown register\n  --> src/sbi.rs:13:9\n   |\n13 |         in(\"a7\") which,\n   |         ^^^^^^^^^^^^^^\n\n"
    },
    {
      "cmd_idx": 17,
      "file": "src/sbi.rs",
      "kind": "Clippy(Error)",
      "raw": "error: invalid register `a0`: unknown register\n  --> src/sbi.rs:14:9\n   |\n14 |         inlateout(\"a0\") arg0 as i32 => ret,\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n"
    },
    {
      "cmd_idx": 17,
      "file": "src/sbi.rs",
      "kind": "Clippy(Error)",
      "raw": "error: invalid register `a1`: unknown register\n  --> src/sbi.rs:15:9\n   |\n15 |         in(\"a1\") arg1,\n   |         ^^^^^^^^^^^^^\n\n"
    },
    {
      "cmd_idx": 17,
      "file": "src/sbi.rs",
      "kind": "Clippy(Error)",
      "raw": "error: invalid register `a2`: unknown register\n  --> src/sbi.rs:16:9\n   |\n16 |         in(\"a2\") arg2);\n   |         ^^^^^^^^^^^^^\n\n"
    },
    {
      "cmd_idx": 18,
      "file": "src/boot.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: digits grouped inconsistently by underscores\n  --> src/boot.rs:88:49\n   |\n88 |     while read_time() - start < us * VF2_FREQ / 1000_000 {\n   |                                                 ^^^^^^^^ help: consider: `1_000_000`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\n   = note: `#[warn(clippy::inconsistent_digit_grouping)]` on by default\n\n"
    },
    {
      "cmd_idx": 18,
      "file": "src/config.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: digits grouped inconsistently by underscores\n --> src/config.rs:4:29\n  |\n4 | pub const VF2_FREQ: usize = 4000_000;\n  |                             ^^^^^^^^ help: consider: `4_000_000`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\n\n"
    },
    {
      "cmd_idx": 18,
      "file": "src/console.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this operation has no effect\n  --> src/console.rs:21:32\n   |\n21 |             let ier = base.add(1 * W).read_volatile();\n   |                                ^^^^^ help: consider reducing it to: `W`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#identity_op\n   = note: `#[warn(clippy::identity_op)]` on by default\n\n"
    },
    {
      "cmd_idx": 18,
      "file": "src/console.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this operation has no effect\n  --> src/console.rs:22:22\n   |\n22 |             base.add(1 * W).write_volatile(ier | 0x01);\n   |                      ^^^^^ help: consider reducing it to: `W`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#identity_op\n\n"
    },
    {
      "cmd_idx": 18,
      "file": "src/console.rs",
      "kind": "Clippy(Error)",
      "raw": "error: this operation will always return zero. This is likely not the intended outcome\n  --> src/console.rs:34:22\n   |\n34 |             base.add(W * 0).write_volatile(c);\n   |                      ^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#erasing_op\n   = note: `#[deny(clippy::erasing_op)]` on by default\n\n"
    },
    {
      "cmd_idx": 18,
      "file": "src/console.rs",
      "kind": "Clippy(Error)",
      "raw": "error: this operation will always return zero. This is likely not the intended outcome\n  --> src/console.rs:41:36\n   |\n41 |             Some(unsafe { base.add(0 * W).read_volatile() })\n   |                                    ^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#erasing_op\n\n"
    },
    {
      "cmd_idx": 18,
      "file": "src/fatfs.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: the method `write_block` doesn't need a mutable reference\n   --> src/fatfs.rs:111:48\n    |\n111 |                 self.mmc.write_block(block_id, &mut tmp_buf);\n    |                                                ^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed\n    = note: `#[warn(clippy::unnecessary_mut_passed)]` on by default\n\n"
    },
    {
      "cmd_idx": 21,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=testos, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Updating crates.io index\n    Updating git repository `https://github.com/os-module/rust-fatfs.git`\n    Blocking waiting for file lock on package cache\n     Locking 20 packages to latest compatible versions\n      Adding bitflags v1.3.2 (latest: v2.6.0)\n      Adding buddy_system_allocator v0.8.0 (latest: v0.10.0)\n      Adding spin v0.7.1 (latest: v0.9.8)\n    Blocking waiting for file lock on package cache\n    Blocking waiting for file lock on package cache\n    Blocking waiting for file lock on package cache\n   Compiling proc-macro2 v1.0.86\n   Compiling unicode-ident v1.0.12\n   Compiling autocfg v1.3.0\n    Checking scopeguard v1.2.0\n    Checking log v0.4.22\n   Compiling riscv v0.11.1\n   Compiling lock_api v0.4.12\n    Checking spin v0.7.1\n    Checking preprint v0.1.0\n    Checking critical-section v1.1.3\n    Checking embedded-hal v1.0.0\n   Compiling testos v0.1.0 (/home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos)\n    Checking bitflags v1.3.2\n    Checking buddy_system_allocator v0.8.0\n   Compiling quote v1.0.37\n    Checking spin v0.9.8\n    Checking fatfs v0.4.0 (https://github.com/os-module/rust-fatfs.git#55d0dbac)\n   Compiling syn v2.0.77\n   Compiling bitfield-struct v0.8.0\n    Checking visionfive2-sd v0.1.0 (/home/runner/check/batch_11/kern-crates/visionfive2-sd)\nerror: could not compile `testos` (bin \"testos\") due to 6 previous errors; 2 warnings emitted\n"
    },
    {
      "cmd_idx": 22,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=testos, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos\n// cmd=cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json\n   Compiling lock_api v0.4.12\n    Checking scopeguard v1.2.0\n    Checking log v0.4.22\n   Compiling riscv v0.11.1\n    Checking critical-section v1.1.3\n    Checking bitflags v1.3.2\n    Checking spin v0.7.1\n    Checking embedded-hal v1.0.0\n    Checking preprint v0.1.0\n    Checking buddy_system_allocator v0.8.0\n    Checking spin v0.9.8\n    Checking visionfive2-sd v0.1.0 (/home/runner/check/batch_11/kern-crates/visionfive2-sd)\n    Checking fatfs v0.4.0 (https://github.com/os-module/rust-fatfs.git#55d0dbac)\n   Compiling testos v0.1.0 (/home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos)\nerror: could not compile `testos` (bin \"testos\") due to 3 previous errors; 5 warnings emitted\n"
    },
    {
      "cmd_idx": 23,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=testos, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n   Compiling proc-macro2 v1.0.86\n   Compiling autocfg v1.3.0\n   Compiling unicode-ident v1.0.12\n   Compiling scopeguard v1.2.0\n   Compiling riscv v0.11.1\n   Compiling log v0.4.22\n   Compiling spin v0.7.1\n   Compiling critical-section v1.1.3\n   Compiling testos v0.1.0 (/home/runner/check/batch_11/kern-crates/visionfive2-sd/example/testos)\n   Compiling bitflags v1.3.2\n   Compiling preprint v0.1.0\n   Compiling embedded-hal v1.0.0\n   Compiling buddy_system_allocator v0.8.0\n   Compiling lock_api v0.4.12\n   Compiling quote v1.0.37\n   Compiling syn v2.0.77\n   Compiling spin v0.9.8\n   Compiling fatfs v0.4.0 (https://github.com/os-module/rust-fatfs.git#55d0dbac)\n   Compiling bitfield-struct v0.8.0\n   Compiling visionfive2-sd v0.1.0 (/home/runner/check/batch_11/kern-crates/visionfive2-sd)\nerror: unwinding panics are not supported without std\n  |\n  = help: using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding\n  = note: since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem\n\nerror: invalid register `a7`: unknown register\n  --> src/sbi.rs:13:9\n   |\n13 |         in(\"a7\") which,\n   |         ^^^^^^^^^^^^^^\n\nerror: invalid register `a0`: unknown register\n  --> src/sbi.rs:14:9\n   |\n14 |         inlateout(\"a0\") arg0 as i32 => ret,\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: invalid register `a1`: unknown register\n  --> src/sbi.rs:15:9\n   |\n15 |         in(\"a1\") arg1,\n   |         ^^^^^^^^^^^^^\n\nerror: invalid register `a2`: unknown register\n  --> src/sbi.rs:16:9\n   |\n16 |         in(\"a2\") arg2);\n   |         ^^^^^^^^^^^^^\n\nerror: could not compile `testos` (bin \"testos\") due to 5 previous errors\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/cmd.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: variant name ends with the enum's name\n  --> src/cmd.rs:22:5\n   |\n22 |     AppCmd,\n   |     ^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names\n   = note: `#[warn(clippy::enum_variant_names)]` on by default\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/cmd.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: variant name ends with the enum's name\n  --> src/cmd.rs:23:5\n   |\n23 |     GenCmd,\n   |     ^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/cmd.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/cmd.rs:34:1\n   |\n34 | impl Into<u8> for Cmd {\n   | ^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: `#[warn(clippy::from_over_into)]` on by default\nhelp: replace the `Into` implementation with `From<cmd::Cmd>`\n   |\n34 ~ impl From<Cmd> for u8 {\n35 ~     fn from(val: Cmd) -> Self {\n36 ~         match val {\n37 |             Cmd::GoIdleState => 0,\n...\n65 |             _ => {\n66 ~                 panic!(\"Not implemented for cmd {:?}\", val);\n   |\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this operation has no effect\n --> src/register.rs:6:29\n  |\n6 | pub const CTRL_REG: usize = SDIO_BASE + 0x00;\n  |                             ^^^^^^^^^^^^^^^^ help: consider reducing it to: `SDIO_BASE`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#identity_op\n  = note: `#[warn(clippy::identity_op)]` on by default\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/register.rs:29:9\n   |\n29 |         impl Into<u32> for $name {\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n...\n50 | impl_into_u32!(CmdArg);\n   | ---------------------- in this macro invocation\n   |\n   = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n   = help: replace the `Into` implementation with `From<register::CmdArg>`\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: this warning originates in the macro `impl_into_u32` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/register.rs:29:9\n   |\n29 |         impl Into<u32> for $name {\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n...\n56 | impl_into_u32!(ByteCountReg);\n   | ---------------------------- in this macro invocation\n   |\n   = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n   = help: replace the `Into` implementation with `From<register::ByteCountReg>`\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: this warning originates in the macro `impl_into_u32` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/register.rs:29:9\n   |\n29 |         impl Into<u32> for $name {\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n...\n60 | impl_into_u32!(BlkSizeReg);\n   | -------------------------- in this macro invocation\n   |\n   = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n   = help: replace the `Into` implementation with `From<register::BlkSizeReg>`\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: this warning originates in the macro `impl_into_u32` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/register.rs:29:9\n   |\n29 |         impl Into<u32> for $name {\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n...\n65 | impl_into_u32!(PowerReg);\n   | ------------------------ in this macro invocation\n   |\n   = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n   = help: replace the `Into` implementation with `From<register::PowerReg>`\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: this warning originates in the macro `impl_into_u32` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/register.rs:29:9\n   |\n29 |         impl Into<u32> for $name {\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n...\n70 | impl_into_u32!(CDetectReg);\n   | -------------------------- in this macro invocation\n   |\n   = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n   = help: replace the `Into` implementation with `From<register::CDetectReg>`\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: this warning originates in the macro `impl_into_u32` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:506:9\n    |\n498 | /         let cmd = CmdReg::new()\n499 | |             .with_start_cmd(true)\n500 | |             .with_use_hold_reg(true)\n501 | |             .with_response_expect(true)\n...   |\n504 | |             .with_card_number(card_number as u16)\n505 | |             .with_cmd_index(cmd_number as u16);\n    | |_______________________________________________- unnecessary `let` binding\n506 |           cmd\n    |           ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n    = note: `#[warn(clippy::let_and_return)]` on by default\nhelp: return the expression directly\n    |\n498 ~         \n499 ~         CmdReg::new()\n500 +             .with_start_cmd(true)\n501 +             .with_use_hold_reg(true)\n502 +             .with_response_expect(true)\n503 +             .with_wait_prvdata_complete(true)\n504 +             .with_check_response_crc(true)\n505 +             .with_card_number(card_number as u16)\n506 +             .with_cmd_index(cmd_number as u16)\n    |\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:510:9\n    |\n509 |         let cmd = CmdReg::default(card_number, cmd_number);\n    |         --------------------------------------------------- unnecessary `let` binding\n510 |         cmd\n    |         ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n509 ~         \n510 ~         CmdReg::default(card_number, cmd_number)\n    |\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:515:9\n    |\n514 |         let cmd = CmdReg::default(card_number, cmd_number).with_data_expected(true);\n    |         ---------------------------------------------------------------------------- unnecessary `let` binding\n515 |         cmd\n    |         ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n514 ~         \n515 ~         CmdReg::default(card_number, cmd_number).with_data_expected(true)\n    |\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:524:17\n    |\n523 |                 let cmd0 = CmdReg::with_no_data(0, value.into()).with_send_initialization(true);\n    |                 -------------------------------------------------------------------------------- unnecessary `let` binding\n524 |                 cmd0\n    |                 ^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n523 ~                 \n524 ~                 CmdReg::with_no_data(0, value.into()).with_send_initialization(true)\n    |\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:528:17\n    |\n527 |                 let cmd = CmdReg::with_no_data(0, value.into());\n    |                 ------------------------------------------------ unnecessary `let` binding\n528 |                 cmd\n    |                 ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n527 ~                 \n528 ~                 CmdReg::with_no_data(0, value.into())\n    |\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:532:17\n    |\n531 |                 let cmd41 = CmdReg::with_no_data(0, value.into()).with_check_response_crc(false);\n    |                 --------------------------------------------------------------------------------- unnecessary `let` binding\n532 |                 cmd41\n    |                 ^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n531 ~                 \n532 ~                 CmdReg::with_no_data(0, value.into()).with_check_response_crc(false)\n    |\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:536:17\n    |\n535 |                 let cmd9 = CmdReg::with_no_data(0, value.into()).with_check_response_crc(false);\n    |                 -------------------------------------------------------------------------------- unnecessary `let` binding\n536 |                 cmd9\n    |                 ^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n535 ~                 \n536 ~                 CmdReg::with_no_data(0, value.into()).with_check_response_crc(false)\n    |\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:542:17\n    |\n539 | /                 let cmd2 = CmdReg::with_no_data(0, value.into())\n540 | |                     .with_check_response_crc(false)\n541 | |                     .with_response_length(true);\n    | |________________________________________________- unnecessary `let` binding\n542 |                   cmd2\n    |                   ^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n539 ~                 \n540 ~                 CmdReg::with_no_data(0, value.into())\n541 +                     .with_check_response_crc(false)\n542 +                     .with_response_length(true)\n    |\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:546:17\n    |\n545 |                 let cmd = CmdReg::with_data(0, value.into());\n    |                 --------------------------------------------- unnecessary `let` binding\n546 |                 cmd\n    |                 ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n545 ~                 \n546 ~                 CmdReg::with_data(0, value.into())\n    |\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:550:17\n    |\n549 |                 let cmd = CmdReg::with_data(0, value.into()).with_transfer_dir(true);\n    |                 --------------------------------------------------------------------- unnecessary `let` binding\n550 |                 cmd\n    |                 ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n549 ~                 \n550 ~                 CmdReg::with_data(0, value.into()).with_transfer_dir(true)\n    |\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/cmd.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: variant name ends with the enum's name\n  --> src/cmd.rs:22:5\n   |\n22 |     AppCmd,\n   |     ^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names\n   = note: `#[warn(clippy::enum_variant_names)]` on by default\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/cmd.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: variant name ends with the enum's name\n  --> src/cmd.rs:23:5\n   |\n23 |     GenCmd,\n   |     ^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/cmd.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/cmd.rs:34:1\n   |\n34 | impl Into<u8> for Cmd {\n   | ^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: `#[warn(clippy::from_over_into)]` on by default\nhelp: replace the `Into` implementation with `From<cmd::Cmd>`\n   |\n34 ~ impl From<Cmd> for u8 {\n35 ~     fn from(val: Cmd) -> Self {\n36 ~         match val {\n37 |             Cmd::GoIdleState => 0,\n...\n65 |             _ => {\n66 ~                 panic!(\"Not implemented for cmd {:?}\", val);\n   |\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this operation has no effect\n --> src/register.rs:6:29\n  |\n6 | pub const CTRL_REG: usize = SDIO_BASE + 0x00;\n  |                             ^^^^^^^^^^^^^^^^ help: consider reducing it to: `SDIO_BASE`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#identity_op\n  = note: `#[warn(clippy::identity_op)]` on by default\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/register.rs:29:9\n   |\n29 |         impl Into<u32> for $name {\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n...\n50 | impl_into_u32!(CmdArg);\n   | ---------------------- in this macro invocation\n   |\n   = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n   = help: replace the `Into` implementation with `From<register::CmdArg>`\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: this warning originates in the macro `impl_into_u32` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/register.rs:29:9\n   |\n29 |         impl Into<u32> for $name {\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n...\n56 | impl_into_u32!(ByteCountReg);\n   | ---------------------------- in this macro invocation\n   |\n   = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n   = help: replace the `Into` implementation with `From<register::ByteCountReg>`\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: this warning originates in the macro `impl_into_u32` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/register.rs:29:9\n   |\n29 |         impl Into<u32> for $name {\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n...\n60 | impl_into_u32!(BlkSizeReg);\n   | -------------------------- in this macro invocation\n   |\n   = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n   = help: replace the `Into` implementation with `From<register::BlkSizeReg>`\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: this warning originates in the macro `impl_into_u32` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/register.rs:29:9\n   |\n29 |         impl Into<u32> for $name {\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n...\n65 | impl_into_u32!(PowerReg);\n   | ------------------------ in this macro invocation\n   |\n   = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n   = help: replace the `Into` implementation with `From<register::PowerReg>`\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: this warning originates in the macro `impl_into_u32` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n  --> src/register.rs:29:9\n   |\n29 |         impl Into<u32> for $name {\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n...\n70 | impl_into_u32!(CDetectReg);\n   | -------------------------- in this macro invocation\n   |\n   = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n   = help: replace the `Into` implementation with `From<register::CDetectReg>`\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n   = note: this warning originates in the macro `impl_into_u32` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:506:9\n    |\n498 | /         let cmd = CmdReg::new()\n499 | |             .with_start_cmd(true)\n500 | |             .with_use_hold_reg(true)\n501 | |             .with_response_expect(true)\n...   |\n504 | |             .with_card_number(card_number as u16)\n505 | |             .with_cmd_index(cmd_number as u16);\n    | |_______________________________________________- unnecessary `let` binding\n506 |           cmd\n    |           ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n    = note: `#[warn(clippy::let_and_return)]` on by default\nhelp: return the expression directly\n    |\n498 ~         \n499 ~         CmdReg::new()\n500 +             .with_start_cmd(true)\n501 +             .with_use_hold_reg(true)\n502 +             .with_response_expect(true)\n503 +             .with_wait_prvdata_complete(true)\n504 +             .with_check_response_crc(true)\n505 +             .with_card_number(card_number as u16)\n506 +             .with_cmd_index(cmd_number as u16)\n    |\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:510:9\n    |\n509 |         let cmd = CmdReg::default(card_number, cmd_number);\n    |         --------------------------------------------------- unnecessary `let` binding\n510 |         cmd\n    |         ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n509 ~         \n510 ~         CmdReg::default(card_number, cmd_number)\n    |\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:515:9\n    |\n514 |         let cmd = CmdReg::default(card_number, cmd_number).with_data_expected(true);\n    |         ---------------------------------------------------------------------------- unnecessary `let` binding\n515 |         cmd\n    |         ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n514 ~         \n515 ~         CmdReg::default(card_number, cmd_number).with_data_expected(true)\n    |\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:524:17\n    |\n523 |                 let cmd0 = CmdReg::with_no_data(0, value.into()).with_send_initialization(true);\n    |                 -------------------------------------------------------------------------------- unnecessary `let` binding\n524 |                 cmd0\n    |                 ^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n523 ~                 \n524 ~                 CmdReg::with_no_data(0, value.into()).with_send_initialization(true)\n    |\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:528:17\n    |\n527 |                 let cmd = CmdReg::with_no_data(0, value.into());\n    |                 ------------------------------------------------ unnecessary `let` binding\n528 |                 cmd\n    |                 ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n527 ~                 \n528 ~                 CmdReg::with_no_data(0, value.into())\n    |\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:532:17\n    |\n531 |                 let cmd41 = CmdReg::with_no_data(0, value.into()).with_check_response_crc(false);\n    |                 --------------------------------------------------------------------------------- unnecessary `let` binding\n532 |                 cmd41\n    |                 ^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n531 ~                 \n532 ~                 CmdReg::with_no_data(0, value.into()).with_check_response_crc(false)\n    |\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:536:17\n    |\n535 |                 let cmd9 = CmdReg::with_no_data(0, value.into()).with_check_response_crc(false);\n    |                 -------------------------------------------------------------------------------- unnecessary `let` binding\n536 |                 cmd9\n    |                 ^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n535 ~                 \n536 ~                 CmdReg::with_no_data(0, value.into()).with_check_response_crc(false)\n    |\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:542:17\n    |\n539 | /                 let cmd2 = CmdReg::with_no_data(0, value.into())\n540 | |                     .with_check_response_crc(false)\n541 | |                     .with_response_length(true);\n    | |________________________________________________- unnecessary `let` binding\n542 |                   cmd2\n    |                   ^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n539 ~                 \n540 ~                 CmdReg::with_no_data(0, value.into())\n541 +                     .with_check_response_crc(false)\n542 +                     .with_response_length(true)\n    |\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:546:17\n    |\n545 |                 let cmd = CmdReg::with_data(0, value.into());\n    |                 --------------------------------------------- unnecessary `let` binding\n546 |                 cmd\n    |                 ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n545 ~                 \n546 ~                 CmdReg::with_data(0, value.into())\n    |\n\n"
    },
    {
      "cmd_idx": 27,
      "file": "src/register.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/register.rs:550:17\n    |\n549 |                 let cmd = CmdReg::with_data(0, value.into()).with_transfer_dir(true);\n    |                 --------------------------------------------------------------------- unnecessary `let` binding\n550 |                 cmd\n    |                 ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n549 ~                 \n550 ~                 CmdReg::with_data(0, value.into()).with_transfer_dir(true)\n    |\n\n"
    },
    {
      "cmd_idx": 30,
      "file": "src/platform/aarch64_qemu_virt/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/shilei-massclouds/arch_boot/arch_boot/src/platform/aarch64_qemu_virt/boot.rs (original lines from 1 to 1)\n+use super::desc::{DescriptorAttr, MappingFlags, MemAttr};\n"
    },
    {
      "cmd_idx": 30,
      "file": "src/platform/aarch64_qemu_virt/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/shilei-massclouds/arch_boot/arch_boot/src/platform/aarch64_qemu_virt/boot.rs (original lines from 2 to 2)\n-use tock_registers::interfaces::{ReadWriteable, Readable, Writeable};\n"
    },
    {
      "cmd_idx": 30,
      "file": "src/platform/aarch64_qemu_virt/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/shilei-massclouds/arch_boot/arch_boot/src/platform/aarch64_qemu_virt/boot.rs (original lines from 4 to 4)\n-use super::desc::{DescriptorAttr, MappingFlags, MemAttr};\n+use tock_registers::interfaces::{ReadWriteable, Readable, Writeable};\n"
    },
    {
      "cmd_idx": 30,
      "file": "src/platform/riscv64_qemu_virt/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/shilei-massclouds/arch_boot/arch_boot/src/platform/riscv64_qemu_virt/boot.rs (original lines from 1 to 1)\n-use riscv::register::satp;\n"
    },
    {
      "cmd_idx": 30,
      "file": "src/platform/riscv64_qemu_virt/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/shilei-massclouds/arch_boot/arch_boot/src/platform/riscv64_qemu_virt/boot.rs (original lines from 3 to 3)\n+use riscv::register::satp;\n"
    },
    {
      "cmd_idx": 30,
      "file": "src/platform/x86_pc/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/shilei-massclouds/arch_boot/arch_boot/src/platform/x86_pc/boot.rs (original lines from 26 to 26)\n-    | Cr4Flags::OSFXSR.bits() | Cr4Flags::OSXMMEXCPT_ENABLE.bits();\n+    | Cr4Flags::OSFXSR.bits()\n+    | Cr4Flags::OSXMMEXCPT_ENABLE.bits();\n"
    },
    {
      "cmd_idx": 33,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=arch_boot, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_11/shilei-massclouds/arch_boot/arch_boot\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axconfig.git`\nerror: failed to get `axconfig` as a dependency of package `arch_boot v0.1.0 (/home/runner/check/batch_11/shilei-massclouds/arch_boot/arch_boot)`\n\nCaused by:\n  failed to load source for dependency `axconfig`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/axconfig.git\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/axconfig-2e7978f779af9887\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    },
    {
      "cmd_idx": 34,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=arch_boot, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_11/shilei-massclouds/arch_boot/arch_boot\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n    Blocking waiting for file lock on package cache\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axconfig.git`\nerror: failed to get `axconfig` as a dependency of package `arch_boot v0.1.0 (/home/runner/check/batch_11/shilei-massclouds/arch_boot/arch_boot)`\n\nCaused by:\n  failed to load source for dependency `axconfig`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/axconfig.git\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/axconfig-2e7978f779af9887\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    },
    {
      "cmd_idx": 41,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=early_console, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_11/shilei-massclouds/early_console/early_console\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Blocking waiting for file lock on package cache\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axconfig.git`\nerror: failed to get `axconfig` as a dependency of package `early_console v0.1.0 (/home/runner/check/batch_11/shilei-massclouds/early_console/early_console)`\n\nCaused by:\n  failed to load source for dependency `axconfig`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/axconfig.git\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/axconfig-2e7978f779af9887\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    },
    {
      "cmd_idx": 42,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=early_console, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_11/shilei-massclouds/early_console/early_console\n// cmd=cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json\n    Blocking waiting for file lock on package cache\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axconfig.git`\nerror: failed to get `axconfig` as a dependency of package `early_console v0.1.0 (/home/runner/check/batch_11/shilei-massclouds/early_console/early_console)`\n\nCaused by:\n  failed to load source for dependency `axconfig`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/axconfig.git\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/axconfig-2e7978f779af9887\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    },
    {
      "cmd_idx": 43,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=early_console, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_11/shilei-massclouds/early_console/early_console\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n    Blocking waiting for file lock on package cache\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axconfig.git`\nerror: failed to get `axconfig` as a dependency of package `early_console v0.1.0 (/home/runner/check/batch_11/shilei-massclouds/early_console/early_console)`\n\nCaused by:\n  failed to load source for dependency `axconfig`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/axconfig.git\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/axconfig-2e7978f779af9887\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    },
    {
      "cmd_idx": 44,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=early_console, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_11/shilei-massclouds/early_console/early_console\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf\n    Blocking waiting for file lock on package cache\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axconfig.git`\nerror: failed to get `axconfig` as a dependency of package `early_console v0.1.0 (/home/runner/check/batch_11/shilei-massclouds/early_console/early_console)`\n\nCaused by:\n  failed to load source for dependency `axconfig`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/axconfig.git\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/axconfig-2e7978f779af9887\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    },
    {
      "cmd_idx": 51,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_early_console, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_11/shilei-massclouds/early_console/rt_early_console\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Blocking waiting for file lock on package cache\n    Updating git repository `ssh://git@github.com/shilei-massclouds/arch_boot.git`\nerror: failed to get `arch_boot` as a dependency of package `rt_early_console v0.1.0 (/home/runner/check/batch_11/shilei-massclouds/early_console/rt_early_console)`\n\nCaused by:\n  failed to load source for dependency `arch_boot`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/arch_boot.git\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/arch_boot-1cecf4eba2e647a6\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    },
    {
      "cmd_idx": 52,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_early_console, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_11/shilei-massclouds/early_console/rt_early_console\n// cmd=cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json\n    Updating git repository `ssh://git@github.com/shilei-massclouds/arch_boot.git`\nerror: failed to get `arch_boot` as a dependency of package `rt_early_console v0.1.0 (/home/runner/check/batch_11/shilei-massclouds/early_console/rt_early_console)`\n\nCaused by:\n  failed to load source for dependency `arch_boot`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/arch_boot.git\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/arch_boot-1cecf4eba2e647a6\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    },
    {
      "cmd_idx": 53,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_early_console, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_11/shilei-massclouds/early_console/rt_early_console\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n    Updating git repository `ssh://git@github.com/shilei-massclouds/arch_boot.git`\nerror: failed to get `arch_boot` as a dependency of package `rt_early_console v0.1.0 (/home/runner/check/batch_11/shilei-massclouds/early_console/rt_early_console)`\n\nCaused by:\n  failed to load source for dependency `arch_boot`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/arch_boot.git\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/arch_boot-1cecf4eba2e647a6\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    },
    {
      "cmd_idx": 54,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_early_console, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_11/shilei-massclouds/early_console/rt_early_console\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf\n    Updating git repository `ssh://git@github.com/shilei-massclouds/arch_boot.git`\nerror: failed to get `arch_boot` as a dependency of package `rt_early_console v0.1.0 (/home/runner/check/batch_11/shilei-massclouds/early_console/rt_early_console)`\n\nCaused by:\n  failed to load source for dependency `arch_boot`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/arch_boot.git\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/arch_boot-1cecf4eba2e647a6\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/block.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/block.rs (original lines from 25 to 27)\n-        let data_bytes: &[u8; 60] = unsafe {\n-            core::mem::transmute(data)\n-        };\n+        let data_bytes: &[u8; 60] = unsafe { core::mem::transmute(data) };\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/block.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/block.rs (original lines from 29 to 29)\n-            disk_offset: 0, \n+            disk_offset: 0,\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/block.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/block.rs (original lines from 80 to 82)\n-\n-impl Block{\n-    pub fn sync_blk_to_disk(&self, block_device: Arc<dyn BlockDevice>){\n+impl Block {\n+    pub fn sync_blk_to_disk(&self, block_device: Arc<dyn BlockDevice>) {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/block.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/block.rs (original lines from 86 to 86)\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/block_group.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/block_group.rs (original lines from 239 to 239)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/consts.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/consts.rs (original lines from 11 to 14)\n-pub const ROOT_INODE: u32 = 2;                      // 根目录 inode\n-pub const JOURNAL_INODE: u32 = 8;                   // 日志文件 inode\n-pub const UNDEL_DIR_INODE: u32 = 6;                 // 未删除目录 inode\n-pub const LOST_AND_FOUND_INODE: u32 = 11;           // lost+found 目录 inode\n+pub const ROOT_INODE: u32 = 2; // 根目录 inode\n+pub const JOURNAL_INODE: u32 = 8; // 日志文件 inode\n+pub const UNDEL_DIR_INODE: u32 = 6; // 未删除目录 inode\n+pub const LOST_AND_FOUND_INODE: u32 = 11; // lost+found 目录 inode\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/consts.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/consts.rs (original lines from 63 to 63)\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 31 to 31)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 40 to 40)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 60 to 63)\n-pub struct Ext4DirSearchResult{\n-    pub dentry: Ext4DirEntry, \n-    pub pblock_id: usize, // disk block id\n-    pub offset: usize, // offset in block\n+pub struct Ext4DirSearchResult {\n+    pub dentry: Ext4DirEntry,\n+    pub pblock_id: usize,   // disk block id\n+    pub offset: usize,      // offset in block\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 67 to 67)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 79 to 79)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 122 to 122)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 135 to 136)\n-        if self.name_len as usize == name.len(){\n-            return &self.name[..name.len()] == name.as_bytes()\n+        if self.name_len as usize == name.len() {\n+            return &self.name[..name.len()] == name.as_bytes();\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 171 to 171)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 181 to 182)\n-    \n-    pub fn write_entry(&mut self, entry_len: u16, inode: u32, name: &str, de_type:DirEntryType) {\n+    pub fn write_entry(&mut self, entry_len: u16, inode: u32, name: &str, de_type: DirEntryType) {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 189 to 189)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 193 to 193)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 237 to 238)\n-\n-impl Ext4DirEntryTail{\n+impl Ext4DirEntryTail {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 262 to 265)\n-        let offset = BLOCK_SIZE - core::mem::size_of::<Ext4DirEntryTail>();\n-        let de_ptr = self as *const Ext4DirEntryTail as *const u8;\n-        let array_ptr = array as *mut [u8] as *mut u8;\n-        let count = core::mem::size_of::<Ext4DirEntryTail>();\n+            let offset = BLOCK_SIZE - core::mem::size_of::<Ext4DirEntryTail>();\n+            let de_ptr = self as *const Ext4DirEntryTail as *const u8;\n+            let array_ptr = array as *mut [u8] as *mut u8;\n+            let count = core::mem::size_of::<Ext4DirEntryTail>();\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 270 to 270)\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 227 to 227)\n-            let mut header = *Ext4ExtentHeader::load_from_u8_mut(&mut data[..size_of::<Ext4ExtentHeader>()]);\n+            let mut header =\n+                *Ext4ExtentHeader::load_from_u8_mut(&mut data[..size_of::<Ext4ExtentHeader>()]);\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 260 to 260)\n-                    if lblock >= ext.first_block && lblock <= ext.first_block + ext.get_actual_len() as u32 {\n+                    if lblock >= ext.first_block\n+                        && lblock <= ext.first_block + ext.get_actual_len() as u32\n+                    {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 274 to 274)\n-                    if (lblock < ext.first_block){\n+                    if (lblock < ext.first_block) {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 276 to 276)\n-                    }else{\n+                    } else {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 548 to 548)\n-        assert!(result.is_err(), \"Expected error for invalid root node data length\");\n+        assert!(\n+            result.is_err(),\n+            \"Expected error for invalid root node data length\"\n+        );\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 553 to 553)\n-        assert!(result.is_err(), \"Expected error for invalid internal node data length\");\n+        assert!(\n+            result.is_err(),\n+            \"Expected error for invalid internal node data length\"\n+        );\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 697 to 697)\n-        let index = node.get_index(0).expect(\"Failed to get index at position 0\");\n+        let index = node\n+            .get_index(0)\n+            .expect(\"Failed to get index at position 0\");\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 703 to 703)\n-        let index = node.get_index(1).expect(\"Failed to get index at position 1\");\n+        let index = node\n+            .get_index(1)\n+            .expect(\"Failed to get index at position 1\");\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 744 to 744)\n-        let extent = node.get_extent(0).expect(\"Failed to get extent at position 0\");\n+        let extent = node\n+            .get_extent(0)\n+            .expect(\"Failed to get extent at position 0\");\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 749 to 749)\n-        let extent = node.get_extent(1).expect(\"Failed to get extent at position 1\");\n+        let extent = node\n+            .get_extent(1)\n+            .expect(\"Failed to get extent at position 1\");\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/inode.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/inode.rs (original lines from 602 to 602)\n-    \n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/inode.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/inode.rs (original lines from 634 to 634)\n-        assert_eq!(inode.mode, InodeFileType::S_IFREG.bits() | (InodePerm::S_IREAD | InodePerm::S_IWRITE | InodePerm::S_IEXEC).bits()); // Regular file with rwx permissions\n+        assert_eq!(\n+            inode.mode,\n+            InodeFileType::S_IFREG.bits()\n+                | (InodePerm::S_IREAD | InodePerm::S_IWRITE | InodePerm::S_IEXEC).bits()\n+        ); // Regular file with rwx permissions\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 1 to 1)\n-pub mod consts;\n+pub mod block;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 3 to 3)\n+pub mod consts;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 4 to 5)\n-pub mod block;\n-pub mod file;\n+pub mod ext4;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 7 to 7)\n+pub mod file;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 10 to 10)\n-pub mod ext4;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 12 to 14)\n-\n-\n-pub use consts::*;\n+pub use block::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 16 to 16)\n+pub use consts::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 17 to 18)\n-pub use block::*;\n-pub use file::*;\n+pub use ext4::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 20 to 20)\n+pub use file::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 23 to 23)\n-pub use ext4::*;\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/super_block.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/super_block.rs (original lines from 149 to 149)\n-    pub fn first_data_block(&self) -> u32{\n+    pub fn first_data_block(&self) -> u32 {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/balloc.rs (original lines from 71 to 71)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/balloc.rs (original lines from 115 to 115)\n-                    return_errno_with_message!(Errno::ENOSPC, \"No free blocks available in all block groups\");\n+                    return_errno_with_message!(\n+                        Errno::ENOSPC,\n+                        \"No free blocks available in all block groups\"\n+                    );\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/balloc.rs (original lines from 153 to 153)\n-                    block_group.set_block_group_balloc_bitmap_csum(&super_block, &bitmap_block.data);\n+                    block_group\n+                        .set_block_group_balloc_bitmap_csum(&super_block, &bitmap_block.data);\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/balloc.rs (original lines from 179 to 179)\n-        return_errno_with_message!(Errno::ENOSPC, \"No free blocks available in all block groups\");\n+        return_errno_with_message!(\n+            Errno::ENOSPC,\n+            \"No free blocks available in all block groups\"\n+        );\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/balloc.rs (original lines from 202 to 202)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/balloc.rs (original lines from 219 to 219)\n-                    return_errno_with_message!(Errno::ENOSPC, \"No free blocks available in all block groups\");\n+                    return_errno_with_message!(\n+                        Errno::ENOSPC,\n+                        \"No free blocks available in all block groups\"\n+                    );\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/balloc.rs (original lines from 259 to 259)\n-                    block_group.set_block_group_balloc_bitmap_csum(&super_block, &bitmap_block.data);\n+                    block_group\n+                        .set_block_group_balloc_bitmap_csum(&super_block, &bitmap_block.data);\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/balloc.rs (original lines from 289 to 289)\n-        return_errno_with_message!(Errno::ENOSPC, \"No free blocks available in all block groups\");\n+        return_errno_with_message!(\n+            Errno::ENOSPC,\n+            \"No free blocks available in all block groups\"\n+        );\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/dir.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/dir.rs (original lines from 412 to 412)\n-        if self.dir_has_entry(child_inode_ref.inode_num){\n+        if self.dir_has_entry(child_inode_ref.inode_num) {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/dir.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/dir.rs (original lines from 415 to 415)\n-        \n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/ext4.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/ext4.rs (original lines from 35 to 35)\n-        \n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/ext4.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/ext4.rs (original lines from 71 to 71)\n-                \n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/ext4.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/ext4.rs (original lines from 75 to 75)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/ext4.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/ext4.rs (original lines from 78 to 78)\n-            }else{\n+            } else {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/ext4.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/ext4.rs (original lines from 97 to 97)\n-        \n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/ext4.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/ext4.rs (original lines from 99 to 99)\n-        \n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 226 to 226)\n-        if left_ext.first_block >= 0x20000{\n+        if left_ext.first_block >= 0x20000 {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 229 to 229)\n-            let new_ex_offset = core::mem::size_of::<Ext4ExtentHeader>() + core::mem::size_of::<Ext4Extent>() * (node.position);\n+            let new_ex_offset = core::mem::size_of::<Ext4ExtentHeader>()\n+                + core::mem::size_of::<Ext4Extent>() * (node.position);\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 231 to 231)\n-            let left_ext:&mut Ext4Extent = ext4block.read_offset_as_mut(new_ex_offset);\n+            let left_ext: &mut Ext4Extent = ext4block.read_offset_as_mut(new_ex_offset);\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 236 to 236)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 261 to 261)\n-            log::trace!(\"insert newex at pos {:x?} current entry_count {:x?} ex {:x?}\", node.position + 1 , header.entries_count, new_extent);\n+            log::trace!(\n+                \"insert newex at pos {:x?} current entry_count {:x?} ex {:x?}\",\n+                node.position + 1,\n+                header.entries_count,\n+                new_extent\n+            );\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 265 to 265)\n-        }else{\n+        } else {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 267 to 267)\n-            log::trace!(\"insert newex at pos {:x?} current entry_count {:x?} ex {:x?}\", node.position + 1 , header.entries_count, new_extent);\n+            log::trace!(\n+                \"insert newex at pos {:x?} current entry_count {:x?} ex {:x?}\",\n+                node.position + 1,\n+                header.entries_count,\n+                new_extent\n+            );\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 272 to 273)\n-            Block::load(self.block_device.clone(), node_block as usize * BLOCK_SIZE);\n-            let new_ex_offset = core::mem::size_of::<Ext4ExtentHeader>() + core::mem::size_of::<Ext4Extent>() * (node.position + 1);\n+                Block::load(self.block_device.clone(), node_block as usize * BLOCK_SIZE);\n+            let new_ex_offset = core::mem::size_of::<Ext4ExtentHeader>()\n+                + core::mem::size_of::<Ext4Extent>() * (node.position + 1);\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 280 to 280)\n-            // update entry count \n+            // update entry count\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 306 to 306)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 309 to 309)\n-    \n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 314 to 314)\n-    fn ext_grow_indepth(&self, inode_ref: &mut Ext4InodeRef) -> Result<()>{\n+    fn ext_grow_indepth(&self, inode_ref: &mut Ext4InodeRef) -> Result<()> {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 325 to 326)\n-        unsafe{core::ptr::copy_nonoverlapping(data_to_copy, new_ext4block.data.as_mut_ptr(), 60)};\n-        \n+        unsafe {\n+            core::ptr::copy_nonoverlapping(data_to_copy, new_ext4block.data.as_mut_ptr(), 60)\n+        };\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 333 to 333)\n-        let space = (BLOCK_SIZE - core::mem::size_of::<Ext4ExtentHeader>()) / core::mem::size_of::<Ext4Extent>();\n+        let space = (BLOCK_SIZE - core::mem::size_of::<Ext4ExtentHeader>())\n+            / core::mem::size_of::<Ext4Extent>();\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 335 to 335)\n-        \n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 350 to 350)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 354 to 354)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 357 to 357)\n-    \n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 1 to 1)\n+use crate::ext4_defs::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 4 to 4)\n-use crate::ext4_defs::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 83 to 83)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 120 to 120)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 131 to 131)\n-    pub fn create_with_attr(&self, parent: u32, name: &str, inode_mode: u16, uid:u16, gid: u16) -> Result<Ext4InodeRef> {\n+    pub fn create_with_attr(\n+        &self,\n+        parent: u32,\n+        name: &str,\n+        inode_mode: u16,\n+        uid: u16,\n+        gid: u16,\n+    ) -> Result<Ext4InodeRef> {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 301 to 301)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 333 to 336)\n-            let len = min(\n-                fblock_count as usize * BLOCK_SIZE,\n-                write_buf_len - written,\n-            );\n+            let len = min(fblock_count as usize * BLOCK_SIZE, write_buf_len - written);\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 375 to 377)\n-            inode_ref\n-                .inode\n-                .set_size((offset + write_buf_len) as u64);\n+            inode_ref.inode.set_size((offset + write_buf_len) as u64);\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 419 to 419)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 445 to 445)\n-        if diff_blocks_cnt > 0{\n+        if diff_blocks_cnt > 0 {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/inode.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/inode.rs (original lines from 178 to 178)\n-    pub fn append_inode_pblk_from(&self, inode_ref: &mut Ext4InodeRef, start_bgid: &mut u32) -> Result<Ext4Fsblk> {\n+    pub fn append_inode_pblk_from(\n+        &self,\n+        inode_ref: &mut Ext4InodeRef,\n+        start_bgid: &mut u32,\n+    ) -> Result<Ext4Fsblk> {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/mod.rs (original lines from 1 to 3)\n-pub mod extents;\n-pub mod ext4;\n-pub mod inode;\n+pub mod balloc;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/mod.rs (original lines from 5 to 5)\n+pub mod ext4;\n+pub mod extents;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/mod.rs (original lines from 7 to 7)\n-pub mod balloc;\n+pub mod inode;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/mod.rs (original lines from 9 to 11)\n-pub use extents::*;\n-pub use ext4::*;\n-pub use inode::*;\n+pub use balloc::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/mod.rs (original lines from 13 to 13)\n+pub use ext4::*;\n+pub use extents::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/mod.rs (original lines from 15 to 15)\n-pub use balloc::*;\n+pub use inode::*;\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 9 to 10)\n-pub use crate::ext4_defs::Ext4;\n-pub use crate::ext4_defs::BLOCK_SIZE;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 12 to 12)\n+pub use crate::ext4_defs::Ext4;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 13 to 13)\n+pub use crate::ext4_defs::BLOCK_SIZE;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 120 to 120)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 139 to 139)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 148 to 148)\n-        uid: u32, \n+        uid: u32,\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 156 to 156)\n-        let inode_ref = self.create_with_attr(parent as u32, name, mode as u16, uid as u16, gid as u16)?;\n+        let inode_ref =\n+            self.create_with_attr(parent as u32, name, mode as u16, uid as u16, gid as u16)?;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 177 to 178)\n-    pub fn fuse_mkdir_with_attr(&mut self, parent: u64, name: &str, mode: u32, umask: u32, uid:u32, gid:u32) -> Result<Ext4InodeRef> {\n-\n+    pub fn fuse_mkdir_with_attr(\n+        &mut self,\n+        parent: u64,\n+        name: &str,\n+        mode: u32,\n+        umask: u32,\n+        uid: u32,\n+        gid: u32,\n+    ) -> Result<Ext4InodeRef> {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 191 to 191)\n-        let inode_ref = self.create_with_attr(parent as u32, name, mode as u16, uid as u16, gid as u16)?;\n+        let inode_ref =\n+            self.create_with_attr(parent as u32, name, mode as u16, uid as u16, gid as u16)?;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 342 to 342)\n-        ) -> Result<Vec<u8>> {\n+    ) -> Result<Vec<u8>> {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 478 to 478)\n-    /// \n+    ///\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/lib.rs (original lines from 7 to 7)\n-pub mod utils;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/lib.rs (original lines from 9 to 9)\n+pub mod utils;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/lib.rs (original lines from 10 to 10)\n-pub use utils::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/lib.rs (original lines from 12 to 12)\n+pub use utils::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/lib.rs (original lines from 13 to 13)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/lib.rs (original lines from 17 to 18)\n-\n-pub mod simple_interface;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/lib.rs (original lines from 20 to 20)\n+pub mod simple_interface;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/lib.rs (original lines from 21 to 22)\n-\n-pub use simple_interface::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/lib.rs (original lines from 24 to 24)\n+pub use simple_interface::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/prelude.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/prelude.rs (original lines from 19 to 19)\n+pub(crate) use core::cmp::min;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/prelude.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/prelude.rs (original lines from 22 to 23)\n-pub(crate) use core::cmp::min;\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/simple_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/simple_interface/mod.rs (original lines from 1 to 1)\n+\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/bitmap.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/bitmap.rs (original lines from 90 to 90)\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/crc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/crc.rs (original lines from 53 to 53)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/crc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/crc.rs (original lines from 79 to 79)\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/errors.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/errors.rs (original lines from 1 to 2)\n-\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/errors.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/errors.rs (original lines from 37 to 37)\n-    ENOTSUP   = 95,   /* Not supported */\n+    ENOTSUP = 95,      /* Not supported */\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/mod.rs (original lines from 3 to 3)\n-pub mod path;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/mod.rs (original lines from 5 to 5)\n+pub mod path;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/mod.rs (original lines from 6 to 7)\n-\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/mod.rs (original lines from 10 to 10)\n-pub use path::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/mod.rs (original lines from 12 to 12)\n+pub use path::*;\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/block.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/block.rs (original lines from 25 to 27)\n-        let data_bytes: &[u8; 60] = unsafe {\n-            core::mem::transmute(data)\n-        };\n+        let data_bytes: &[u8; 60] = unsafe { core::mem::transmute(data) };\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/block.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/block.rs (original lines from 29 to 29)\n-            disk_offset: 0, \n+            disk_offset: 0,\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/block.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/block.rs (original lines from 80 to 82)\n-\n-impl Block{\n-    pub fn sync_blk_to_disk(&self, block_device: Arc<dyn BlockDevice>){\n+impl Block {\n+    pub fn sync_blk_to_disk(&self, block_device: Arc<dyn BlockDevice>) {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/block.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/block.rs (original lines from 86 to 86)\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/block_group.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/block_group.rs (original lines from 239 to 239)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/consts.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/consts.rs (original lines from 11 to 14)\n-pub const ROOT_INODE: u32 = 2;                      // 根目录 inode\n-pub const JOURNAL_INODE: u32 = 8;                   // 日志文件 inode\n-pub const UNDEL_DIR_INODE: u32 = 6;                 // 未删除目录 inode\n-pub const LOST_AND_FOUND_INODE: u32 = 11;           // lost+found 目录 inode\n+pub const ROOT_INODE: u32 = 2; // 根目录 inode\n+pub const JOURNAL_INODE: u32 = 8; // 日志文件 inode\n+pub const UNDEL_DIR_INODE: u32 = 6; // 未删除目录 inode\n+pub const LOST_AND_FOUND_INODE: u32 = 11; // lost+found 目录 inode\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/consts.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/consts.rs (original lines from 63 to 63)\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 31 to 31)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 40 to 40)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 60 to 63)\n-pub struct Ext4DirSearchResult{\n-    pub dentry: Ext4DirEntry, \n-    pub pblock_id: usize, // disk block id\n-    pub offset: usize, // offset in block\n+pub struct Ext4DirSearchResult {\n+    pub dentry: Ext4DirEntry,\n+    pub pblock_id: usize,   // disk block id\n+    pub offset: usize,      // offset in block\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 67 to 67)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 79 to 79)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 122 to 122)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 135 to 136)\n-        if self.name_len as usize == name.len(){\n-            return &self.name[..name.len()] == name.as_bytes()\n+        if self.name_len as usize == name.len() {\n+            return &self.name[..name.len()] == name.as_bytes();\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 171 to 171)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 181 to 182)\n-    \n-    pub fn write_entry(&mut self, entry_len: u16, inode: u32, name: &str, de_type:DirEntryType) {\n+    pub fn write_entry(&mut self, entry_len: u16, inode: u32, name: &str, de_type: DirEntryType) {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 189 to 189)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 193 to 193)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 237 to 238)\n-\n-impl Ext4DirEntryTail{\n+impl Ext4DirEntryTail {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 262 to 265)\n-        let offset = BLOCK_SIZE - core::mem::size_of::<Ext4DirEntryTail>();\n-        let de_ptr = self as *const Ext4DirEntryTail as *const u8;\n-        let array_ptr = array as *mut [u8] as *mut u8;\n-        let count = core::mem::size_of::<Ext4DirEntryTail>();\n+            let offset = BLOCK_SIZE - core::mem::size_of::<Ext4DirEntryTail>();\n+            let de_ptr = self as *const Ext4DirEntryTail as *const u8;\n+            let array_ptr = array as *mut [u8] as *mut u8;\n+            let count = core::mem::size_of::<Ext4DirEntryTail>();\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/direntry.rs (original lines from 270 to 270)\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 227 to 227)\n-            let mut header = *Ext4ExtentHeader::load_from_u8_mut(&mut data[..size_of::<Ext4ExtentHeader>()]);\n+            let mut header =\n+                *Ext4ExtentHeader::load_from_u8_mut(&mut data[..size_of::<Ext4ExtentHeader>()]);\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 260 to 260)\n-                    if lblock >= ext.first_block && lblock <= ext.first_block + ext.get_actual_len() as u32 {\n+                    if lblock >= ext.first_block\n+                        && lblock <= ext.first_block + ext.get_actual_len() as u32\n+                    {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 274 to 274)\n-                    if (lblock < ext.first_block){\n+                    if (lblock < ext.first_block) {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 276 to 276)\n-                    }else{\n+                    } else {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 548 to 548)\n-        assert!(result.is_err(), \"Expected error for invalid root node data length\");\n+        assert!(\n+            result.is_err(),\n+            \"Expected error for invalid root node data length\"\n+        );\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 553 to 553)\n-        assert!(result.is_err(), \"Expected error for invalid internal node data length\");\n+        assert!(\n+            result.is_err(),\n+            \"Expected error for invalid internal node data length\"\n+        );\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 697 to 697)\n-        let index = node.get_index(0).expect(\"Failed to get index at position 0\");\n+        let index = node\n+            .get_index(0)\n+            .expect(\"Failed to get index at position 0\");\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 703 to 703)\n-        let index = node.get_index(1).expect(\"Failed to get index at position 1\");\n+        let index = node\n+            .get_index(1)\n+            .expect(\"Failed to get index at position 1\");\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 744 to 744)\n-        let extent = node.get_extent(0).expect(\"Failed to get extent at position 0\");\n+        let extent = node\n+            .get_extent(0)\n+            .expect(\"Failed to get extent at position 0\");\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/extents.rs (original lines from 749 to 749)\n-        let extent = node.get_extent(1).expect(\"Failed to get extent at position 1\");\n+        let extent = node\n+            .get_extent(1)\n+            .expect(\"Failed to get extent at position 1\");\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/inode.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/inode.rs (original lines from 602 to 602)\n-    \n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/inode.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/inode.rs (original lines from 634 to 634)\n-        assert_eq!(inode.mode, InodeFileType::S_IFREG.bits() | (InodePerm::S_IREAD | InodePerm::S_IWRITE | InodePerm::S_IEXEC).bits()); // Regular file with rwx permissions\n+        assert_eq!(\n+            inode.mode,\n+            InodeFileType::S_IFREG.bits()\n+                | (InodePerm::S_IREAD | InodePerm::S_IWRITE | InodePerm::S_IEXEC).bits()\n+        ); // Regular file with rwx permissions\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 1 to 1)\n-pub mod consts;\n+pub mod block;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 3 to 3)\n+pub mod consts;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 4 to 5)\n-pub mod block;\n-pub mod file;\n+pub mod ext4;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 7 to 7)\n+pub mod file;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 10 to 10)\n-pub mod ext4;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 12 to 14)\n-\n-\n-pub use consts::*;\n+pub use block::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 16 to 16)\n+pub use consts::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 17 to 18)\n-pub use block::*;\n-pub use file::*;\n+pub use ext4::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 20 to 20)\n+pub use file::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/mod.rs (original lines from 23 to 23)\n-pub use ext4::*;\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_defs/super_block.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_defs/super_block.rs (original lines from 149 to 149)\n-    pub fn first_data_block(&self) -> u32{\n+    pub fn first_data_block(&self) -> u32 {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/balloc.rs (original lines from 71 to 71)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/balloc.rs (original lines from 115 to 115)\n-                    return_errno_with_message!(Errno::ENOSPC, \"No free blocks available in all block groups\");\n+                    return_errno_with_message!(\n+                        Errno::ENOSPC,\n+                        \"No free blocks available in all block groups\"\n+                    );\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/balloc.rs (original lines from 153 to 153)\n-                    block_group.set_block_group_balloc_bitmap_csum(&super_block, &bitmap_block.data);\n+                    block_group\n+                        .set_block_group_balloc_bitmap_csum(&super_block, &bitmap_block.data);\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/balloc.rs (original lines from 179 to 179)\n-        return_errno_with_message!(Errno::ENOSPC, \"No free blocks available in all block groups\");\n+        return_errno_with_message!(\n+            Errno::ENOSPC,\n+            \"No free blocks available in all block groups\"\n+        );\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/balloc.rs (original lines from 202 to 202)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/balloc.rs (original lines from 219 to 219)\n-                    return_errno_with_message!(Errno::ENOSPC, \"No free blocks available in all block groups\");\n+                    return_errno_with_message!(\n+                        Errno::ENOSPC,\n+                        \"No free blocks available in all block groups\"\n+                    );\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/balloc.rs (original lines from 259 to 259)\n-                    block_group.set_block_group_balloc_bitmap_csum(&super_block, &bitmap_block.data);\n+                    block_group\n+                        .set_block_group_balloc_bitmap_csum(&super_block, &bitmap_block.data);\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/balloc.rs (original lines from 289 to 289)\n-        return_errno_with_message!(Errno::ENOSPC, \"No free blocks available in all block groups\");\n+        return_errno_with_message!(\n+            Errno::ENOSPC,\n+            \"No free blocks available in all block groups\"\n+        );\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/dir.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/dir.rs (original lines from 412 to 412)\n-        if self.dir_has_entry(child_inode_ref.inode_num){\n+        if self.dir_has_entry(child_inode_ref.inode_num) {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/dir.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/dir.rs (original lines from 415 to 415)\n-        \n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/ext4.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/ext4.rs (original lines from 35 to 35)\n-        \n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/ext4.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/ext4.rs (original lines from 71 to 71)\n-                \n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/ext4.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/ext4.rs (original lines from 75 to 75)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/ext4.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/ext4.rs (original lines from 78 to 78)\n-            }else{\n+            } else {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/ext4.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/ext4.rs (original lines from 97 to 97)\n-        \n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/ext4.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/ext4.rs (original lines from 99 to 99)\n-        \n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 226 to 226)\n-        if left_ext.first_block >= 0x20000{\n+        if left_ext.first_block >= 0x20000 {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 229 to 229)\n-            let new_ex_offset = core::mem::size_of::<Ext4ExtentHeader>() + core::mem::size_of::<Ext4Extent>() * (node.position);\n+            let new_ex_offset = core::mem::size_of::<Ext4ExtentHeader>()\n+                + core::mem::size_of::<Ext4Extent>() * (node.position);\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 231 to 231)\n-            let left_ext:&mut Ext4Extent = ext4block.read_offset_as_mut(new_ex_offset);\n+            let left_ext: &mut Ext4Extent = ext4block.read_offset_as_mut(new_ex_offset);\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 236 to 236)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 261 to 261)\n-            log::trace!(\"insert newex at pos {:x?} current entry_count {:x?} ex {:x?}\", node.position + 1 , header.entries_count, new_extent);\n+            log::trace!(\n+                \"insert newex at pos {:x?} current entry_count {:x?} ex {:x?}\",\n+                node.position + 1,\n+                header.entries_count,\n+                new_extent\n+            );\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 265 to 265)\n-        }else{\n+        } else {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 267 to 267)\n-            log::trace!(\"insert newex at pos {:x?} current entry_count {:x?} ex {:x?}\", node.position + 1 , header.entries_count, new_extent);\n+            log::trace!(\n+                \"insert newex at pos {:x?} current entry_count {:x?} ex {:x?}\",\n+                node.position + 1,\n+                header.entries_count,\n+                new_extent\n+            );\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 272 to 273)\n-            Block::load(self.block_device.clone(), node_block as usize * BLOCK_SIZE);\n-            let new_ex_offset = core::mem::size_of::<Ext4ExtentHeader>() + core::mem::size_of::<Ext4Extent>() * (node.position + 1);\n+                Block::load(self.block_device.clone(), node_block as usize * BLOCK_SIZE);\n+            let new_ex_offset = core::mem::size_of::<Ext4ExtentHeader>()\n+                + core::mem::size_of::<Ext4Extent>() * (node.position + 1);\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 280 to 280)\n-            // update entry count \n+            // update entry count\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 306 to 306)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 309 to 309)\n-    \n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 314 to 314)\n-    fn ext_grow_indepth(&self, inode_ref: &mut Ext4InodeRef) -> Result<()>{\n+    fn ext_grow_indepth(&self, inode_ref: &mut Ext4InodeRef) -> Result<()> {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 325 to 326)\n-        unsafe{core::ptr::copy_nonoverlapping(data_to_copy, new_ext4block.data.as_mut_ptr(), 60)};\n-        \n+        unsafe {\n+            core::ptr::copy_nonoverlapping(data_to_copy, new_ext4block.data.as_mut_ptr(), 60)\n+        };\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 333 to 333)\n-        let space = (BLOCK_SIZE - core::mem::size_of::<Ext4ExtentHeader>()) / core::mem::size_of::<Ext4Extent>();\n+        let space = (BLOCK_SIZE - core::mem::size_of::<Ext4ExtentHeader>())\n+            / core::mem::size_of::<Ext4Extent>();\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 335 to 335)\n-        \n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 350 to 350)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 354 to 354)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/extents.rs (original lines from 357 to 357)\n-    \n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 1 to 1)\n+use crate::ext4_defs::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 4 to 4)\n-use crate::ext4_defs::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 83 to 83)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 120 to 120)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 131 to 131)\n-    pub fn create_with_attr(&self, parent: u32, name: &str, inode_mode: u16, uid:u16, gid: u16) -> Result<Ext4InodeRef> {\n+    pub fn create_with_attr(\n+        &self,\n+        parent: u32,\n+        name: &str,\n+        inode_mode: u16,\n+        uid: u16,\n+        gid: u16,\n+    ) -> Result<Ext4InodeRef> {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 301 to 301)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 333 to 336)\n-            let len = min(\n-                fblock_count as usize * BLOCK_SIZE,\n-                write_buf_len - written,\n-            );\n+            let len = min(fblock_count as usize * BLOCK_SIZE, write_buf_len - written);\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 375 to 377)\n-            inode_ref\n-                .inode\n-                .set_size((offset + write_buf_len) as u64);\n+            inode_ref.inode.set_size((offset + write_buf_len) as u64);\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 419 to 419)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/file.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/file.rs (original lines from 445 to 445)\n-        if diff_blocks_cnt > 0{\n+        if diff_blocks_cnt > 0 {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/inode.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/inode.rs (original lines from 178 to 178)\n-    pub fn append_inode_pblk_from(&self, inode_ref: &mut Ext4InodeRef, start_bgid: &mut u32) -> Result<Ext4Fsblk> {\n+    pub fn append_inode_pblk_from(\n+        &self,\n+        inode_ref: &mut Ext4InodeRef,\n+        start_bgid: &mut u32,\n+    ) -> Result<Ext4Fsblk> {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/mod.rs (original lines from 1 to 3)\n-pub mod extents;\n-pub mod ext4;\n-pub mod inode;\n+pub mod balloc;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/mod.rs (original lines from 5 to 5)\n+pub mod ext4;\n+pub mod extents;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/mod.rs (original lines from 7 to 7)\n-pub mod balloc;\n+pub mod inode;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/mod.rs (original lines from 9 to 11)\n-pub use extents::*;\n-pub use ext4::*;\n-pub use inode::*;\n+pub use balloc::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/mod.rs (original lines from 13 to 13)\n+pub use ext4::*;\n+pub use extents::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/ext4_impls/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/ext4_impls/mod.rs (original lines from 15 to 15)\n-pub use balloc::*;\n+pub use inode::*;\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 9 to 10)\n-pub use crate::ext4_defs::Ext4;\n-pub use crate::ext4_defs::BLOCK_SIZE;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 12 to 12)\n+pub use crate::ext4_defs::Ext4;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 13 to 13)\n+pub use crate::ext4_defs::BLOCK_SIZE;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 120 to 120)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 139 to 139)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 148 to 148)\n-        uid: u32, \n+        uid: u32,\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 156 to 156)\n-        let inode_ref = self.create_with_attr(parent as u32, name, mode as u16, uid as u16, gid as u16)?;\n+        let inode_ref =\n+            self.create_with_attr(parent as u32, name, mode as u16, uid as u16, gid as u16)?;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 177 to 178)\n-    pub fn fuse_mkdir_with_attr(&mut self, parent: u64, name: &str, mode: u32, umask: u32, uid:u32, gid:u32) -> Result<Ext4InodeRef> {\n-\n+    pub fn fuse_mkdir_with_attr(\n+        &mut self,\n+        parent: u64,\n+        name: &str,\n+        mode: u32,\n+        umask: u32,\n+        uid: u32,\n+        gid: u32,\n+    ) -> Result<Ext4InodeRef> {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 191 to 191)\n-        let inode_ref = self.create_with_attr(parent as u32, name, mode as u16, uid as u16, gid as u16)?;\n+        let inode_ref =\n+            self.create_with_attr(parent as u32, name, mode as u16, uid as u16, gid as u16)?;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 342 to 342)\n-        ) -> Result<Vec<u8>> {\n+    ) -> Result<Vec<u8>> {\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/fuse_interface/mod.rs (original lines from 478 to 478)\n-    /// \n+    ///\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/main.rs (original lines from 112 to 112)\n-    let mut read_buf = vec![0u8;  READ_SIZE as usize];\n+    let mut read_buf = vec![0u8; READ_SIZE as usize];\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/main.rs (original lines from 118 to 119)\n-\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/main.rs (original lines from 121 to 121)\n-    let mut read_buf = vec![0u8;  READ_SIZE as usize];\n+    let mut read_buf = vec![0u8; READ_SIZE as usize];\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/main.rs (original lines from 161 to 161)\n-    let inode_ref = ext4.create(ROOT_INODE, \"4G.txt\", inode_mode | inode_perm).unwrap();\n+    let inode_ref = ext4\n+        .create(ROOT_INODE, \"4G.txt\", inode_mode | inode_perm)\n+        .unwrap();\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/main.rs (original lines from 169 to 169)\n-    let mut read_buf = vec![0u8;  WRITE_SIZE as usize];\n+    let mut read_buf = vec![0u8; WRITE_SIZE as usize];\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/main.rs (original lines from 174 to 174)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/prelude.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/prelude.rs (original lines from 19 to 19)\n+pub(crate) use core::cmp::min;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/prelude.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/prelude.rs (original lines from 22 to 23)\n-pub(crate) use core::cmp::min;\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/simple_interface/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/simple_interface/mod.rs (original lines from 1 to 1)\n+\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/bitmap.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/bitmap.rs (original lines from 90 to 90)\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/crc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/crc.rs (original lines from 53 to 53)\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/crc.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/crc.rs (original lines from 79 to 79)\n+\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/errors.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/errors.rs (original lines from 1 to 2)\n-\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/errors.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/errors.rs (original lines from 37 to 37)\n-    ENOTSUP   = 95,   /* Not supported */\n+    ENOTSUP = 95,      /* Not supported */\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/mod.rs (original lines from 3 to 3)\n-pub mod path;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/mod.rs (original lines from 5 to 5)\n+pub mod path;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/mod.rs (original lines from 6 to 7)\n-\n-\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/mod.rs (original lines from 10 to 10)\n-pub use path::*;\n"
    },
    {
      "cmd_idx": 55,
      "file": "src/utils/mod.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_11/yuoo655/ext4_rs/src/utils/mod.rs (original lines from 12 to 12)\n+pub use path::*;\n+\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: redundant field names in struct initialization\n  --> src/ext4_impls/extents.rs:42:21\n   |\n42 |                     pblock_of_node: pblock_of_node,\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `pblock_of_node`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\n   = note: `#[warn(clippy::redundant_field_names)]` on by default\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: redundant field names in struct initialization\n  --> src/ext4_impls/extents.rs:66:17\n   |\n66 |                 pblock_of_node: pblock_of_node,\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `pblock_of_node`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: redundant field names in struct initialization\n  --> src/ext4_impls/extents.rs:78:17\n   |\n78 |                 pblock_of_node: pblock_of_node,\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `pblock_of_node`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/inode.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: redundant field names in struct initialization\n  --> src/ext4_impls/inode.rs:42:13\n   |\n42 |             inode_num: inode_num,\n   |             ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `inode_num`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/file.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: redundant field names in struct initialization\n   --> src/ext4_impls/file.rs:113:13\n    |\n113 |             inode_num: inode_num,\n    |             ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `inode_num`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/file.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: redundant field names in struct initialization\n   --> src/ext4_impls/file.rs:114:13\n    |\n114 |             inode: inode,\n    |             ^^^^^^^^^^^^ help: replace it with: `inode`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this `if` statement can be collapsed\n   --> src/fuse_interface/mod.rs:301:9\n    |\n301 | /         if (flags & O_WRONLY != 0) || (flags & O_RDWR != 0) {\n302 | |             if !can_write {\n303 | |                 return_errno_with_message!(Errno::EACCES, \"Permission denied can not write\");\n304 | |             }\n305 | |         }\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n    = note: `#[warn(clippy::collapsible_if)]` on by default\nhelp: collapse nested if block\n    |\n301 ~         if ((flags & O_WRONLY != 0) || (flags & O_RDWR != 0)) && !can_write {\n302 +             return_errno_with_message!(Errno::EACCES, \"Permission denied can not write\");\n303 +         }\n    |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this `if` statement can be collapsed\n   --> src/fuse_interface/mod.rs:308:9\n    |\n308 | /         if (flags & O_RDONLY != 0) || (flags & O_RDWR != 0) {\n309 | |             if !can_read {\n310 | |                 return_errno_with_message!(Errno::EACCES, \"Permission denied can not read\");\n311 | |             }\n312 | |         }\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n    |\n308 ~         if ((flags & O_RDONLY != 0) || (flags & O_RDWR != 0)) && !can_read {\n309 +             return_errno_with_message!(Errno::EACCES, \"Permission denied can not read\");\n310 +         }\n    |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this `if` statement can be collapsed\n   --> src/fuse_interface/mod.rs:315:9\n    |\n315 | /         if (flags & O_EXCL != 0) || (flags & O_RDWR != 0) {\n316 | |             if !can_execute {\n317 | |                 return_errno_with_message!(Errno::EACCES, \"Permission denied can not exec\");\n318 | |             }\n319 | |         }\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n    |\n315 ~         if ((flags & O_EXCL != 0) || (flags & O_RDWR != 0)) && !can_execute {\n316 +             return_errno_with_message!(Errno::EACCES, \"Permission denied can not exec\");\n317 +         }\n    |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this `if` statement can be collapsed\n   --> src/fuse_interface/mod.rs:443:13\n    |\n443 | /             if (flags & O_WRONLY != 0) || (flags & O_RDWR != 0) {\n444 | |                 if !can_write {\n445 | |                     return_errno_with_message!(Errno::EACCES, \"Permission denied can not write\");\n446 | |                 }\n447 | |             }\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n    |\n443 ~             if ((flags & O_WRONLY != 0) || (flags & O_RDWR != 0)) && !can_write {\n444 +                 return_errno_with_message!(Errno::EACCES, \"Permission denied can not write\");\n445 +             }\n    |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this `if` statement can be collapsed\n   --> src/fuse_interface/mod.rs:450:13\n    |\n450 | /             if (flags & O_RDONLY != 0) || (flags & O_RDWR != 0) {\n451 | |                 if !can_read {\n452 | |                     return_errno_with_message!(Errno::EACCES, \"Permission denied can not read\");\n453 | |                 }\n454 | |             }\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n    |\n450 ~             if ((flags & O_RDONLY != 0) || (flags & O_RDWR != 0)) && !can_read {\n451 +                 return_errno_with_message!(Errno::EACCES, \"Permission denied can not read\");\n452 +             }\n    |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this `if` statement can be collapsed\n   --> src/fuse_interface/mod.rs:457:13\n    |\n457 | /             if (flags & O_EXCL != 0) || (flags & O_RDWR != 0) {\n458 | |                 if !can_execute {\n459 | |                     return_errno_with_message!(Errno::EACCES, \"Permission denied can not exec\");\n460 | |                 }\n461 | |             }\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\nhelp: collapse nested if block\n    |\n457 ~             if ((flags & O_EXCL != 0) || (flags & O_RDWR != 0)) && !can_execute {\n458 +                 return_errno_with_message!(Errno::EACCES, \"Permission denied can not exec\");\n459 +             }\n    |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/utils/path.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unneeded `return` statement\n  --> src/utils/path.rs:27:5\n   |\n27 |     return path.len();\n   |     ^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n   = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n   |\n27 -     return path.len();\n27 +     path.len()\n   |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/consts.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: usage of a legacy numeric constant\n  --> src/ext4_defs/consts.rs:25:38\n   |\n25 | pub const EXT_MAX_BLOCKS: Ext4Lblk = core::u32::MAX;\n   |                                      ^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n   = note: `#[warn(clippy::legacy_numeric_constants)]` on by default\nhelp: use the associated constant instead\n   |\n25 | pub const EXT_MAX_BLOCKS: Ext4Lblk = u32::MAX;\n   |                                      ~~~~~~~~\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/block_group.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/ext4_defs/block_group.rs:166:9\n    |\n164 |         let crc = (checksum & 0xFFFF) as u16;\n    |         ------------------------------------- unnecessary `let` binding\n165 |\n166 |         crc\n    |         ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n    = note: `#[warn(clippy::let_and_return)]` on by default\nhelp: return the expression directly\n    |\n164 ~         \n165 |\n166 ~         (checksum & 0xFFFF) as u16\n    |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/block_group.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting integer literal to `usize` is unnecessary\n   --> src/ext4_defs/block_group.rs:157:81\n    |\n157 |             unsafe { core::slice::from_raw_parts(self as *const _ as *const u8, 0x40 as usize) };\n    |                                                                                 ^^^^^^^^^^^^^ help: try: `0x40_usize`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n    = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Clippy(Error)",
      "raw": "error: redundant redefinition of a binding `data`\n   --> src/ext4_defs/direntry.rs:115:9\n    |\n115 |         let data = data;\n    |         ^^^^^^^^^^^^^^^^\n    |\nhelp: `data` is initially defined here\n   --> src/ext4_defs/direntry.rs:114:17\n    |\n114 |     fn try_from(data: &[T]) -> core::result::Result<Self, u64> {\n    |                 ^^^^\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_locals\n    = note: `#[deny(clippy::redundant_locals)]` on by default\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/ext4_defs/direntry.rs:149:9\n    |\n148 |         let de_type = unsafe { self.inner.inode_type } as u8;\n    |         ----------------------------------------------------- unnecessary `let` binding\n149 |         de_type\n    |         ^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n148 ~         \n149 ~         unsafe { self.inner.inode_type } as u8\n    |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`u8` -> `u8`)\n   --> src/ext4_defs/direntry.rs:148:23\n    |\n148 |         let de_type = unsafe { self.inner.inode_type } as u8;\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `unsafe { self.inner.inode_type }`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/direntry.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n   --> src/ext4_defs/direntry.rs:163:9\n    |\n162 |         let name_len = self.name_len as usize;\n    |         -------------------------------------- unnecessary `let` binding\n163 |         name_len\n    |         ^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n    |\n162 ~         \n163 ~         self.name_len as usize\n    |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/block.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n  --> src/ext4_defs/block.rs:39:13\n   |\n38 |             let value = ptr.read_unaligned();\n   |             --------------------------------- unnecessary `let` binding\n39 |             value\n   |             ^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n   |\n38 ~             \n39 ~             ptr.read_unaligned()\n   |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/block.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n  --> src/ext4_defs/block.rs:48:13\n   |\n47 |             let value = ptr.read_unaligned();\n   |             --------------------------------- unnecessary `let` binding\n48 |             value\n   |             ^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n   |\n47 ~             \n48 ~             ptr.read_unaligned()\n   |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unneeded `return` statement\n   --> src/ext4_defs/extents.rs:283:17\n    |\n283 |                 return Some((ext, l - 1));\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n    |\n283 -                 return Some((ext, l - 1));\n283 +                 Some((ext, l - 1))\n    |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this operation has no effect\n   --> src/ext4_defs/extents.rs:401:24\n    |\n401 |         self.leaf_lo = pblock as u32 & 0xffffffff;\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider reducing it to: `pblock as u32`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#identity_op\n    = note: `#[warn(clippy::identity_op)]` on by default\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this operation has no effect\n   --> src/ext4_defs/extents.rs:426:25\n    |\n426 |         self.start_lo = pblock as u32 & 0xffffffff;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider reducing it to: `pblock as u32`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#identity_op\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Clippy(Error)",
      "raw": "error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> src/ext4_defs/extents.rs:448:17\n    |\n448 |                 self.get_actual_len() + next.get_actual_len() <= EXT_UNWRITTEN_MAX_LEN\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: because `EXT_UNWRITTEN_MAX_LEN` is the maximum value for this type, this comparison is always true\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons\n    = note: `#[deny(clippy::absurd_extreme_comparisons)]` on by default\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Clippy(Error)",
      "raw": "error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> src/ext4_defs/extents.rs:458:17\n    |\n458 |                 self.get_actual_len() + prev.get_actual_len() <= EXT_UNWRITTEN_MAX_LEN\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: because `EXT_UNWRITTEN_MAX_LEN` is the maximum value for this type, this comparison is always true\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: you should consider adding a `Default` implementation for `SearchPath`\n   --> src/ext4_defs/extents.rs:517:5\n    |\n517 | /     pub fn new() -> Self {\n518 | |         SearchPath {\n519 | |             depth: 0,\n520 | |             maxdepth: 4,\n521 | |             path: vec![],\n522 | |         }\n523 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n516 + impl Default for SearchPath {\n517 +     fn default() -> Self {\n518 +         Self::new()\n519 +     }\n520 + }\n    |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/inode.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`u32` -> `u32`)\n   --> src/ext4_defs/inode.rs:426:25\n    |\n426 |         let ino_index = inode_id as u32;\n    |                         ^^^^^^^^^^^^^^^ help: try: `inode_id`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/super_block.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unneeded `return` statement\n   --> src/ext4_defs/super_block.rs:176:13\n    |\n176 |             return EXT4_MIN_BLOCK_GROUP_DESCRIPTOR_SIZE as u16;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n    |\n176 -             return EXT4_MIN_BLOCK_GROUP_DESCRIPTOR_SIZE as u16;\n176 +             EXT4_MIN_BLOCK_GROUP_DESCRIPTOR_SIZE as u16\n    |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/super_block.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`u16` -> `u16`)\n   --> src/ext4_defs/super_block.rs:176:20\n    |\n176 |             return EXT4_MIN_BLOCK_GROUP_DESCRIPTOR_SIZE as u16;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `EXT4_MIN_BLOCK_GROUP_DESCRIPTOR_SIZE`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/super_block.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_defs/super_block.rs:223:53\n    |\n223 |         let checksum = ext4_crc32c(EXT4_CRC32_INIT, &data, 0x3fc);\n    |                                                     ^^^^^ help: change this to: `data`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n    = note: `#[warn(clippy::needless_borrow)]` on by default\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_defs/super_block.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`u32` -> `u32`)\n   --> src/ext4_defs/super_block.rs:240:42\n    |\n240 |         csum = ext4_crc32c(csum, bitmap, (blocks_per_group / 8) as u32);\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(blocks_per_group / 8)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unneeded `return` statement\n  --> src/ext4_impls/extents.rs:80:13\n   |\n80 |             return Ok(search_path);\n   |             ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n   |\n80 -             return Ok(search_path);\n80 +             Ok(search_path)\n   |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: using `clone` on type `Ext4ExtentHeader` which implements the `Copy` trait\n  --> src/ext4_impls/extents.rs:37:29\n   |\n37 |                     header: node.header.clone(),\n   |                             ^^^^^^^^^^^^^^^^^^^ help: try removing the `clone` call: `node.header`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n   = note: `#[warn(clippy::clone_on_copy)]` on by default\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: using `clone` on type `Ext4ExtentHeader` which implements the `Copy` trait\n  --> src/ext4_impls/extents.rs:61:25\n   |\n61 |                 header: node.header.clone(),\n   |                         ^^^^^^^^^^^^^^^^^^^ help: try removing the `clone` call: `node.header`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: using `clone` on type `Ext4ExtentHeader` which implements the `Copy` trait\n  --> src/ext4_impls/extents.rs:73:25\n   |\n73 |                 header: node.header.clone(),\n   |                         ^^^^^^^^^^^^^^^^^^^ help: try removing the `clone` call: `node.header`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: using `clone` on type `Ext4ExtentHeader` which implements the `Copy` trait\n  --> src/ext4_impls/extents.rs:98:22\n   |\n98 |         let header = node.header.clone();\n   |                      ^^^^^^^^^^^^^^^^^^^ help: try removing the `clone` call: `node.header`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/extents.rs:119:36\n    |\n119 |             if self.can_merge(&ex, &newex) {\n    |                                    ^^^^^^ help: change this to: `newex`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/extents.rs:120:58\n    |\n120 |                 self.merge_extent(&search_path, &mut ex, &newex)?;\n    |                                                          ^^^^^^ help: change this to: `newex`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/extents.rs:139:70\n    |\n139 |                 if let Some(next_extent) = self.get_extent_from_node(&node, pos + 1) {\n    |                                                                      ^^^^^ help: change this to: `node`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/extents.rs:140:53\n    |\n140 |                     if self.can_merge(&next_extent, &newex) {\n    |                                                     ^^^^^^ help: change this to: `newex`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/extents.rs:155:74\n    |\n155 |                 if let Some(mut prev_extent) = self.get_extent_from_node(&node, pos - 1) {\n    |                                                                          ^^^^^ help: change this to: `node`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/extents.rs:156:53\n    |\n156 |                     if self.can_merge(&prev_extent, &newex) {\n    |                                                     ^^^^^^ help: change this to: `newex`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/extents.rs:157:75\n    |\n157 |                         self.merge_extent(&search_path, &mut prev_extent, &newex)?;\n    |                                                                           ^^^^^^ help: change this to: `newex`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`u16` -> `u16`)\n   --> src/ext4_impls/extents.rs:205:48\n    |\n205 |         if ex1.block_count + ex2.block_count > EXT_INIT_MAX_LEN as u16 {\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `EXT_INIT_MAX_LEN`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`u16` -> `u16`)\n   --> src/ext4_impls/extents.rs:210:70\n    |\n210 |         if ex1.is_unwritten() && ex1.block_count + ex2.block_count > EXT_UNWRITTEN_MAX_LEN as u16 {\n    |                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `EXT_UNWRITTEN_MAX_LEN`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: using `clone` on type `Ext4ExtentHeader` which implements the `Copy` trait\n   --> src/ext4_impls/extents.rs:248:22\n    |\n248 |         let header = node.header.clone();\n    |                      ^^^^^^^^^^^^^^^^^^^ help: try removing the `clone` call: `node.header`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: deref which would be done by auto-deref\n   --> src/ext4_impls/extents.rs:255:17\n    |\n255 |                 (*inode_ref.inode.root_extent_header_mut()).entries_count += 1;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `inode_ref.inode.root_extent_header_mut()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref\n    = note: `#[warn(clippy::explicit_auto_deref)]` on by default\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: deref which would be done by auto-deref\n   --> src/ext4_impls/extents.rs:263:13\n    |\n263 |             (*inode_ref.inode.root_extent_header_mut()).entries_count += 1;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `inode_ref.inode.root_extent_header_mut()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n   --> src/ext4_impls/extents.rs:272:52\n    |\n272 |             Block::load(self.block_device.clone(), node_block as usize * BLOCK_SIZE);\n    |                                                    ^^^^^^^^^^^^^^^^^^^ help: try: `node_block`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: using `clone` on type `Option<Ext4Extent>` which implements the `Copy` trait\n   --> src/ext4_impls/extents.rs:396:22\n    |\n396 |         let mut ex = search_path.path[depth].extent.clone().unwrap();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try removing the `clone` call: `search_path.path[depth].extent`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this operation has no effect\n   --> src/ext4_impls/extents.rs:412:30\n    |\n412 |             newex.start_lo = newblock as u32 & 0xffffffff;\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider reducing it to: `newblock as u32`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#identity_op\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`u32` -> `u32`)\n   --> src/ext4_impls/extents.rs:412:30\n    |\n412 |             newex.start_lo = newblock as u32 & 0xffffffff;\n    |                              ^^^^^^^^^^^^^^^ help: try: `newblock`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`u32` -> `u32`)\n   --> src/ext4_impls/extents.rs:413:32\n    |\n413 |             newex.start_hi = (((newblock as u32) << 31) << 1) as u16;\n    |                                ^^^^^^^^^^^^^^^^^ help: try: `newblock`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: using `clone` on type `Ext4ExtentHeader` which implements the `Copy` trait\n   --> src/ext4_impls/extents.rs:450:30\n    |\n450 |                 let header = search_path.path[i as usize].header.clone();\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try removing the `clone` call: `search_path.path[i as usize].header`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n   --> src/ext4_impls/extents.rs:473:60\n    |\n473 |                     Block::load(self.block_device.clone(), node_pblock as usize * BLOCK_SIZE);\n    |                                                            ^^^^^^^^^^^^^^^^^^^^ help: try: `node_pblock`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: using `clone` on type `Ext4ExtentHeader` which implements the `Copy` trait\n   --> src/ext4_impls/extents.rs:475:30\n    |\n475 |                 let header = search_path.path[i as usize].header.clone();\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try removing the `clone` call: `search_path.path[i as usize].header`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: using `clone` on type `Ext4ExtentHeader` which implements the `Copy` trait\n   --> src/ext4_impls/extents.rs:530:26\n    |\n530 |             let header = search_path.path[i as usize].header.clone();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try removing the `clone` call: `search_path.path[i as usize].header`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`isize` -> `isize`)\n   --> src/ext4_impls/extents.rs:545:27\n    |\n545 |                 let idx = i as isize;\n    |                           ^^^^^^^^^^ help: try: `i`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`u64` -> `u64`)\n   --> src/ext4_impls/extents.rs:666:33\n    |\n666 |                 ex.store_pblock(newblock as u64);\n    |                                 ^^^^^^^^^^^^^^^ help: try: `newblock`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n   --> src/ext4_impls/extents.rs:775:33\n    |\n775 |             let node_disk_pos = path.path[i].pblock_of_node as usize * BLOCK_SIZE;\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `path.path[i].pblock_of_node`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/extents.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: using `clone` on type `Ext4ExtentHeader` which implements the `Copy` trait\n   --> src/ext4_impls/extents.rs:889:22\n    |\n889 |         let header = path.header.clone();\n    |                      ^^^^^^^^^^^^^^^^^^^ help: try removing the `clone` call: `path.header`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/ext4.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: useless conversion to the same type: `utils::errors::Errno`\n  --> src/ext4_impls/ext4.rs:56:33\n   |\n56 |                 if e.error() != Errno::ENOENT.into() || !create {\n   |                                 ^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `Errno::ENOENT`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n   = note: `#[warn(clippy::useless_conversion)]` on by default\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/inode.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: returning the result of a `let` binding from a block\n  --> src/ext4_impls/inode.rs:30:9\n   |\n27 | /         let offset =\n28 | |             inode_table_blk_num as usize * BLOCK_SIZE + index as usize * inode_size as usize;\n   | |_____________________________________________________________________________________________- unnecessary `let` binding\n29 |\n30 |           offset\n   |           ^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\nhelp: return the expression directly\n   |\n27 ~         \n28 |\n29 ~         inode_table_blk_num as usize * BLOCK_SIZE + index as usize * inode_size as usize\n   |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/inode.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n  --> src/ext4_impls/inode.rs:78:44\n   |\n78 |         let search_path = self.find_extent(&inode_ref, lblock);\n   |                                            ^^^^^^^^^^ help: change this to: `inode_ref`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/inode.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting integer literal to `u32` is unnecessary\n   --> src/ext4_impls/inode.rs:109:31\n    |\n109 |         let mut rel_blk_idx = 0 as u32;\n    |                               ^^^^^^^^ help: try: `0_u32`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/inode.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`u32` -> `u32`)\n   --> src/ext4_impls/inode.rs:111:38\n    |\n111 |         ext4_bmap_bit_find_clr(data, index as u32, 0x8000, &mut rel_blk_idx);\n    |                                      ^^^^^^^^^^^^ help: try: `index`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/inode.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/inode.rs:112:27\n    |\n112 |         ext4_bmap_bit_set(&mut data, rel_blk_idx);\n    |                           ^^^^^^^^^ help: change this to: `data`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/inode.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/inode.rs:114:70\n    |\n114 |         block_group.set_block_group_balloc_bitmap_csum(&super_block, &data);\n    |                                                                      ^^^^^ help: change this to: `data`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/inode.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/inode.rs:116:69\n    |\n116 |             .write_offset(block_bitmap_block as usize * BLOCK_SIZE, &data);\n    |                                                                     ^^^^^ help: change this to: `data`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/dir.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: the method `dir_find_in_block` doesn't need a mutable reference\n  --> src/ext4_impls/dir.rs:51:48\n   |\n51 |                 let r = self.dir_find_in_block(&mut ext4block, name, result);\n   |                                                ^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed\n   = note: `#[warn(clippy::unnecessary_mut_passed)]` on by default\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/dir.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/dir.rs:190:46\n    |\n190 |             let pblock = self.get_pblock_idx(&parent, iblock as u32)?;\n    |                                              ^^^^^^^ help: change this to: `parent`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/dir.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n   --> src/ext4_impls/dir.rs:267:69\n    |\n267 |             let mut sz = core::mem::size_of::<Ext4FakeDirEntry>() + used_len as usize;\n    |                                                                     ^^^^^^^^^^^^^^^^^ help: try: `used_len`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/dir.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: deref which would be done by auto-deref\n   --> src/ext4_impls/dir.rs:341:9\n    |\n341 |         (*pde).entry_len += de_del_entry_len;\n    |         ^^^^^^ help: try: `pde`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/dir.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: deref which would be done by auto-deref\n   --> src/ext4_impls/dir.rs:345:9\n    |\n345 |         (*de_del).inode = 0;\n    |         ^^^^^^^^^ help: try: `de_del`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/dir.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: manual implementation of an assign operation\n   --> src/ext4_impls/dir.rs:386:21\n    |\n386 |                     offset = offset + de.entry_len as usize;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `offset += de.entry_len as usize`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern\n    = note: `#[warn(clippy::assign_op_pattern)]` on by default\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/dir.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unneeded `return` statement\n   --> src/ext4_impls/dir.rs:427:9\n    |\n427 |         return Ok(EOK);\n    |         ^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n    |\n427 -         return Ok(EOK);\n427 +         Ok(EOK)\n    |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/dir.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`u32` -> `u32`)\n   --> src/ext4_impls/dir.rs:407:37\n    |\n407 |         let r = self.dir_find_entry(parent as u32, path, &mut search_result)?;\n    |                                     ^^^^^^^^^^^^^ help: try: `parent`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/file.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: using `clone` on type `Ext4Inode` which implements the `Copy` trait\n  --> src/ext4_impls/file.rs:33:24\n   |\n33 |                 inode: child.inode.clone(),\n   |                        ^^^^^^^^^^^^^^^^^^^ help: try removing the `clone` call: `child.inode`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/file.rs",
      "kind": "Clippy(Error)",
      "raw": "error: redundant redefinition of a binding `extra_size`\n   --> src/ext4_impls/file.rs:104:13\n    |\n104 |             let extra_size = extra_size;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\nhelp: `extra_size` is initially defined here\n   --> src/ext4_impls/file.rs:102:13\n    |\n102 |         let extra_size = self.super_block.extra_size();\n    |             ^^^^^^^^^^\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_locals\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/file.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n   --> src/ext4_impls/file.rs:416:18\n    |\n416 |             &p[..len as usize],\n    |                  ^^^^^^^^^^^^ help: try: `len`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/file.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`u32` -> `u32`)\n   --> src/ext4_impls/file.rs:446:65\n    |\n446 |             self.extent_remove_space(inode_ref, new_blocks_cnt, EXT_MAX_BLOCKS as u32)?;\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^ help: try: `EXT_MAX_BLOCKS`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/ialloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting integer literal to `u32` is unnecessary\n  --> src/ext4_impls/ialloc.rs:34:37\n   |\n34 |                 let mut idx_in_bg = 0 as u32;\n   |                                     ^^^^^^^^ help: try: `0_u32`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/ialloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n  --> src/ext4_impls/ialloc.rs:37:35\n   |\n37 |                 ext4_bmap_bit_set(&mut bitmap_data, idx_in_bg);\n   |                                   ^^^^^^^^^^^^^^^^ help: change this to: `bitmap_data`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/ialloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n  --> src/ext4_impls/ialloc.rs:41:77\n   |\n41 |                     .write_offset(inode_bitmap_block as usize * BLOCK_SIZE, &bitmap_data);\n   |                                                                             ^^^^^^^^^^^^ help: change this to: `bitmap_data`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/ialloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n  --> src/ext4_impls/ialloc.rs:43:69\n   |\n43 |                 bg.set_block_group_ialloc_bitmap_csum(&super_block, &bitmap_data);\n   |                                                                     ^^^^^^^^^^^^ help: change this to: `bitmap_data`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/ialloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`u32` -> `u32`)\n  --> src/ext4_impls/ialloc.rs:57:43\n   |\n57 |                 let free = inodes_in_bg - unused as u32;\n   |                                           ^^^^^^^^^^^^^ help: try: `unused`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/balloc.rs:105:69\n    |\n105 |                 Ext4BlockGroup::load_new(self.block_device.clone(), &super_block, bgid as usize);\n    |                                                                     ^^^^^^^^^^^^ help: change this to: `super_block`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/balloc.rs:129:66\n    |\n129 |             let bmp_blk_adr = block_group.get_block_bitmap_block(&super_block);\n    |                                                                  ^^^^^^^^^^^^ help: change this to: `super_block`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/balloc.rs:136:64\n    |\n136 |                 block_group.set_block_group_balloc_bitmap_csum(&super_block, &bitmap_block.data);\n    |                                                                ^^^^^^^^^^^^ help: change this to: `super_block`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`u32` -> `u32`)\n   --> src/ext4_impls/balloc.rs:147:29\n    |\n147 |             let blk_in_bg = blocks_per_group as u32;\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `blocks_per_group`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/balloc.rs:153:68\n    |\n153 |                     block_group.set_block_group_balloc_bitmap_csum(&super_block, &bitmap_block.data);\n    |                                                                    ^^^^^^^^^^^^ help: change this to: `super_block`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/balloc.rs:166:64\n    |\n166 |                 block_group.set_block_group_balloc_bitmap_csum(&super_block, &bitmap_block.data);\n    |                                                                ^^^^^^^^^^^^ help: change this to: `super_block`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/balloc.rs:209:69\n    |\n209 |                 Ext4BlockGroup::load_new(self.block_device.clone(), &super_block, bgid as usize);\n    |                                                                     ^^^^^^^^^^^^ help: change this to: `super_block`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/balloc.rs:233:66\n    |\n233 |             let bmp_blk_adr = block_group.get_block_bitmap_block(&super_block);\n    |                                                                  ^^^^^^^^^^^^ help: change this to: `super_block`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/balloc.rs:240:64\n    |\n240 |                 block_group.set_block_group_balloc_bitmap_csum(&super_block, &bitmap_block.data);\n    |                                                                ^^^^^^^^^^^^ help: change this to: `super_block`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`u32` -> `u32`)\n   --> src/ext4_impls/balloc.rs:253:29\n    |\n253 |             let blk_in_bg = blocks_per_group as u32;\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `blocks_per_group`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/balloc.rs:259:68\n    |\n259 |                     block_group.set_block_group_balloc_bitmap_csum(&super_block, &bitmap_block.data);\n    |                                                                    ^^^^^^^^^^^^ help: change this to: `super_block`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/balloc.rs:274:64\n    |\n274 |                 block_group.set_block_group_balloc_bitmap_csum(&super_block, &bitmap_block.data);\n    |                                                                ^^^^^^^^^^^^ help: change this to: `super_block`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n   --> src/ext4_impls/balloc.rs:351:16\n    |\n351 |             if count as usize > free_cnt {\n    |                ^^^^^^^^^^^^^^ help: try: `count`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n   --> src/ext4_impls/balloc.rs:353:28\n    |\n353 |                 free_cnt = count as usize;\n    |                            ^^^^^^^^^^^^^^ help: try: `count`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/balloc.rs:356:33\n    |\n356 |             ext4_bmap_bits_free(&mut data, idx_in_bg as u32, free_cnt as u32);\n    |                                 ^^^^^^^^^ help: change this to: `data`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/balloc.rs:361:65\n    |\n361 |             bg.set_block_group_balloc_bitmap_csum(&super_block, &data);\n    |                                                                 ^^^^^ help: change this to: `data`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src/ext4_impls/balloc.rs:363:73\n    |\n363 |                 .write_offset(block_bitmap_block as usize * BLOCK_SIZE, &data);\n    |                                                                         ^^^^^ help: change this to: `data`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/ext4_impls/balloc.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n   --> src/ext4_impls/balloc.rs:375:30\n    |\n375 |             inode_blocks -= (free_cnt as usize * (BLOCK_SIZE / EXT4_INODE_BLOCK_SIZE)) as u64;\n    |                              ^^^^^^^^^^^^^^^^^ help: try: `free_cnt`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this function has too many arguments (14/7)\n  --> src/fuse_interface/mod.rs:38:5\n   |\n38 | /     pub fn fuse_setattr(\n39 | |         &self,\n40 | |         ino: u64,\n41 | |         mode: Option<u32>,\n...  |\n52 | |         flags: Option<u32>,\n53 | |     ) {\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\n   = note: `#[warn(clippy::too_many_arguments)]` on by default\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this function has too many arguments (8/7)\n   --> src/fuse_interface/mod.rs:141:5\n    |\n141 | /     pub fn fuse_mknod_with_attr(\n142 | |         &self,\n143 | |         parent: u64,\n144 | |         name: &str,\n...   |\n149 | |         gid: u32,\n150 | |     ) -> Result<Ext4InodeRef> {\n    | |_____________________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`u16` -> `u16`)\n   --> src/fuse_interface/mod.rs:191:68\n    |\n191 |         let inode_ref = self.create_with_attr(parent as u32, name, mode as u16, uid as u16, gid as u16)?;\n    |                                                                    ^^^^^^^^^^^ help: try: `mode`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`usize` -> `usize`)\n   --> src/fuse_interface/mod.rs:222:18\n    |\n222 |             &p[..len as usize],\n    |                  ^^^^^^^^^^^^ help: try: `len`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unneeded `return` statement\n   --> src/fuse_interface/mod.rs:247:9\n    |\n247 |         return Ok(EOK);\n    |         ^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\nhelp: remove `return`\n    |\n247 -         return Ok(EOK);\n247 +         Ok(EOK)\n    |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: casting to the same type is unnecessary (`u16` -> `u16`)\n   --> src/fuse_interface/mod.rs:261:63\n    |\n261 |         let inode_ref = self.create(parent as u32, link_name, mode as u16)?;\n    |                                                               ^^^^^^^^^^^ help: try: `mode`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Error)",
      "raw": "error: &-masking with zero\n   --> src/fuse_interface/mod.rs:308:12\n    |\n308 |         if (flags & O_RDONLY != 0) || (flags & O_RDWR != 0) {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bad_bit_mask\n    = note: `#[deny(clippy::bad_bit_mask)]` on by default\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this function has too many arguments (8/7)\n   --> src/fuse_interface/mod.rs:361:5\n    |\n361 | /     pub fn fuse_write(\n362 | |         &self,\n363 | |         ino: u64,\n364 | |         fh: u64,\n...   |\n369 | |         lock_owner: Option<u64>,\n370 | |     ) -> Result<usize> {\n    | |______________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Error)",
      "raw": "error: &-masking with zero\n   --> src/fuse_interface/mod.rs:450:16\n    |\n450 |             if (flags & O_RDONLY != 0) || (flags & O_RDWR != 0) {\n    |                ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bad_bit_mask\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this function has too many arguments (8/7)\n   --> src/fuse_interface/mod.rs:606:5\n    |\n606 | /     fn fuse_getlk(\n607 | |         &mut self,\n608 | |         ino: u64,\n609 | |         fh: u64,\n...   |\n614 | |         pid: u32,\n615 | |     ) {\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this function has too many arguments (9/7)\n   --> src/fuse_interface/mod.rs:626:5\n    |\n626 | /     fn fuse_setlk(\n627 | |         &mut self,\n628 | |         ino: u64,\n629 | |         fh: u64,\n...   |\n635 | |         sleep: bool,\n636 | |     ) {\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "src/fuse_interface/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this function has too many arguments (9/7)\n   --> src/fuse_interface/mod.rs:683:5\n    |\n683 | /     fn fuse_copy_file_range(\n684 | |         &mut self,\n685 | |         ino_in: u64,\n686 | |         fh_in: u64,\n...   |\n692 | |         flags: u32,\n693 | |     ) {\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\n\n"
    },
    {
      "cmd_idx": 58,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=ext4_rs, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_11/yuoo655/ext4_rs\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Checking bitflags v2.5.0\n    Checking log v0.4.21\n    Checking ext4_rs v1.1.0 (/home/runner/check/batch_11/yuoo655/ext4_rs)\nerror: could not compile `ext4_rs` (lib) due to 7 previous errors; 112 warnings emitted\n"
    }
  ]
}