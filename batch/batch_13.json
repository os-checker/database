{
  "env": {
    "tools": {
      "rust_toolchains": {
        "host": {
          "version": "1.83.0-nightly (18b1161ec 2024-10-02)",
          "commit_hash": "18b1161ec9eeab8927f91405bca0ddf59a4a26c9",
          "commit_date": "2024-10-02",
          "host": "x86_64-unknown-linux-gnu",
          "release": "1.83.0-nightly",
          "llvm_version": "19.1.0"
        },
        "installed": [
          {
            "channel": "nightly-x86_64-unknown-linux-gnu",
            "profile": null,
            "targets": [
              "aarch64-unknown-none",
              "aarch64-unknown-none-softfloat",
              "loongarch64-unknown-linux-gnu",
              "loongarch64-unknown-none",
              "riscv32imac-unknown-none-elf",
              "riscv64gc-unknown-none-elf",
              "riscv64imac-unknown-none-elf",
              "thumbv6m-none-eabi",
              "thumbv7em-none-eabi",
              "thumbv7em-none-eabihf",
              "thumbv7m-none-eabi",
              "thumbv8m.main-none-eabi",
              "thumbv8m.main-none-eabihf",
              "wasm32-unknown-unknown",
              "x86_64-unknown-linux-gnu",
              "x86_64-unknown-none"
            ],
            "components": [
              "cargo-x86_64-unknown-linux-gnu",
              "clippy-x86_64-unknown-linux-gnu",
              "rust-std-aarch64-unknown-none",
              "rust-std-aarch64-unknown-none-softfloat",
              "rust-std-loongarch64-unknown-linux-gnu",
              "rust-std-loongarch64-unknown-none",
              "rust-std-riscv32imac-unknown-none-elf",
              "rust-std-riscv64gc-unknown-none-elf",
              "rust-std-riscv64imac-unknown-none-elf",
              "rust-std-thumbv6m-none-eabi",
              "rust-std-thumbv7em-none-eabi",
              "rust-std-thumbv7em-none-eabihf",
              "rust-std-thumbv7m-none-eabi",
              "rust-std-thumbv8m.main-none-eabi",
              "rust-std-thumbv8m.main-none-eabihf",
              "rust-std-wasm32-unknown-unknown",
              "rust-std-x86_64-unknown-linux-gnu",
              "rust-std-x86_64-unknown-none",
              "rustc-x86_64-unknown-linux-gnu",
              "rustfmt-x86_64-unknown-linux-gnu"
            ],
            "toml_path": "/home/runner/check",
            "need_install_clippy": false,
            "peculiar_targets": null
          },
          {
            "channel": "nightly-2022-01-20",
            "profile": null,
            "targets": [],
            "components": null,
            "toml_path": "/home/runner/check/batch_13/kern-crates/zcore-zircon-user/rust-toolchain.toml",
            "need_install_clippy": false,
            "peculiar_targets": [
              "x86_64-fuchsia"
            ]
          },
          {
            "channel": "nightly-2024-01-18",
            "profile": "minimal",
            "targets": [
              "aarch64-unknown-none-softfloat",
              "riscv64gc-unknown-none-elf",
              "x86_64-unknown-none"
            ],
            "components": [
              "rust-src",
              "llvm-tools-preview",
              "rustfmt",
              "clippy"
            ],
            "toml_path": "/home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/rust-toolchain.toml",
            "need_install_clippy": false,
            "peculiar_targets": null
          }
        ]
      },
      "os_checker": {
        "start": 1727966139323,
        "finish": 1727966283408,
        "duration_ms": 144085,
        "git_time": "2024-10-03 21:48:13 +0800",
        "git_sha": "1f4dbb7cf06d05bfe6c23c2d9e604eeb8b056de2"
      }
    },
    "kinds": {
      "order": [
        "Cargo",
        "Clippy(Error)",
        "Clippy(Warn)",
        "Mirai",
        "Lockbud(Probably)",
        "Lockbud(Possibly)",
        "Unformatted"
      ],
      "mapping": {
        "cargo": [
          "Cargo"
        ],
        "clippy": [
          "Clippy(Error)",
          "Clippy(Warn)"
        ],
        "mirai": [
          "Mirai"
        ],
        "lockbud": [
          "Lockbud(Probably)",
          "Lockbud(Possibly)"
        ],
        "fmt": [
          "Unformatted"
        ]
      }
    },
    "repos": [
      {
        "user": "kern-crates",
        "repo": "zcore-linux-syscall"
      },
      {
        "user": "kern-crates",
        "repo": "zcore-loader"
      },
      {
        "user": "kern-crates",
        "repo": "zcore-tests"
      },
      {
        "user": "kern-crates",
        "repo": "zcore-zircon-object"
      },
      {
        "user": "kern-crates",
        "repo": "zcore-zircon-syscall"
      },
      {
        "user": "kern-crates",
        "repo": "zcore-zircon-user"
      },
      {
        "user": "shilei-massclouds",
        "repo": "arch_boot"
      },
      {
        "user": "shilei-massclouds",
        "repo": "axdtb"
      }
    ],
    "packages": [
      {
        "name": "linux-syscall",
        "repo": {
          "repo_idx": 0,
          "user": "kern-crates",
          "repo": "zcore-linux-syscall"
        }
      },
      {
        "name": "zcore-loader",
        "repo": {
          "repo_idx": 1,
          "user": "kern-crates",
          "repo": "zcore-loader"
        }
      },
      {
        "name": "uart",
        "repo": {
          "repo_idx": 2,
          "user": "kern-crates",
          "repo": "zcore-tests"
        }
      },
      {
        "name": "zircon-object",
        "repo": {
          "repo_idx": 3,
          "user": "kern-crates",
          "repo": "zcore-zircon-object"
        }
      },
      {
        "name": "zircon-syscall",
        "repo": {
          "repo_idx": 4,
          "user": "kern-crates",
          "repo": "zcore-zircon-syscall"
        }
      },
      {
        "name": "zircon-user",
        "repo": {
          "repo_idx": 5,
          "user": "kern-crates",
          "repo": "zcore-zircon-user"
        }
      },
      {
        "name": "arch_boot",
        "repo": {
          "repo_idx": 6,
          "user": "shilei-massclouds",
          "repo": "arch_boot"
        }
      },
      {
        "name": "axdtb",
        "repo": {
          "repo_idx": 7,
          "user": "shilei-massclouds",
          "repo": "axdtb"
        }
      },
      {
        "name": "rt_axdtb",
        "repo": {
          "repo_idx": 7,
          "user": "shilei-massclouds",
          "repo": "axdtb"
        }
      }
    ]
  },
  "cmd": [
    {
      "package_idx": 0,
      "tool": "fmt",
      "cmd": "cargo +nightly-x86_64-unknown-linux-gnu fmt -p linux-syscall -- --emit=json",
      "count": 1,
      "duration_ms": 124,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 1770,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "mirai",
      "cmd": "cargo +nightly-2023-12-30 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 340,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 353,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 1770,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 353,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "fmt",
      "cmd": "cargo +nightly-x86_64-unknown-linux-gnu fmt -p zcore-loader -- --emit=json",
      "count": 1,
      "duration_ms": 101,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 931,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "mirai",
      "cmd": "cargo +nightly-2023-12-30 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 300,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 338,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 931,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 338,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "fmt",
      "cmd": "cargo +nightly-x86_64-unknown-linux-gnu fmt -p uart -- --emit=json",
      "count": 0,
      "duration_ms": 94,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "fmt",
      "cmd": "cargo +nightly-x86_64-unknown-linux-gnu fmt -p uart -- --emit=json",
      "count": 0,
      "duration_ms": 93,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-musl",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 3,
      "duration_ms": 1191,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-musl --no-deps --message-format=json",
      "count": 3,
      "duration_ms": 824,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-musl",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "mirai",
      "cmd": "cargo +nightly-2023-12-30 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 46,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 1385,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-musl",
      "count": 0,
      "duration_ms": 1085,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-musl",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 1191,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 824,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-musl",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 1385,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 1085,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-musl",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "fmt",
      "cmd": "cargo +nightly-x86_64-unknown-linux-gnu fmt -p zircon-object -- --emit=json",
      "count": 0,
      "duration_ms": 199,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 2,
      "duration_ms": 6976,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "mirai",
      "cmd": "cargo +nightly-2023-12-30 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 48,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 1,
      "duration_ms": 7520,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 6976,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 7520,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "fmt",
      "cmd": "cargo +nightly-x86_64-unknown-linux-gnu fmt -p zircon-syscall -- --emit=json",
      "count": 0,
      "duration_ms": 135,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 2,
      "duration_ms": 5567,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "mirai",
      "cmd": "cargo +nightly-2023-12-30 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 46,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 1,
      "duration_ms": 7236,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 5567,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 7236,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "fmt",
      "cmd": "cargo +nightly-x86_64-unknown-linux-gnu fmt -p zircon-user -- --emit=json",
      "count": 0,
      "duration_ms": 92,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2022-01-20",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 283,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2022-01-20",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "mirai",
      "cmd": "cargo +nightly-2023-12-30 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 259,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2022-01-20",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 149,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2022-01-20",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "fmt",
      "cmd": "cargo +nightly-x86_64-unknown-linux-gnu fmt -p arch_boot -- --emit=json",
      "count": 6,
      "duration_ms": 97,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 6,
      "duration_ms": 5145,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "mirai",
      "cmd": "cargo +nightly-2023-12-30 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 45,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 1,
      "duration_ms": 6184,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "fmt",
      "cmd": "cargo +nightly-x86_64-unknown-linux-gnu fmt -p axdtb -- --emit=json",
      "count": 26,
      "duration_ms": 96,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "fmt",
      "cmd": "cargo +nightly-x86_64-unknown-linux-gnu fmt -p axdtb -- --emit=json",
      "count": 26,
      "duration_ms": 97,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 4,
      "duration_ms": 4066,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 4,
      "duration_ms": 329,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "mirai",
      "cmd": "cargo +nightly-2023-12-30 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 46,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 4222,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 0,
      "duration_ms": 314,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-02",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "fmt",
      "cmd": "cargo +nightly-x86_64-unknown-linux-gnu fmt -p rt_axdtb -- --emit=json",
      "count": 5,
      "duration_ms": 95,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "fmt",
      "cmd": "cargo +nightly-x86_64-unknown-linux-gnu fmt -p rt_axdtb -- --emit=json",
      "count": 5,
      "duration_ms": 96,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "fmt",
      "cmd": "cargo +nightly-x86_64-unknown-linux-gnu fmt -p rt_axdtb -- --emit=json",
      "count": 5,
      "duration_ms": 97,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "clippy",
      "cmd": "cargo clippy --target aarch64-unknown-none-softfloat --no-deps --message-format=json",
      "count": 6,
      "duration_ms": 12405,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 5,
      "duration_ms": 1052,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-none --no-deps --message-format=json",
      "count": 6,
      "duration_ms": 2419,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target aarch64-unknown-none-softfloat",
      "count": 1,
      "duration_ms": 8216,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 1,
      "duration_ms": 833,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-none",
      "count": 1,
      "duration_ms": 3141,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 12405,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 1052,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 2419,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 8216,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 833,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 3141,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    }
  ],
  "data": [
    {
      "cmd_idx": 0,
      "file": "src/file/poll.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/kern-crates/zcore-linux-syscall/src/file/poll.rs (original lines from 9 to 9)\n-use bitvec::prelude::{BitVec, Lsb0, BitSlice};\n+use bitvec::prelude::{BitSlice, BitVec, Lsb0};\n"
    },
    {
      "cmd_idx": 4,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=linux-syscall, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_13/kern-crates/zcore-linux-syscall\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Updating crates.io index\n    Updating git repository `https://github.com/kern-crates/zcore-kernel-hal.git`\n    Updating git repository `https://github.com/kern-crates/zcore-linux-object.git`\n    Updating git repository `https://github.com/DeathWish5/kernel-sync`\n    Updating git repository `https://github.com/rcore-os/rcore-fs`\n    Updating git repository `https://github.com/kern-crates/zcore-zircon-object.git`\n    Updating git repository `https://github.com/smoltcp-rs/smoltcp`\n    Updating git repository `https://github.com/kern-crates/zcore-drivers.git`\n    Updating git repository `https://github.com/rcore-os/x86-smpboot`\n    Updating git repository `https://github.com/DeathWish5/PreemptiveScheduler`\n    Updating git repository `https://github.com/rust-embedded/riscv`\n    Updating git repository `https://github.com/rzswh/region-allocator`\n    Updating git repository `https://github.com/rcore-os/bitmap-allocator.git`\n    Updating git repository `https://github.com/rcore-os/device_tree-rs`\n    Updating git repository `https://github.com/rcore-os/isomorphic_drivers`\n    Updating git repository `https://github.com/elliott10/pci-rs`\n    Updating git repository `https://github.com/rcore-os/virtio-drivers`\n    Updating git repository `https://github.com/pleasewhy/unicycle`\n    Updating git repository `https://github.com/pleasewhy/uniset`\nerror: failed to select a version for the requirement `funty = \"~1.2\"`\ncandidate versions found which didn't match: 3.0.0-rc2, 3.0.0-rc1, 2.0.0, ...\nlocation searched: crates.io index\nrequired by package `bitvec v0.22.0`\n    ... which satisfies dependency `bitvec = \"^0.22\"` of package `rcore-fs-sfs v0.1.0 (https://github.com/rcore-os/rcore-fs?rev=1a3246b#1a3246b1)`\n    ... which satisfies git dependency `rcore-fs-sfs` of package `linux-object v0.1.0 (https://github.com/kern-crates/zcore-linux-object.git?rev=1304b7e1#1304b7e1)`\n    ... which satisfies git dependency `linux-object` of package `linux-syscall v0.1.0 (/home/runner/check/batch_13/kern-crates/zcore-linux-syscall)`\nif you are looking for the prerelease package it needs to be specified explicitly\n    funty = { version = \"3.0.0-rc2\" }\n"
    },
    {
      "cmd_idx": 5,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=linux-syscall, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_13/kern-crates/zcore-linux-syscall\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n    Updating crates.io index\n    Updating git repository `https://github.com/kern-crates/zcore-kernel-hal.git`\n    Updating git repository `https://github.com/kern-crates/zcore-linux-object.git`\n    Updating git repository `https://github.com/DeathWish5/kernel-sync`\n    Updating git repository `https://github.com/rcore-os/rcore-fs`\n    Updating git repository `https://github.com/kern-crates/zcore-zircon-object.git`\n    Updating git repository `https://github.com/smoltcp-rs/smoltcp`\n    Updating git repository `https://github.com/kern-crates/zcore-drivers.git`\n    Updating git repository `https://github.com/rcore-os/x86-smpboot`\n    Updating git repository `https://github.com/DeathWish5/PreemptiveScheduler`\n    Updating git repository `https://github.com/rust-embedded/riscv`\n    Updating git repository `https://github.com/rzswh/region-allocator`\n    Updating git repository `https://github.com/rcore-os/bitmap-allocator.git`\n    Updating git repository `https://github.com/rcore-os/device_tree-rs`\n    Updating git repository `https://github.com/rcore-os/isomorphic_drivers`\n    Updating git repository `https://github.com/elliott10/pci-rs`\n    Updating git repository `https://github.com/rcore-os/virtio-drivers`\n    Updating git repository `https://github.com/pleasewhy/unicycle`\n    Updating git repository `https://github.com/pleasewhy/uniset`\nerror: failed to select a version for the requirement `funty = \"~1.2\"`\ncandidate versions found which didn't match: 3.0.0-rc2, 3.0.0-rc1, 2.0.0, ...\nlocation searched: crates.io index\nrequired by package `bitvec v0.22.0`\n    ... which satisfies dependency `bitvec = \"^0.22\"` of package `rcore-fs-sfs v0.1.0 (https://github.com/rcore-os/rcore-fs?rev=1a3246b#1a3246b1)`\n    ... which satisfies git dependency `rcore-fs-sfs` of package `linux-object v0.1.0 (https://github.com/kern-crates/zcore-linux-object.git?rev=1304b7e1#1304b7e1)`\n    ... which satisfies git dependency `linux-object` of package `linux-syscall v0.1.0 (/home/runner/check/batch_13/kern-crates/zcore-linux-syscall)`\nif you are looking for the prerelease package it needs to be specified explicitly\n    funty = { version = \"3.0.0-rc2\" }\nperhaps a crate was updated and forgotten to be re-vendored?\n"
    },
    {
      "cmd_idx": 6,
      "file": "src/zircon.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/kern-crates/zcore-loader/src/zircon.rs (original lines from 95 to 95)\n-pub fn run_userboot(zbi: impl AsRef<[u8]>, userboot: &[u8], vdso: &[u8], cmdline: &str) -> Arc<Process> {\n+pub fn run_userboot(\n+    zbi: impl AsRef<[u8]>,\n+    userboot: &[u8],\n+    vdso: &[u8],\n+    cmdline: &str,\n+) -> Arc<Process> {\n"
    },
    {
      "cmd_idx": 10,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=zcore-loader, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_13/kern-crates/zcore-loader\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Updating crates.io index\n    Updating git repository `https://github.com/DeathWish5/PreemptiveScheduler`\n    Updating git repository `https://github.com/kern-crates/zcore-kernel-hal.git`\n    Updating git repository `https://github.com/kern-crates/zcore-linux-object.git`\n    Updating git repository `https://github.com/kern-crates/zcore-linux-syscall.git`\n    Updating git repository `https://github.com/kern-crates/zcore-zircon-object.git`\n    Updating git repository `https://github.com/kern-crates/zcore-zircon-syscall.git`\n    Updating git repository `https://github.com/rcore-os/rcore-fs`\n    Updating git repository `https://github.com/pleasewhy/unicycle`\n    Updating git repository `https://github.com/rcore-os/bitmap-allocator.git`\n    Updating git repository `https://github.com/DeathWish5/kernel-sync`\n    Updating git repository `https://github.com/smoltcp-rs/smoltcp`\n    Updating git repository `https://github.com/kern-crates/zcore-drivers.git`\n    Updating git repository `https://github.com/rcore-os/x86-smpboot`\n    Updating git repository `https://github.com/rzswh/region-allocator`\n    Updating git repository `https://github.com/pleasewhy/uniset`\n    Updating git repository `https://github.com/rust-embedded/riscv`\n    Updating git repository `https://github.com/rcore-os/device_tree-rs`\n    Updating git repository `https://github.com/rcore-os/isomorphic_drivers`\n    Updating git repository `https://github.com/elliott10/pci-rs`\n    Updating git repository `https://github.com/rcore-os/virtio-drivers`\nerror: failed to select a version for the requirement `funty = \"~1.2\"`\ncandidate versions found which didn't match: 3.0.0-rc2, 3.0.0-rc1, 2.0.0, ...\nlocation searched: crates.io index\nrequired by package `bitvec v0.22.0`\n    ... which satisfies dependency `bitvec = \"^0.22\"` of package `rcore-fs-sfs v0.1.0 (https://github.com/rcore-os/rcore-fs?rev=1a3246b#1a3246b1)`\n    ... which satisfies git dependency `rcore-fs-sfs` of package `linux-object v0.1.0 (https://github.com/kern-crates/zcore-linux-object.git?rev=1304b7e1#1304b7e1)`\n    ... which satisfies git dependency `linux-object` of package `zcore-loader v0.1.0 (/home/runner/check/batch_13/kern-crates/zcore-loader)`\nif you are looking for the prerelease package it needs to be specified explicitly\n    funty = { version = \"3.0.0-rc2\" }\n"
    },
    {
      "cmd_idx": 11,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=zcore-loader, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_13/kern-crates/zcore-loader\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n    Updating crates.io index\n    Updating git repository `https://github.com/DeathWish5/PreemptiveScheduler`\n    Updating git repository `https://github.com/kern-crates/zcore-kernel-hal.git`\n    Updating git repository `https://github.com/kern-crates/zcore-linux-object.git`\n    Updating git repository `https://github.com/kern-crates/zcore-linux-syscall.git`\n    Updating git repository `https://github.com/kern-crates/zcore-zircon-object.git`\n    Updating git repository `https://github.com/kern-crates/zcore-zircon-syscall.git`\n    Updating git repository `https://github.com/rcore-os/rcore-fs`\n    Updating git repository `https://github.com/pleasewhy/unicycle`\n    Updating git repository `https://github.com/rcore-os/bitmap-allocator.git`\n    Updating git repository `https://github.com/DeathWish5/kernel-sync`\n    Updating git repository `https://github.com/smoltcp-rs/smoltcp`\n    Updating git repository `https://github.com/kern-crates/zcore-drivers.git`\n    Updating git repository `https://github.com/rcore-os/x86-smpboot`\n    Updating git repository `https://github.com/rzswh/region-allocator`\n    Updating git repository `https://github.com/pleasewhy/uniset`\n    Updating git repository `https://github.com/rust-embedded/riscv`\n    Updating git repository `https://github.com/rcore-os/device_tree-rs`\n    Updating git repository `https://github.com/rcore-os/isomorphic_drivers`\n    Updating git repository `https://github.com/elliott10/pci-rs`\n    Updating git repository `https://github.com/rcore-os/virtio-drivers`\nerror: failed to select a version for the requirement `funty = \"~1.2\"`\ncandidate versions found which didn't match: 3.0.0-rc2, 3.0.0-rc1, 2.0.0, ...\nlocation searched: crates.io index\nrequired by package `bitvec v0.22.0`\n    ... which satisfies dependency `bitvec = \"^0.22\"` of package `rcore-fs-sfs v0.1.0 (https://github.com/rcore-os/rcore-fs?rev=1a3246b#1a3246b1)`\n    ... which satisfies git dependency `rcore-fs-sfs` of package `linux-object v0.1.0 (https://github.com/kern-crates/zcore-linux-object.git?rev=1304b7e1#1304b7e1)`\n    ... which satisfies git dependency `linux-object` of package `zcore-loader v0.1.0 (/home/runner/check/batch_13/kern-crates/zcore-loader)`\nif you are looking for the prerelease package it needs to be specified explicitly\n    funty = { version = \"3.0.0-rc2\" }\nperhaps a crate was updated and forgotten to be re-vendored?\n"
    },
    {
      "cmd_idx": 14,
      "file": "src/main.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0432]: unresolved imports `nix::fcntl::open`, `nix::fcntl::OFlag`, `nix::sys::stat`\n   --> src/main.rs:2:13\n    |\n2   |     fcntl::{open, OFlag},\n    |             ^^^^  ^^^^^ no `OFlag` in `fcntl`\n    |             |\n    |             no `open` in `fcntl`\n3   |     sys::stat::Mode,\n    |          ^^^^ could not find `stat` in `sys`\n    |\nnote: found an item that was configured out\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/fcntl.rs:220:8\n    |\n220 | pub fn open<P: ?Sized + NixPath>(\n    |        ^^^^\nnote: the item is gated behind the `fs` feature\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/fcntl.rs:212:4\n    |\n212 | #![feature = \"fs\"]\n    |    ^^^^^^^\nnote: found an item that was configured out\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/sys/mod.rs:128:13\n    |\n128 |     pub mod stat;\n    |             ^^^^\nnote: the item is gated behind the `fs` feature\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/sys/mod.rs:126:8\n    |\n126 |     #![feature = \"fs\"]\n    |        ^^^^^^^\n\n"
    },
    {
      "cmd_idx": 14,
      "file": "src/main.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0432]: unresolved imports `nix::fcntl::open`, `nix::fcntl::OFlag`, `nix::sys::stat`\n   --> src/main.rs:2:13\n    |\n2   |     fcntl::{open, OFlag},\n    |             ^^^^  ^^^^^ no `OFlag` in `fcntl`\n    |             |\n    |             no `open` in `fcntl`\n3   |     sys::stat::Mode,\n    |          ^^^^ could not find `stat` in `sys`\n    |\nnote: found an item that was configured out\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/fcntl.rs:220:8\n    |\n220 | pub fn open<P: ?Sized + NixPath>(\n    |        ^^^^\nnote: the item is gated behind the `fs` feature\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/fcntl.rs:212:4\n    |\n212 | #![feature = \"fs\"]\n    |    ^^^^^^^\nnote: found an item that was configured out\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/sys/mod.rs:128:13\n    |\n128 |     pub mod stat;\n    |             ^^^^\nnote: the item is gated behind the `fs` feature\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/sys/mod.rs:126:8\n    |\n126 |     #![feature = \"fs\"]\n    |        ^^^^^^^\n\n"
    },
    {
      "cmd_idx": 14,
      "file": "src/main.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0432]: unresolved imports `nix::fcntl::open`, `nix::fcntl::OFlag`, `nix::sys::stat`\n   --> src/main.rs:2:13\n    |\n2   |     fcntl::{open, OFlag},\n    |             ^^^^  ^^^^^ no `OFlag` in `fcntl`\n    |             |\n    |             no `open` in `fcntl`\n3   |     sys::stat::Mode,\n    |          ^^^^ could not find `stat` in `sys`\n    |\nnote: found an item that was configured out\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/fcntl.rs:220:8\n    |\n220 | pub fn open<P: ?Sized + NixPath>(\n    |        ^^^^\nnote: the item is gated behind the `fs` feature\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/fcntl.rs:212:4\n    |\n212 | #![feature = \"fs\"]\n    |    ^^^^^^^\nnote: found an item that was configured out\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/sys/mod.rs:128:13\n    |\n128 |     pub mod stat;\n    |             ^^^^\nnote: the item is gated behind the `fs` feature\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/sys/mod.rs:126:8\n    |\n126 |     #![feature = \"fs\"]\n    |        ^^^^^^^\n\n"
    },
    {
      "cmd_idx": 15,
      "file": "src/main.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0432]: unresolved imports `nix::fcntl::open`, `nix::fcntl::OFlag`, `nix::sys::stat`\n   --> src/main.rs:2:13\n    |\n2   |     fcntl::{open, OFlag},\n    |             ^^^^  ^^^^^ no `OFlag` in `fcntl`\n    |             |\n    |             no `open` in `fcntl`\n3   |     sys::stat::Mode,\n    |          ^^^^ could not find `stat` in `sys`\n    |\nnote: found an item that was configured out\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/fcntl.rs:220:8\n    |\n220 | pub fn open<P: ?Sized + NixPath>(\n    |        ^^^^\nnote: the item is gated behind the `fs` feature\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/fcntl.rs:212:4\n    |\n212 | #![feature = \"fs\"]\n    |    ^^^^^^^\nnote: found an item that was configured out\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/sys/mod.rs:128:13\n    |\n128 |     pub mod stat;\n    |             ^^^^\nnote: the item is gated behind the `fs` feature\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/sys/mod.rs:126:8\n    |\n126 |     #![feature = \"fs\"]\n    |        ^^^^^^^\n\n"
    },
    {
      "cmd_idx": 15,
      "file": "src/main.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0432]: unresolved imports `nix::fcntl::open`, `nix::fcntl::OFlag`, `nix::sys::stat`\n   --> src/main.rs:2:13\n    |\n2   |     fcntl::{open, OFlag},\n    |             ^^^^  ^^^^^ no `OFlag` in `fcntl`\n    |             |\n    |             no `open` in `fcntl`\n3   |     sys::stat::Mode,\n    |          ^^^^ could not find `stat` in `sys`\n    |\nnote: found an item that was configured out\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/fcntl.rs:220:8\n    |\n220 | pub fn open<P: ?Sized + NixPath>(\n    |        ^^^^\nnote: the item is gated behind the `fs` feature\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/fcntl.rs:212:4\n    |\n212 | #![feature = \"fs\"]\n    |    ^^^^^^^\nnote: found an item that was configured out\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/sys/mod.rs:128:13\n    |\n128 |     pub mod stat;\n    |             ^^^^\nnote: the item is gated behind the `fs` feature\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/sys/mod.rs:126:8\n    |\n126 |     #![feature = \"fs\"]\n    |        ^^^^^^^\n\n"
    },
    {
      "cmd_idx": 15,
      "file": "src/main.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0432]: unresolved imports `nix::fcntl::open`, `nix::fcntl::OFlag`, `nix::sys::stat`\n   --> src/main.rs:2:13\n    |\n2   |     fcntl::{open, OFlag},\n    |             ^^^^  ^^^^^ no `OFlag` in `fcntl`\n    |             |\n    |             no `open` in `fcntl`\n3   |     sys::stat::Mode,\n    |          ^^^^ could not find `stat` in `sys`\n    |\nnote: found an item that was configured out\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/fcntl.rs:220:8\n    |\n220 | pub fn open<P: ?Sized + NixPath>(\n    |        ^^^^\nnote: the item is gated behind the `fs` feature\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/fcntl.rs:212:4\n    |\n212 | #![feature = \"fs\"]\n    |    ^^^^^^^\nnote: found an item that was configured out\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/sys/mod.rs:128:13\n    |\n128 |     pub mod stat;\n    |             ^^^^\nnote: the item is gated behind the `fs` feature\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/sys/mod.rs:126:8\n    |\n126 |     #![feature = \"fs\"]\n    |        ^^^^^^^\n\n"
    },
    {
      "cmd_idx": 19,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=uart, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_13/kern-crates/zcore-tests/testcases/src/uart\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Updating crates.io index\n     Locking 5 packages to latest compatible versions\n   Compiling cfg_aliases v0.2.1\n   Compiling libc v0.2.159\n    Checking bitflags v2.6.0\n    Checking cfg-if v1.0.0\n   Compiling nix v0.29.0\n    Checking uart v0.1.0 (/home/runner/check/batch_13/kern-crates/zcore-tests/testcases/src/uart)\nerror: could not compile `uart` (bin \"uart\") due to 1 previous error\n"
    },
    {
      "cmd_idx": 20,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=uart, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-musl\n// pkg_dir=/home/runner/check/batch_13/kern-crates/zcore-tests/testcases/src/uart\n// cmd=cargo clippy --target x86_64-unknown-linux-musl --no-deps --message-format=json\n   Compiling libc v0.2.159\n    Checking cfg-if v1.0.0\n    Checking bitflags v2.6.0\n   Compiling nix v0.29.0\n    Checking uart v0.1.0 (/home/runner/check/batch_13/kern-crates/zcore-tests/testcases/src/uart)\nerror: could not compile `uart` (bin \"uart\") due to 1 previous error\n"
    },
    {
      "cmd_idx": 21,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=uart, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_13/kern-crates/zcore-tests/testcases/src/uart\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n   Compiling cfg_aliases v0.2.1\n   Compiling libc v0.2.159\n   Compiling bitflags v2.6.0\n   Compiling cfg-if v1.0.0\n   Compiling nix v0.29.0\n   Compiling uart v0.1.0 (/home/runner/check/batch_13/kern-crates/zcore-tests/testcases/src/uart)\nerror[E0432]: unresolved imports `nix::fcntl::open`, `nix::fcntl::OFlag`, `nix::sys::stat`\n   --> src/main.rs:2:13\n    |\n2   |     fcntl::{open, OFlag},\n    |             ^^^^  ^^^^^ no `OFlag` in `fcntl`\n    |             |\n    |             no `open` in `fcntl`\n3   |     sys::stat::Mode,\n    |          ^^^^ could not find `stat` in `sys`\n    |\nnote: found an item that was configured out\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/fcntl.rs:220:8\n    |\n220 | pub fn open<P: ?Sized + NixPath>(\n    |        ^^^^\n    = note: the item is gated behind the `fs` feature\nnote: found an item that was configured out\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/sys/mod.rs:128:13\n    |\n128 |     pub mod stat;\n    |             ^^^^\n    = note: the item is gated behind the `fs` feature\n\nFor more information about this error, try `rustc --explain E0432`.\nerror: could not compile `uart` (bin \"uart\") due to 1 previous error\n"
    },
    {
      "cmd_idx": 22,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=uart, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-musl\n// pkg_dir=/home/runner/check/batch_13/kern-crates/zcore-tests/testcases/src/uart\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-musl\n   Compiling libc v0.2.159\n   Compiling nix v0.29.0\n   Compiling cfg-if v1.0.0\n   Compiling bitflags v2.6.0\n   Compiling uart v0.1.0 (/home/runner/check/batch_13/kern-crates/zcore-tests/testcases/src/uart)\nerror[E0432]: unresolved imports `nix::fcntl::open`, `nix::fcntl::OFlag`, `nix::sys::stat`\n   --> src/main.rs:2:13\n    |\n2   |     fcntl::{open, OFlag},\n    |             ^^^^  ^^^^^ no `OFlag` in `fcntl`\n    |             |\n    |             no `open` in `fcntl`\n3   |     sys::stat::Mode,\n    |          ^^^^ could not find `stat` in `sys`\n    |\nnote: found an item that was configured out\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/fcntl.rs:220:8\n    |\n220 | pub fn open<P: ?Sized + NixPath>(\n    |        ^^^^\n    = note: the item is gated behind the `fs` feature\nnote: found an item that was configured out\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.29.0/src/sys/mod.rs:128:13\n    |\n128 |     pub mod stat;\n    |             ^^^^\n    = note: the item is gated behind the `fs` feature\n\nFor more information about this error, try `rustc --explain E0432`.\nerror: could not compile `uart` (bin \"uart\") due to 1 previous error\n"
    },
    {
      "cmd_idx": 24,
      "file": "/home/runner/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0635]: unknown feature `btree_drain_filter`\n --> /home/runner/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs:2:12\n  |\n2 | #![feature(btree_drain_filter)]\n  |            ^^^^^^^^^^^^^^^^^^\n\n"
    },
    {
      "cmd_idx": 24,
      "file": "/home/runner/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0599]: no method named `drain_filter` found for struct `BTreeSet` in the current scope\n   --> /home/runner/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs:120:14\n    |\n119 | /         self.regions\n120 | |             .drain_filter(|r| {\n    | |             -^^^^^^^^^^^^ method not found in `BTreeSet<Region>`\n    | |_____________|\n    |\n\n"
    },
    {
      "cmd_idx": 26,
      "file": "Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-10-03T14:36:18Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-03T14:36:18Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 27,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=zircon-object, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_13/kern-crates/zcore-zircon-object\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Updating crates.io index\n    Updating git repository `https://github.com/kern-crates/zcore-kernel-hal.git`\n    Updating git repository `https://github.com/DeathWish5/kernel-sync`\n    Updating git repository `https://github.com/rzswh/region-allocator`\n    Updating git repository `https://github.com/rcore-os/bitmap-allocator.git`\n    Updating git repository `https://github.com/smoltcp-rs/smoltcp`\n    Updating git repository `https://github.com/kern-crates/zcore-drivers.git`\n    Updating git repository `https://github.com/rcore-os/x86-smpboot`\n    Updating git repository `https://github.com/DeathWish5/PreemptiveScheduler`\n    Updating git repository `https://github.com/rust-embedded/riscv`\n    Updating git repository `https://github.com/rcore-os/device_tree-rs`\n    Updating git repository `https://github.com/rcore-os/isomorphic_drivers`\n    Updating git repository `https://github.com/elliott10/pci-rs`\n    Updating git repository `https://github.com/rcore-os/virtio-drivers`\n    Updating git repository `https://github.com/pleasewhy/unicycle`\n    Updating git repository `https://github.com/pleasewhy/uniset`\n     Locking 154 packages to latest compatible versions\n      Adding bitflags v1.3.2 (available: v2.6.0)\n      Adding hashbrown v0.9.1 (available: v0.15.0)\n      Adding xmas-elf v0.7.0 (available: v0.9.1)\n Downloading crates ...\n  Downloaded hashbrown v0.9.1\n  Downloaded downcast-rs v1.2.1\n  Downloaded ahash v0.4.8\n    Checking bitflags v1.3.2\n   Compiling proc-macro2 v1.0.86\n    Checking bit_field v0.10.2\n   Compiling autocfg v1.4.0\n   Compiling unicode-ident v1.0.13\n    Checking value-bag v1.9.0\n   Compiling rustversion v1.0.17\n    Checking log v0.4.22\n    Checking scopeguard v1.2.0\n    Checking raw-cpuid v10.7.0\n   Compiling lock_api v0.4.12\n   Compiling quote v1.0.37\n   Compiling syn v2.0.79\n    Checking bitflags v2.6.0\n    Checking volatile v0.4.6\n    Checking spin v0.9.8\n    Checking x86_64 v0.14.12\n   Compiling paste v1.0.15\n    Checking volatile v0.3.0\n    Checking rsdp v2.0.1\n    Checking managed v0.8.0\n    Checking byteorder v1.5.0\n   Compiling x86 v0.46.0\n    Checking cfg-if v1.0.0\n    Checking futures-sink v0.3.30\n    Checking bit v0.1.1\n   Compiling trapframe v0.9.0\n    Checking futures-core v0.3.30\n    Checking smoltcp v0.8.0 (https://github.com/smoltcp-rs/smoltcp?rev=35e833e3#35e833e3)\n    Checking acpi v4.1.1\n    Checking virtio-drivers v0.1.0 (https://github.com/rcore-os/virtio-drivers?rev=2aaf7d6#2aaf7d60)\n    Checking x2apic v0.4.3\n    Checking lock v0.1.0 (https://github.com/DeathWish5/kernel-sync?rev=8486b8#8486b817)\n    Checking isomorphic_drivers v0.1.0 (https://github.com/rcore-os/isomorphic_drivers?rev=f7cd97a8#f7cd97a8)\n    Checking lazy_static v1.5.0\n    Checking pci v0.0.1 (https://github.com/elliott10/pci-rs?rev=8f33774b#8f33774b)\n    Checking bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a5#88e871a5)\n    Checking futures-task v0.3.30\n    Checking device_tree v1.0.3 (https://github.com/rcore-os/device_tree-rs?rev=2f2e55f#2f2e55fb)\n    Checking pin-utils v0.1.0\n    Checking numeric-enum-macro v0.2.0\n    Checking pin-project-lite v0.2.14\n    Checking futures-channel v0.3.30\n    Checking futures-io v0.3.30\n    Checking ahash v0.4.8\n    Checking hashbrown v0.9.1\n    Checking zcore-drivers v0.1.0 (https://github.com/kern-crates/zcore-drivers.git?rev=91c574e0#91c574e0)\n    Checking region-alloc v0.1.0 (https://github.com/rzswh/region-allocator?rev=122c7a71#122c7a71)\nerror: could not compile `region-alloc` (lib) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 28,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=zircon-object, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_13/kern-crates/zcore-zircon-object\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n   Compiling bitflags v1.3.2\n   Compiling bit_field v0.10.2\n   Compiling proc-macro2 v1.0.86\n   Compiling unicode-ident v1.0.13\n   Compiling value-bag v1.9.0\n   Compiling autocfg v1.4.0\n   Compiling rustversion v1.0.17\n   Compiling log v0.4.22\n   Compiling scopeguard v1.2.0\n[2024-10-03T14:36:18Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-03T14:36:18Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling raw-cpuid v10.7.0\n   Compiling lock_api v0.4.12\n   Compiling quote v1.0.37\n   Compiling syn v2.0.79\n   Compiling volatile v0.4.6\n   Compiling bitflags v2.6.0\n   Compiling spin v0.9.8\n   Compiling x86_64 v0.14.12\n   Compiling paste v1.0.15\n   Compiling volatile v0.3.0\n   Compiling rsdp v2.0.1\n   Compiling trapframe v0.9.0\n   Compiling futures-core v0.3.30\n   Compiling x86 v0.46.0\n   Compiling bit v0.1.1\n   Compiling byteorder v1.5.0\n   Compiling managed v0.8.0\n   Compiling futures-sink v0.3.30\n   Compiling cfg-if v1.0.0\n   Compiling smoltcp v0.8.0 (https://github.com/smoltcp-rs/smoltcp?rev=35e833e3#35e833e3)\n   Compiling acpi v4.1.1\n   Compiling lock v0.1.0 (https://github.com/DeathWish5/kernel-sync?rev=8486b8#8486b817)\n   Compiling x2apic v0.4.3\n   Compiling virtio-drivers v0.1.0 (https://github.com/rcore-os/virtio-drivers?rev=2aaf7d6#2aaf7d60)\n   Compiling isomorphic_drivers v0.1.0 (https://github.com/rcore-os/isomorphic_drivers?rev=f7cd97a8#f7cd97a8)\n   Compiling lazy_static v1.5.0\n   Compiling pci v0.0.1 (https://github.com/elliott10/pci-rs?rev=8f33774b#8f33774b)\n   Compiling bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a5#88e871a5)\n   Compiling numeric-enum-macro v0.2.0\n   Compiling device_tree v1.0.3 (https://github.com/rcore-os/device_tree-rs?rev=2f2e55f#2f2e55fb)\n   Compiling pin-utils v0.1.0\n   Compiling pin-project-lite v0.2.14\n   Compiling futures-task v0.3.30\n   Compiling futures-channel v0.3.30\n   Compiling futures-io v0.3.30\n   Compiling zcore-drivers v0.1.0 (https://github.com/kern-crates/zcore-drivers.git?rev=91c574e0#91c574e0)\n   Compiling ahash v0.4.8\n   Compiling hashbrown v0.9.1\n   Compiling region-alloc v0.1.0 (https://github.com/rzswh/region-allocator?rev=122c7a71#122c7a71)\nerror[E0635]: unknown feature `btree_drain_filter`\n --> /home/runner/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs:2:12\n  |\n2 | #![feature(btree_drain_filter)]\n  |            ^^^^^^^^^^^^^^^^^^\n\nerror[E0599]: no method named `drain_filter` found for struct `alloc::collections::BTreeSet` in the current scope\n   --> /home/runner/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs:120:14\n    |\n119 | /         self.regions\n120 | |             .drain_filter(|r| {\n    | |             -^^^^^^^^^^^^ method not found in `BTreeSet<Region>`\n    | |_____________|\n    |\n\nSome errors have detailed explanations: E0599, E0635.\nFor more information about an error, try `rustc --explain E0599`.\nerror: could not compile `region-alloc` (lib) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 30,
      "file": "/home/runner/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0635]: unknown feature `btree_drain_filter`\n --> /home/runner/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs:2:12\n  |\n2 | #![feature(btree_drain_filter)]\n  |            ^^^^^^^^^^^^^^^^^^\n\n"
    },
    {
      "cmd_idx": 30,
      "file": "/home/runner/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0599]: no method named `drain_filter` found for struct `BTreeSet` in the current scope\n   --> /home/runner/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs:120:14\n    |\n119 | /         self.regions\n120 | |             .drain_filter(|r| {\n    | |             -^^^^^^^^^^^^ method not found in `BTreeSet<Region>`\n    | |_____________|\n    |\n\n"
    },
    {
      "cmd_idx": 32,
      "file": "Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-10-03T14:36:34Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-03T14:36:34Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 33,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=zircon-syscall, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_13/kern-crates/zcore-zircon-syscall\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Updating crates.io index\n    Updating git repository `https://github.com/kern-crates/zcore-kernel-hal.git`\n    Updating git repository `https://github.com/DeathWish5/kernel-sync`\n    Updating git repository `https://github.com/kern-crates/zcore-zircon-object.git`\n    Updating git repository `https://github.com/smoltcp-rs/smoltcp`\n    Updating git repository `https://github.com/kern-crates/zcore-drivers.git`\n    Updating git repository `https://github.com/rcore-os/x86-smpboot`\n    Updating git repository `https://github.com/DeathWish5/PreemptiveScheduler`\n    Updating git repository `https://github.com/rust-embedded/riscv`\n    Updating git repository `https://github.com/rzswh/region-allocator`\n    Updating git repository `https://github.com/rcore-os/bitmap-allocator.git`\n    Updating git repository `https://github.com/rcore-os/device_tree-rs`\n    Updating git repository `https://github.com/rcore-os/isomorphic_drivers`\n    Updating git repository `https://github.com/elliott10/pci-rs`\n    Updating git repository `https://github.com/rcore-os/virtio-drivers`\n    Updating git repository `https://github.com/pleasewhy/unicycle`\n    Updating git repository `https://github.com/pleasewhy/uniset`\n     Locking 87 packages to latest compatible versions\n      Adding bitflags v1.3.2 (available: v2.6.0)\n    Checking bitflags v1.3.2\n    Checking bit_field v0.10.2\n   Compiling proc-macro2 v1.0.86\n   Compiling autocfg v1.4.0\n   Compiling unicode-ident v1.0.13\n   Compiling rustversion v1.0.17\n    Checking log v0.4.22\n    Checking scopeguard v1.2.0\n    Checking raw-cpuid v10.7.0\n   Compiling lock_api v0.4.12\n   Compiling quote v1.0.37\n   Compiling syn v2.0.79\n    Checking volatile v0.4.6\n    Checking bitflags v2.6.0\n   Compiling paste v1.0.15\n    Checking x86_64 v0.14.12\n    Checking spin v0.9.8\n    Checking volatile v0.3.0\n    Checking rsdp v2.0.1\n    Checking cfg-if v1.0.0\n    Checking futures-sink v0.3.30\n    Checking futures-core v0.3.30\n   Compiling x86 v0.46.0\n    Checking byteorder v1.5.0\n   Compiling trapframe v0.9.0\n    Checking bit v0.1.1\n    Checking managed v0.8.0\n    Checking acpi v4.1.1\n    Checking smoltcp v0.8.0 (https://github.com/smoltcp-rs/smoltcp?rev=35e833e3#35e833e3)\n    Checking virtio-drivers v0.1.0 (https://github.com/rcore-os/virtio-drivers?rev=2aaf7d6#2aaf7d60)\n    Checking x2apic v0.4.3\n    Checking lock v0.1.0 (https://github.com/DeathWish5/kernel-sync?rev=8486b8#8486b817)\n    Checking isomorphic_drivers v0.1.0 (https://github.com/rcore-os/isomorphic_drivers?rev=f7cd97a8#f7cd97a8)\n    Checking lazy_static v1.5.0\n    Checking pci v0.0.1 (https://github.com/elliott10/pci-rs?rev=8f33774b#8f33774b)\n    Checking bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a5#88e871a5)\n    Checking device_tree v1.0.3 (https://github.com/rcore-os/device_tree-rs?rev=2f2e55f#2f2e55fb)\n    Checking numeric-enum-macro v0.2.0\n    Checking futures-task v0.3.30\n    Checking pin-utils v0.1.0\n    Checking pin-project-lite v0.2.14\n    Checking futures-channel v0.3.30\n    Checking ahash v0.4.8\n    Checking futures-io v0.3.30\n    Checking hashbrown v0.9.1\n    Checking downcast-rs v1.2.1\n   Compiling zircon-syscall v0.1.0 (/home/runner/check/batch_13/kern-crates/zcore-zircon-syscall)\n    Checking zcore-drivers v0.1.0 (https://github.com/kern-crates/zcore-drivers.git?rev=91c574e0#91c574e0)\n    Checking region-alloc v0.1.0 (https://github.com/rzswh/region-allocator?rev=122c7a71#122c7a71)\nerror: could not compile `region-alloc` (lib) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 34,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=zircon-syscall, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_13/kern-crates/zcore-zircon-syscall\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n   Compiling bitflags v1.3.2\n   Compiling bit_field v0.10.2\n   Compiling proc-macro2 v1.0.86\n   Compiling unicode-ident v1.0.13\n   Compiling autocfg v1.4.0\n   Compiling log v0.4.22\n   Compiling rustversion v1.0.17\n[2024-10-03T14:36:34Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-03T14:36:34Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling scopeguard v1.2.0\n   Compiling raw-cpuid v10.7.0\n   Compiling lock_api v0.4.12\n   Compiling quote v1.0.37\n   Compiling syn v2.0.79\n   Compiling volatile v0.4.6\n   Compiling bitflags v2.6.0\n   Compiling spin v0.9.8\n   Compiling x86_64 v0.14.12\n   Compiling paste v1.0.15\n   Compiling volatile v0.3.0\n   Compiling rsdp v2.0.1\n   Compiling x86 v0.46.0\n   Compiling futures-sink v0.3.30\n   Compiling byteorder v1.5.0\n   Compiling trapframe v0.9.0\n   Compiling managed v0.8.0\n   Compiling cfg-if v1.0.0\n   Compiling bit v0.1.1\n   Compiling futures-core v0.3.30\n   Compiling smoltcp v0.8.0 (https://github.com/smoltcp-rs/smoltcp?rev=35e833e3#35e833e3)\n   Compiling acpi v4.1.1\n   Compiling lock v0.1.0 (https://github.com/DeathWish5/kernel-sync?rev=8486b8#8486b817)\n   Compiling x2apic v0.4.3\n   Compiling virtio-drivers v0.1.0 (https://github.com/rcore-os/virtio-drivers?rev=2aaf7d6#2aaf7d60)\n   Compiling isomorphic_drivers v0.1.0 (https://github.com/rcore-os/isomorphic_drivers?rev=f7cd97a8#f7cd97a8)\n   Compiling lazy_static v1.5.0\n   Compiling pci v0.0.1 (https://github.com/elliott10/pci-rs?rev=8f33774b#8f33774b)\n   Compiling bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a5#88e871a5)\n   Compiling futures-task v0.3.30\n   Compiling pin-project-lite v0.2.14\n   Compiling numeric-enum-macro v0.2.0\n   Compiling device_tree v1.0.3 (https://github.com/rcore-os/device_tree-rs?rev=2f2e55f#2f2e55fb)\n   Compiling pin-utils v0.1.0\n   Compiling futures-channel v0.3.30\n   Compiling futures-io v0.3.30\n   Compiling zcore-drivers v0.1.0 (https://github.com/kern-crates/zcore-drivers.git?rev=91c574e0#91c574e0)\n   Compiling ahash v0.4.8\n   Compiling hashbrown v0.9.1\n   Compiling zircon-syscall v0.1.0 (/home/runner/check/batch_13/kern-crates/zcore-zircon-syscall)\n   Compiling downcast-rs v1.2.1\n   Compiling region-alloc v0.1.0 (https://github.com/rzswh/region-allocator?rev=122c7a71#122c7a71)\nerror[E0635]: unknown feature `btree_drain_filter`\n --> /home/runner/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs:2:12\n  |\n2 | #![feature(btree_drain_filter)]\n  |            ^^^^^^^^^^^^^^^^^^\n\nerror[E0599]: no method named `drain_filter` found for struct `alloc::collections::BTreeSet` in the current scope\n   --> /home/runner/.cargo/git/checkouts/region-allocator-4314ed0cadd5612c/122c7a7/src/lib.rs:120:14\n    |\n119 | /         self.regions\n120 | |             .drain_filter(|r| {\n    | |             -^^^^^^^^^^^^ method not found in `BTreeSet<Region>`\n    | |_____________|\n    |\n\nSome errors have detailed explanations: E0599, E0635.\nFor more information about an error, try `rustc --explain E0599`.\nerror: could not compile `region-alloc` (lib) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 39,
      "file": "src/platform/aarch64_qemu_virt/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/arch_boot/arch_boot/src/platform/aarch64_qemu_virt/boot.rs (original lines from 1 to 1)\n+use super::desc::{DescriptorAttr, MappingFlags, MemAttr};\n"
    },
    {
      "cmd_idx": 39,
      "file": "src/platform/aarch64_qemu_virt/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/arch_boot/arch_boot/src/platform/aarch64_qemu_virt/boot.rs (original lines from 2 to 2)\n-use tock_registers::interfaces::{ReadWriteable, Readable, Writeable};\n"
    },
    {
      "cmd_idx": 39,
      "file": "src/platform/aarch64_qemu_virt/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/arch_boot/arch_boot/src/platform/aarch64_qemu_virt/boot.rs (original lines from 4 to 4)\n-use super::desc::{DescriptorAttr, MappingFlags, MemAttr};\n+use tock_registers::interfaces::{ReadWriteable, Readable, Writeable};\n"
    },
    {
      "cmd_idx": 39,
      "file": "src/platform/riscv64_qemu_virt/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/arch_boot/arch_boot/src/platform/riscv64_qemu_virt/boot.rs (original lines from 1 to 1)\n-use riscv::register::satp;\n"
    },
    {
      "cmd_idx": 39,
      "file": "src/platform/riscv64_qemu_virt/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/arch_boot/arch_boot/src/platform/riscv64_qemu_virt/boot.rs (original lines from 3 to 3)\n+use riscv::register::satp;\n"
    },
    {
      "cmd_idx": 39,
      "file": "src/platform/x86_pc/boot.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/arch_boot/arch_boot/src/platform/x86_pc/boot.rs (original lines from 26 to 26)\n-    | Cr4Flags::OSFXSR.bits() | Cr4Flags::OSXMMEXCPT_ENABLE.bits();\n+    | Cr4Flags::OSFXSR.bits()\n+    | Cr4Flags::OSXMMEXCPT_ENABLE.bits();\n"
    },
    {
      "cmd_idx": 40,
      "file": "src/platform/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `platform_family`\n --> src/platform/mod.rs:4:38\n  |\n4 | if #[cfg(all(target_arch = \"x86_64\", platform_family = \"x86-pc\"))] {\n  |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"x86-pc\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"x86-pc\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\n"
    },
    {
      "cmd_idx": 40,
      "file": "src/platform/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `platform_family`\n --> src/platform/mod.rs:6:46\n  |\n6 | } else if #[cfg(all(target_arch = \"riscv64\", platform_family = \"riscv64-qemu-virt\"))] {\n  |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"riscv64-qemu-virt\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"riscv64-qemu-virt\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 40,
      "file": "src/platform/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `platform_family`\n --> src/platform/mod.rs:8:46\n  |\n8 | } else if #[cfg(all(target_arch = \"aarch64\", platform_family = \"aarch64-qemu-virt\"))] {\n  |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"aarch64-qemu-virt\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"aarch64-qemu-virt\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 40,
      "file": "src/platform/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `platform_family`\n  --> src/platform/mod.rs:10:50\n   |\n10 | } else if #[cfg(all(target_arch = \"loongarch64\", platform_family = \"loongarch64-qemu-virt\"))] {\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"loongarch64-qemu-virt\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"loongarch64-qemu-virt\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 40,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> src/lib.rs:3:12\n  |\n3 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\n"
    },
    {
      "cmd_idx": 40,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: empty `loop {}` wastes CPU cycles\n  --> src/lib.rs:10:5\n   |\n10 |     loop {}\n   |     ^^^^^^^\n   |\n   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n   = note: `#[warn(clippy::empty_loop)]` on by default\n\n"
    },
    {
      "cmd_idx": 42,
      "file": "Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-10-03T14:37:08Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-03T14:37:08Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 43,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 3 to 3)\n-use core::str;\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 5 to 5)\n+use core::str;\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 12 to 12)\n-const MAGIC_NUMBER     : u32 = 0xd00dfeed;\n+const MAGIC_NUMBER: u32 = 0xd00dfeed;\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 14 to 16)\n-const OF_DT_BEGIN_NODE : u32 = 0x00000001;\n-const OF_DT_END_NODE   : u32 = 0x00000002;\n-const OF_DT_PROP       : u32 = 0x00000003;\n+const OF_DT_BEGIN_NODE: u32 = 0x00000001;\n+const OF_DT_END_NODE: u32 = 0x00000002;\n+const OF_DT_PROP: u32 = 0x00000003;\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 38 to 40)\n-        let buf = unsafe {\n-            core::slice::from_raw_parts(ptr as *const u8, 24)\n-        };\n+        let buf = unsafe { core::slice::from_raw_parts(ptr as *const u8, 24) };\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 43 to 43)\n-            return Err(DeviceTreeError::BadMagicNumber)\n+            return Err(DeviceTreeError::BadMagicNumber);\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 53 to 55)\n-        Ok(\n-            Self {ptr, totalsize, off_struct, off_strings}\n-        )\n+        Ok(Self {\n+            ptr,\n+            totalsize,\n+            off_struct,\n+            off_strings,\n+        })\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 61 to 61)\n-        &self, mut pos: usize,\n+        &self,\n+        mut pos: usize,\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 64 to 64)\n-        cb: &mut dyn FnMut(String, usize, usize, Vec<(String, Vec<u8>)>)\n+        cb: &mut dyn FnMut(String, usize, usize, Vec<(String, Vec<u8>)>),\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 66 to 68)\n-        let buf = unsafe {\n-            core::slice::from_raw_parts(self.ptr as *const u8, self.totalsize)\n-        };\n+        let buf = unsafe { core::slice::from_raw_parts(self.ptr as *const u8, self.totalsize) };\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 72 to 72)\n-            return Err(DeviceTreeError::ParseError(pos))\n+            return Err(DeviceTreeError::ParseError(pos));\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 82 to 83)\n-            let val_size = buf.read_be_u32(pos+4)? as usize;\n-            let name_offset = buf.read_be_u32(pos+8)? as usize;\n+            let val_size = buf.read_be_u32(pos + 4)? as usize;\n+            let name_offset = buf.read_be_u32(pos + 8)? as usize;\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 115 to 115)\n-            return Err(DeviceTreeError::ParseError(pos))\n+            return Err(DeviceTreeError::ParseError(pos));\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 131 to 131)\n-where F: FnMut(String, usize, usize, Vec<(String, Vec<u8>)>)\n+where\n+    F: FnMut(String, usize, usize, Vec<(String, Vec<u8>)>),\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 1 to 1)\n-use crate::{DeviceTreeResult, DeviceTreeError};\n+use crate::{DeviceTreeError, DeviceTreeResult};\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 13 to 14)\n-        if ! (pos+4 <= self.len()) {\n-            return Err(DeviceTreeError::SliceReadError)\n+        if !(pos + 4 <= self.len()) {\n+            return Err(DeviceTreeError::SliceReadError);\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 17 to 22)\n-        Ok(\n-            (self[pos] as u32) << 24\n-            | (self[pos+1] as u32) << 16\n-            | (self[pos+2] as u32) << 8\n-            | (self[pos+3] as u32)\n-        )\n+        Ok((self[pos] as u32) << 24\n+            | (self[pos + 1] as u32) << 16\n+            | (self[pos + 2] as u32) << 8\n+            | (self[pos + 3] as u32))\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 26 to 26)\n-        let lo: u64 = self.read_be_u32(pos+4)?.into();\n+        let lo: u64 = self.read_be_u32(pos + 4)?.into();\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 33 to 33)\n-                return Ok(&self[pos..cur])\n+                return Ok(&self[pos..cur]);\n"
    },
    {
      "cmd_idx": 43,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 40 to 41)\n-        if ! (end < self.len()) {\n-            return Err(DeviceTreeError::SliceReadError)\n+        if !(end < self.len()) {\n+            return Err(DeviceTreeError::SliceReadError);\n"
    },
    {
      "cmd_idx": 43,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 1 to 2)\n-use std::str;\n-use std::io::Read;\n"
    },
    {
      "cmd_idx": 43,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 4 to 4)\n+use std::io::Read;\n+use std::str;\n"
    },
    {
      "cmd_idx": 43,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 11 to 18)\n-    let mut cb = |name: String, addr_cells: usize, size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n-        match name.as_str() {\n-            \"\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"riscv-virtio\\0\"));\n+    let mut cb =\n+        |name: String, addr_cells: usize, size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n+            match name.as_str() {\n+                \"\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"riscv-virtio\\0\"));\n+                        }\n"
    },
    {
      "cmd_idx": 43,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 21 to 27)\n-            },\n-            \"soc\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"simple-bus\\0\"));\n+                \"soc\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"simple-bus\\0\"));\n+                        }\n"
    },
    {
      "cmd_idx": 43,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 30 to 40)\n-            },\n-            \"virtio_mmio@10001000\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"virtio,mmio\\0\"));\n-                    } else if prop.0.as_str() == \"reg\" {\n-                        let reg = &(prop.1);\n-                        assert_eq!(reg.as_slice().read_be_u64(0).unwrap(), 0x10001000);\n-                        assert_eq!(reg.as_slice().read_be_u64(8).unwrap(), 0x1000);\n+                \"virtio_mmio@10001000\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"virtio,mmio\\0\"));\n+                        } else if prop.0.as_str() == \"reg\" {\n+                            let reg = &(prop.1);\n+                            assert_eq!(reg.as_slice().read_be_u64(0).unwrap(), 0x10001000);\n+                            assert_eq!(reg.as_slice().read_be_u64(8).unwrap(), 0x1000);\n+                        }\n"
    },
    {
      "cmd_idx": 43,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 43 to 46)\n-            },\n-            _ => {}\n-        }\n-    };\n+                _ => {}\n+            }\n+        };\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 3 to 3)\n-use core::str;\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 5 to 5)\n+use core::str;\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 12 to 12)\n-const MAGIC_NUMBER     : u32 = 0xd00dfeed;\n+const MAGIC_NUMBER: u32 = 0xd00dfeed;\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 14 to 16)\n-const OF_DT_BEGIN_NODE : u32 = 0x00000001;\n-const OF_DT_END_NODE   : u32 = 0x00000002;\n-const OF_DT_PROP       : u32 = 0x00000003;\n+const OF_DT_BEGIN_NODE: u32 = 0x00000001;\n+const OF_DT_END_NODE: u32 = 0x00000002;\n+const OF_DT_PROP: u32 = 0x00000003;\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 38 to 40)\n-        let buf = unsafe {\n-            core::slice::from_raw_parts(ptr as *const u8, 24)\n-        };\n+        let buf = unsafe { core::slice::from_raw_parts(ptr as *const u8, 24) };\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 43 to 43)\n-            return Err(DeviceTreeError::BadMagicNumber)\n+            return Err(DeviceTreeError::BadMagicNumber);\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 53 to 55)\n-        Ok(\n-            Self {ptr, totalsize, off_struct, off_strings}\n-        )\n+        Ok(Self {\n+            ptr,\n+            totalsize,\n+            off_struct,\n+            off_strings,\n+        })\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 61 to 61)\n-        &self, mut pos: usize,\n+        &self,\n+        mut pos: usize,\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 64 to 64)\n-        cb: &mut dyn FnMut(String, usize, usize, Vec<(String, Vec<u8>)>)\n+        cb: &mut dyn FnMut(String, usize, usize, Vec<(String, Vec<u8>)>),\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 66 to 68)\n-        let buf = unsafe {\n-            core::slice::from_raw_parts(self.ptr as *const u8, self.totalsize)\n-        };\n+        let buf = unsafe { core::slice::from_raw_parts(self.ptr as *const u8, self.totalsize) };\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 72 to 72)\n-            return Err(DeviceTreeError::ParseError(pos))\n+            return Err(DeviceTreeError::ParseError(pos));\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 82 to 83)\n-            let val_size = buf.read_be_u32(pos+4)? as usize;\n-            let name_offset = buf.read_be_u32(pos+8)? as usize;\n+            let val_size = buf.read_be_u32(pos + 4)? as usize;\n+            let name_offset = buf.read_be_u32(pos + 8)? as usize;\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 115 to 115)\n-            return Err(DeviceTreeError::ParseError(pos))\n+            return Err(DeviceTreeError::ParseError(pos));\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 131 to 131)\n-where F: FnMut(String, usize, usize, Vec<(String, Vec<u8>)>)\n+where\n+    F: FnMut(String, usize, usize, Vec<(String, Vec<u8>)>),\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 1 to 1)\n-use crate::{DeviceTreeResult, DeviceTreeError};\n+use crate::{DeviceTreeError, DeviceTreeResult};\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 13 to 14)\n-        if ! (pos+4 <= self.len()) {\n-            return Err(DeviceTreeError::SliceReadError)\n+        if !(pos + 4 <= self.len()) {\n+            return Err(DeviceTreeError::SliceReadError);\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 17 to 22)\n-        Ok(\n-            (self[pos] as u32) << 24\n-            | (self[pos+1] as u32) << 16\n-            | (self[pos+2] as u32) << 8\n-            | (self[pos+3] as u32)\n-        )\n+        Ok((self[pos] as u32) << 24\n+            | (self[pos + 1] as u32) << 16\n+            | (self[pos + 2] as u32) << 8\n+            | (self[pos + 3] as u32))\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 26 to 26)\n-        let lo: u64 = self.read_be_u32(pos+4)?.into();\n+        let lo: u64 = self.read_be_u32(pos + 4)?.into();\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 33 to 33)\n-                return Ok(&self[pos..cur])\n+                return Ok(&self[pos..cur]);\n"
    },
    {
      "cmd_idx": 44,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 40 to 41)\n-        if ! (end < self.len()) {\n-            return Err(DeviceTreeError::SliceReadError)\n+        if !(end < self.len()) {\n+            return Err(DeviceTreeError::SliceReadError);\n"
    },
    {
      "cmd_idx": 44,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 1 to 2)\n-use std::str;\n-use std::io::Read;\n"
    },
    {
      "cmd_idx": 44,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 4 to 4)\n+use std::io::Read;\n+use std::str;\n"
    },
    {
      "cmd_idx": 44,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 11 to 18)\n-    let mut cb = |name: String, addr_cells: usize, size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n-        match name.as_str() {\n-            \"\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"riscv-virtio\\0\"));\n+    let mut cb =\n+        |name: String, addr_cells: usize, size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n+            match name.as_str() {\n+                \"\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"riscv-virtio\\0\"));\n+                        }\n"
    },
    {
      "cmd_idx": 44,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 21 to 27)\n-            },\n-            \"soc\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"simple-bus\\0\"));\n+                \"soc\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"simple-bus\\0\"));\n+                        }\n"
    },
    {
      "cmd_idx": 44,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 30 to 40)\n-            },\n-            \"virtio_mmio@10001000\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"virtio,mmio\\0\"));\n-                    } else if prop.0.as_str() == \"reg\" {\n-                        let reg = &(prop.1);\n-                        assert_eq!(reg.as_slice().read_be_u64(0).unwrap(), 0x10001000);\n-                        assert_eq!(reg.as_slice().read_be_u64(8).unwrap(), 0x1000);\n+                \"virtio_mmio@10001000\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"virtio,mmio\\0\"));\n+                        } else if prop.0.as_str() == \"reg\" {\n+                            let reg = &(prop.1);\n+                            assert_eq!(reg.as_slice().read_be_u64(0).unwrap(), 0x10001000);\n+                            assert_eq!(reg.as_slice().read_be_u64(8).unwrap(), 0x1000);\n+                        }\n"
    },
    {
      "cmd_idx": 44,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 43 to 46)\n-            },\n-            _ => {}\n-        }\n-    };\n+                _ => {}\n+            }\n+        };\n"
    },
    {
      "cmd_idx": 45,
      "file": "src/util.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this boolean expression can be simplified\n  --> src/util.rs:13:12\n   |\n13 |         if ! (pos+4 <= self.len()) {\n   |            ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `pos+4 > self.len()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool\n   = note: `#[warn(clippy::nonminimal_bool)]` on by default\n\n"
    },
    {
      "cmd_idx": 45,
      "file": "src/util.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this boolean expression can be simplified\n  --> src/util.rs:40:12\n   |\n40 |         if ! (end < self.len()) {\n   |            ^^^^^^^^^^^^^^^^^^^^ help: try: `end >= self.len()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool\n\n"
    },
    {
      "cmd_idx": 45,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: very complex type used. Consider factoring parts into `type` definitions\n  --> src/lib.rs:64:13\n   |\n64 |         cb: &mut dyn FnMut(String, usize, usize, Vec<(String, Vec<u8>)>)\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity\n   = note: `#[warn(clippy::type_complexity)]` on by default\n\n"
    },
    {
      "cmd_idx": 45,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: useless conversion to the same type: `usize`\n   --> src/lib.rs:133:31\n    |\n133 |     let dt = DeviceTree::init(dtb_va.into()).unwrap();\n    |                               ^^^^^^^^^^^^^ help: consider removing `.into()`: `dtb_va`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n    = note: `#[warn(clippy::useless_conversion)]` on by default\n\n"
    },
    {
      "cmd_idx": 46,
      "file": "src/util.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this boolean expression can be simplified\n  --> src/util.rs:13:12\n   |\n13 |         if ! (pos+4 <= self.len()) {\n   |            ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `pos+4 > self.len()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool\n   = note: `#[warn(clippy::nonminimal_bool)]` on by default\n\n"
    },
    {
      "cmd_idx": 46,
      "file": "src/util.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this boolean expression can be simplified\n  --> src/util.rs:40:12\n   |\n40 |         if ! (end < self.len()) {\n   |            ^^^^^^^^^^^^^^^^^^^^ help: try: `end >= self.len()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool\n\n"
    },
    {
      "cmd_idx": 46,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: very complex type used. Consider factoring parts into `type` definitions\n  --> src/lib.rs:64:13\n   |\n64 |         cb: &mut dyn FnMut(String, usize, usize, Vec<(String, Vec<u8>)>)\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity\n   = note: `#[warn(clippy::type_complexity)]` on by default\n\n"
    },
    {
      "cmd_idx": 46,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: useless conversion to the same type: `usize`\n   --> src/lib.rs:133:31\n    |\n133 |     let dt = DeviceTree::init(dtb_va.into()).unwrap();\n    |                               ^^^^^^^^^^^^^ help: consider removing `.into()`: `dtb_va`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n    = note: `#[warn(clippy::useless_conversion)]` on by default\n\n"
    },
    {
      "cmd_idx": 50,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 27 to 41)\n-    let mut cb = |name: String,\n-                  _addr_cells: usize,\n-                  _size_cells: usize,\n-                  props: Vec<(String, Vec<u8>)>| {\n-        match name.as_str() {\n-            \"chosen\" => {\n-                for prop in props {\n-                    match prop.0.as_str() {\n-                        \"bootargs\" => {\n-                            if let Ok(cmd) = core::str::from_utf8(&prop.1) {\n-                                let cmd = cmd.trim_end_matches(char::from(0));\n-                                assert!(cmd.len() > 0);\n-                                assert!(cmd.starts_with(\"init=\"));\n-                                let cmd = cmd.strip_prefix(\"init=\").unwrap();\n-                                assert!(cmd == \"/sbin/init\" || cmd == \"/btp/sbin/hello\");\n+    let mut cb =\n+        |name: String, _addr_cells: usize, _size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n+            match name.as_str() {\n+                \"chosen\" => {\n+                    for prop in props {\n+                        match prop.0.as_str() {\n+                            \"bootargs\" => {\n+                                if let Ok(cmd) = core::str::from_utf8(&prop.1) {\n+                                    let cmd = cmd.trim_end_matches(char::from(0));\n+                                    assert!(cmd.len() > 0);\n+                                    assert!(cmd.starts_with(\"init=\"));\n+                                    let cmd = cmd.strip_prefix(\"init=\").unwrap();\n+                                    assert!(cmd == \"/sbin/init\" || cmd == \"/btp/sbin/hello\");\n+                                }\n"
    },
    {
      "cmd_idx": 50,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 43 to 43)\n+                            _ => (),\n"
    },
    {
      "cmd_idx": 50,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 44 to 44)\n-                        _ => (),\n"
    },
    {
      "cmd_idx": 50,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 47 to 50)\n-            },\n-            _ => (),\n-        }\n-    };\n+                _ => (),\n+            }\n+        };\n"
    },
    {
      "cmd_idx": 50,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 56 to 57)\n-fn test_dtb(_dtb_pa: usize) {\n-}\n+fn test_dtb(_dtb_pa: usize) {}\n"
    },
    {
      "cmd_idx": 51,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 27 to 41)\n-    let mut cb = |name: String,\n-                  _addr_cells: usize,\n-                  _size_cells: usize,\n-                  props: Vec<(String, Vec<u8>)>| {\n-        match name.as_str() {\n-            \"chosen\" => {\n-                for prop in props {\n-                    match prop.0.as_str() {\n-                        \"bootargs\" => {\n-                            if let Ok(cmd) = core::str::from_utf8(&prop.1) {\n-                                let cmd = cmd.trim_end_matches(char::from(0));\n-                                assert!(cmd.len() > 0);\n-                                assert!(cmd.starts_with(\"init=\"));\n-                                let cmd = cmd.strip_prefix(\"init=\").unwrap();\n-                                assert!(cmd == \"/sbin/init\" || cmd == \"/btp/sbin/hello\");\n+    let mut cb =\n+        |name: String, _addr_cells: usize, _size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n+            match name.as_str() {\n+                \"chosen\" => {\n+                    for prop in props {\n+                        match prop.0.as_str() {\n+                            \"bootargs\" => {\n+                                if let Ok(cmd) = core::str::from_utf8(&prop.1) {\n+                                    let cmd = cmd.trim_end_matches(char::from(0));\n+                                    assert!(cmd.len() > 0);\n+                                    assert!(cmd.starts_with(\"init=\"));\n+                                    let cmd = cmd.strip_prefix(\"init=\").unwrap();\n+                                    assert!(cmd == \"/sbin/init\" || cmd == \"/btp/sbin/hello\");\n+                                }\n"
    },
    {
      "cmd_idx": 51,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 43 to 43)\n+                            _ => (),\n"
    },
    {
      "cmd_idx": 51,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 44 to 44)\n-                        _ => (),\n"
    },
    {
      "cmd_idx": 51,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 47 to 50)\n-            },\n-            _ => (),\n-        }\n-    };\n+                _ => (),\n+            }\n+        };\n"
    },
    {
      "cmd_idx": 51,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 56 to 57)\n-fn test_dtb(_dtb_pa: usize) {\n-}\n+fn test_dtb(_dtb_pa: usize) {}\n"
    },
    {
      "cmd_idx": 52,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 27 to 41)\n-    let mut cb = |name: String,\n-                  _addr_cells: usize,\n-                  _size_cells: usize,\n-                  props: Vec<(String, Vec<u8>)>| {\n-        match name.as_str() {\n-            \"chosen\" => {\n-                for prop in props {\n-                    match prop.0.as_str() {\n-                        \"bootargs\" => {\n-                            if let Ok(cmd) = core::str::from_utf8(&prop.1) {\n-                                let cmd = cmd.trim_end_matches(char::from(0));\n-                                assert!(cmd.len() > 0);\n-                                assert!(cmd.starts_with(\"init=\"));\n-                                let cmd = cmd.strip_prefix(\"init=\").unwrap();\n-                                assert!(cmd == \"/sbin/init\" || cmd == \"/btp/sbin/hello\");\n+    let mut cb =\n+        |name: String, _addr_cells: usize, _size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n+            match name.as_str() {\n+                \"chosen\" => {\n+                    for prop in props {\n+                        match prop.0.as_str() {\n+                            \"bootargs\" => {\n+                                if let Ok(cmd) = core::str::from_utf8(&prop.1) {\n+                                    let cmd = cmd.trim_end_matches(char::from(0));\n+                                    assert!(cmd.len() > 0);\n+                                    assert!(cmd.starts_with(\"init=\"));\n+                                    let cmd = cmd.strip_prefix(\"init=\").unwrap();\n+                                    assert!(cmd == \"/sbin/init\" || cmd == \"/btp/sbin/hello\");\n+                                }\n"
    },
    {
      "cmd_idx": 52,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 43 to 43)\n+                            _ => (),\n"
    },
    {
      "cmd_idx": 52,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 44 to 44)\n-                        _ => (),\n"
    },
    {
      "cmd_idx": 52,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 47 to 50)\n-            },\n-            _ => (),\n-        }\n-    };\n+                _ => (),\n+            }\n+        };\n"
    },
    {
      "cmd_idx": 52,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 56 to 57)\n-fn test_dtb(_dtb_pa: usize) {\n-}\n+fn test_dtb(_dtb_pa: usize) {}\n"
    },
    {
      "cmd_idx": 53,
      "file": "/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/mod.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0583]: file not found for module `aarch64_common`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/mod.rs:5:9\n  |\n5 |         mod aarch64_common;\n  |         ^^^^^^^^^^^^^^^^^^^\n  |\n  = help: to create the module `aarch64_common`, create file \"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/aarch64_common.rs\" or \"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/aarch64_common/mod.rs\"\n  = note: if there is a `mod aarch64_common` elsewhere in the crate already, import it with `use crate::...` instead\n\n"
    },
    {
      "cmd_idx": 53,
      "file": "/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:6:20\n  |\n6 | pub use platform::{getchar, putchar};\n  |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n  |                    |\n  |                    no `getchar` in `platform`\n\n"
    },
    {
      "cmd_idx": 53,
      "file": "/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:6:20\n  |\n6 | pub use platform::{getchar, putchar};\n  |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n  |                    |\n  |                    no `getchar` in `platform`\n\n"
    },
    {
      "cmd_idx": 53,
      "file": "/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/dummy/mod.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\n"
    },
    {
      "cmd_idx": 53,
      "file": "/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:16:19\n   |\n16 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n6  + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n16 -         platform::putchar(*c);\n16 +         putchar(*c);\n   |\n\n"
    },
    {
      "cmd_idx": 53,
      "file": "/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:23:36\n   |\n23 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n6  + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n23 -         if let Some(c) = platform::getchar() {\n23 +         if let Some(c) = getchar() {\n   |\n\n"
    },
    {
      "cmd_idx": 54,
      "file": "/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:6:20\n  |\n6 | pub use platform::{getchar, putchar};\n  |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n  |                    |\n  |                    no `getchar` in `platform`\n\n"
    },
    {
      "cmd_idx": 54,
      "file": "/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:6:20\n  |\n6 | pub use platform::{getchar, putchar};\n  |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n  |                    |\n  |                    no `getchar` in `platform`\n\n"
    },
    {
      "cmd_idx": 54,
      "file": "/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/dummy/mod.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\n"
    },
    {
      "cmd_idx": 54,
      "file": "/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:16:19\n   |\n16 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n6  + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n16 -         platform::putchar(*c);\n16 +         putchar(*c);\n   |\n\n"
    },
    {
      "cmd_idx": 54,
      "file": "/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:23:36\n   |\n23 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n6  + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n23 -         if let Some(c) = platform::getchar() {\n23 +         if let Some(c) = getchar() {\n   |\n\n"
    },
    {
      "cmd_idx": 55,
      "file": "/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:6:20\n  |\n6 | pub use platform::{getchar, putchar};\n  |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n  |                    |\n  |                    no `getchar` in `platform`\n\n"
    },
    {
      "cmd_idx": 55,
      "file": "/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:6:20\n  |\n6 | pub use platform::{getchar, putchar};\n  |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n  |                    |\n  |                    no `getchar` in `platform`\n\n"
    },
    {
      "cmd_idx": 55,
      "file": "/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/dummy/mod.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\n"
    },
    {
      "cmd_idx": 55,
      "file": "/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0425]: cannot find function `console_init` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:10:15\n   |\n10 |     platform::console_init();\n   |               ^^^^^^^^^^^^ not found in `platform`\n\n"
    },
    {
      "cmd_idx": 55,
      "file": "/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:16:19\n   |\n16 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n6  + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n16 -         platform::putchar(*c);\n16 +         putchar(*c);\n   |\n\n"
    },
    {
      "cmd_idx": 55,
      "file": "/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:23:36\n   |\n23 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n6  + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n23 -         if let Some(c) = platform::getchar() {\n23 +         if let Some(c) = getchar() {\n   |\n\n"
    },
    {
      "cmd_idx": 56,
      "file": "Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-10-03T14:37:53Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-03T14:37:53Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 57,
      "file": "Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-10-03T14:37:59Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-03T14:37:59Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 58,
      "file": "Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-10-03T14:38:00Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-03T14:38:00Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 59,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_axdtb, checker=Clippy\n// toolchain=nightly-2024-01-18, target=aarch64-unknown-none-softfloat\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb\n// cmd=cargo clippy --target aarch64-unknown-none-softfloat --no-deps --message-format=json\n    Updating git repository `ssh://git@github.com/shilei-massclouds/arch_boot`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axalloc`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axdtb`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axhal`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axlog2`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axtype`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axconfig.git`\n    Updating crates.io index\n    Updating git repository `ssh://git@github.com/shilei-massclouds/allocator`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axerrno`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/memory_addr`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/spinbase`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/early_console`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/kernel_guard_base`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/lazy_init`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/percpu2`\n    Updating git repository `ssh://git@github.com/shilei-massclouds/ratio`\n    Updating git repository `https://github.com/rcore-os/bitmap-allocator.git`\n   Compiling equivalent v1.0.1\n   Compiling hashbrown v0.15.0\n   Compiling serde v1.0.210\n   Compiling toml_datetime v0.6.8\n   Compiling winnow v0.5.40\n   Compiling proc-macro2 v1.0.86\n   Compiling indexmap v2.6.0\n   Compiling unicode-ident v1.0.13\n    Checking cfg-if v1.0.0\n   Compiling quote v1.0.37\n    Checking log v0.4.22\n   Compiling syn v1.0.109\n    Checking bitflags v2.6.0\n   Compiling syn v2.0.79\n   Compiling toml_edit v0.19.15\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling base64 v0.13.1\n   Compiling unicode-width v0.1.14\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#52d4fca1)\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n    Checking tock-registers v0.8.1\n    Checking aarch64-cpu v9.4.0\n   Compiling svgbobdoc v0.3.0\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig.git#51b81e4a)\n    Checking spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n    Checking const-default v1.0.0\n    Checking bit_field v0.10.2\n    Checking rlsf v0.2.1\n    Checking bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\n    Checking memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n    Checking static_assertions v1.1.0\n    Checking lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n    Checking ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n    Checking allocator v0.1.0 (ssh://git@github.com/shilei-massclouds/allocator#d93ad046)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#4de587b7)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal#83ec99c0)\n   Compiling arch_boot v0.1.0 (ssh://git@github.com/shilei-massclouds/arch_boot#8663e839)\nerror: could not compile `early_console` (lib) due to 6 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 60,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_axdtb, checker=Clippy\n// toolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb\n// cmd=cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json\n    Checking cfg-if v1.0.0\n    Checking bit_field v0.10.2\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig.git#51b81e4a)\n    Checking nb v1.1.0\n    Checking void v1.0.2\n    Checking static_assertions v1.1.0\n    Checking nb v0.1.3\n   Compiling riscv v0.10.1\n    Checking embedded-hal v0.2.7\n    Checking sbi-spec v0.0.4\n    Checking critical-section v1.1.3\n    Checking log v0.4.22\n    Checking sbi-rt v0.0.2\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#4de587b7)\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n    Checking bitflags v2.6.0\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#52d4fca1)\n    Checking spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling percpu_macros2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n    Checking const-default v1.0.0\n    Checking rlsf v0.2.1\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal#83ec99c0)\n    Checking bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\n    Checking memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n    Checking lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n    Checking ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n    Checking allocator v0.1.0 (ssh://git@github.com/shilei-massclouds/allocator#d93ad046)\n   Compiling arch_boot v0.1.0 (ssh://git@github.com/shilei-massclouds/arch_boot#8663e839)\n    Checking axtype v0.1.0 (ssh://git@github.com/shilei-massclouds/axtype#e48d1d9f)\n    Checking axdtb v0.1.0 (ssh://git@github.com/shilei-massclouds/axdtb#91506091)\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 61,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_axdtb, checker=Clippy\n// toolchain=nightly-2024-01-18, target=x86_64-unknown-none\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb\n// cmd=cargo clippy --target x86_64-unknown-none --no-deps --message-format=json\n    Checking bit_field v0.10.2\n    Checking cfg-if v1.0.0\n   Compiling rustversion v1.0.17\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig.git#51b81e4a)\n    Checking bitflags v2.6.0\n    Checking bitflags v1.3.2\n    Checking volatile v0.4.6\n    Checking raw-cpuid v10.7.0\n    Checking log v0.4.22\n   Compiling paste v1.0.15\n   Compiling x86 v0.52.0\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#4de587b7)\n    Checking spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n    Checking bit v0.1.1\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#52d4fca1)\n    Checking raw-cpuid v11.2.0\n    Checking const-default v1.0.0\n    Checking rlsf v0.2.1\n    Checking x86_64 v0.14.12\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal#83ec99c0)\n    Checking bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\n    Checking static_assertions v1.1.0\n    Checking lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n    Checking ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n    Checking memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n   Compiling arch_boot v0.1.0 (ssh://git@github.com/shilei-massclouds/arch_boot#8663e839)\n    Checking allocator v0.1.0 (ssh://git@github.com/shilei-massclouds/allocator#d93ad046)\n    Checking axtype v0.1.0 (ssh://git@github.com/shilei-massclouds/axtype#e48d1d9f)\n    Checking axdtb v0.1.0 (ssh://git@github.com/shilei-massclouds/axdtb#91506091)\n    Checking x2apic v0.4.3\nerror: could not compile `early_console` (lib) due to 6 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 62,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_axdtb, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=aarch64-unknown-none-softfloat\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target aarch64-unknown-none-softfloat\n   Compiling hashbrown v0.15.0\n   Compiling equivalent v1.0.1\n   Compiling serde v1.0.210\n   Compiling toml_datetime v0.6.8\n   Compiling winnow v0.5.40\n   Compiling proc-macro2 v1.0.86\n   Compiling unicode-ident v1.0.13\n   Compiling indexmap v2.6.0\n   Compiling cfg-if v1.0.0\n   Compiling quote v1.0.37\n   Compiling syn v1.0.109\n   Compiling log v0.4.22\n   Compiling bitflags v2.6.0\n[2024-10-03T14:37:53Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-03T14:37:53Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling toml_edit v0.19.15\n   Compiling syn v2.0.79\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#52d4fca1)\n   Compiling unicode-width v0.1.14\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling tock-registers v0.8.1\n   Compiling base64 v0.13.1\n   Compiling aarch64-cpu v9.4.0\n   Compiling svgbobdoc v0.3.0\n   Compiling spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n   Compiling bit_field v0.10.2\n   Compiling const-default v1.0.0\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig.git#51b81e4a)\n   Compiling rlsf v0.2.1\n   Compiling bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#4de587b7)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal#83ec99c0)\n   Compiling arch_boot v0.1.0 (ssh://git@github.com/shilei-massclouds/arch_boot#8663e839)\nerror[E0583]: file not found for module `aarch64_common`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/mod.rs:5:9\n  |\n5 |         mod aarch64_common;\n  |         ^^^^^^^^^^^^^^^^^^^\n  |\n  = help: to create the module `aarch64_common`, create file \"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/aarch64_common.rs\" or \"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/aarch64_common/mod.rs\"\n  = note: if there is a `mod aarch64_common` elsewhere in the crate already, import it with `use crate::...` instead\n\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:6:20\n  |\n6 | pub use platform::{getchar, putchar};\n  |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n  |                    |\n  |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:16:19\n   |\n16 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n6  + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n16 -         platform::putchar(*c);\n16 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:23:36\n   |\n23 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n6  + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n23 -         if let Some(c) = platform::getchar() {\n23 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433, E0583.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 63,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_axdtb, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf\n   Compiling cfg-if v1.0.0\n   Compiling nb v1.1.0\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig.git#51b81e4a)\n   Compiling bit_field v0.10.2\n   Compiling void v1.0.2\n   Compiling riscv v0.10.1\n   Compiling nb v0.1.3\n   Compiling static_assertions v1.1.0\n   Compiling embedded-hal v0.2.7\n   Compiling sbi-spec v0.0.4\n   Compiling critical-section v1.1.3\n   Compiling log v0.4.22\n   Compiling sbi-rt v0.0.2\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#4de587b7)\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling bitflags v2.6.0\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#52d4fca1)\n   Compiling percpu_macros2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n[2024-10-03T14:37:59Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-03T14:37:59Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n   Compiling const-default v1.0.0\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal#83ec99c0)\n   Compiling rlsf v0.2.1\n   Compiling bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:6:20\n  |\n6 | pub use platform::{getchar, putchar};\n  |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n  |                    |\n  |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:16:19\n   |\n16 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n6  + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n16 -         platform::putchar(*c);\n16 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:23:36\n   |\n23 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n6  + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n23 -         if let Some(c) = platform::getchar() {\n23 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 4 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 64,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_axdtb, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=x86_64-unknown-none\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/axdtb/rt_axdtb\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-none\n   Compiling bit_field v0.10.2\n   Compiling cfg-if v1.0.0\n   Compiling rustversion v1.0.17\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig.git#51b81e4a)\n   Compiling bitflags v2.6.0\n   Compiling volatile v0.4.6\n   Compiling bitflags v1.3.2\n   Compiling raw-cpuid v10.7.0\n   Compiling x86 v0.52.0\n   Compiling paste v1.0.15\n   Compiling log v0.4.22\n[2024-10-03T14:38:00Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-10-03T14:38:00Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#4de587b7)\n   Compiling spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n   Compiling bit v0.1.1\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#52d4fca1)\n   Compiling raw-cpuid v11.2.0\n   Compiling x86_64 v0.14.12\n   Compiling const-default v1.0.0\n   Compiling rlsf v0.2.1\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal#83ec99c0)\n   Compiling bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\n   Compiling lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n   Compiling ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n   Compiling memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n   Compiling static_assertions v1.1.0\n   Compiling arch_boot v0.1.0 (ssh://git@github.com/shilei-massclouds/arch_boot#8663e839)\n   Compiling allocator v0.1.0 (ssh://git@github.com/shilei-massclouds/allocator#d93ad046)\n   Compiling x2apic v0.4.3\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:6:20\n  |\n6 | pub use platform::{getchar, putchar};\n  |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n  |                    |\n  |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `console_init` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:10:15\n   |\n10 |     platform::console_init();\n   |               ^^^^^^^^^^^^ not found in `platform`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:16:19\n   |\n16 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n6  + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n16 -         platform::putchar(*c);\n16 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/4de587b/early_console/src/lib.rs:23:36\n   |\n23 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n6  + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n23 -         if let Some(c) = platform::getchar() {\n23 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    }
  ]
}