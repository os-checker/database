{
  "env": {
    "tools": {
      "rust_toolchains": {
        "host": {
          "version": "1.83.0-nightly (26b5599e4 2024-09-06)",
          "commit_hash": "26b5599e4d6ed2b45152c60493c1788c0a27533d",
          "commit_date": "2024-09-06",
          "host": "x86_64-unknown-linux-gnu",
          "release": "1.83.0-nightly",
          "llvm_version": "19.1.0"
        },
        "installed": [
          {
            "channel": "nightly-x86_64-unknown-linux-gnu (default)",
            "profile": null,
            "targets": [
              "aarch64-unknown-none",
              "aarch64-unknown-none-softfloat",
              "loongarch64-unknown-none",
              "riscv64gc-unknown-none-elf",
              "riscv64imac-unknown-none-elf",
              "x86_64-unknown-linux-gnu",
              "x86_64-unknown-none"
            ],
            "components": [
              "aarch64-unknown-none",
              "aarch64-unknown-none-softfloat",
              "loongarch64-unknown-none",
              "riscv64gc-unknown-none-elf",
              "riscv64imac-unknown-none-elf",
              "x86_64-unknown-linux-gnu",
              "x86_64-unknown-none"
            ],
            "toml_path": ""
          }
        ]
      },
      "os_checker": {
        "start": 1725698697779,
        "finish": 1725698754639,
        "duration_ms": 56859,
        "git_time": "2024-09-07 16:29:52 +0800",
        "git_sha": "bd7ce0163b40153bc5c38540cdde914afd52fc3c"
      }
    },
    "kinds": {
      "order": [
        "Cargo",
        "Clippy(Error)",
        "Clippy(Warn)",
        "Lockbud(Probably)",
        "Lockbud(Possibly)",
        "Unformatted"
      ],
      "mapping": {
        "cargo": [
          "Cargo"
        ],
        "clippy": [
          "Clippy(Error)",
          "Clippy(Warn)"
        ],
        "lockbud": [
          "Lockbud(Probably)",
          "Lockbud(Possibly)"
        ],
        "fmt": [
          "Unformatted"
        ]
      }
    },
    "repos": [
      {
        "user": "kern-crates",
        "repo": "axconfig",
        "rust_toolchain_idxs": []
      },
      {
        "user": "kern-crates",
        "repo": "axdisplay",
        "rust_toolchain_idxs": []
      },
      {
        "user": "kern-crates",
        "repo": "axdriver",
        "rust_toolchain_idxs": []
      },
      {
        "user": "kern-crates",
        "repo": "axerrno",
        "rust_toolchain_idxs": []
      },
      {
        "user": "kern-crates",
        "repo": "axfeat",
        "rust_toolchain_idxs": []
      },
      {
        "user": "kern-crates",
        "repo": "axfs",
        "rust_toolchain_idxs": []
      },
      {
        "user": "kern-crates",
        "repo": "axfs_devfs",
        "rust_toolchain_idxs": []
      },
      {
        "user": "kern-crates",
        "repo": "axfs_ramfs",
        "rust_toolchain_idxs": []
      }
    ],
    "packages": [
      {
        "name": "axconfig",
        "repo": {
          "repo_idx": 0,
          "user": "kern-crates",
          "repo": "axconfig"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "axdisplay",
        "repo": {
          "repo_idx": 1,
          "user": "kern-crates",
          "repo": "axdisplay"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "axdriver",
        "repo": {
          "repo_idx": 2,
          "user": "kern-crates",
          "repo": "axdriver"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "axerrno",
        "repo": {
          "repo_idx": 3,
          "user": "kern-crates",
          "repo": "axerrno"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "axfeat",
        "repo": {
          "repo_idx": 4,
          "user": "kern-crates",
          "repo": "axfeat"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "axfs",
        "repo": {
          "repo_idx": 5,
          "user": "kern-crates",
          "repo": "axfs"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "axfs_devfs",
        "repo": {
          "repo_idx": 6,
          "user": "kern-crates",
          "repo": "axfs_devfs"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "axfs_ramfs",
        "repo": {
          "repo_idx": 7,
          "user": "kern-crates",
          "repo": "axfs_ramfs"
        },
        "rust_toolchain_idx": null
      }
    ]
  },
  "cmd": [
    {
      "package_idx": 0,
      "tool": "fmt",
      "cmd": "cargo fmt -p axconfig -- --emit=json",
      "count": 0,
      "duration_ms": 223,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 15950,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 14921,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "fmt",
      "cmd": "cargo fmt -p axdisplay -- --emit=json",
      "count": 0,
      "duration_ms": 513,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 1,
      "duration_ms": 21268,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 21775,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 21268,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 21775,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "fmt",
      "cmd": "cargo fmt -p axdriver -- --emit=json",
      "count": 0,
      "duration_ms": 233,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 28,
      "duration_ms": 8132,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 1279,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "fmt",
      "cmd": "cargo fmt -p axerrno -- --emit=json",
      "count": 0,
      "duration_ms": 234,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 1,
      "duration_ms": 8210,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 1412,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "fmt",
      "cmd": "cargo fmt -p axfeat -- --emit=json",
      "count": 0,
      "duration_ms": 220,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 1,
      "duration_ms": 18114,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 25424,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 18114,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 25424,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "fmt",
      "cmd": "cargo fmt -p axfs -- --emit=json",
      "count": 1,
      "duration_ms": 454,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 1,
      "duration_ms": 7165,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 16782,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 7165,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 16782,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "fmt",
      "cmd": "cargo fmt -p axfs_devfs -- --emit=json",
      "count": 0,
      "duration_ms": 422,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 9569,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 4413,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "fmt",
      "cmd": "cargo fmt -p axfs_ramfs -- --emit=json",
      "count": 0,
      "duration_ms": 624,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 1,
      "duration_ms": 6283,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 4282,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    }
  ],
  "data": [
    {
      "cmd_idx": 4,
      "file": "/home/runner/.cargo/git/checkouts/axconfig-a375f0c4fb0314cc/ecfc417/build.rs",
      "kind": "Clippy(Error)",
      "raw": "error: environment variable `AX_WORK_DIR` not defined at compile time\n --> /home/runner/.cargo/git/checkouts/axconfig-a375f0c4fb0314cc/ecfc417/build.rs:6:34\n  |\n6 |     let root_dir = PathBuf::from(std::env!(\"AX_WORK_DIR\"));\n  |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: use `std::env::var(\"AX_WORK_DIR\")` to read the variable at run time\n  = note: this error originates in the macro `std::env` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 6,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=axdisplay, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_3/kern-crates/axdisplay\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Updating git repository `https://github.com/Starry-OS/axdriver.git`\n    Updating git repository `https://github.com/Starry-OS/axsync.git`\n    Updating git repository `https://github.com/Starry-OS/driver_display.git`\n    Updating git repository `https://github.com/Starry-OS/lazy_init.git`\n    Updating crates.io index\n    Updating git repository `https://github.com/Starry-OS/axconfig.git`\n    Updating git repository `https://github.com/Starry-OS/axhal.git`\n    Updating git repository `https://github.com/Starry-OS/driver_common.git`\n    Updating git repository `https://github.com/Starry-OS/driver_pci.git`\n    Updating git repository `https://github.com/Starry-OS/axtask.git`\n    Updating git repository `https://github.com/Starry-OS/spinlock.git`\n    Updating git repository `https://github.com/Starry-OS/axlog.git`\n    Updating git repository `https://github.com/Starry-OS/crate_interface.git`\n    Updating git repository `https://github.com/Starry-OS/handler_table.git`\n    Updating git repository `https://github.com/Starry-OS/kernel_guard.git`\n    Updating git repository `https://github.com/Starry-OS/memory_addr.git`\n    Updating git repository `https://github.com/Starry-OS/of.git`\n    Updating git repository `https://github.com/Starry-OS/page_table_entry.git`\n    Updating git repository `https://github.com/Starry-OS/percpu.git`\n    Updating git repository `https://github.com/Starry-OS/ratio.git`\n    Updating git repository `https://github.com/Starry-OS/taskctx.git`\n    Updating git repository `https://github.com/Starry-OS/arm_gic.git`\n    Updating git repository `https://github.com/Starry-OS/arm_pl011.git`\n    Updating git repository `https://github.com/Starry-OS/dw_apb_uart.git`\n    Updating git repository `https://github.com/kern-crates/axbacktrace.git`\n    Updating git repository `https://github.com/Starry-OS/axsignal.git`\n    Updating git repository `https://github.com/Starry-OS/linked_list.git`\n    Updating git repository `https://github.com/mexus/numeric-enum-macro`\n    Updating git repository `https://github.com/Starry-OS/percpu_macros.git`\n    Blocking waiting for file lock on package cache\n     Locking 76 packages to latest compatible versions\n      Adding bitflags v1.3.2 (latest: v2.6.0)\n      Adding raw-cpuid v10.7.0 (latest: v11.1.0)\n      Adding tock-registers v0.8.1 (latest: v0.9.0)\n      Adding volatile v0.4.6 (latest: v0.6.1)\n      Adding x86_64 v0.14.12 (latest: v0.15.1)\n   Compiling proc-macro2 v1.0.86\n   Compiling equivalent v1.0.1\n   Compiling serde v1.0.210\n   Compiling hashbrown v0.14.5\n   Compiling unicode-ident v1.0.12\n   Compiling winnow v0.6.18\n   Compiling indexmap v2.5.0\n   Compiling toml_datetime v0.6.8\n    Checking bit_field v0.10.2\n   Compiling toml_edit v0.22.20\n   Compiling quote v1.0.37\n    Checking bitflags v1.3.2\n    Checking raw-cpuid v10.7.0\n   Compiling syn v2.0.77\n    Checking bitflags v2.6.0\n   Compiling x86 v0.52.0\n   Compiling autocfg v1.3.0\n    Checking log v0.4.22\n   Compiling lock_api v0.4.12\n   Compiling rustversion v1.0.17\n   Compiling axconfig v0.1.0 (https://github.com/Starry-OS/axconfig.git#ecfc4170)\nerror: could not compile `axconfig` (build script) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 7,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=axdisplay, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_3/kern-crates/axdisplay\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n   Compiling hashbrown v0.14.5\n   Compiling proc-macro2 v1.0.86\n   Compiling serde v1.0.210\n   Compiling equivalent v1.0.1\n   Compiling toml_datetime v0.6.8\n   Compiling unicode-ident v1.0.12\n   Compiling winnow v0.6.18\n   Compiling indexmap v2.5.0\n   Compiling quote v1.0.37\n   Compiling bit_field v0.10.2\n   Compiling bitflags v1.3.2\n   Compiling syn v2.0.77\n   Compiling raw-cpuid v10.7.0\n   Compiling toml_edit v0.22.20\n   Compiling x86 v0.52.0\n   Compiling autocfg v1.3.0\n   Compiling log v0.4.22\n   Compiling bitflags v2.6.0\n   Compiling lock_api v0.4.12\n   Compiling rustversion v1.0.17\n   Compiling cfg-if v1.0.0\n   Compiling taskctx v0.1.0 (https://github.com/Starry-OS/taskctx.git#8a3436e3)\n   Compiling scopeguard v1.2.0\n   Compiling memory_addr v0.1.0 (https://github.com/Starry-OS/memory_addr.git#a5be547a)\n   Compiling volatile v0.4.6\n   Compiling numeric-enum-macro v0.2.0 (https://github.com/mexus/numeric-enum-macro#20aef288)\n   Compiling static_assertions v1.1.0\n   Compiling spin v0.9.8\n   Compiling paste v1.0.15\n   Compiling tock-registers v0.8.1\n   Compiling percpu v0.1.0 (https://github.com/Starry-OS/percpu.git#85e6d8a7)\n   Compiling aarch64-cpu v9.4.0\n   Compiling lazy_static v1.5.0\n   Compiling x86_64 v0.14.12\n   Compiling axconfig v0.1.0 (https://github.com/Starry-OS/axconfig.git#ecfc4170)\nerror: environment variable `AX_WORK_DIR` not defined at compile time\n --> /home/runner/.cargo/git/checkouts/axconfig-a375f0c4fb0314cc/ecfc417/build.rs:6:34\n  |\n6 |     let root_dir = PathBuf::from(std::env!(\"AX_WORK_DIR\"));\n  |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: use `std::env::var(\"AX_WORK_DIR\")` to read the variable at run time\n  = note: this error originates in the macro `std::env` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: could not compile `axconfig` (build script) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/bus/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `bus`\n --> src/bus/mod.rs:1:7\n  |\n1 | #[cfg(bus = \"mmio\")]\n  |       ^^^^^^^^^^^^\n  |\n  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bus, values(\"mmio\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bus, values(\\\"mmio\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n  = note: `#[warn(unexpected_cfgs)]` on by default\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/bus/mod.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `bus`\n --> src/bus/mod.rs:3:7\n  |\n3 | #[cfg(bus = \"pci\")]\n  |       ^^^^^^^^^^^\n  |\n  = help: consider using a Cargo feature instead\n  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n           [lints.rust]\n           unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bus, values(\"pci\"))'] }\n  = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bus, values(\\\"pci\\\"))\");` to the top of the `build.rs`\n  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/drivers.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `net_dev`\n  --> src/drivers.rs:36:7\n   |\n36 | #[cfg(net_dev = \"virtio-net\")]\n   |       ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(net_dev, values(\"virtio-net\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(net_dev, values(\\\"virtio-net\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/drivers.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `block_dev`\n  --> src/drivers.rs:42:7\n   |\n42 | #[cfg(block_dev = \"virtio-blk\")]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(block_dev, values(\"virtio-blk\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(block_dev, values(\\\"virtio-blk\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/drivers.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `display_dev`\n  --> src/drivers.rs:48:7\n   |\n48 | #[cfg(display_dev = \"virtio-gpu\")]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(display_dev, values(\"virtio-gpu\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(display_dev, values(\\\"virtio-gpu\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/drivers.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `block_dev`\n  --> src/drivers.rs:55:14\n   |\n55 |     if #[cfg(block_dev = \"ramdisk\")] {\n   |              ^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(block_dev, values(\"ramdisk\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(block_dev, values(\\\"ramdisk\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/drivers.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `block_dev`\n  --> src/drivers.rs:71:14\n   |\n71 |     if #[cfg(block_dev = \"bcm2835-sdhci\")]{\n   |              ^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(block_dev, values(\"bcm2835-sdhci\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(block_dev, values(\\\"bcm2835-sdhci\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/drivers.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `net_dev`\n  --> src/drivers.rs:85:14\n   |\n85 |     if #[cfg(net_dev = \"ixgbe\")] {\n   |              ^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(net_dev, values(\"ixgbe\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(net_dev, values(\\\"ixgbe\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/drivers.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `bus`\n  --> src/drivers.rs:21:11\n   |\n21 |     #[cfg(bus = \"mmio\")]\n   |           ^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bus, values(\"mmio\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bus, values(\\\"mmio\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/drivers.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `bus`\n  --> src/drivers.rs:26:11\n   |\n26 |     #[cfg(bus = \"pci\")]\n   |           ^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(bus, values(\"pci\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(bus, values(\\\"pci\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/dummy.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `net_dev`\n  --> src/dummy.rs:10:14\n   |\n10 |     if #[cfg(net_dev = \"dummy\")] {\n   |              ^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(net_dev, values(\"dummy\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(net_dev, values(\\\"dummy\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/dummy.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `block_dev`\n  --> src/dummy.rs:38:14\n   |\n38 |     if #[cfg(block_dev = \"dummy\")] {\n   |              ^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(block_dev, values(\"dummy\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(block_dev, values(\\\"dummy\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/dummy.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `display_dev`\n  --> src/dummy.rs:73:14\n   |\n73 |     if #[cfg(display_dev = \"dummy\")] {\n   |              ^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(display_dev, values(\"dummy\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(display_dev, values(\\\"dummy\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/macros.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `net_dev`\n   --> src/macros.rs:37:15\n    |\n37  |           #[cfg(net_dev = \"virtio-net\")]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^\n    |\n   ::: src/lib.rs:125:9\n    |\n125 | /         for_each_drivers!(type Driver, {\n126 | |             if let Some(dev) = Driver::probe_global() {\n127 | |                 info!(\n128 | |                     \"registered a new {:?} device: {:?}\",\n...   |\n133 | |             }\n134 | |         });\n    | |__________- in this macro invocation\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(net_dev, values(\"virtio-net\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(net_dev, values(\\\"virtio-net\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: this warning originates in the macro `for_each_drivers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/macros.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `block_dev`\n   --> src/macros.rs:42:15\n    |\n42  |           #[cfg(block_dev = \"virtio-blk\")]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n   ::: src/lib.rs:125:9\n    |\n125 | /         for_each_drivers!(type Driver, {\n126 | |             if let Some(dev) = Driver::probe_global() {\n127 | |                 info!(\n128 | |                     \"registered a new {:?} device: {:?}\",\n...   |\n133 | |             }\n134 | |         });\n    | |__________- in this macro invocation\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(block_dev, values(\"virtio-blk\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(block_dev, values(\\\"virtio-blk\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: this warning originates in the macro `for_each_drivers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/macros.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `display_dev`\n   --> src/macros.rs:47:15\n    |\n47  |           #[cfg(display_dev = \"virtio-gpu\")]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n   ::: src/lib.rs:125:9\n    |\n125 | /         for_each_drivers!(type Driver, {\n126 | |             if let Some(dev) = Driver::probe_global() {\n127 | |                 info!(\n128 | |                     \"registered a new {:?} device: {:?}\",\n...   |\n133 | |             }\n134 | |         });\n    | |__________- in this macro invocation\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(display_dev, values(\"virtio-gpu\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(display_dev, values(\\\"virtio-gpu\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: this warning originates in the macro `for_each_drivers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/macros.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `block_dev`\n   --> src/macros.rs:52:15\n    |\n52  |           #[cfg(block_dev = \"ramdisk\")]\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n    |\n   ::: src/lib.rs:125:9\n    |\n125 | /         for_each_drivers!(type Driver, {\n126 | |             if let Some(dev) = Driver::probe_global() {\n127 | |                 info!(\n128 | |                     \"registered a new {:?} device: {:?}\",\n...   |\n133 | |             }\n134 | |         });\n    | |__________- in this macro invocation\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(block_dev, values(\"ramdisk\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(block_dev, values(\\\"ramdisk\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: this warning originates in the macro `for_each_drivers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/macros.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `block_dev`\n   --> src/macros.rs:57:15\n    |\n57  |           #[cfg(block_dev = \"bcm2835-sdhci\")]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n   ::: src/lib.rs:125:9\n    |\n125 | /         for_each_drivers!(type Driver, {\n126 | |             if let Some(dev) = Driver::probe_global() {\n127 | |                 info!(\n128 | |                     \"registered a new {:?} device: {:?}\",\n...   |\n133 | |             }\n134 | |         });\n    | |__________- in this macro invocation\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(block_dev, values(\"bcm2835-sdhci\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(block_dev, values(\\\"bcm2835-sdhci\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: this warning originates in the macro `for_each_drivers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/macros.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition name: `net_dev`\n   --> src/macros.rs:62:15\n    |\n62  |           #[cfg(net_dev = \"ixgbe\")]\n    |                 ^^^^^^^^^^^^^^^^^\n    |\n   ::: src/lib.rs:125:9\n    |\n125 | /         for_each_drivers!(type Driver, {\n126 | |             if let Some(dev) = Driver::probe_global() {\n127 | |                 info!(\n128 | |                     \"registered a new {:?} device: {:?}\",\n...   |\n133 | |             }\n134 | |         });\n    | |__________- in this macro invocation\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(net_dev, values(\"ixgbe\"))'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(net_dev, values(\\\"ixgbe\\\"))\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: this warning originates in the macro `for_each_drivers` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/drivers.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: trait `DriverProbe` is never used\n  --> src/drivers.rs:16:11\n   |\n16 | pub trait DriverProbe {\n   |           ^^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: doc list item without indentation\n  --> src/lib.rs:19:5\n   |\n19 | //!  time by corresponding cargo features. For example, [`AxNetDevice`] will be\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\n   = note: `#[warn(clippy::doc_lazy_continuation)]` on by default\nhelp: indent this line\n   |\n19 | //!   time by corresponding cargo features. For example, [`AxNetDevice`] will be\n   |      +\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: doc list item without indentation\n  --> src/lib.rs:20:5\n   |\n20 | //! an alias of [`VirtioNetDev`] if the `virtio-net` feature is enabled. This\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n20 | //!   an alias of [`VirtioNetDev`] if the `virtio-net` feature is enabled. This\n   |     ++\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: doc list item without indentation\n  --> src/lib.rs:21:5\n   |\n21 | //! model provides the best performance as it avoids dynamic dispatch. But on\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n21 | //!   model provides the best performance as it avoids dynamic dispatch. But on\n   |     ++\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: doc list item without indentation\n  --> src/lib.rs:22:5\n   |\n22 | //! limitation, only one device instance is supported for each device category.\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n22 | //!   limitation, only one device instance is supported for each device category.\n   |     ++\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: doc list item without indentation\n  --> src/lib.rs:24:5\n   |\n24 | //! `Box<dyn Trait>`. For example, [`AxNetDevice`] will be [`Box<dyn NetDriverOps>`].\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n24 | //!   `Box<dyn Trait>`. For example, [`AxNetDevice`] will be [`Box<dyn NetDriverOps>`].\n   |     ++\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: doc list item without indentation\n  --> src/lib.rs:25:5\n   |\n25 | //! When call a method provided by the device, it uses [dynamic dispatch][dyn]\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n25 | //!   When call a method provided by the device, it uses [dynamic dispatch][dyn]\n   |     ++\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: doc list item without indentation\n  --> src/lib.rs:26:5\n   |\n26 | //! that may introduce a little overhead. But on the other hand, it is more\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n26 | //!   that may introduce a little overhead. But on the other hand, it is more\n   |     ++\n\n"
    },
    {
      "cmd_idx": 9,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: doc list item without indentation\n  --> src/lib.rs:27:5\n   |\n27 | //! flexible, multiple instances of each device category are supported.\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n27 | //!   flexible, multiple instances of each device category are supported.\n   |     ++\n\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: transmute used without annotations\n   --> src/lib.rs:234:36\n    |\n234 |             Ok(unsafe { core::mem::transmute(value) })\n    |                                    ^^^^^^^^^ help: consider adding missing annotations: `transmute::<i32, AxError>`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_transmute_annotations\n    = note: `#[warn(clippy::missing_transmute_annotations)]` on by default\n\n"
    },
    {
      "cmd_idx": 15,
      "file": "/home/runner/.cargo/git/checkouts/axconfig-a375f0c4fb0314cc/ecfc417/build.rs",
      "kind": "Clippy(Error)",
      "raw": "error: environment variable `AX_WORK_DIR` not defined at compile time\n --> /home/runner/.cargo/git/checkouts/axconfig-a375f0c4fb0314cc/ecfc417/build.rs:6:34\n  |\n6 |     let root_dir = PathBuf::from(std::env!(\"AX_WORK_DIR\"));\n  |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: use `std::env::var(\"AX_WORK_DIR\")` to read the variable at run time\n  = note: this error originates in the macro `std::env` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 17,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=axfeat, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_3/kern-crates/axfeat\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Blocking waiting for file lock on package cache\n    Updating git repository `https://github.com/Starry-OS/axalloc.git`\n    Updating git repository `https://github.com/Starry-OS/axdisplay.git`\n    Updating git repository `https://github.com/Starry-OS/axdriver.git`\n    Updating git repository `https://github.com/Starry-OS/axfs.git`\n    Updating git repository `https://github.com/Starry-OS/axhal.git`\n    Updating git repository `https://github.com/Starry-OS/axlog.git`\n    Updating git repository `https://github.com/Starry-OS/axnet.git`\n    Updating git repository `https://github.com/Starry-OS/axprocess.git`\n    Updating git repository `https://github.com/Starry-OS/axruntime.git`\n    Updating git repository `https://github.com/Starry-OS/axsync.git`\n    Updating git repository `https://github.com/Starry-OS/axtask.git`\n    Updating git repository `https://github.com/Starry-OS/spinlock.git`\n    Updating git repository `https://github.com/Starry-OS/taskctx.git`\n    Updating git repository `https://github.com/Starry-OS/allocator.git`\n    Updating git repository `https://github.com/Starry-OS/axerrno.git`\n    Updating crates.io index\n    Updating git repository `https://github.com/Starry-OS/memory_addr.git`\n    Updating git repository `https://github.com/Starry-OS/driver_display.git`\n    Updating git repository `https://github.com/Starry-OS/lazy_init.git`\n    Updating git repository `https://github.com/Starry-OS/axconfig.git`\n    Updating git repository `https://github.com/Starry-OS/driver_block.git`\n    Updating git repository `https://github.com/Starry-OS/driver_common.git`\n    Updating git repository `https://github.com/Starry-OS/driver_net.git`\n    Updating git repository `https://github.com/Starry-OS/driver_pci.git`\n    Updating git repository `https://github.com/Starry-OS/driver_virtio.git`\n    Updating git repository `https://github.com/Starry-OS/axfs_devfs.git`\n    Updating git repository `https://github.com/Starry-OS/axfs_ramfs.git`\n    Updating git repository `https://github.com/Starry-OS/axfs_vfs.git`\n    Updating git repository `https://github.com/Starry-OS/axio.git`\n    Updating git repository `https://github.com/Starry-OS/capability.git`\n    Updating git repository `https://github.com/Starry-OS/crate_interface.git`\n    Updating git repository `https://github.com/yuoo655/ext4_rs.git`\n    Updating git repository `https://github.com/rafalh/rust-fatfs`\n    Updating git repository `https://github.com/elliott10/lwext4_rust.git`\n    Updating git submodule `https://github.com/gkostka/lwext4.git`\n    Updating git repository `https://github.com/Starry-OS/handler_table.git`\n    Updating git repository `https://github.com/Starry-OS/kernel_guard.git`\n    Updating git repository `https://github.com/Starry-OS/of.git`\n    Updating git repository `https://github.com/Starry-OS/page_table.git`\n    Updating git repository `https://github.com/Starry-OS/page_table_entry.git`\n    Updating git repository `https://github.com/Starry-OS/percpu.git`\n    Updating git repository `https://github.com/Starry-OS/ratio.git`\n    Updating git repository `https://github.com/Starry-OS/arm_gic.git`\n    Updating git repository `https://github.com/Starry-OS/arm_pl011.git`\n    Updating git repository `https://github.com/Starry-OS/dw_apb_uart.git`\n    Updating git repository `https://github.com/rcore-os/smoltcp.git`\n    Updating git repository `https://github.com/Starry-OS/axfutex.git`\n    Updating git repository `https://github.com/Starry-OS/axmem.git`\n    Updating git repository `https://github.com/Starry-OS/axsignal.git`\n    Updating git repository `https://github.com/Starry-OS/elf_parser.git`\n    Updating git repository `https://github.com/kern-crates/axbacktrace.git`\n    Updating git repository `https://github.com/Starry-OS/linked_list.git`\n    Updating git repository `https://github.com/mexus/numeric-enum-macro`\n    Updating git repository `https://github.com/Starry-OS/scheduler.git`\n    Updating git repository `https://github.com/Starry-OS/timer_list.git`\n    Updating git repository `https://github.com/rcore-os/bitmap-allocator.git`\n    Updating git repository `https://github.com/arceos-org/slab_allocator.git`\n    Updating git repository `https://github.com/lhw2002426/bcm2835-sdhci.git`\n    Updating git repository `https://github.com/KuangjuX/ixgbe-driver.git`\n    Updating git repository `https://github.com/Starry-OS/percpu_macros.git`\n    Updating git repository `https://github.com/rcore-os/smoltcp.git`\n    Blocking waiting for file lock on package cache\n     Locking 154 packages to latest compatible versions\n      Adding ahash v0.7.8 (latest: v0.8.11)\n      Adding base64 v0.13.1 (latest: v0.22.1)\n      Adding bitflags v1.3.2 (latest: v2.6.0)\n      Adding buddy_system_allocator v0.9.1 (latest: v0.10.0)\n      Adding embedded-hal v0.2.7 (latest: v1.0.0)\n      Adding hash32 v0.2.1 (latest: v0.3.1)\n      Adding hashbrown v0.11.2 (latest: v0.14.5)\n      Adding heapless v0.7.17 (latest: v0.8.0)\n      Adding itertools v0.9.0 (latest: v0.13.0)\n      Adding nb v0.1.3 (latest: v1.1.0)\n      Adding raw-cpuid v10.7.0 (latest: v11.1.0)\n      Adding riscv v0.10.1 (latest: v0.11.1)\n      Adding syn v1.0.109 (latest: v2.0.77)\n      Adding tock-registers v0.8.1 (latest: v0.9.0)\n      Adding volatile v0.2.7 (latest: v0.6.1)\n      Adding volatile v0.3.0 (latest: v0.6.1)\n      Adding volatile v0.4.6 (latest: v0.6.1)\n      Adding wasi v0.11.0+wasi-snapshot-preview1 (latest: v0.13.2+wasi-0.2.1)\n      Adding x86_64 v0.14.12 (latest: v0.15.1)\n    Blocking waiting for file lock on package cache\n    Blocking waiting for file lock on package cache\n    Blocking waiting for file lock on package cache\n   Compiling equivalent v1.0.1\n   Compiling serde v1.0.210\n   Compiling hashbrown v0.14.5\n   Compiling winnow v0.6.18\n   Compiling toml_datetime v0.6.8\n    Checking bit_field v0.10.2\n   Compiling indexmap v2.5.0\n    Checking bitflags v1.3.2\n   Compiling proc-macro2 v1.0.86\n    Checking raw-cpuid v10.7.0\n   Compiling toml_edit v0.22.20\n   Compiling autocfg v1.3.0\n   Compiling x86 v0.52.0\n   Compiling unicode-ident v1.0.12\n   Compiling lock_api v0.4.12\n   Compiling rustversion v1.0.17\n    Checking cfg-if v1.0.0\n    Checking log v0.4.22\n   Compiling axconfig v0.1.0 (https://github.com/Starry-OS/axconfig.git#ecfc4170)\nerror: could not compile `axconfig` (build script) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 18,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=axfeat, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_3/kern-crates/axfeat\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n   Compiling serde v1.0.210\n   Compiling equivalent v1.0.1\n   Compiling hashbrown v0.14.5\n   Compiling winnow v0.6.18\n   Compiling toml_datetime v0.6.8\n   Compiling bit_field v0.10.2\n   Compiling proc-macro2 v1.0.86\n   Compiling bitflags v1.3.2\n   Compiling raw-cpuid v10.7.0\n   Compiling indexmap v2.5.0\n   Compiling autocfg v1.3.0\n   Compiling toml_edit v0.22.20\n   Compiling unicode-ident v1.0.12\n   Compiling x86 v0.52.0\n   Compiling lock_api v0.4.12\n   Compiling rustversion v1.0.17\n   Compiling cfg-if v1.0.0\n   Compiling quote v1.0.37\n   Compiling taskctx v0.1.0 (https://github.com/Starry-OS/taskctx.git#8a3436e3)\n   Compiling scopeguard v1.2.0\n   Compiling memory_addr v0.1.0 (https://github.com/Starry-OS/memory_addr.git#a5be547a)\n   Compiling bitflags v2.6.0\n   Compiling log v0.4.22\n   Compiling syn v2.0.77\n   Compiling static_assertions v1.1.0\n   Compiling numeric-enum-macro v0.2.0 (https://github.com/mexus/numeric-enum-macro#20aef288)\n   Compiling volatile v0.4.6\n   Compiling spin v0.9.8\n   Compiling paste v1.0.15\n   Compiling percpu v0.1.0 (https://github.com/Starry-OS/percpu.git#85e6d8a7)\n   Compiling tock-registers v0.8.1\n   Compiling aarch64-cpu v9.4.0\n   Compiling lazy_static v1.5.0\n   Compiling x86_64 v0.14.12\n   Compiling axconfig v0.1.0 (https://github.com/Starry-OS/axconfig.git#ecfc4170)\nerror: environment variable `AX_WORK_DIR` not defined at compile time\n --> /home/runner/.cargo/git/checkouts/axconfig-a375f0c4fb0314cc/ecfc417/build.rs:6:34\n  |\n6 |     let root_dir = PathBuf::from(std::env!(\"AX_WORK_DIR\"));\n  |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: use `std::env::var(\"AX_WORK_DIR\")` to read the variable at run time\n  = note: this error originates in the macro `std::env` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: could not compile `axconfig` (build script) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 19,
      "file": "src/dev.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_3/kern-crates/axfs/src/dev.rs (original lines from 122 to 122)\n-\n"
    },
    {
      "cmd_idx": 20,
      "file": "/home/runner/.cargo/git/checkouts/axconfig-a375f0c4fb0314cc/ecfc417/build.rs",
      "kind": "Clippy(Error)",
      "raw": "error: environment variable `AX_WORK_DIR` not defined at compile time\n --> /home/runner/.cargo/git/checkouts/axconfig-a375f0c4fb0314cc/ecfc417/build.rs:6:34\n  |\n6 |     let root_dir = PathBuf::from(std::env!(\"AX_WORK_DIR\"));\n  |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: use `std::env::var(\"AX_WORK_DIR\")` to read the variable at run time\n  = note: this error originates in the macro `std::env` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n"
    },
    {
      "cmd_idx": 22,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=axfs, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_3/kern-crates/axfs\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Updating git repository `https://github.com/Starry-OS/axconfig.git`\n    Updating git repository `https://github.com/Starry-OS/axdriver.git`\n    Updating git repository `https://github.com/Starry-OS/axerrno.git`\n    Updating git repository `https://github.com/Starry-OS/axfs_devfs.git`\n    Updating git repository `https://github.com/Starry-OS/axfs_ramfs.git`\n    Updating git repository `https://github.com/Starry-OS/axfs_vfs.git`\n    Updating git repository `https://github.com/Starry-OS/axio.git`\n    Updating git repository `https://github.com/Starry-OS/axsync.git`\n    Updating crates.io index\n    Updating git repository `https://github.com/Starry-OS/capability.git`\n    Updating git repository `https://github.com/Starry-OS/crate_interface.git`\n    Updating git repository `https://github.com/Starry-OS/driver_block.git`\n    Updating git repository `https://github.com/yuoo655/ext4_rs.git`\n    Updating git repository `https://github.com/rafalh/rust-fatfs`\n    Updating git repository `https://github.com/Starry-OS/lazy_init.git`\n    Updating git repository `https://github.com/elliott10/lwext4_rust.git`\n    Updating git repository `https://github.com/Starry-OS/axtask.git`\n    Updating git repository `https://github.com/Starry-OS/axhal.git`\n    Updating git repository `https://github.com/Starry-OS/driver_common.git`\n    Updating git repository `https://github.com/Starry-OS/driver_pci.git`\n    Updating git repository `https://github.com/Starry-OS/spinlock.git`\n    Updating git repository `https://github.com/kern-crates/axbacktrace.git`\n    Updating git repository `https://github.com/Starry-OS/axlog.git`\n    Updating git repository `https://github.com/Starry-OS/axsignal.git`\n    Updating git repository `https://github.com/Starry-OS/linked_list.git`\n    Updating git repository `https://github.com/mexus/numeric-enum-macro`\n    Updating git repository `https://github.com/Starry-OS/percpu.git`\n    Updating git repository `https://github.com/Starry-OS/taskctx.git`\n    Updating git repository `https://github.com/Starry-OS/handler_table.git`\n    Updating git repository `https://github.com/Starry-OS/kernel_guard.git`\n    Updating git repository `https://github.com/Starry-OS/memory_addr.git`\n    Updating git repository `https://github.com/Starry-OS/of.git`\n    Updating git repository `https://github.com/Starry-OS/page_table_entry.git`\n    Updating git repository `https://github.com/Starry-OS/ratio.git`\n    Updating git repository `https://github.com/Starry-OS/arm_gic.git`\n    Updating git repository `https://github.com/Starry-OS/arm_pl011.git`\n    Updating git repository `https://github.com/Starry-OS/dw_apb_uart.git`\n    Updating git repository `https://github.com/Starry-OS/scheduler.git`\n    Updating git repository `https://github.com/Starry-OS/timer_list.git`\n    Updating git repository `https://github.com/Starry-OS/percpu_macros.git`\n     Locking 93 packages to latest compatible versions\n      Adding bitflags v1.3.2 (latest: v2.6.0)\n      Adding itertools v0.9.0 (latest: v0.13.0)\n      Adding raw-cpuid v10.7.0 (latest: v11.1.0)\n      Adding tock-registers v0.8.1 (latest: v0.9.0)\n      Adding volatile v0.4.6 (latest: v0.6.1)\n      Adding x86_64 v0.14.12 (latest: v0.15.1)\n    Checking log v0.4.22\n   Compiling equivalent v1.0.1\n   Compiling serde v1.0.210\n   Compiling proc-macro2 v1.0.86\n   Compiling hashbrown v0.14.5\n   Compiling winnow v0.6.18\n   Compiling unicode-ident v1.0.12\n   Compiling indexmap v2.5.0\n   Compiling toml_datetime v0.6.8\n    Checking bitflags v2.6.0\n   Compiling toml_edit v0.22.20\n   Compiling quote v1.0.37\n    Checking bit_field v0.10.2\n   Compiling syn v2.0.77\n   Compiling autocfg v1.3.0\n    Checking bitflags v1.3.2\n   Compiling lock_api v0.4.12\n    Checking raw-cpuid v10.7.0\n   Compiling axconfig v0.1.0 (https://github.com/Starry-OS/axconfig.git#ecfc4170)\nerror: could not compile `axconfig` (build script) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 23,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=axfs, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_3/kern-crates/axfs\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n   Compiling log v0.4.22\n   Compiling equivalent v1.0.1\n   Compiling hashbrown v0.14.5\n   Compiling proc-macro2 v1.0.86\n   Compiling serde v1.0.210\n   Compiling winnow v0.6.18\n   Compiling toml_datetime v0.6.8\n   Compiling unicode-ident v1.0.12\n   Compiling indexmap v2.5.0\n   Compiling bitflags v2.6.0\n   Compiling quote v1.0.37\n   Compiling bit_field v0.10.2\n   Compiling syn v2.0.77\n   Compiling bitflags v1.3.2\n   Compiling autocfg v1.3.0\n   Compiling toml_edit v0.22.20\n   Compiling lock_api v0.4.12\n   Compiling raw-cpuid v10.7.0\n   Compiling scopeguard v1.2.0\n   Compiling x86 v0.52.0\n   Compiling cfg-if v1.0.0\n   Compiling rustversion v1.0.17\n   Compiling spin v0.9.8\n   Compiling memory_addr v0.1.0 (https://github.com/Starry-OS/memory_addr.git#a5be547a)\n   Compiling taskctx v0.1.0 (https://github.com/Starry-OS/taskctx.git#8a3436e3)\n   Compiling static_assertions v1.1.0\n   Compiling numeric-enum-macro v0.2.0 (https://github.com/mexus/numeric-enum-macro#20aef288)\n   Compiling volatile v0.4.6\n   Compiling paste v1.0.15\n   Compiling lazy_static v1.5.0\n   Compiling tock-registers v0.8.1\n   Compiling percpu v0.1.0 (https://github.com/Starry-OS/percpu.git#85e6d8a7)\n   Compiling axerrno v0.1.0 (https://github.com/Starry-OS/axerrno.git#3e2372cd)\n   Compiling aarch64-cpu v9.4.0\n   Compiling axconfig v0.1.0 (https://github.com/Starry-OS/axconfig.git#ecfc4170)\nerror: environment variable `AX_WORK_DIR` not defined at compile time\n --> /home/runner/.cargo/git/checkouts/axconfig-a375f0c4fb0314cc/ecfc417/build.rs:6:34\n  |\n6 |     let root_dir = PathBuf::from(std::env!(\"AX_WORK_DIR\"));\n  |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: use `std::env::var(\"AX_WORK_DIR\")` to read the variable at run time\n  = note: this error originates in the macro `std::env` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n   Compiling x86_64 v0.14.12\nerror: could not compile `axconfig` (build script) due to 1 previous error\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 28,
      "file": "src/file.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: you should consider adding a `Default` implementation for `FileNode`\n  --> src/file.rs:14:5\n   |\n14 | /     pub const fn new() -> Self {\n15 | |         Self {\n16 | |             content: RwLock::new(Vec::new()),\n17 | |         }\n18 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n   = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n   |\n12 + impl Default for FileNode {\n13 +     fn default() -> Self {\n14 +         Self::new()\n15 +     }\n16 + }\n   |\n\n"
    }
  ]
}