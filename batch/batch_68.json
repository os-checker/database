{
  "env": {
    "tools": {
      "rust_toolchains": {
        "host": {
          "version": "1.86.0-nightly (f7cc13af8 2025-01-25)",
          "commit_hash": "f7cc13af822fe68c64fec0b05aa9dd1412451f7c",
          "commit_date": "2025-01-25",
          "host": "x86_64-unknown-linux-gnu",
          "release": "1.86.0-nightly",
          "llvm_version": "19.1.7"
        },
        "installed": [
          {
            "channel": "nightly-2025-01-26-x86_64-unknown-linux-gnu",
            "profile": null,
            "targets": [
              "x86_64-unknown-linux-gnu"
            ],
            "components": [
              "cargo-x86_64-unknown-linux-gnu",
              "clippy-x86_64-unknown-linux-gnu",
              "rust-std-x86_64-unknown-linux-gnu",
              "rustc-x86_64-unknown-linux-gnu",
              "rustfmt-x86_64-unknown-linux-gnu"
            ],
            "toml_path": "/home/runner/check",
            "need_install_clippy": false,
            "peculiar_targets": null
          }
        ]
      },
      "os_checker": {
        "start": 1739392050947,
        "finish": 1739392052339,
        "duration_ms": 1392,
        "git_time": "2025-02-10 09:20:46 +0800",
        "git_sha": "459f626aa565e67d76b55bfd0c7fb1ff273c7f1c"
      }
    },
    "kinds": {
      "order": [
        "Cargo",
        "Clippy(Error)",
        "Clippy(Warn)",
        "Semver Violation",
        "Audit",
        "Mirai",
        "Rapx",
        "Rudra",
        "Lockbud(Probably)",
        "Lockbud(Possibly)",
        "Outdated",
        "Geiger",
        "Unformatted"
      ],
      "mapping": {
        "cargo": [
          "Cargo"
        ],
        "clippy": [
          "Clippy(Error)",
          "Clippy(Warn)"
        ],
        "semver-checks": [
          "Semver Violation"
        ],
        "audit": [
          "Audit"
        ],
        "mirai": [
          "Mirai"
        ],
        "rapx": [
          "Rapx"
        ],
        "rudra": [
          "Rudra"
        ],
        "lockbud": [
          "Lockbud(Probably)",
          "Lockbud(Possibly)"
        ],
        "outdated": [
          "Outdated"
        ],
        "geiger": [
          "Geiger"
        ],
        "fmt": [
          "Unformatted"
        ]
      }
    },
    "repos": [
      {
        "user": "shilei-massclouds",
        "repo": "rust_fatfs"
      },
      {
        "user": "shilei-massclouds",
        "repo": "signal"
      }
    ],
    "packages": [
      {
        "name": "rust_fatfs",
        "repo": {
          "repo_idx": 0,
          "user": "shilei-massclouds",
          "repo": "rust_fatfs"
        }
      },
      {
        "name": "signal",
        "repo": {
          "repo_idx": 1,
          "user": "shilei-massclouds",
          "repo": "signal"
        }
      }
    ]
  },
  "cmd": [
    {
      "package_idx": 0,
      "tool": "fmt",
      "cmd": "cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu fmt",
      "count": 0,
      "duration_ms": 149,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu  --no-deps",
      "count": 19,
      "duration_ms": 965,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "semver-checks",
      "cmd": "cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu ",
      "count": 1,
      "duration_ms": 1886,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "audit",
      "cmd": "cargo audit",
      "count": 1,
      "duration_ms": 243,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "mirai",
      "cmd": "cargo +nightly-2025-01-04 mirai --target x86_64-unknown-linux-gnu ",
      "count": 20,
      "duration_ms": 5040,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-12-01 lockbud -k all -- --target x86_64-unknown-linux-gnu ",
      "count": 0,
      "duration_ms": 739,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "rapx",
      "cmd": "cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-linux-gnu ",
      "count": 0,
      "duration_ms": 5375,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "rudra",
      "cmd": "cargo +nightly-2021-10-21 rudra --target x86_64-unknown-linux-gnu ",
      "count": 0,
      "duration_ms": 238,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "outdated",
      "cmd": "cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2",
      "count": 1,
      "duration_ms": 492,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "geiger",
      "cmd": "cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu geiger --output-format Ascii",
      "count": 0,
      "duration_ms": 84,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "cargo",
      "cmd": "VRITUAL=semver-checks cargo",
      "count": 1,
      "duration_ms": 1886,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "cargo",
      "cmd": "VRITUAL=mirai cargo",
      "count": 1,
      "duration_ms": 5040,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "cargo",
      "cmd": "VRITUAL=rapx cargo",
      "count": 1,
      "duration_ms": 5375,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "fmt",
      "cmd": "cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu fmt",
      "count": 0,
      "duration_ms": 95,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu  --no-deps",
      "count": 6,
      "duration_ms": 6813,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "semver-checks",
      "cmd": "cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu ",
      "count": 1,
      "duration_ms": 18397,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "mirai",
      "cmd": "cargo +nightly-2025-01-04 mirai --target x86_64-unknown-linux-gnu ",
      "count": 6,
      "duration_ms": 6879,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-12-01 lockbud -k all -- --target x86_64-unknown-linux-gnu ",
      "count": 0,
      "duration_ms": 9035,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "rapx",
      "cmd": "cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-linux-gnu ",
      "count": 0,
      "duration_ms": 6325,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "rudra",
      "cmd": "cargo +nightly-2021-10-21 rudra --target x86_64-unknown-linux-gnu ",
      "count": 0,
      "duration_ms": 239,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "outdated",
      "cmd": "cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 24550,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "geiger",
      "cmd": "cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu geiger --output-format Ascii",
      "count": 0,
      "duration_ms": 150,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 6813,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "cargo",
      "cmd": "VRITUAL=semver-checks cargo",
      "count": 1,
      "duration_ms": 18397,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "cargo",
      "cmd": "VRITUAL=mirai cargo",
      "count": 1,
      "duration_ms": 6879,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 9035,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "cargo",
      "cmd": "VRITUAL=rapx cargo",
      "count": 1,
      "duration_ms": 6325,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2025-01-25",
      "features": [],
      "flags": []
    }
  ],
  "data": [
    {
      "cmd_idx": 1,
      "file": "src/boot_sector.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: importing legacy numeric constants\n --> src/boot_sector.rs:2:5\n  |\n2 | use core::u16;\n  |     ^^^^^^^^^\n  |\n  = help: remove this import\n  = note: then `u16::<CONST>` will resolve to the respective associated constant\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n  = note: `#[warn(clippy::legacy_numeric_constants)]` on by default\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/boot_sector.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: importing legacy numeric constants\n --> src/boot_sector.rs:3:5\n  |\n3 | use core::u8;\n  |     ^^^^^^^^\n  |\n  = help: remove this import\n  = note: then `u8::<CONST>` will resolve to the respective associated constant\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/boot_sector.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: manually reimplementing `div_ceil`\n   --> src/boot_sector.rs:366:9\n    |\n366 |         (root_dir_bytes + u32::from(self.bytes_per_sector) - 1) / u32::from(self.bytes_per_sector)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.div_ceil()`: `root_dir_bytes.div_ceil(u32::from(self.bytes_per_sector))`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil\n    = note: `#[warn(clippy::manual_div_ceil)]` on by default\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/boot_sector.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: manually reimplementing `div_ceil`\n   --> src/boot_sector.rs:402:9\n    |\n402 |         ((bytes + cluster_size - 1) / cluster_size) as u32\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.div_ceil()`: `bytes.div_ceil(cluster_size)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/boot_sector.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: manually reimplementing `div_ceil`\n   --> src/boot_sector.rs:575:27\n    |\n575 |     let sectors_per_fat = (t1 + t2 - 1) / t2;\n    |                           ^^^^^^^^^^^^^^^^^^ help: consider using `.div_ceil()`: `t1.div_ceil(t2)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/boot_sector.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: manually reimplementing `div_ceil`\n   --> src/boot_sector.rs:633:9\n    |\n633 |         (root_dir_bytes + u32::from(bytes_per_sector) - 1) / u32::from(bytes_per_sector)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.div_ceil()`: `root_dir_bytes.div_ceil(u32::from(bytes_per_sector))`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/dir.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: manually reimplementing `div_ceil`\n   --> src/dir.rs:739:37\n    |\n739 | const MAX_LONG_DIR_ENTRIES: usize = (MAX_LONG_NAME_LEN + LFN_PART_LEN - 1) / LFN_PART_LEN;\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.div_ceil()`: `MAX_LONG_NAME_LEN.div_ceil(LFN_PART_LEN)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/dir.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: manually reimplementing `div_ceil`\n   --> src/dir.rs:955:27\n    |\n955 |         let num_entries = (name_utf16.len() + LFN_PART_LEN - 1) / LFN_PART_LEN;\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.div_ceil()`: `name_utf16.len().div_ceil(LFN_PART_LEN)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/dir_entry.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: matching over `()` is more explicit\n   --> src/dir_entry.rs:390:16\n    |\n390 |             Ok(_) => {}\n    |                ^ help: use `()` instead of `_`: `()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ignored_unit_patterns\nnote: the lint level is defined here\n   --> src/lib.rs:49:9\n    |\n49  | #![warn(clippy::pedantic)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: `#[warn(clippy::ignored_unit_patterns)]` implied by `#[warn(clippy::pedantic)]`\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/file.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: usage of a legacy numeric constant\n  --> src/file.rs:10:28\n   |\n10 | const MAX_FILE_SIZE: u32 = core::u32::MAX;\n   |                            ^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n   |\n10 | const MAX_FILE_SIZE: u32 = u32::MAX;\n   |                            ~~~~~~~~\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/file.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this could be rewritten as `let...else`\n  --> src/file.rs:95:9\n   |\n95 | /         let mut bytes_left = match self.size() {\n96 | |             Some(s) => s,\n97 | |             None => return None.into_iter().flatten(),\n98 | |         };\n   | |__________^ help: consider writing: `let Some(mut bytes_left) = self.size() else { return None.into_iter().flatten() };`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else\n   = note: `#[warn(clippy::manual_let_else)]` implied by `#[warn(clippy::pedantic)]`\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/file.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this could be rewritten as `let...else`\n   --> src/file.rs:99:9\n    |\n99  | /         let first = match self.first_cluster {\n100 | |             Some(f) => f,\n101 | |             None => return None.into_iter().flatten(),\n102 | |         };\n    | |__________^ help: consider writing: `let Some(first) = self.first_cluster else { return None.into_iter().flatten() };`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/file.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this `map_or` can be simplified\n   --> src/file.rs:228:16\n    |\n228 |             if e.inner().size().map_or(false, |s| offset > s) {\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use is_some_and instead: `e.inner().size().is_some_and(|s| offset > s)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_map_or\n    = note: `#[warn(clippy::unnecessary_map_or)]` on by default\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/file.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this could be rewritten as `let...else`\n   --> src/file.rs:280:9\n    |\n280 | /         let current_cluster = match current_cluster_opt {\n281 | |             Some(n) => n,\n282 | |             None => return Ok(0),\n283 | |         };\n    | |__________^ help: consider writing: `let Some(current_cluster) = current_cluster_opt else { return Ok(0) };`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/file.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: this could be rewritten as `let...else`\n   --> src/file.rs:424:9\n    |\n424 | /         let mut new_offset = if let Some(new_offset) = new_offset_opt {\n425 | |             new_offset\n426 | |         } else {\n427 | |             error!(\"Invalid seek offset\");\n428 | |             return Err(Error::InvalidInput);\n429 | |         };\n    | |__________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else\nhelp: consider writing\n    |\n424 ~         let Some(mut new_offset) = new_offset_opt else {\n425 +             error!(\"Invalid seek offset\");\n426 +             return Err(Error::InvalidInput);\n427 +         };\n    |\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/fs.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: importing legacy numeric constants\n  --> src/fs.rs:10:5\n   |\n10 | use core::u32;\n   |     ^^^^^^^^^\n   |\n   = help: remove this import\n   = note: then `u32::<CONST>` will resolve to the respective associated constant\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/fs.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: manually reimplementing `is_power_of_two`\n   --> src/fs.rs:966:13\n    |\n966 |             bytes_per_cluster.count_ones() == 1 && bytes_per_cluster >= 512,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.is_power_of_two()`: `bytes_per_cluster.is_power_of_two()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_is_power_of_two\n    = note: `#[warn(clippy::manual_is_power_of_two)]` implied by `#[warn(clippy::pedantic)]`\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/fs.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: manually reimplementing `is_power_of_two`\n   --> src/fs.rs:996:13\n    |\n996 |             bytes_per_sector.count_ones() == 1 && bytes_per_sector >= 512,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.is_power_of_two()`: `bytes_per_sector.is_power_of_two()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_is_power_of_two\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/io.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: item in documentation is missing backticks\n  --> src/io.rs:31:55\n   |\n31 |     /// (e. g. being close to end-of-file) or because read() was interrupted by a signal.\n   |                                                       ^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown\n   = note: `#[warn(clippy::doc_markdown)]` implied by `#[warn(clippy::pedantic)]`\nhelp: try\n   |\n31 |     /// (e. g. being close to end-of-file) or because `read()` was interrupted by a signal.\n   |                                                       ~~~~~~~~\n\n"
    },
    {
      "cmd_idx": 2,
      "file": "[semver checks]",
      "kind": "Semver Violation",
      "raw": "pkg=rust_fatfs, checker=SemverChecks\ntoolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_68/shilei-massclouds/rust_fatfs/rust_fatfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \ntimestamp=2025-01-27 0:33:23.455428813 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building rust_fatfs v0.4.0 (current)\n       Built [   1.542s] (current)\n     Parsing rust_fatfs v0.4.0 (current)\nerror: unsupported rustdoc format v39 for file: /home/runner/check/batch_68/shilei-massclouds/rust_fatfs/rust_fatfs/target/semver-checks/local-rust_fatfs-0_4_0-8e8da0395f441ef7/target/x86_64-unknown-linux-gnu/doc/rust_fatfs.json\n"
    },
    {
      "cmd_idx": 3,
      "file": "Cargo.lock",
      "kind": "Audit",
      "raw": "    Fetching advisory database from `https://github.com/RustSec/advisory-db.git`\n      Loaded 726 security advisories (from /home/runner/.cargo/advisory-db)\n    Updating crates.io index\n    Scanning Cargo.lock for vulnerabilities (54 crate dependencies)\nCrate:     atty\nVersion:   0.2.14\nWarning:   unmaintained\nTitle:     `atty` is unmaintained\nDate:      2024-09-25\nID:        RUSTSEC-2024-0375\nURL:       https://rustsec.org/advisories/RUSTSEC-2024-0375\nDependency tree:\natty 0.2.14\n└── env_logger 0.9.3\n    └── rust_fatfs 0.4.0\n\nCrate:     atty\nVersion:   0.2.14\nWarning:   unsound\nTitle:     Potential unaligned read\nDate:      2021-07-04\nID:        RUSTSEC-2021-0145\nURL:       https://rustsec.org/advisories/RUSTSEC-2021-0145\n\nwarning: 2 allowed warnings found\n\n{\n  \"database\": {\n    \"advisory-count\": 726,\n    \"last-commit\": \"ffa26704690a3dc403edcd94baef103ee48f66eb\",\n    \"last-updated\": \"2025-01-22T17:11:51Z\"\n  },\n  \"lockfile\": {\n    \"dependency-count\": 54\n  },\n  \"settings\": {\n    \"target_arch\": [],\n    \"target_os\": [],\n    \"severity\": null,\n    \"ignore\": [],\n    \"informational_warnings\": [\n      \"unmaintained\",\n      \"unsound\",\n      \"notice\"\n    ]\n  },\n  \"vulnerabilities\": {\n    \"found\": false,\n    \"count\": 0,\n    \"list\": []\n  },\n  \"warnings\": {\n    \"unmaintained\": [\n      {\n        \"kind\": \"unmaintained\",\n        \"package\": {\n          \"name\": \"atty\",\n          \"version\": \"0.2.14\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\",\n          \"dependencies\": [\n            {\n              \"name\": \"hermit-abi\",\n              \"version\": \"0.1.19\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            },\n            {\n              \"name\": \"libc\",\n              \"version\": \"0.2.169\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            },\n            {\n              \"name\": \"winapi\",\n              \"version\": \"0.3.9\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2024-0375\",\n          \"package\": \"atty\",\n          \"title\": \"`atty` is unmaintained\",\n          \"description\": \"The maintainer of `atty` has [published](https://github.com/softprops/atty/commit/5bfdbe9e48c6ca6a4909e8d5b04f5e843a257e93) an official notice that the crate is no longer\\nunder development, and that users should instead rely on the functionality in the standard library's [`IsTerminal`](https://doc.rust-lang.org/std/io/trait.IsTerminal.html) trait.\\n\\n## Alternative(s)\\n\\n- [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0 and the recommended replacement per the `atty` maintainer.\\n- [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0\",\n          \"date\": \"2024-09-25\",\n          \"aliases\": [],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [],\n          \"cvss\": null,\n          \"informational\": \"unmaintained\",\n          \"references\": [],\n          \"source\": null,\n          \"url\": \"https://github.com/softprops/atty/issues/57\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": null,\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ],\n    \"unsound\": [\n      {\n        \"kind\": \"unsound\",\n        \"package\": {\n          \"name\": \"atty\",\n          \"version\": \"0.2.14\",\n          \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n          \"checksum\": \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\",\n          \"dependencies\": [\n            {\n              \"name\": \"hermit-abi\",\n              \"version\": \"0.1.19\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            },\n            {\n              \"name\": \"libc\",\n              \"version\": \"0.2.169\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            },\n            {\n              \"name\": \"winapi\",\n              \"version\": \"0.3.9\",\n              \"source\": \"registry+https://github.com/rust-lang/crates.io-index\"\n            }\n          ],\n          \"replace\": null\n        },\n        \"advisory\": {\n          \"id\": \"RUSTSEC-2021-0145\",\n          \"package\": \"atty\",\n          \"title\": \"Potential unaligned read\",\n          \"description\": \"On windows, `atty` dereferences a potentially unaligned pointer.\\n\\nIn practice however, the pointer won't be unaligned unless a custom global allocator is used.\\n\\nIn particular, the `System` allocator on windows uses `HeapAlloc`, which guarantees a large enough alignment.\\n\\n# atty is Unmaintained\\n\\nA Pull Request with a fix has been provided over a year ago but the maintainer seems to be unreachable.\\n\\nLast release of `atty` was almost 3 years ago.\\n\\n## Possible Alternative(s)\\n\\nThe below list has not been vetted in any way and may or may not contain alternatives;\\n\\n - [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0\\n - [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0\",\n          \"date\": \"2021-07-04\",\n          \"aliases\": [\n            \"GHSA-g98v-hv3f-hcfr\"\n          ],\n          \"related\": [],\n          \"collection\": \"crates\",\n          \"categories\": [],\n          \"keywords\": [\n            \"unaligned-read\"\n          ],\n          \"cvss\": null,\n          \"informational\": \"unsound\",\n          \"references\": [\n            \"https://github.com/softprops/atty/pull/51\",\n            \"https://github.com/softprops/atty/issues/57\"\n          ],\n          \"source\": null,\n          \"url\": \"https://github.com/softprops/atty/issues/50\",\n          \"withdrawn\": null,\n          \"license\": \"CC0-1.0\"\n        },\n        \"affected\": {\n          \"arch\": [],\n          \"os\": [\n            \"windows\"\n          ],\n          \"functions\": {}\n        },\n        \"versions\": {\n          \"patched\": [],\n          \"unaffected\": []\n        }\n      }\n    ]\n  }\n}"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0432]: unresolved import `fatfs`\n --> tests/format.rs:4:5\n  |\n4 | use fatfs::{DefaultTimeProvider, LossyOemCpConverter, StdIoWrapper};\n  |     ^^^^^ use of undeclared crate or module `fatfs`\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n  --> tests/format.rs:68:31\n   |\n68 |     let mut buffered_stream = fatfs::StdIoWrapper::from(BufStream::new(storage_cur));\n   |                               ^^^^^ use of undeclared crate or module `fatfs`\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n  --> tests/format.rs:16:25\n   |\n16 |     if fs.fat_type() == fatfs::FatType::Fat32 {\n   |                         ^^^^^ use of undeclared crate or module `fatfs`\n   |\nhelp: consider importing this enum\n   |\n1  + use rust_fatfs::FatType;\n   |\nhelp: if you import `FatType`, refer to it directly\n   |\n16 -     if fs.fat_type() == fatfs::FatType::Fat32 {\n16 +     if fs.fat_type() == FatType::Fat32 {\n   |\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n  --> tests/format.rs:71:14\n   |\n71 |     let fs = fatfs::FileSystem::new(buffered_stream, fatfs::FsOptions::new()).expect(\"open fs\");\n   |              ^^^^^ use of undeclared crate or module `fatfs`\n   |\nhelp: consider importing this struct\n   |\n1  + use rust_fatfs::FileSystem;\n   |\nhelp: if you import `FileSystem`, refer to it directly\n   |\n71 -     let fs = fatfs::FileSystem::new(buffered_stream, fatfs::FsOptions::new()).expect(\"open fs\");\n71 +     let fs = FileSystem::new(buffered_stream, fatfs::FsOptions::new()).expect(\"open fs\");\n   |\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n  --> tests/format.rs:71:54\n   |\n71 |     let fs = fatfs::FileSystem::new(buffered_stream, fatfs::FsOptions::new()).expect(\"open fs\");\n   |                                                      ^^^^^ use of undeclared crate or module `fatfs`\n   |\nhelp: consider importing this struct\n   |\n1  + use rust_fatfs::FsOptions;\n   |\nhelp: if you import `FsOptions`, refer to it directly\n   |\n71 -     let fs = fatfs::FileSystem::new(buffered_stream, fatfs::FsOptions::new()).expect(\"open fs\");\n71 +     let fs = fatfs::FileSystem::new(buffered_stream, FsOptions::new()).expect(\"open fs\");\n   |\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n  --> tests/format.rs:79:16\n   |\n79 |     let opts = fatfs::FormatVolumeOptions::new();\n   |                ^^^^^ use of undeclared crate or module `fatfs`\n   |\nhelp: consider importing this struct\n   |\n1  + use rust_fatfs::FormatVolumeOptions;\n   |\nhelp: if you import `FormatVolumeOptions`, refer to it directly\n   |\n79 -     let opts = fatfs::FormatVolumeOptions::new();\n79 +     let opts = FormatVolumeOptions::new();\n   |\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n  --> tests/format.rs:81:31\n   |\n81 |     assert_eq!(fs.fat_type(), fatfs::FatType::Fat12);\n   |                               ^^^^^ use of undeclared crate or module `fatfs`\n   |\nhelp: consider importing this enum\n   |\n1  + use rust_fatfs::FatType;\n   |\nhelp: if you import `FatType`, refer to it directly\n   |\n81 -     assert_eq!(fs.fat_type(), fatfs::FatType::Fat12);\n81 +     assert_eq!(fs.fat_type(), FatType::Fat12);\n   |\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n  --> tests/format.rs:87:16\n   |\n87 |     let opts = fatfs::FormatVolumeOptions::new().fats(1);\n   |                ^^^^^ use of undeclared crate or module `fatfs`\n   |\nhelp: consider importing this struct\n   |\n1  + use rust_fatfs::FormatVolumeOptions;\n   |\nhelp: if you import `FormatVolumeOptions`, refer to it directly\n   |\n87 -     let opts = fatfs::FormatVolumeOptions::new().fats(1);\n87 +     let opts = FormatVolumeOptions::new().fats(1);\n   |\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n  --> tests/format.rs:89:31\n   |\n89 |     assert_eq!(fs.fat_type(), fatfs::FatType::Fat16);\n   |                               ^^^^^ use of undeclared crate or module `fatfs`\n   |\nhelp: consider importing this enum\n   |\n1  + use rust_fatfs::FatType;\n   |\nhelp: if you import `FatType`, refer to it directly\n   |\n89 -     assert_eq!(fs.fat_type(), fatfs::FatType::Fat16);\n89 +     assert_eq!(fs.fat_type(), FatType::Fat16);\n   |\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n  --> tests/format.rs:95:16\n   |\n95 |     let opts = fatfs::FormatVolumeOptions::new();\n   |                ^^^^^ use of undeclared crate or module `fatfs`\n   |\nhelp: consider importing this struct\n   |\n1  + use rust_fatfs::FormatVolumeOptions;\n   |\nhelp: if you import `FormatVolumeOptions`, refer to it directly\n   |\n95 -     let opts = fatfs::FormatVolumeOptions::new();\n95 +     let opts = FormatVolumeOptions::new();\n   |\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n  --> tests/format.rs:97:31\n   |\n97 |     assert_eq!(fs.fat_type(), fatfs::FatType::Fat16);\n   |                               ^^^^^ use of undeclared crate or module `fatfs`\n   |\nhelp: consider importing this enum\n   |\n1  + use rust_fatfs::FatType;\n   |\nhelp: if you import `FatType`, refer to it directly\n   |\n97 -     assert_eq!(fs.fat_type(), fatfs::FatType::Fat16);\n97 +     assert_eq!(fs.fat_type(), FatType::Fat16);\n   |\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n   --> tests/format.rs:103:16\n    |\n103 |     let opts = fatfs::FormatVolumeOptions::new();\n    |                ^^^^^ use of undeclared crate or module `fatfs`\n    |\nhelp: consider importing this struct\n    |\n1   + use rust_fatfs::FormatVolumeOptions;\n    |\nhelp: if you import `FormatVolumeOptions`, refer to it directly\n    |\n103 -     let opts = fatfs::FormatVolumeOptions::new();\n103 +     let opts = FormatVolumeOptions::new();\n    |\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n   --> tests/format.rs:105:31\n    |\n105 |     assert_eq!(fs.fat_type(), fatfs::FatType::Fat32);\n    |                               ^^^^^ use of undeclared crate or module `fatfs`\n    |\nhelp: consider importing this enum\n    |\n1   + use rust_fatfs::FatType;\n    |\nhelp: if you import `FatType`, refer to it directly\n    |\n105 -     assert_eq!(fs.fat_type(), fatfs::FatType::Fat32);\n105 +     assert_eq!(fs.fat_type(), FatType::Fat32);\n    |\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n   --> tests/format.rs:111:16\n    |\n111 |     let opts = fatfs::FormatVolumeOptions::new().bytes_per_sector(4096);\n    |                ^^^^^ use of undeclared crate or module `fatfs`\n    |\nhelp: consider importing this struct\n    |\n1   + use rust_fatfs::FormatVolumeOptions;\n    |\nhelp: if you import `FormatVolumeOptions`, refer to it directly\n    |\n111 -     let opts = fatfs::FormatVolumeOptions::new().bytes_per_sector(4096);\n111 +     let opts = FormatVolumeOptions::new().bytes_per_sector(4096);\n    |\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n   --> tests/format.rs:113:31\n    |\n113 |     assert_eq!(fs.fat_type(), fatfs::FatType::Fat32);\n    |                               ^^^^^ use of undeclared crate or module `fatfs`\n    |\nhelp: consider importing this enum\n    |\n1   + use rust_fatfs::FatType;\n    |\nhelp: if you import `FatType`, refer to it directly\n    |\n113 -     assert_eq!(fs.fat_type(), fatfs::FatType::Fat32);\n113 +     assert_eq!(fs.fat_type(), FatType::Fat32);\n    |\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n   --> tests/format.rs:119:16\n    |\n119 |     let opts = fatfs::FormatVolumeOptions::new();\n    |                ^^^^^ use of undeclared crate or module `fatfs`\n    |\nhelp: consider importing this struct\n    |\n1   + use rust_fatfs::FormatVolumeOptions;\n    |\nhelp: if you import `FormatVolumeOptions`, refer to it directly\n    |\n119 -     let opts = fatfs::FormatVolumeOptions::new();\n119 +     let opts = FormatVolumeOptions::new();\n    |\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n   --> tests/format.rs:128:16\n    |\n128 |     let opts = fatfs::FormatVolumeOptions::new()\n    |                ^^^^^ use of undeclared crate or module `fatfs`\n    |\nhelp: consider importing this struct\n    |\n1   + use rust_fatfs::FormatVolumeOptions;\n    |\nhelp: if you import `FormatVolumeOptions`, refer to it directly\n    |\n128 -     let opts = fatfs::FormatVolumeOptions::new()\n128 +     let opts = FormatVolumeOptions::new()\n    |\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n  --> tests/format.rs:69:5\n   |\n69 |     fatfs::format_volume(&mut buffered_stream, opts).expect(\"format volume\");\n   |     ^^^^^ use of undeclared crate or module `fatfs`\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n  --> tests/format.rs:12:5\n   |\n12 |     fatfs::FileSystem<StdIoWrapper<BufStream<io::Cursor<Vec<u8>>>>, DefaultTimeProvider, LossyOemCpConverter>;\n   |     ^^^^^ use of undeclared crate or module `fatfs`\n\n"
    },
    {
      "cmd_idx": 4,
      "file": "tests/format.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: use of undeclared crate or module `fatfs`\n  --> tests/format.rs:63:25\n   |\n63 | fn test_format_fs(opts: fatfs::FormatVolumeOptions, total_bytes: u64) -> FileSystem {\n   |                         ^^^^^ use of undeclared crate or module `fatfs`\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "[outdated direct dependencies]",
      "kind": "Outdated",
      "raw": "pkg=rust_fatfs, checker=Outdated\ntoolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_68/shilei-massclouds/rust_fatfs/rust_fatfs\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu outdated -R --exit-code=2\ntimestamp=2025-01-27 0:33:35.726494446 +08:00:00\n\nName        Project  Compat  Latest  Kind         Platform\n----        -------  ------  ------  ----         --------\nbitflags    1.3.2    ---     2.8.0   Normal       ---\nenv_logger  0.9.3    ---     0.11.6  Development  ---\n"
    },
    {
      "cmd_idx": 10,
      "file": "(virtual) semver-checks",
      "kind": "Cargo",
      "raw": "// pkg_name=rust_fatfs, checker=SemverChecks\n// toolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_68/shilei-massclouds/rust_fatfs/rust_fatfs\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \n// timestamp=2025-01-27 0:33:21.568547362 +08:00:00\n    Building rust_fatfs v0.4.0 (current)\n       Built [   1.542s] (current)\n     Parsing rust_fatfs v0.4.0 (current)\nerror: unsupported rustdoc format v39 for file: /home/runner/check/batch_68/shilei-massclouds/rust_fatfs/rust_fatfs/target/semver-checks/local-rust_fatfs-0_4_0-8e8da0395f441ef7/target/x86_64-unknown-linux-gnu/doc/rust_fatfs.json\n"
    },
    {
      "cmd_idx": 11,
      "file": "(virtual) mirai",
      "kind": "Cargo",
      "raw": "// pkg_name=rust_fatfs, checker=Mirai\n// toolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_68/shilei-massclouds/rust_fatfs/rust_fatfs\n// cmd=cargo +nightly-2025-01-04 mirai --target x86_64-unknown-linux-gnu \n// timestamp=2025-01-27 0:33:23.753573142 +08:00:00\n    Checking log v0.4.25\n    Checking bitflags v1.3.2\n    Checking rust_fatfs v0.4.0 (/home/runner/check/batch_68/shilei-massclouds/rust_fatfs/rust_fatfs)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.00s\n   Compiling libc v0.2.169\n   Compiling memchr v2.7.4\n   Compiling regex-syntax v0.8.5\n   Compiling log v0.4.25\n   Compiling termcolor v1.4.1\n   Compiling aho-corasick v1.1.3\n   Compiling bitflags v1.3.2\n   Compiling humantime v2.1.0\n   Compiling atty v0.2.14\n   Compiling rust_fatfs v0.4.0 (/home/runner/check/batch_68/shilei-massclouds/rust_fatfs/rust_fatfs)\n   Compiling fscommon v0.1.1\n   Compiling regex-automata v0.4.9\n   Compiling regex v1.11.1\n   Compiling env_logger v0.9.3\nerror: could not compile `rust_fatfs` (test \"format\") due to 20 previous errors\n"
    },
    {
      "cmd_idx": 12,
      "file": "(virtual) rapx",
      "kind": "Cargo",
      "raw": "// pkg_name=rust_fatfs, checker=Rapx\n// toolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_68/shilei-massclouds/rust_fatfs/rust_fatfs\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-linux-gnu \n// timestamp=2025-01-27 0:33:29.614421072 +08:00:00\n    Checking log v0.4.25\n    Checking bitflags v1.3.2\n    Checking rust_fatfs v0.4.0 (/home/runner/check/batch_68/shilei-massclouds/rust_fatfs/rust_fatfs)\nthread 'rustc' panicked at src/analysis/safedrop/check_bugs.rs:51:23:\nindex out of bounds: the len is 34 but the index is 34\nstack backtrace:\n   0:     0x7fd6ae3cac6a - <std::sys::backtrace::BacktraceLock::print::DisplayBacktrace as core::fmt::Display>::fmt::h10effc2e897f3f44\n   1:     0x7fd6aec034a6 - core::fmt::write::hbd15d6610b1ec6a0\n   2:     0x7fd6afe1f351 - std::io::Write::write_fmt::h001054fbeb78f30b\n   3:     0x7fd6ae3caac2 - std::sys::backtrace::BacktraceLock::print::h379243fdc830b8e1\n   4:     0x7fd6ae3ccf96 - std::panicking::default_hook::{{closure}}::h5f0acb8207356983\n   5:     0x7fd6ae3ccde0 - std::panicking::default_hook::h6e553cabd993e75a\n   6:     0x7fd6ad4256ff - std[a52682fb6709fd50]::panicking::update_hook::<alloc[6c1b03e26bdbf4ed]::boxed::Box<rustc_driver_impl[193eb2676e99316f]::install_ice_hook::{closure#0}>>::{closure#0}\n   7:     0x7fd6ae3cd6a8 - std::panicking::rust_panic_with_hook::h41309167c2756168\n   8:     0x7fd6ae3cd47a - std::panicking::begin_panic_handler::{{closure}}::hf306b851c08afab0\n   9:     0x7fd6ae3cb119 - std::sys::backtrace::__rust_end_short_backtrace::he5588192121653f9\n  10:     0x7fd6ae3cd13c - rust_begin_unwind\n  11:     0x7fd6abde5b50 - core::panicking::panic_fmt::h78fd6fa67a3d3b3d\n  12:     0x7fd6acb52c7b - core::panicking::panic_bounds_check::h259d4b2367f1d39c\n  13:     0x5575221413b9 - rapx::analysis::safedrop::check_bugs::<impl rapx::analysis::safedrop::graph::SafeDropGraph>::exist_dead::h6f577a85f46617e6\n  14:     0x557522140f93 - rapx::analysis::safedrop::check_bugs::<impl rapx::analysis::safedrop::graph::SafeDropGraph>::exist_dead::h6f577a85f46617e6\n  15:     0x557522140f93 - rapx::analysis::safedrop::check_bugs::<impl rapx::analysis::safedrop::graph::SafeDropGraph>::exist_dead::h6f577a85f46617e6\n  16:     0x5575221412e0 - rapx::analysis::safedrop::check_bugs::<impl rapx::analysis::safedrop::graph::SafeDropGraph>::exist_dead::h6f577a85f46617e6\n  17:     0x5575221417d4 - rapx::analysis::safedrop::check_bugs::<impl rapx::analysis::safedrop::graph::SafeDropGraph>::dp_check::h23ddbbb14f62045a\n  18:     0x557522149028 - rapx::analysis::safedrop::safedrop::<impl rapx::analysis::safedrop::graph::SafeDropGraph>::check::h8757e1e6f93d07b2\n  19:     0x5575221491d8 - rapx::analysis::safedrop::safedrop::<impl rapx::analysis::safedrop::graph::SafeDropGraph>::check::h8757e1e6f93d07b2\n  20:     0x5575221486eb - rapx::analysis::safedrop::safedrop::<impl rapx::analysis::safedrop::graph::SafeDropGraph>::check::h8757e1e6f93d07b2\n  21:     0x5575221491d8 - rapx::analysis::safedrop::safedrop::<impl rapx::analysis::safedrop::graph::SafeDropGraph>::check::h8757e1e6f93d07b2\n  22:     0x557522121061 - rapx::analysis::safedrop::query_safedrop::h1be5a6c9860f13bc\n  23:     0x557522120f12 - rapx::analysis::safedrop::SafeDrop::start::h0899ae1147682f28\n  24:     0x5575220e282f - rapx::start_analyzer::hbfbfacbf728e58f1\n  25:     0x55752211a74c - rustc_middle::ty::context::GlobalCtxt::enter::hffe97cacd1ae0f61\n  26:     0x5575220e24e2 - <rapx::RapCallback as rustc_driver_impl::Callbacks>::after_analysis::h0a44e9caf4f63e90\n  27:     0x7fd6af97715f - rustc_interface[edd3a01c1bde3f2a]::interface::run_compiler::<core[aa94f1cb029d72f2]::result::Result<(), rustc_span[66abce9569f09a61]::ErrorGuaranteed>, rustc_driver_impl[193eb2676e99316f]::run_compiler::{closure#0}>::{closure#1}\n  28:     0x7fd6afa8c450 - std[a52682fb6709fd50]::sys::backtrace::__rust_begin_short_backtrace::<rustc_interface[edd3a01c1bde3f2a]::util::run_in_thread_with_globals<rustc_interface[edd3a01c1bde3f2a]::util::run_in_thread_pool_with_globals<rustc_interface[edd3a01c1bde3f2a]::interface::run_compiler<core[aa94f1cb029d72f2]::result::Result<(), rustc_span[66abce9569f09a61]::ErrorGuaranteed>, rustc_driver_impl[193eb2676e99316f]::run_compiler::{closure#0}>::{closure#1}, core[aa94f1cb029d72f2]::result::Result<(), rustc_span[66abce9569f09a61]::ErrorGuaranteed>>::{closure#0}, core[aa94f1cb029d72f2]::result::Result<(), rustc_span[66abce9569f09a61]::ErrorGuaranteed>>::{closure#0}::{closure#0}, core[aa94f1cb029d72f2]::result::Result<(), rustc_span[66abce9569f09a61]::ErrorGuaranteed>>\n  29:     0x7fd6afa8cb17 - <<std[a52682fb6709fd50]::thread::Builder>::spawn_unchecked_<rustc_interface[edd3a01c1bde3f2a]::util::run_in_thread_with_globals<rustc_interface[edd3a01c1bde3f2a]::util::run_in_thread_pool_with_globals<rustc_interface[edd3a01c1bde3f2a]::interface::run_compiler<core[aa94f1cb029d72f2]::result::Result<(), rustc_span[66abce9569f09a61]::ErrorGuaranteed>, rustc_driver_impl[193eb2676e99316f]::run_compiler::{closure#0}>::{closure#1}, core[aa94f1cb029d72f2]::result::Result<(), rustc_span[66abce9569f09a61]::ErrorGuaranteed>>::{closure#0}, core[aa94f1cb029d72f2]::result::Result<(), rustc_span[66abce9569f09a61]::ErrorGuaranteed>>::{closure#0}::{closure#0}, core[aa94f1cb029d72f2]::result::Result<(), rustc_span[66abce9569f09a61]::ErrorGuaranteed>>::{closure#1} as core[aa94f1cb029d72f2]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\n  30:     0x7fd6afa8da01 - std::sys::pal::unix::thread::Thread::new::thread_start::h51ead510c5edae48\n  31:     0x7fd6a8a9ca94 - <unknown>\n  32:     0x7fd6a8b29c3c - <unknown>\n  33:                0x0 - <unknown>\n\nerror: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: bug_report_url\n\nnote: please make sure that you have updated to the latest nightly\n\nnote: please attach the file at `/home/runner/check/batch_68/shilei-massclouds/rust_fatfs/rust_fatfs/rustc-ice-2025-01-26T16_33_30-175346.txt` to your bug report\n\nnote: compiler flags: --crate-type lib -C embed-bitcode=no -C debuginfo=2\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\nend of query stack\nerror: could not compile `rust_fatfs` (lib)\n\nCaused by:\n  process didn't exit successfully: `/home/runner/.cargo/bin/cargo-rapx /home/runner/.rustup/toolchains/nightly-2024-10-12-x86_64-unknown-linux-gnu/bin/rustc --crate-name rust_fatfs --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg 'feature=\"alloc\"' --cfg 'feature=\"default\"' --cfg 'feature=\"lfn\"' --cfg 'feature=\"log_level_debug\"' --cfg 'feature=\"log_level_error\"' --cfg 'feature=\"log_level_info\"' --cfg 'feature=\"log_level_trace\"' --cfg 'feature=\"log_level_warn\"' --cfg 'feature=\"unicode\"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values(\"alloc\", \"chrono\", \"default\", \"lfn\", \"log_level_debug\", \"log_level_error\", \"log_level_info\", \"log_level_trace\", \"log_level_warn\", \"std\", \"unicode\"))' -C metadata=b952ed8a0e0357fd -C extra-filename=-b952ed8a0e0357fd --out-dir /home/runner/check/batch_68/shilei-massclouds/rust_fatfs/rust_fatfs/target/x86_64-unknown-linux-gnu/debug/deps --target x86_64-unknown-linux-gnu -L dependency=/home/runner/check/batch_68/shilei-massclouds/rust_fatfs/rust_fatfs/target/x86_64-unknown-linux-gnu/debug/deps -L dependency=/home/runner/check/batch_68/shilei-massclouds/rust_fatfs/rust_fatfs/target/debug/deps --extern bitflags=/home/runner/check/batch_68/shilei-massclouds/rust_fatfs/rust_fatfs/target/x86_64-unknown-linux-gnu/debug/deps/libbitflags-a1aa3a16a978fd93.rmeta --extern log=/home/runner/check/batch_68/shilei-massclouds/rust_fatfs/rust_fatfs/target/x86_64-unknown-linux-gnu/debug/deps/liblog-795d679d05b249e9.rmeta` (exit status: 101)\n16:33:34|RAP|ERROR|: Finished with non-zero exit code.\n"
    },
    {
      "cmd_idx": 14,
      "file": "/home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\n"
    },
    {
      "cmd_idx": 14,
      "file": "/home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\n"
    },
    {
      "cmd_idx": 14,
      "file": "/home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/dummy/mod.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\n"
    },
    {
      "cmd_idx": 14,
      "file": "/home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0425]: cannot find function `console_init` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:17:15\n   |\n17 |     platform::console_init();\n   |               ^^^^^^^^^^^^ not found in `platform`\n\n"
    },
    {
      "cmd_idx": 14,
      "file": "/home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\n"
    },
    {
      "cmd_idx": 14,
      "file": "/home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\n"
    },
    {
      "cmd_idx": 15,
      "file": "[semver checks]",
      "kind": "Semver Violation",
      "raw": "pkg=signal, checker=SemverChecks\ntoolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\nfeatures=\npkg_dir=/home/runner/check/batch_68/shilei-massclouds/signal/signal\ncmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \ntimestamp=2025-01-27 0:34:16.218457421 +08:00:00\n\n\nstdout:\n\nstderr:\n    Building signal v0.1.0 (current)\nerror: running cargo-doc on crate 'signal' failed with output:\n-----\n   Compiling proc-macro2 v1.0.93\n   Compiling unicode-ident v1.0.15\n   Compiling serde v1.0.217\n   Compiling equivalent v1.0.1\n   Compiling hashbrown v0.15.2\n   Compiling winnow v0.5.40\n   Compiling toml_datetime v0.6.8\n   Compiling indexmap v2.7.1\n   Compiling quote v1.0.38\n    Checking log v0.4.25\n    Checking bitflags v1.3.2\n    Checking bit_field v0.10.2\n   Compiling syn v2.0.96\n    Checking bitflags v2.8.0\n    Checking cfg-if v1.0.0\n   Compiling autocfg v1.4.0\n   Compiling toml_edit v0.19.15\n   Compiling rustversion v1.0.19\n   Compiling lock_api v0.4.12\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno.git#892169aa)\n    Checking volatile v0.4.6\n    Checking scopeguard v1.2.0\n    Checking x86_64 v0.14.13\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n    Checking raw-cpuid v10.7.0\n   Compiling paste v1.0.15\n   Compiling syn v1.0.109\n   Compiling x86 v0.52.0\n    Checking spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n    Checking spin v0.9.8\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling libc v0.2.169\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\n   Compiling base64 v0.13.1\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `console_init` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:17:15\n   |\n17 |     platform::console_init();\n   |               ^^^^^^^^^^^^ not found in `platform`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate signal v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_68/shilei-massclouds/signal/signal &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate signal v0.1.0\n"
    },
    {
      "cmd_idx": 16,
      "file": "/home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs",
      "kind": "Mirai",
      "raw": "error[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\n"
    },
    {
      "cmd_idx": 16,
      "file": "/home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs",
      "kind": "Mirai",
      "raw": "error[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\n"
    },
    {
      "cmd_idx": 16,
      "file": "/home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/dummy/mod.rs",
      "kind": "Mirai",
      "raw": "error[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\n"
    },
    {
      "cmd_idx": 16,
      "file": "/home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs",
      "kind": "Mirai",
      "raw": "error[E0425]: cannot find function `console_init` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:17:15\n   |\n17 |     platform::console_init();\n   |               ^^^^^^^^^^^^ not found in `platform`\n\n"
    },
    {
      "cmd_idx": 16,
      "file": "/home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs",
      "kind": "Mirai",
      "raw": "error[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\n"
    },
    {
      "cmd_idx": 16,
      "file": "/home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs",
      "kind": "Mirai",
      "raw": "error[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\n"
    },
    {
      "cmd_idx": 22,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=signal, checker=Clippy\n// toolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_68/shilei-massclouds/signal/signal\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu  --no-deps\n// timestamp=2025-01-27 0:33:51.004989423 +08:00:00\n   Compiling proc-macro2 v1.0.93\n   Compiling unicode-ident v1.0.15\n   Compiling serde v1.0.217\n   Compiling equivalent v1.0.1\n   Compiling hashbrown v0.15.2\n   Compiling toml_datetime v0.6.8\n   Compiling winnow v0.5.40\n   Compiling indexmap v2.7.1\n   Compiling quote v1.0.38\n    Checking log v0.4.25\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n   Compiling syn v2.0.96\n    Checking bitflags v2.8.0\n    Checking cfg-if v1.0.0\n   Compiling autocfg v1.4.0\n   Compiling toml_edit v0.19.15\n   Compiling rustversion v1.0.19\n   Compiling lock_api v0.4.12\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno.git#892169aa)\n    Checking volatile v0.4.6\n    Checking scopeguard v1.2.0\n    Checking x86_64 v0.14.13\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n    Checking raw-cpuid v10.7.0\n   Compiling syn v1.0.109\n   Compiling x86 v0.52.0\n   Compiling paste v1.0.15\n    Checking spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n    Checking spin v0.9.8\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling libc v0.2.169\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 23,
      "file": "(virtual) semver-checks",
      "kind": "Cargo",
      "raw": "// pkg_name=signal, checker=SemverChecks\n// toolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_68/shilei-massclouds/signal/signal\n// cmd=cargo +nightly-2025-01-26-x86_64-unknown-linux-gnu semver-checks --target x86_64-unknown-linux-gnu \n// timestamp=2025-01-27 0:33:57.820587857 +08:00:00\n    Building signal v0.1.0 (current)\nerror: running cargo-doc on crate 'signal' failed with output:\n-----\n   Compiling proc-macro2 v1.0.93\n   Compiling unicode-ident v1.0.15\n   Compiling serde v1.0.217\n   Compiling equivalent v1.0.1\n   Compiling hashbrown v0.15.2\n   Compiling winnow v0.5.40\n   Compiling toml_datetime v0.6.8\n   Compiling indexmap v2.7.1\n   Compiling quote v1.0.38\n    Checking log v0.4.25\n    Checking bitflags v1.3.2\n    Checking bit_field v0.10.2\n   Compiling syn v2.0.96\n    Checking bitflags v2.8.0\n    Checking cfg-if v1.0.0\n   Compiling autocfg v1.4.0\n   Compiling toml_edit v0.19.15\n   Compiling rustversion v1.0.19\n   Compiling lock_api v0.4.12\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno.git#892169aa)\n    Checking volatile v0.4.6\n    Checking scopeguard v1.2.0\n    Checking x86_64 v0.14.13\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n    Checking raw-cpuid v10.7.0\n   Compiling paste v1.0.15\n   Compiling syn v1.0.109\n   Compiling x86 v0.52.0\n    Checking spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n    Checking spin v0.9.8\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling libc v0.2.169\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\n   Compiling base64 v0.13.1\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `console_init` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:17:15\n   |\n17 |     platform::console_init();\n   |               ^^^^^^^^^^^^ not found in `platform`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-27aa013ee5514833/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n\n-----\n\nerror: failed to build rustdoc for crate signal v0.1.0\nnote: this is usually due to a compilation error in the crate,\n      and is unlikely to be a bug in cargo-semver-checks\nnote: the following command can be used to reproduce the compilation error:\n      cargo new --lib example &&\n          cd example &&\n          echo '[workspace]' >> Cargo.toml &&\n          cargo add --path /home/runner/check/batch_68/shilei-massclouds/signal/signal &&\n          cargo check\n\nerror: aborting due to failure to build rustdoc for crate signal v0.1.0\n"
    },
    {
      "cmd_idx": 24,
      "file": "(virtual) mirai",
      "kind": "Cargo",
      "raw": "// pkg_name=signal, checker=Mirai\n// toolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_68/shilei-massclouds/signal/signal\n// cmd=cargo +nightly-2025-01-04 mirai --target x86_64-unknown-linux-gnu \n// timestamp=2025-01-27 0:34:16.375111347 +08:00:00\n   Compiling proc-macro2 v1.0.93\n   Compiling unicode-ident v1.0.15\n   Compiling serde v1.0.217\n   Compiling hashbrown v0.15.2\n   Compiling equivalent v1.0.1\n   Compiling winnow v0.5.40\n   Compiling toml_datetime v0.6.8\n   Compiling indexmap v2.7.1\n   Compiling quote v1.0.38\n    Checking log v0.4.25\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n   Compiling syn v2.0.96\n    Checking bitflags v2.8.0\n    Checking cfg-if v1.0.0\n   Compiling autocfg v1.4.0\n   Compiling toml_edit v0.19.15\n   Compiling rustversion v1.0.19\n   Compiling lock_api v0.4.12\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno.git#892169aa)\n    Checking scopeguard v1.2.0\n    Checking volatile v0.4.6\n    Checking x86_64 v0.14.13\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n    Checking raw-cpuid v10.7.0\n   Compiling syn v1.0.109\n   Compiling paste v1.0.15\n   Compiling x86 v0.52.0\n    Checking spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n    Checking spin v0.9.8\n   Compiling libc v0.2.169\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 25,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=signal, checker=Lockbud\n// toolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_68/shilei-massclouds/signal/signal\n// cmd=cargo +nightly-2024-12-01 lockbud -k all -- --target x86_64-unknown-linux-gnu \n// timestamp=2025-01-27 0:34:23.260017108 +08:00:00\n   Compiling proc-macro2 v1.0.93\n   Compiling equivalent v1.0.1\n   Compiling unicode-ident v1.0.15\n   Compiling hashbrown v0.15.2\n   Compiling serde v1.0.217\n   Compiling winnow v0.5.40\n   Compiling toml_datetime v0.6.8\n   Compiling indexmap v2.7.1\n   Compiling quote v1.0.38\n   Compiling log v0.4.25\n[2025-01-26T16:34:24Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.25/src/lib.rs:1453:11: 1453:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.25/src/lib.rs:1456:13: 1456:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2025-01-26T16:34:24Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling bitflags v1.3.2\n   Compiling bit_field v0.10.2\n   Compiling syn v2.0.96\n   Compiling bitflags v2.8.0\n   Compiling cfg-if v1.0.0\n   Compiling autocfg v1.4.0\n   Compiling toml_edit v0.19.15\n   Compiling rustversion v1.0.19\n   Compiling lock_api v0.4.12\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno.git#892169aa)\n   Compiling volatile v0.4.6\n   Compiling scopeguard v1.2.0\n   Compiling x86_64 v0.14.13\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling raw-cpuid v10.7.0\n   Compiling syn v1.0.109\n   Compiling paste v1.0.15\n   Compiling x86 v0.52.0\n   Compiling spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n   Compiling spin v0.9.8\n   Compiling libc v0.2.169\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console#8bc0d219)\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `console_init` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:17:15\n   |\n17 |     platform::console_init();\n   |               ^^^^^^^^^^^^ not found in `platform`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 26,
      "file": "(virtual) rapx",
      "kind": "Cargo",
      "raw": "// pkg_name=signal, checker=Rapx\n// toolchain=nightly-2025-01-26-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// features=\n// pkg_dir=/home/runner/check/batch_68/shilei-massclouds/signal/signal\n// cmd=cargo +nightly-2024-10-12 rapx -F -M -- --target x86_64-unknown-linux-gnu \n// timestamp=2025-01-27 0:34:32.463833558 +08:00:00\n   Compiling proc-macro2 v1.0.93\n   Compiling unicode-ident v1.0.15\n   Compiling serde v1.0.217\n   Compiling hashbrown v0.15.2\n   Compiling equivalent v1.0.1\n   Compiling winnow v0.5.40\n   Compiling toml_datetime v0.6.8\n   Compiling indexmap v2.7.1\n   Compiling quote v1.0.38\n    Checking log v0.4.25\n    Checking bitflags v1.3.2\n    Checking bit_field v0.10.2\n   Compiling syn v2.0.96\n    Checking cfg-if v1.0.0\n    Checking bitflags v2.8.0\n   Compiling toml_edit v0.19.15\n   Compiling autocfg v1.4.0\n   Compiling rustversion v1.0.19\n   Compiling lock_api v0.4.12\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno.git#892169aa)\n    Checking scopeguard v1.2.0\n    Checking volatile v0.4.6\n    Checking kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n    Checking raw-cpuid v10.7.0\n    Checking x86_64 v0.14.13\nerror[E0053]: method `steps_between` has an incompatible type for trait\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/x86_64-0.14.13/src/addr.rs:387:51\n    |\n387 |     fn steps_between(start: &Self, end: &Self) -> (usize, Option<usize>) {\n    |                                                   ^^^^^^^^^^^^^^^^^^^^^^ expected `Option<usize>`, found `(usize, Option<usize>)`\n    |\n    = note: expected signature `fn(&addr::VirtAddr, &addr::VirtAddr) -> Option<usize>`\n               found signature `fn(&addr::VirtAddr, &addr::VirtAddr) -> (usize, Option<usize>)`\nhelp: change the output type to match the trait\n    |\n387 |     fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n    |                                                   ~~~~~~~~~~~~~\n\nerror[E0053]: method `steps_between` has an incompatible type for trait\n   --> /home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/x86_64-0.14.13/src/structures/paging/page.rs:284:51\n    |\n284 |     fn steps_between(start: &Self, end: &Self) -> (usize, Option<usize>) {\n    |                                                   ^^^^^^^^^^^^^^^^^^^^^^ expected `Option<usize>`, found `(usize, Option<usize>)`\n    |\n    = note: expected signature `fn(&Page<_>, &Page<_>) -> Option<usize>`\n               found signature `fn(&Page<_>, &Page<_>) -> (usize, Option<usize>)`\nhelp: change the output type to match the trait\n    |\n284 |     fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n    |                                                   ~~~~~~~~~~~~~\n\n   Compiling paste v1.0.15\nFor more information about this error, try `rustc --explain E0053`.\nerror: could not compile `x86_64` (lib) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n16:34:38|RAP|ERROR|: Finished with non-zero exit code.\n"
    }
  ]
}