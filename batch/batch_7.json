{
  "env": {
    "tools": {
      "rust_toolchains": {
        "host": {
          "version": "1.84.0-nightly (4f2f477fd 2024-10-23)",
          "commit_hash": "4f2f477fded0a47b21ed3f6aeddeafa5db8bf518",
          "commit_date": "2024-10-23",
          "host": "x86_64-unknown-linux-gnu",
          "release": "1.84.0-nightly",
          "llvm_version": "19.1.1"
        },
        "installed": [
          {
            "channel": "nightly-2024-10-24-x86_64-unknown-linux-gnu",
            "profile": null,
            "targets": [
              "x86_64-unknown-linux-gnu"
            ],
            "components": [
              "cargo-x86_64-unknown-linux-gnu",
              "clippy-x86_64-unknown-linux-gnu",
              "rust-std-x86_64-unknown-linux-gnu",
              "rustc-x86_64-unknown-linux-gnu",
              "rustfmt-x86_64-unknown-linux-gnu"
            ],
            "toml_path": "/home/runner/check",
            "need_install_clippy": false,
            "peculiar_targets": null
          }
        ]
      },
      "os_checker": {
        "start": 1730506566077,
        "finish": 1730506572172,
        "duration_ms": 6094,
        "git_time": "2024-11-02 08:13:24 +0800",
        "git_sha": "9aaa3ef84cc3644ad09b41fa504686b0b181c719"
      }
    },
    "kinds": {
      "order": [
        "Cargo",
        "Clippy(Error)",
        "Clippy(Warn)",
        "Audit",
        "Mirai",
        "Rap",
        "Rudra",
        "Lockbud(Probably)",
        "Lockbud(Possibly)",
        "Outdated",
        "Geiger",
        "Unformatted"
      ],
      "mapping": {
        "cargo": [
          "Cargo"
        ],
        "clippy": [
          "Clippy(Error)",
          "Clippy(Warn)"
        ],
        "audit": [
          "Audit"
        ],
        "mirai": [
          "Mirai"
        ],
        "rap": [
          "Rap"
        ],
        "rudra": [
          "Rudra"
        ],
        "lockbud": [
          "Lockbud(Probably)",
          "Lockbud(Possibly)"
        ],
        "outdated": [
          "Outdated"
        ],
        "geiger": [
          "Geiger"
        ],
        "fmt": [
          "Unformatted"
        ]
      }
    },
    "repos": [
      {
        "user": "kern-crates",
        "repo": "linked_list_r4l-3"
      },
      {
        "user": "kern-crates",
        "repo": "linked_list_r4l-4"
      },
      {
        "user": "kern-crates",
        "repo": "linked_list_r4l-5"
      },
      {
        "user": "kern-crates",
        "repo": "linked_list_r4l-6"
      },
      {
        "user": "kern-crates",
        "repo": "linked_list_r4l-7"
      },
      {
        "user": "kern-crates",
        "repo": "linked_list_r4l-8"
      },
      {
        "user": "kern-crates",
        "repo": "linked_list_r4l-9"
      },
      {
        "user": "kern-crates",
        "repo": "loongArch64"
      }
    ],
    "packages": [
      {
        "name": "linked_list_r4l",
        "repo": {
          "repo_idx": 0,
          "user": "kern-crates",
          "repo": "linked_list_r4l-3"
        }
      },
      {
        "name": "linked_list_r4l",
        "repo": {
          "repo_idx": 1,
          "user": "kern-crates",
          "repo": "linked_list_r4l-4"
        }
      },
      {
        "name": "linked_list_r4l",
        "repo": {
          "repo_idx": 2,
          "user": "kern-crates",
          "repo": "linked_list_r4l-5"
        }
      },
      {
        "name": "linked_list_r4l",
        "repo": {
          "repo_idx": 3,
          "user": "kern-crates",
          "repo": "linked_list_r4l-6"
        }
      },
      {
        "name": "linked_list_r4l",
        "repo": {
          "repo_idx": 4,
          "user": "kern-crates",
          "repo": "linked_list_r4l-7"
        }
      },
      {
        "name": "linked_list_r4l",
        "repo": {
          "repo_idx": 5,
          "user": "kern-crates",
          "repo": "linked_list_r4l-8"
        }
      },
      {
        "name": "linked_list_r4l",
        "repo": {
          "repo_idx": 6,
          "user": "kern-crates",
          "repo": "linked_list_r4l-9"
        }
      },
      {
        "name": "loongArch64",
        "repo": {
          "repo_idx": 7,
          "user": "kern-crates",
          "repo": "loongArch64"
        }
      }
    ]
  },
  "cmd": [
    {
      "package_idx": 0,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 103,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 103,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 102,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 101,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 234,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-none --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 208,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 203,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "clippy",
      "cmd": "cargo clippy --target aarch64-unknown-none --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 208,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "mirai",
      "cmd": "cargo +nightly-2023-12-30 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 46,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 153,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-none",
      "count": 0,
      "duration_ms": 121,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 0,
      "duration_ms": 119,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target aarch64-unknown-none",
      "count": 0,
      "duration_ms": 122,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "rap",
      "cmd": "cargo +nightly-2024-06-30 rap -F -M",
      "count": 1,
      "duration_ms": 745,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "rudra",
      "cmd": "cargo +nightly-2021-10-21 rudra",
      "count": 0,
      "duration_ms": 242,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 63,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 64,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 63,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 63,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "geiger",
      "cmd": "cargo geiger --output-format Ascii",
      "count": 0,
      "duration_ms": 107,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 101,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 100,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 100,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 102,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 235,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-none --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 209,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 204,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "clippy",
      "cmd": "cargo clippy --target aarch64-unknown-none --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 211,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "mirai",
      "cmd": "cargo +nightly-2023-12-30 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 46,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 154,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-none",
      "count": 0,
      "duration_ms": 122,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 0,
      "duration_ms": 118,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target aarch64-unknown-none",
      "count": 0,
      "duration_ms": 121,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "rap",
      "cmd": "cargo +nightly-2024-06-30 rap -F -M",
      "count": 1,
      "duration_ms": 820,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "rudra",
      "cmd": "cargo +nightly-2021-10-21 rudra",
      "count": 0,
      "duration_ms": 246,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 63,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 62,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 62,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 64,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "geiger",
      "cmd": "cargo geiger --output-format Ascii",
      "count": 0,
      "duration_ms": 111,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 104,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 101,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 101,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 102,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 240,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-none --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 216,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 206,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "clippy",
      "cmd": "cargo clippy --target aarch64-unknown-none --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 211,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "mirai",
      "cmd": "cargo +nightly-2023-12-30 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 47,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 160,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-none",
      "count": 0,
      "duration_ms": 126,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 0,
      "duration_ms": 122,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target aarch64-unknown-none",
      "count": 0,
      "duration_ms": 120,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "rap",
      "cmd": "cargo +nightly-2024-06-30 rap -F -M",
      "count": 1,
      "duration_ms": 796,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "rudra",
      "cmd": "cargo +nightly-2021-10-21 rudra",
      "count": 0,
      "duration_ms": 244,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 64,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 62,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 62,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 62,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "geiger",
      "cmd": "cargo geiger --output-format Ascii",
      "count": 0,
      "duration_ms": 105,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 102,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 101,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 101,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 100,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 234,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-none --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 209,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 212,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "clippy",
      "cmd": "cargo clippy --target aarch64-unknown-none --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 216,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "mirai",
      "cmd": "cargo +nightly-2023-12-30 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 47,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 157,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-none",
      "count": 0,
      "duration_ms": 122,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 0,
      "duration_ms": 120,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target aarch64-unknown-none",
      "count": 0,
      "duration_ms": 123,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "rap",
      "cmd": "cargo +nightly-2024-06-30 rap -F -M",
      "count": 1,
      "duration_ms": 763,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "rudra",
      "cmd": "cargo +nightly-2021-10-21 rudra",
      "count": 0,
      "duration_ms": 244,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 63,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 63,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 63,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 64,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "geiger",
      "cmd": "cargo geiger --output-format Ascii",
      "count": 0,
      "duration_ms": 111,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 909,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 102,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 102,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 102,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 3,
      "duration_ms": 241,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-none --no-deps --message-format=json",
      "count": 3,
      "duration_ms": 210,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 3,
      "duration_ms": 207,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "clippy",
      "cmd": "cargo clippy --target aarch64-unknown-none --no-deps --message-format=json",
      "count": 3,
      "duration_ms": 213,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "mirai",
      "cmd": "cargo +nightly-2023-12-30 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 47,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 156,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-none",
      "count": 0,
      "duration_ms": 122,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 0,
      "duration_ms": 120,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target aarch64-unknown-none",
      "count": 0,
      "duration_ms": 122,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "rap",
      "cmd": "cargo +nightly-2024-06-30 rap -F -M",
      "count": 1,
      "duration_ms": 1918,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "rudra",
      "cmd": "cargo +nightly-2021-10-21 rudra",
      "count": 0,
      "duration_ms": 245,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 89,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 63,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 64,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 64,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "geiger",
      "cmd": "cargo geiger --output-format Ascii",
      "count": 0,
      "duration_ms": 111,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 104,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 104,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 105,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 105,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 3,
      "duration_ms": 247,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-none --no-deps --message-format=json",
      "count": 3,
      "duration_ms": 218,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 3,
      "duration_ms": 218,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "clippy",
      "cmd": "cargo clippy --target aarch64-unknown-none --no-deps --message-format=json",
      "count": 3,
      "duration_ms": 221,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "mirai",
      "cmd": "cargo +nightly-2023-12-30 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 49,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 164,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-none",
      "count": 0,
      "duration_ms": 126,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 0,
      "duration_ms": 125,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target aarch64-unknown-none",
      "count": 0,
      "duration_ms": 126,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "rap",
      "cmd": "cargo +nightly-2024-06-30 rap -F -M",
      "count": 1,
      "duration_ms": 827,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "rudra",
      "cmd": "cargo +nightly-2021-10-21 rudra",
      "count": 0,
      "duration_ms": 251,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 66,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 65,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 65,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 65,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "geiger",
      "cmd": "cargo geiger --output-format Ascii",
      "count": 0,
      "duration_ms": 111,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 105,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 103,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 103,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p linked_list_r4l -- --emit=json",
      "count": 0,
      "duration_ms": 102,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 3,
      "duration_ms": 249,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-none --no-deps --message-format=json",
      "count": 3,
      "duration_ms": 235,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 3,
      "duration_ms": 218,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "clippy",
      "cmd": "cargo clippy --target aarch64-unknown-none --no-deps --message-format=json",
      "count": 3,
      "duration_ms": 221,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "mirai",
      "cmd": "cargo +nightly-2023-12-30 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 48,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 165,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-none",
      "count": 0,
      "duration_ms": 128,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 0,
      "duration_ms": 126,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target aarch64-unknown-none",
      "count": 0,
      "duration_ms": 128,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "rap",
      "cmd": "cargo +nightly-2024-06-30 rap -F -M",
      "count": 1,
      "duration_ms": 817,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "rudra",
      "cmd": "cargo +nightly-2021-10-21 rudra",
      "count": 0,
      "duration_ms": 243,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 65,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 64,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 65,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 65,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "geiger",
      "cmd": "cargo geiger --output-format Ascii",
      "count": 0,
      "duration_ms": 110,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-24-x86_64-unknown-linux-gnu fmt -p loongArch64 -- --emit=json",
      "count": 4,
      "duration_ms": 110,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 9,
      "duration_ms": 390,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "mirai",
      "cmd": "cargo +nightly-2023-12-30 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 49,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 346,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "rap",
      "cmd": "cargo +nightly-2024-06-30 rap -F -M",
      "count": 0,
      "duration_ms": 504,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "rudra",
      "cmd": "cargo +nightly-2021-10-21 rudra",
      "count": 0,
      "duration_ms": 243,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 63,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "geiger",
      "cmd": "cargo geiger --output-format Ascii",
      "count": 0,
      "duration_ms": 110,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 390,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 346,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "cargo",
      "cmd": "VRITUAL=rap cargo",
      "count": 1,
      "duration_ms": 504,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-23",
      "features": [],
      "flags": []
    }
  ],
  "data": [
    {
      "cmd_idx": 13,
      "file": "[rap] Not supported to display yet.",
      "kind": "Rap",
      "raw": "pkg=linked_list_r4l, checker=Rap\ntoolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\npkg_dir=/home/runner/check/batch_5/kern-crates/linked_list_r4l-3\ncmd=cargo +nightly-2024-06-30 rap -F -M\n\n14:43:28|RAP|WARN|: RCanary: Leak Function: Unsat DefId(0:24 ~ linked_list_r4l[df87]::linked_list::{impl#0}::into_pointer) src/linked_list.rs:35:5: 37:6 (#0)\n14:43:28|RAP|WARN|: RCanary: LeakItem Candidates: _3 = linked_list::alloc::boxed::Box::<T>::into_raw(move _4) -> [return: bb1, unwind: bb4], src/linked_list.rs:36:22: 36:41 (#0)\n"
    },
    {
      "cmd_idx": 33,
      "file": "[rap] Not supported to display yet.",
      "kind": "Rap",
      "raw": "pkg=linked_list_r4l, checker=Rap\ntoolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\npkg_dir=/home/runner/check/batch_6/kern-crates/linked_list_r4l-4\ncmd=cargo +nightly-2024-06-30 rap -F -M\n\n03:08:59|RAP|WARN|: RCanary: Leak Function: Unsat DefId(0:24 ~ linked_list_r4l[df87]::linked_list::{impl#0}::into_pointer) src/linked_list.rs:35:5: 37:6 (#0)\n03:08:59|RAP|WARN|: RCanary: LeakItem Candidates: _3 = linked_list::alloc::boxed::Box::<T>::into_raw(move _4) -> [return: bb1, unwind: bb4], src/linked_list.rs:36:22: 36:41 (#0)\n"
    },
    {
      "cmd_idx": 53,
      "file": "[rap] Not supported to display yet.",
      "kind": "Rap",
      "raw": "pkg=linked_list_r4l, checker=Rap\ntoolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\npkg_dir=/home/runner/check/batch_6/kern-crates/linked_list_r4l-5\ncmd=cargo +nightly-2024-06-30 rap -F -M\n\n03:09:04|RAP|WARN|: RCanary: Leak Function: Unsat DefId(0:24 ~ linked_list_r4l[df87]::linked_list::{impl#0}::into_pointer) src/linked_list.rs:35:5: 37:6 (#0)\n03:09:04|RAP|WARN|: RCanary: LeakItem Candidates: _3 = linked_list::alloc::boxed::Box::<T>::into_raw(move _4) -> [return: bb1, unwind: bb4], src/linked_list.rs:36:22: 36:41 (#0)\n"
    },
    {
      "cmd_idx": 73,
      "file": "[rap] Not supported to display yet.",
      "kind": "Rap",
      "raw": "pkg=linked_list_r4l, checker=Rap\ntoolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\npkg_dir=/home/runner/check/batch_6/kern-crates/linked_list_r4l-6\ncmd=cargo +nightly-2024-06-30 rap -F -M\n\n03:09:09|RAP|WARN|: RCanary: Leak Function: Unsat DefId(0:24 ~ linked_list_r4l[df87]::linked_list::{impl#0}::into_pointer) src/linked_list.rs:35:5: 37:6 (#0)\n03:09:09|RAP|WARN|: RCanary: LeakItem Candidates: _3 = linked_list::alloc::boxed::Box::<T>::into_raw(move _4) -> [return: bb1, unwind: bb4], src/linked_list.rs:36:22: 36:41 (#0)\n"
    },
    {
      "cmd_idx": 84,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: you should consider adding a `Default` implementation for `RawList<G>`\n   --> src/raw_list.rs:99:5\n    |\n99  | /     pub const fn new() -> Self {\n100 | |         Self { head: None }\n101 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n97  + impl<G: GetLinks> Default for RawList<G> {\n98  +     fn default() -> Self {\n99  +         Self::new()\n100 +     }\n101 + }\n    |\n\n"
    },
    {
      "cmd_idx": 84,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:186:5\n    |\n186 |     pub unsafe fn push_back(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n"
    },
    {
      "cmd_idx": 84,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:195:5\n    |\n195 |     pub unsafe fn push_front(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
    },
    {
      "cmd_idx": 85,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: you should consider adding a `Default` implementation for `RawList<G>`\n   --> src/raw_list.rs:99:5\n    |\n99  | /     pub const fn new() -> Self {\n100 | |         Self { head: None }\n101 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n97  + impl<G: GetLinks> Default for RawList<G> {\n98  +     fn default() -> Self {\n99  +         Self::new()\n100 +     }\n101 + }\n    |\n\n"
    },
    {
      "cmd_idx": 85,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:186:5\n    |\n186 |     pub unsafe fn push_back(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n"
    },
    {
      "cmd_idx": 85,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:195:5\n    |\n195 |     pub unsafe fn push_front(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
    },
    {
      "cmd_idx": 86,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: you should consider adding a `Default` implementation for `RawList<G>`\n   --> src/raw_list.rs:99:5\n    |\n99  | /     pub const fn new() -> Self {\n100 | |         Self { head: None }\n101 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n97  + impl<G: GetLinks> Default for RawList<G> {\n98  +     fn default() -> Self {\n99  +         Self::new()\n100 +     }\n101 + }\n    |\n\n"
    },
    {
      "cmd_idx": 86,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:186:5\n    |\n186 |     pub unsafe fn push_back(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n"
    },
    {
      "cmd_idx": 86,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:195:5\n    |\n195 |     pub unsafe fn push_front(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
    },
    {
      "cmd_idx": 87,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: you should consider adding a `Default` implementation for `RawList<G>`\n   --> src/raw_list.rs:99:5\n    |\n99  | /     pub const fn new() -> Self {\n100 | |         Self { head: None }\n101 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n97  + impl<G: GetLinks> Default for RawList<G> {\n98  +     fn default() -> Self {\n99  +         Self::new()\n100 +     }\n101 + }\n    |\n\n"
    },
    {
      "cmd_idx": 87,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:186:5\n    |\n186 |     pub unsafe fn push_back(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n"
    },
    {
      "cmd_idx": 87,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:195:5\n    |\n195 |     pub unsafe fn push_front(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
    },
    {
      "cmd_idx": 93,
      "file": "[rap] Not supported to display yet.",
      "kind": "Rap",
      "raw": "pkg=linked_list_r4l, checker=Rap\ntoolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\npkg_dir=/home/runner/check/batch_7/kern-crates/linked_list_r4l-7\ncmd=cargo +nightly-2024-06-30 rap -F -M\n\n12:40:35|RAP|WARN|: RCanary: Leak Function: Unsat DefId(0:24 ~ linked_list_r4l[81d2]::linked_list::{impl#0}::into_pointer) src/linked_list.rs:35:5: 37:6 (#0)\n12:40:35|RAP|WARN|: RCanary: LeakItem Candidates: _3 = linked_list::alloc::boxed::Box::<T>::into_raw(move _4) -> [return: bb1, unwind: bb4], src/linked_list.rs:36:22: 36:41 (#0)\n"
    },
    {
      "cmd_idx": 104,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: you should consider adding a `Default` implementation for `RawList<G>`\n   --> src/raw_list.rs:99:5\n    |\n99  | /     pub const fn new() -> Self {\n100 | |         Self { head: None }\n101 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n97  + impl<G: GetLinks> Default for RawList<G> {\n98  +     fn default() -> Self {\n99  +         Self::new()\n100 +     }\n101 + }\n    |\n\n"
    },
    {
      "cmd_idx": 104,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:186:5\n    |\n186 |     pub unsafe fn push_back(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n"
    },
    {
      "cmd_idx": 104,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:195:5\n    |\n195 |     pub unsafe fn push_front(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
    },
    {
      "cmd_idx": 105,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: you should consider adding a `Default` implementation for `RawList<G>`\n   --> src/raw_list.rs:99:5\n    |\n99  | /     pub const fn new() -> Self {\n100 | |         Self { head: None }\n101 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n97  + impl<G: GetLinks> Default for RawList<G> {\n98  +     fn default() -> Self {\n99  +         Self::new()\n100 +     }\n101 + }\n    |\n\n"
    },
    {
      "cmd_idx": 105,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:186:5\n    |\n186 |     pub unsafe fn push_back(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n"
    },
    {
      "cmd_idx": 105,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:195:5\n    |\n195 |     pub unsafe fn push_front(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
    },
    {
      "cmd_idx": 106,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: you should consider adding a `Default` implementation for `RawList<G>`\n   --> src/raw_list.rs:99:5\n    |\n99  | /     pub const fn new() -> Self {\n100 | |         Self { head: None }\n101 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n97  + impl<G: GetLinks> Default for RawList<G> {\n98  +     fn default() -> Self {\n99  +         Self::new()\n100 +     }\n101 + }\n    |\n\n"
    },
    {
      "cmd_idx": 106,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:186:5\n    |\n186 |     pub unsafe fn push_back(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n"
    },
    {
      "cmd_idx": 106,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:195:5\n    |\n195 |     pub unsafe fn push_front(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
    },
    {
      "cmd_idx": 107,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: you should consider adding a `Default` implementation for `RawList<G>`\n   --> src/raw_list.rs:99:5\n    |\n99  | /     pub const fn new() -> Self {\n100 | |         Self { head: None }\n101 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n97  + impl<G: GetLinks> Default for RawList<G> {\n98  +     fn default() -> Self {\n99  +         Self::new()\n100 +     }\n101 + }\n    |\n\n"
    },
    {
      "cmd_idx": 107,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:186:5\n    |\n186 |     pub unsafe fn push_back(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n"
    },
    {
      "cmd_idx": 107,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:195:5\n    |\n195 |     pub unsafe fn push_front(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
    },
    {
      "cmd_idx": 113,
      "file": "[rap] Not supported to display yet.",
      "kind": "Rap",
      "raw": "pkg=linked_list_r4l, checker=Rap\ntoolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\npkg_dir=/home/runner/check/batch_7/kern-crates/linked_list_r4l-8\ncmd=cargo +nightly-2024-06-30 rap -F -M\n\n12:40:41|RAP|WARN|: RCanary: Leak Function: Unsat DefId(0:24 ~ linked_list_r4l[81d2]::linked_list::{impl#0}::into_pointer) src/linked_list.rs:35:5: 37:6 (#0)\n12:40:41|RAP|WARN|: RCanary: LeakItem Candidates: _3 = linked_list::alloc::boxed::Box::<T>::into_raw(move _4) -> [return: bb1, unwind: bb4], src/linked_list.rs:36:22: 36:41 (#0)\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: you should consider adding a `Default` implementation for `RawList<G>`\n   --> src/raw_list.rs:99:5\n    |\n99  | /     pub const fn new() -> Self {\n100 | |         Self { head: None }\n101 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n97  + impl<G: GetLinks> Default for RawList<G> {\n98  +     fn default() -> Self {\n99  +         Self::new()\n100 +     }\n101 + }\n    |\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:186:5\n    |\n186 |     pub unsafe fn push_back(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:195:5\n    |\n195 |     pub unsafe fn push_front(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
    },
    {
      "cmd_idx": 125,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: you should consider adding a `Default` implementation for `RawList<G>`\n   --> src/raw_list.rs:99:5\n    |\n99  | /     pub const fn new() -> Self {\n100 | |         Self { head: None }\n101 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n97  + impl<G: GetLinks> Default for RawList<G> {\n98  +     fn default() -> Self {\n99  +         Self::new()\n100 +     }\n101 + }\n    |\n\n"
    },
    {
      "cmd_idx": 125,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:186:5\n    |\n186 |     pub unsafe fn push_back(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n"
    },
    {
      "cmd_idx": 125,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:195:5\n    |\n195 |     pub unsafe fn push_front(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
    },
    {
      "cmd_idx": 126,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: you should consider adding a `Default` implementation for `RawList<G>`\n   --> src/raw_list.rs:99:5\n    |\n99  | /     pub const fn new() -> Self {\n100 | |         Self { head: None }\n101 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n97  + impl<G: GetLinks> Default for RawList<G> {\n98  +     fn default() -> Self {\n99  +         Self::new()\n100 +     }\n101 + }\n    |\n\n"
    },
    {
      "cmd_idx": 126,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:186:5\n    |\n186 |     pub unsafe fn push_back(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n"
    },
    {
      "cmd_idx": 126,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:195:5\n    |\n195 |     pub unsafe fn push_front(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
    },
    {
      "cmd_idx": 127,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: you should consider adding a `Default` implementation for `RawList<G>`\n   --> src/raw_list.rs:99:5\n    |\n99  | /     pub const fn new() -> Self {\n100 | |         Self { head: None }\n101 | |     }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n    = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n    |\n97  + impl<G: GetLinks> Default for RawList<G> {\n98  +     fn default() -> Self {\n99  +         Self::new()\n100 +     }\n101 + }\n    |\n\n"
    },
    {
      "cmd_idx": 127,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:186:5\n    |\n186 |     pub unsafe fn push_back(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n"
    },
    {
      "cmd_idx": 127,
      "file": "src/raw_list.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src/raw_list.rs:195:5\n    |\n195 |     pub unsafe fn push_front(&mut self, new: &G::EntryType) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"
    },
    {
      "cmd_idx": 133,
      "file": "[rap] Not supported to display yet.",
      "kind": "Rap",
      "raw": "pkg=linked_list_r4l, checker=Rap\ntoolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\npkg_dir=/home/runner/check/batch_7/kern-crates/linked_list_r4l-9\ncmd=cargo +nightly-2024-06-30 rap -F -M\n\n12:40:46|RAP|WARN|: RCanary: Leak Function: Unsat DefId(0:24 ~ linked_list_r4l[81d2]::linked_list::{impl#0}::into_pointer) src/linked_list.rs:35:5: 37:6 (#0)\n12:40:46|RAP|WARN|: RCanary: LeakItem Candidates: _3 = linked_list::alloc::boxed::Box::<T>::into_raw(move _4) -> [return: bb1, unwind: bb4], src/linked_list.rs:36:22: 36:41 (#0)\n"
    },
    {
      "cmd_idx": 140,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_6/kern-crates/loongArch64/src/lib.rs (original lines from 5 to 5)\n+pub mod consts;\n"
    },
    {
      "cmd_idx": 140,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_6/kern-crates/loongArch64/src/lib.rs (original lines from 10 to 10)\n-pub mod consts;\n"
    },
    {
      "cmd_idx": 140,
      "file": "src/register/base/ecfg.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_6/kern-crates/loongArch64/src/register/base/ecfg.rs (original lines from 1 to 1)\n-use core::fmt::Debug;\n"
    },
    {
      "cmd_idx": 140,
      "file": "src/register/base/ecfg.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_6/kern-crates/loongArch64/src/register/base/ecfg.rs (original lines from 5 to 5)\n+use core::fmt::Debug;\n"
    },
    {
      "cmd_idx": 141,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable\n --> src/lib.rs:2:12\n  |\n2 | #![feature(asm_const)]\n  |            ^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\n"
    },
    {
      "cmd_idx": 141,
      "file": "src/iocsr.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: formatting may not be suitable for sub-register argument\n --> src/iocsr.rs:6:25\n  |\n6 |         asm!(\"iocsrwr.w {},{}\", in(reg) value, in(reg) reg);\n  |                         ^^              ----- for this argument\n  |\n  = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n  = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n  = note: `#[warn(asm_sub_register)]` on by default\n\n"
    },
    {
      "cmd_idx": 141,
      "file": "src/iocsr.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:18:25\n   |\n18 |         asm!(\"iocsrwr.h {},{}\", in(reg) value, in(reg) reg);\n   |                         ^^              ----- for this argument\n   |\n   = help: use `{0:x}` to have the register formatted as `ax` (for 16-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\n"
    },
    {
      "cmd_idx": 141,
      "file": "src/iocsr.rs",
      "kind": "Clippy(Error)",
      "raw": "error: type `u8` cannot be used with this register class\n  --> src/iocsr.rs:24:41\n   |\n24 |         asm!(\"iocsrwr.b {},{}\", in(reg) value, in(reg) reg);\n   |                                         ^^^^^\n   |\n   = note: register class `reg` supports these types: i16, i32, i64, f16, f32, f64\n   = help: consider using the `reg_byte` register class instead\n\n"
    },
    {
      "cmd_idx": 141,
      "file": "src/iocsr.rs",
      "kind": "Clippy(Error)",
      "raw": "error: type `u8` cannot be used with this register class\n  --> src/iocsr.rs:32:41\n   |\n32 |         asm!(\"iocsrrd.b {},{}\",out(reg) val, in(reg) reg);\n   |                                         ^^^\n   |\n   = note: register class `reg` supports these types: i16, i32, i64, f16, f32, f64\n   = help: consider using the `reg_byte` register class instead\n\n"
    },
    {
      "cmd_idx": 141,
      "file": "src/iocsr.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:41:25\n   |\n41 |         asm!(\"iocsrrd.h {},{}\",out(reg) val, in(reg) reg);\n   |                         ^^              --- for this argument\n   |\n   = help: use `{0:x}` to have the register formatted as `ax` (for 16-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\n"
    },
    {
      "cmd_idx": 141,
      "file": "src/iocsr.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:50:25\n   |\n50 |         asm!(\"iocsrrd.w {},{}\",out(reg) val, in(reg) reg);\n   |                         ^^              --- for this argument\n   |\n   = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\n"
    },
    {
      "cmd_idx": 141,
      "file": "src/ipi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: formatting may not be suitable for sub-register argument\n --> src/ipi.rs:7:25\n  |\n7 |         asm!(\"iocsrwr.w {},{}\", in(reg) value,in(reg) addr);\n  |                         ^^              ----- for this argument\n  |\n  = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n  = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\n"
    },
    {
      "cmd_idx": 141,
      "file": "src/ipi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: formatting may not be suitable for sub-register argument\n  --> src/ipi.rs:13:25\n   |\n13 |         asm!(\"iocsrrd.w {},{}\", out(reg) value, in(reg) addr);\n   |                         ^^               ----- for this argument\n   |\n   = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\n"
    },
    {
      "cmd_idx": 148,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=loongArch64, checker=Clippy\n// toolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_6/kern-crates/loongArch64\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Checking bit_field v0.10.2\n    Checking bitflags v1.3.2\n    Checking loongArch64 v0.2.4 (/home/runner/check/batch_6/kern-crates/loongArch64)\nerror: could not compile `loongArch64` (lib) due to 2 previous errors; 7 warnings emitted\n"
    },
    {
      "cmd_idx": 149,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=loongArch64, checker=Lockbud\n// toolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_6/kern-crates/loongArch64\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n   Compiling bitflags v1.3.2\n   Compiling bit_field v0.10.2\n   Compiling loongArch64 v0.2.4 (/home/runner/check/batch_6/kern-crates/loongArch64)\nwarning: formatting may not be suitable for sub-register argument\n --> src/iocsr.rs:6:25\n  |\n6 |         asm!(\"iocsrwr.w {},{}\", in(reg) value, in(reg) reg);\n  |                         ^^              ----- for this argument\n  |\n  = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n  = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n  = note: `#[warn(asm_sub_register)]` on by default\n\nwarning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:18:25\n   |\n18 |         asm!(\"iocsrwr.h {},{}\", in(reg) value, in(reg) reg);\n   |                         ^^              ----- for this argument\n   |\n   = help: use `{0:x}` to have the register formatted as `ax` (for 16-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nerror: type `u8` cannot be used with this register class\n  --> src/iocsr.rs:24:41\n   |\n24 |         asm!(\"iocsrwr.b {},{}\", in(reg) value, in(reg) reg);\n   |                                         ^^^^^\n   |\n   = note: register class `reg` supports these types: i16, i32, i64, f32, f64\n   = help: consider using the `reg_byte` register class instead\n\nerror: type `u8` cannot be used with this register class\n  --> src/iocsr.rs:32:41\n   |\n32 |         asm!(\"iocsrrd.b {},{}\",out(reg) val, in(reg) reg);\n   |                                         ^^^\n   |\n   = note: register class `reg` supports these types: i16, i32, i64, f32, f64\n   = help: consider using the `reg_byte` register class instead\n\nwarning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:41:25\n   |\n41 |         asm!(\"iocsrrd.h {},{}\",out(reg) val, in(reg) reg);\n   |                         ^^              --- for this argument\n   |\n   = help: use `{0:x}` to have the register formatted as `ax` (for 16-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nwarning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:50:25\n   |\n50 |         asm!(\"iocsrrd.w {},{}\",out(reg) val, in(reg) reg);\n   |                         ^^              --- for this argument\n   |\n   = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nwarning: formatting may not be suitable for sub-register argument\n --> src/ipi.rs:7:25\n  |\n7 |         asm!(\"iocsrwr.w {},{}\", in(reg) value,in(reg) addr);\n  |                         ^^              ----- for this argument\n  |\n  = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n  = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nwarning: formatting may not be suitable for sub-register argument\n  --> src/ipi.rs:13:25\n   |\n13 |         asm!(\"iocsrrd.w {},{}\", out(reg) value, in(reg) addr);\n   |                         ^^               ----- for this argument\n   |\n   = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nwarning: `loongArch64` (lib) generated 6 warnings\nerror: could not compile `loongArch64` (lib) due to 2 previous errors; 6 warnings emitted\n"
    },
    {
      "cmd_idx": 150,
      "file": "(virtual) rap",
      "kind": "Cargo",
      "raw": "// pkg_name=loongArch64, checker=Rap\n// toolchain=nightly-2024-10-24-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_6/kern-crates/loongArch64\n// cmd=cargo +nightly-2024-06-30 rap -F -M\n    Checking bitflags v1.3.2\n    Checking bit_field v0.10.2\n    Checking loongArch64 v0.2.4 (/home/runner/check/batch_6/kern-crates/loongArch64)\nwarning: formatting may not be suitable for sub-register argument\n --> src/iocsr.rs:6:25\n  |\n6 |         asm!(\"iocsrwr.w {},{}\", in(reg) value, in(reg) reg);\n  |                         ^^              ----- for this argument\n  |\n  = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n  = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n  = note: `#[warn(asm_sub_register)]` on by default\n\nwarning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:18:25\n   |\n18 |         asm!(\"iocsrwr.h {},{}\", in(reg) value, in(reg) reg);\n   |                         ^^              ----- for this argument\n   |\n   = help: use `{0:x}` to have the register formatted as `ax` (for 16-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nerror: type `u8` cannot be used with this register class\n  --> src/iocsr.rs:24:41\n   |\n24 |         asm!(\"iocsrwr.b {},{}\", in(reg) value, in(reg) reg);\n   |                                         ^^^^^\n   |\n   = note: register class `reg` supports these types: i16, i32, i64, f16, f32, f64\n   = help: consider using the `reg_byte` register class instead\n\nerror: type `u8` cannot be used with this register class\n  --> src/iocsr.rs:32:41\n   |\n32 |         asm!(\"iocsrrd.b {},{}\",out(reg) val, in(reg) reg);\n   |                                         ^^^\n   |\n   = note: register class `reg` supports these types: i16, i32, i64, f16, f32, f64\n   = help: consider using the `reg_byte` register class instead\n\nwarning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:41:25\n   |\n41 |         asm!(\"iocsrrd.h {},{}\",out(reg) val, in(reg) reg);\n   |                         ^^              --- for this argument\n   |\n   = help: use `{0:x}` to have the register formatted as `ax` (for 16-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nwarning: formatting may not be suitable for sub-register argument\n  --> src/iocsr.rs:50:25\n   |\n50 |         asm!(\"iocsrrd.w {},{}\",out(reg) val, in(reg) reg);\n   |                         ^^              --- for this argument\n   |\n   = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nwarning: formatting may not be suitable for sub-register argument\n --> src/ipi.rs:7:25\n  |\n7 |         asm!(\"iocsrwr.w {},{}\", in(reg) value,in(reg) addr);\n  |                         ^^              ----- for this argument\n  |\n  = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n  = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nwarning: formatting may not be suitable for sub-register argument\n  --> src/ipi.rs:13:25\n   |\n13 |         asm!(\"iocsrrd.w {},{}\", out(reg) value, in(reg) addr);\n   |                         ^^               ----- for this argument\n   |\n   = help: use `{0:e}` to have the register formatted as `eax` (for 32-bit values)\n   = help: or use `{0:r}` to keep the default formatting of `rax` (for 64-bit values)\n\nwarning: `loongArch64` (lib) generated 6 warnings\nerror: could not compile `loongArch64` (lib) due to 2 previous errors; 6 warnings emitted\n03:09:14|RAP|ERROR|: Finished with non-zero exit code.\n"
    }
  ]
}