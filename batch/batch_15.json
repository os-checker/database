{
  "env": {
    "tools": {
      "rust_toolchains": {
        "host": {
          "version": "1.83.0-nightly (1bc403daa 2024-10-11)",
          "commit_hash": "1bc403daadbebb553ccc211a0a8eebb73989665f",
          "commit_date": "2024-10-11",
          "host": "x86_64-unknown-linux-gnu",
          "release": "1.83.0-nightly",
          "llvm_version": "19.1.1"
        },
        "installed": [
          {
            "channel": "nightly-2024-10-12-x86_64-unknown-linux-gnu",
            "profile": null,
            "targets": [
              "aarch64-unknown-none",
              "riscv64gc-unknown-none-elf",
              "x86_64-unknown-linux-gnu",
              "x86_64-unknown-linux-musl",
              "x86_64-unknown-none"
            ],
            "components": [
              "cargo-x86_64-unknown-linux-gnu",
              "clippy-x86_64-unknown-linux-gnu",
              "rust-std-aarch64-unknown-none",
              "rust-std-riscv64gc-unknown-none-elf",
              "rust-std-x86_64-unknown-linux-gnu",
              "rust-std-x86_64-unknown-linux-musl",
              "rust-std-x86_64-unknown-none",
              "rustc-x86_64-unknown-linux-gnu",
              "rustfmt-x86_64-unknown-linux-gnu"
            ],
            "toml_path": "/home/runner/check",
            "need_install_clippy": false,
            "peculiar_targets": null
          }
        ]
      },
      "os_checker": {
        "start": 1732613966585,
        "finish": 1732614016909,
        "duration_ms": 50324,
        "git_time": "2024-11-26 17:20:32 +0800",
        "git_sha": "000e9eb9390b8e9142e8c745990ff75813aa4f3a"
      }
    },
    "kinds": {
      "order": [
        "Cargo",
        "Clippy(Error)",
        "Clippy(Warn)",
        "Audit",
        "Mirai",
        "Rap",
        "Rudra",
        "Lockbud(Probably)",
        "Lockbud(Possibly)",
        "Outdated",
        "Geiger",
        "Unformatted"
      ],
      "mapping": {
        "cargo": [
          "Cargo"
        ],
        "clippy": [
          "Clippy(Error)",
          "Clippy(Warn)"
        ],
        "audit": [
          "Audit"
        ],
        "mirai": [
          "Mirai"
        ],
        "rap": [
          "Rap"
        ],
        "rudra": [
          "Rudra"
        ],
        "lockbud": [
          "Lockbud(Probably)",
          "Lockbud(Possibly)"
        ],
        "outdated": [
          "Outdated"
        ],
        "geiger": [
          "Geiger"
        ],
        "fmt": [
          "Unformatted"
        ]
      }
    },
    "repos": [
      {
        "user": "shilei-massclouds",
        "repo": "axtype"
      },
      {
        "user": "shilei-massclouds",
        "repo": "capability"
      },
      {
        "user": "shilei-massclouds",
        "repo": "driver_block"
      },
      {
        "user": "shilei-massclouds",
        "repo": "driver_common"
      },
      {
        "user": "shilei-massclouds",
        "repo": "driver_pci"
      },
      {
        "user": "shilei-massclouds",
        "repo": "driver_virtio"
      },
      {
        "user": "shilei-massclouds",
        "repo": "early_console"
      },
      {
        "user": "shilei-massclouds",
        "repo": "elf"
      }
    ],
    "packages": [
      {
        "name": "axtype",
        "repo": {
          "repo_idx": 0,
          "user": "shilei-massclouds",
          "repo": "axtype"
        }
      },
      {
        "name": "capability",
        "repo": {
          "repo_idx": 1,
          "user": "shilei-massclouds",
          "repo": "capability"
        }
      },
      {
        "name": "driver_block",
        "repo": {
          "repo_idx": 2,
          "user": "shilei-massclouds",
          "repo": "driver_block"
        }
      },
      {
        "name": "rt_driver_block",
        "repo": {
          "repo_idx": 2,
          "user": "shilei-massclouds",
          "repo": "driver_block"
        }
      },
      {
        "name": "driver_common",
        "repo": {
          "repo_idx": 3,
          "user": "shilei-massclouds",
          "repo": "driver_common"
        }
      },
      {
        "name": "driver_pci",
        "repo": {
          "repo_idx": 4,
          "user": "shilei-massclouds",
          "repo": "driver_pci"
        }
      },
      {
        "name": "driver_virtio",
        "repo": {
          "repo_idx": 5,
          "user": "shilei-massclouds",
          "repo": "driver_virtio"
        }
      },
      {
        "name": "rt_driver_virtio",
        "repo": {
          "repo_idx": 5,
          "user": "shilei-massclouds",
          "repo": "driver_virtio"
        }
      },
      {
        "name": "early_console",
        "repo": {
          "repo_idx": 6,
          "user": "shilei-massclouds",
          "repo": "early_console"
        }
      },
      {
        "name": "rt_early_console",
        "repo": {
          "repo_idx": 6,
          "user": "shilei-massclouds",
          "repo": "early_console"
        }
      },
      {
        "name": "elf",
        "repo": {
          "repo_idx": 7,
          "user": "shilei-massclouds",
          "repo": "elf"
        }
      }
    ]
  },
  "cmd": [
    {
      "package_idx": 0,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p axtype -- --emit=json",
      "count": 8,
      "duration_ms": 102,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 5,
      "duration_ms": 3364,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "mirai",
      "cmd": "cargo +nightly-2024-02-05 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 46,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 4200,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "rap",
      "cmd": "cargo +nightly-2024-10-12 rap -F -M",
      "count": 0,
      "duration_ms": 3772,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "rudra",
      "cmd": "cargo +nightly-2021-10-21 rudra",
      "count": 0,
      "duration_ms": 245,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 62,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "geiger",
      "cmd": "cargo geiger --output-format Ascii",
      "count": 0,
      "duration_ms": 114,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "cargo",
      "cmd": "VRITUAL=clippy cargo",
      "count": 1,
      "duration_ms": 3364,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p capability -- --emit=json",
      "count": 0,
      "duration_ms": 98,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 420,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "mirai",
      "cmd": "cargo +nightly-2024-02-05 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 45,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 1,
      "duration_ms": 426,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "rap",
      "cmd": "cargo +nightly-2024-10-12 rap -F -M",
      "count": 0,
      "duration_ms": 1338,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "rudra",
      "cmd": "cargo +nightly-2021-10-21 rudra",
      "count": 0,
      "duration_ms": 243,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 62,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "geiger",
      "cmd": "cargo geiger --output-format Ascii",
      "count": 0,
      "duration_ms": 104,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p driver_block -- --emit=json",
      "count": 0,
      "duration_ms": 100,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p driver_block -- --emit=json",
      "count": 0,
      "duration_ms": 96,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p driver_block -- --emit=json",
      "count": 0,
      "duration_ms": 96,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "clippy",
      "cmd": "cargo clippy --target aarch64-unknown-none-softfloat --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 116,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 117,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-none --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 117,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target aarch64-unknown-none-softfloat",
      "count": 0,
      "duration_ms": 162,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 0,
      "duration_ms": 123,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-none",
      "count": 0,
      "duration_ms": 124,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 83,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 60,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 61,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 162,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 123,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 124,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p rt_driver_block -- --emit=json",
      "count": 4,
      "duration_ms": 94,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p rt_driver_block -- --emit=json",
      "count": 4,
      "duration_ms": 95,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p rt_driver_block -- --emit=json",
      "count": 4,
      "duration_ms": 95,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "clippy",
      "cmd": "cargo clippy --target aarch64-unknown-none-softfloat --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 117,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 116,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-none --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 117,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target aarch64-unknown-none-softfloat",
      "count": 1,
      "duration_ms": 7626,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 1,
      "duration_ms": 800,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-none",
      "count": 1,
      "duration_ms": 2853,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 61,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 61,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 61,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 7626,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 800,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 2853,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p driver_common -- --emit=json",
      "count": 0,
      "duration_ms": 96,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 162,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "mirai",
      "cmd": "cargo +nightly-2024-02-05 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 46,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 100,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "rap",
      "cmd": "cargo +nightly-2024-10-12 rap -F -M",
      "count": 0,
      "duration_ms": 350,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "rudra",
      "cmd": "cargo +nightly-2021-10-21 rudra",
      "count": 0,
      "duration_ms": 244,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 62,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "geiger",
      "cmd": "cargo geiger --output-format Ascii",
      "count": 0,
      "duration_ms": 102,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p driver_pci -- --emit=json",
      "count": 0,
      "duration_ms": 95,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 3196,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "mirai",
      "cmd": "cargo +nightly-2024-02-05 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 46,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 1,
      "duration_ms": 3951,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "rap",
      "cmd": "cargo +nightly-2024-10-12 rap -F -M",
      "count": 0,
      "duration_ms": 3361,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "rudra",
      "cmd": "cargo +nightly-2021-10-21 rudra",
      "count": 0,
      "duration_ms": 246,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 62,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 5,
      "tool": "geiger",
      "cmd": "cargo geiger --output-format Ascii",
      "count": 0,
      "duration_ms": 113,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p driver_virtio -- --emit=json",
      "count": 0,
      "duration_ms": 102,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p driver_virtio -- --emit=json",
      "count": 0,
      "duration_ms": 100,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p driver_virtio -- --emit=json",
      "count": 0,
      "duration_ms": 98,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "clippy",
      "cmd": "cargo clippy --target aarch64-unknown-none-softfloat --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 117,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 118,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-none --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 122,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target aarch64-unknown-none-softfloat",
      "count": 1,
      "duration_ms": 341,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 1,
      "duration_ms": 604,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-none",
      "count": 1,
      "duration_ms": 331,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 85,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 62,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 62,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 341,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 604,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 6,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 331,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p rt_driver_virtio -- --emit=json",
      "count": 4,
      "duration_ms": 96,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p rt_driver_virtio -- --emit=json",
      "count": 4,
      "duration_ms": 95,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p rt_driver_virtio -- --emit=json",
      "count": 4,
      "duration_ms": 95,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "clippy",
      "cmd": "cargo clippy --target aarch64-unknown-none-softfloat --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 121,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 120,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-none --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 120,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target aarch64-unknown-none-softfloat",
      "count": 1,
      "duration_ms": 6866,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 1,
      "duration_ms": 1281,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-none",
      "count": 1,
      "duration_ms": 2859,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 60,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 61,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 60,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 6866,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 1281,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 7,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 2859,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p early_console -- --emit=json",
      "count": 0,
      "duration_ms": 96,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p early_console -- --emit=json",
      "count": 0,
      "duration_ms": 94,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p early_console -- --emit=json",
      "count": 0,
      "duration_ms": 94,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "clippy",
      "cmd": "cargo clippy --target aarch64-unknown-none-softfloat --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 117,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 116,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-none --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 117,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target aarch64-unknown-none-softfloat",
      "count": 1,
      "duration_ms": 4260,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 1,
      "duration_ms": 547,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-none",
      "count": 1,
      "duration_ms": 1627,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 84,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 61,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 59,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 4260,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 547,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 8,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 1627,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p rt_early_console -- --emit=json",
      "count": 0,
      "duration_ms": 94,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p rt_early_console -- --emit=json",
      "count": 0,
      "duration_ms": 94,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p rt_early_console -- --emit=json",
      "count": 0,
      "duration_ms": 95,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "clippy",
      "cmd": "cargo clippy --target aarch64-unknown-none-softfloat --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 116,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 116,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-none --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 117,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target aarch64-unknown-none-softfloat",
      "count": 1,
      "duration_ms": 1921,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 1,
      "duration_ms": 144,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-none",
      "count": 1,
      "duration_ms": 1094,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 59,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 59,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 59,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 1921,
      "arch": "aarch64",
      "target_triple": "aarch64-unknown-none-softfloat",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 144,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 9,
      "tool": "cargo",
      "cmd": "VRITUAL=lockbud cargo",
      "count": 1,
      "duration_ms": 1094,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-none",
      "rust_toolchain": "nightly-2024-01-18",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 10,
      "tool": "fmt",
      "cmd": "cargo +nightly-2024-10-12-x86_64-unknown-linux-gnu fmt -p elf -- --emit=json",
      "count": 0,
      "duration_ms": 165,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 10,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 55,
      "duration_ms": 710,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 10,
      "tool": "mirai",
      "cmd": "cargo +nightly-2024-02-05 mirai --target x86_64-unknown-linux-gnu --message-format=json",
      "count": 0,
      "duration_ms": 45,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 10,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 407,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 10,
      "tool": "rap",
      "cmd": "cargo +nightly-2024-10-12 rap -F -M",
      "count": 0,
      "duration_ms": 10273,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 10,
      "tool": "rudra",
      "cmd": "cargo +nightly-2021-10-21 rudra",
      "count": 0,
      "duration_ms": 252,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 10,
      "tool": "outdated",
      "cmd": "cargo outdated -R --exit-code=2",
      "count": 0,
      "duration_ms": 62,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    },
    {
      "package_idx": 10,
      "tool": "geiger",
      "cmd": "cargo geiger --output-format Ascii",
      "count": 0,
      "duration_ms": 104,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain": "nightly-2024-10-11",
      "features": [],
      "flags": []
    }
  ],
  "data": [
    {
      "cmd_idx": 0,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_15/shilei-massclouds/axtype/axtype/src/lib.rs (original lines from 10 to 10)\n-pub const PAGE_SIZE: usize  = 0x1000;\n+pub const PAGE_SIZE: usize = 0x1000;\n"
    },
    {
      "cmd_idx": 0,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_15/shilei-massclouds/axtype/axtype/src/lib.rs (original lines from 89 to 91)\n-        Self {\n-            init_cmd: None,\n-        }\n+        Self { init_cmd: None }\n"
    },
    {
      "cmd_idx": 0,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_15/shilei-massclouds/axtype/axtype/src/lib.rs (original lines from 152 to 152)\n-/// \n+///\n"
    },
    {
      "cmd_idx": 0,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_15/shilei-massclouds/axtype/axtype/src/lib.rs (original lines from 155 to 155)\n-/// \n+///\n"
    },
    {
      "cmd_idx": 0,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_15/shilei-massclouds/axtype/axtype/src/lib.rs (original lines from 157 to 157)\n-/// \n+///\n"
    },
    {
      "cmd_idx": 0,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_15/shilei-massclouds/axtype/axtype/src/lib.rs (original lines from 203 to 205)\n-pub const RLIMIT_DATA: usize = 2;  /* max data size */\n-pub const RLIMIT_STACK:usize = 3;  /* max stack size */\n-pub const RLIMIT_CORE: usize = 4;  /* max core size */\n+pub const RLIMIT_DATA: usize = 2; /* max data size */\n+pub const RLIMIT_STACK: usize = 3; /* max stack size */\n+pub const RLIMIT_CORE: usize = 4; /* max core size */\n"
    },
    {
      "cmd_idx": 0,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_15/shilei-massclouds/axtype/axtype/src/lib.rs (original lines from 225 to 239)\n-pub const O_ACCMODE:    i32 = 0o000003;\n-pub const O_RDONLY:     i32 = 0o000000;\n-pub const O_WRONLY:     i32 = 0o000001;\n-pub const O_RDWR:       i32 = 0o000002;\n-pub const O_CREAT:      i32 = 0o000100;\n-pub const O_EXCL:       i32 = 0o000200;\n-pub const O_TRUNC:      i32 = 0o001000;\n-pub const O_APPEND:     i32 = 0o002000;\n-pub const O_NONBLOCK:   i32 = 0o004000;\n-pub const O_DIRECTORY:  i32 = 0o200000;     /* must be a directory */\n-pub const O_NOFOLLOW:   i32 = 0o400000;     /* don't follow links */\n-pub const O_NOATIME:    i32 = 0o1000000;\n-pub const O_CLOEXEC:    i32 = 0o2000000;    /* set close_on_exec */\n-pub const O_PATH:       i32 = 0o10000000;\n-pub const __O_TMPFILE:  i32 = 0o20000000;\n+pub const O_ACCMODE: i32 = 0o000003;\n+pub const O_RDONLY: i32 = 0o000000;\n+pub const O_WRONLY: i32 = 0o000001;\n+pub const O_RDWR: i32 = 0o000002;\n+pub const O_CREAT: i32 = 0o000100;\n+pub const O_EXCL: i32 = 0o000200;\n+pub const O_TRUNC: i32 = 0o001000;\n+pub const O_APPEND: i32 = 0o002000;\n+pub const O_NONBLOCK: i32 = 0o004000;\n+pub const O_DIRECTORY: i32 = 0o200000; /* must be a directory */\n+pub const O_NOFOLLOW: i32 = 0o400000; /* don't follow links */\n+pub const O_NOATIME: i32 = 0o1000000;\n+pub const O_CLOEXEC: i32 = 0o2000000; /* set close_on_exec */\n+pub const O_PATH: i32 = 0o10000000;\n+pub const __O_TMPFILE: i32 = 0o20000000;\n"
    },
    {
      "cmd_idx": 0,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_15/shilei-massclouds/axtype/axtype/src/lib.rs (original lines from 252 to 258)\n-pub const S_IFMT:   i32 = 0o170000;\n-pub const S_IFREG:  i32 = 0o100000;\n-pub const S_IFIFO:  i32 = 0o10000;\n-pub const S_IFCHR:  i32 = 0o20000;\n-pub const S_ISUID:  i32 = 0o04000;\n-pub const S_ISGID:  i32 = 0o02000;\n-pub const S_ISVTX:  i32 = 0o01000;\n+pub const S_IFMT: i32 = 0o170000;\n+pub const S_IFREG: i32 = 0o100000;\n+pub const S_IFIFO: i32 = 0o10000;\n+pub const S_IFCHR: i32 = 0o20000;\n+pub const S_ISUID: i32 = 0o04000;\n+pub const S_ISGID: i32 = 0o02000;\n+pub const S_ISVTX: i32 = 0o01000;\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/path.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: useless conversion to the same type: `core::str::Split<'_, char>`\n  --> src/path.rs:20:9\n   |\n20 |         self.inner.split('/').into_iter()\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `self.inner.split('/')`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n   = note: `#[warn(clippy::useless_conversion)]` on by default\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: you should consider adding a `Default` implementation for `DtbInfo`\n  --> src/lib.rs:88:5\n   |\n88 | /     pub fn new() -> Self {\n89 | |         Self {\n90 | |             init_cmd: None,\n91 | |         }\n92 | |     }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n   = note: `#[warn(clippy::new_without_default)]` on by default\nhelp: try adding this\n   |\n87 + impl Default for DtbInfo {\n88 +     fn default() -> Self {\n89 +         Self::new()\n90 +     }\n91 + }\n   |\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error: this public function might dereference a raw pointer but is not marked `unsafe`\n   --> src/lib.rs:116:36\n    |\n116 |     let len = unsafe { get_str_len(ptr) };\n    |                                    ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref\n    = note: `#[deny(clippy::not_unsafe_ptr_arg_deref)]` on by default\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/lib.rs",
      "kind": "Clippy(Error)",
      "raw": "error: this public function might dereference a raw pointer but is not marked `unsafe`\n   --> src/lib.rs:117:54\n    |\n117 |     let slice = unsafe { core::slice::from_raw_parts(ptr, len) };\n    |                                                      ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref\n\n"
    },
    {
      "cmd_idx": 1,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unneeded `return` statement\n   --> src/lib.rs:188:5\n    |\n188 |     return Some(num);\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n    = note: `#[warn(clippy::needless_return)]` on by default\nhelp: remove `return`\n    |\n188 -     return Some(num);\n188 +     Some(num)\n    |\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "(virtual) clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=axtype, checker=Clippy\n// toolchain=nightly-2024-10-12-x86_64-unknown-linux-gnu, target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_15/shilei-massclouds/axtype/axtype\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n   Compiling serde v1.0.215\n   Compiling hashbrown v0.15.2\n   Compiling equivalent v1.0.1\n   Compiling toml_datetime v0.6.8\n   Compiling winnow v0.5.40\n   Compiling indexmap v2.6.0\n   Compiling toml_edit v0.19.15\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig#51b81e4a)\n    Checking axtype v0.1.0 (/home/runner/check/batch_15/shilei-massclouds/axtype/axtype)\nerror: could not compile `axtype` (lib) due to 2 previous errors; 3 warnings emitted\n"
    },
    {
      "cmd_idx": 12,
      "file": "[lockbud] Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-11-26T09:39:43Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-26T09:39:43Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 29,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=driver_block, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=aarch64-unknown-none-softfloat\n// pkg_dir=/home/runner/check/batch_12/shilei-massclouds/driver_block/driver_block\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target aarch64-unknown-none-softfloat\n   Compiling driver_common v0.1.0 (ssh://git@github.com/shilei-massclouds/driver_common#2e86ed35)\n   Compiling driver_block v0.1.0 (/home/runner/check/batch_12/shilei-massclouds/driver_block/driver_block)\nerror[E0049]: method `device_type` has 1 const parameter but its trait declaration has 0 const parameters\n  --> /home/runner/.cargo/git/checkouts/driver_common-fa2dbf8873b7fe39/2e86ed3/driver_common/src/lib.rs:58:11\n   |\n58 | pub trait BaseDriverOps: Send + Sync {\n   |           ^^^^^^^^^^^^^ found 1 const parameter\n...\n63 |     fn device_type(&self) -> DeviceType;\n   |     ------------------------------------ expected 0 const parameters\n\nerror[E0049]: method `device_name` has 1 const parameter but its trait declaration has 0 const parameters\n  --> /home/runner/.cargo/git/checkouts/driver_common-fa2dbf8873b7fe39/2e86ed3/driver_common/src/lib.rs:58:11\n   |\n58 | pub trait BaseDriverOps: Send + Sync {\n   |           ^^^^^^^^^^^^^ found 1 const parameter\n59 |     /// The name of the device.\n60 |     fn device_name(&self) -> &str;\n   |     ------------------------------ expected 0 const parameters\n\nFor more information about this error, try `rustc --explain E0049`.\nerror: could not compile `driver_block` (lib) due to 2 previous errors\n"
    },
    {
      "cmd_idx": 30,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=driver_block, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_12/shilei-massclouds/driver_block/driver_block\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target riscv64gc-unknown-none-elf\n   Compiling driver_common v0.1.0 (ssh://git@github.com/shilei-massclouds/driver_common#2e86ed35)\n   Compiling driver_block v0.1.0 (/home/runner/check/batch_12/shilei-massclouds/driver_block/driver_block)\nerror[E0049]: method `device_type` has 1 const parameter but its trait declaration has 0 const parameters\n  --> /home/runner/.cargo/git/checkouts/driver_common-fa2dbf8873b7fe39/2e86ed3/driver_common/src/lib.rs:58:11\n   |\n58 | pub trait BaseDriverOps: Send + Sync {\n   |           ^^^^^^^^^^^^^ found 1 const parameter\n...\n63 |     fn device_type(&self) -> DeviceType;\n   |     ------------------------------------ expected 0 const parameters\n\nerror[E0049]: method `device_name` has 1 const parameter but its trait declaration has 0 const parameters\n  --> /home/runner/.cargo/git/checkouts/driver_common-fa2dbf8873b7fe39/2e86ed3/driver_common/src/lib.rs:58:11\n   |\n58 | pub trait BaseDriverOps: Send + Sync {\n   |           ^^^^^^^^^^^^^ found 1 const parameter\n59 |     /// The name of the device.\n60 |     fn device_name(&self) -> &str;\n   |     ------------------------------ expected 0 const parameters\n\nFor more information about this error, try `rustc --explain E0049`.\nerror: could not compile `driver_block` (lib) due to 2 previous errors\n"
    },
    {
      "cmd_idx": 31,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=driver_block, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=x86_64-unknown-none\n// pkg_dir=/home/runner/check/batch_12/shilei-massclouds/driver_block/driver_block\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-none\n   Compiling driver_common v0.1.0 (ssh://git@github.com/shilei-massclouds/driver_common#2e86ed35)\n   Compiling driver_block v0.1.0 (/home/runner/check/batch_12/shilei-massclouds/driver_block/driver_block)\nerror[E0049]: method `device_type` has 1 const parameter but its trait declaration has 0 const parameters\n  --> /home/runner/.cargo/git/checkouts/driver_common-fa2dbf8873b7fe39/2e86ed3/driver_common/src/lib.rs:58:11\n   |\n58 | pub trait BaseDriverOps: Send + Sync {\n   |           ^^^^^^^^^^^^^ found 1 const parameter\n...\n63 |     fn device_type(&self) -> DeviceType;\n   |     ------------------------------------ expected 0 const parameters\n\nerror[E0049]: method `device_name` has 1 const parameter but its trait declaration has 0 const parameters\n  --> /home/runner/.cargo/git/checkouts/driver_common-fa2dbf8873b7fe39/2e86ed3/driver_common/src/lib.rs:58:11\n   |\n58 | pub trait BaseDriverOps: Send + Sync {\n   |           ^^^^^^^^^^^^^ found 1 const parameter\n59 |     /// The name of the device.\n60 |     fn device_name(&self) -> &str;\n   |     ------------------------------ expected 0 const parameters\n\nFor more information about this error, try `rustc --explain E0049`.\nerror: could not compile `driver_block` (lib) due to 2 previous errors\n"
    },
    {
      "cmd_idx": 32,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_12/shilei-massclouds/driver_block/rt_driver_block/src/main.rs (original lines from 10 to 10)\n-use driver_common::{BaseDriverOps, DeviceType};\n"
    },
    {
      "cmd_idx": 32,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_12/shilei-massclouds/driver_block/rt_driver_block/src/main.rs (original lines from 12 to 12)\n+use driver_common::{BaseDriverOps, DeviceType};\n"
    },
    {
      "cmd_idx": 32,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_12/shilei-massclouds/driver_block/rt_driver_block/src/main.rs (original lines from 13 to 14)\n-const DISK_SIZE: usize = 0x1000;    // 4K\n-const BLOCK_SIZE: usize = 0x200;    // 512\n+const DISK_SIZE: usize = 0x1000; // 4K\n+const BLOCK_SIZE: usize = 0x200; // 512\n"
    },
    {
      "cmd_idx": 32,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_12/shilei-massclouds/driver_block/rt_driver_block/src/main.rs (original lines from 28 to 28)\n-    assert_eq!(disk.num_blocks() as usize, DISK_SIZE/BLOCK_SIZE);\n+    assert_eq!(disk.num_blocks() as usize, DISK_SIZE / BLOCK_SIZE);\n"
    },
    {
      "cmd_idx": 33,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_12/shilei-massclouds/driver_block/rt_driver_block/src/main.rs (original lines from 10 to 10)\n-use driver_common::{BaseDriverOps, DeviceType};\n"
    },
    {
      "cmd_idx": 33,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_12/shilei-massclouds/driver_block/rt_driver_block/src/main.rs (original lines from 12 to 12)\n+use driver_common::{BaseDriverOps, DeviceType};\n"
    },
    {
      "cmd_idx": 33,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_12/shilei-massclouds/driver_block/rt_driver_block/src/main.rs (original lines from 13 to 14)\n-const DISK_SIZE: usize = 0x1000;    // 4K\n-const BLOCK_SIZE: usize = 0x200;    // 512\n+const DISK_SIZE: usize = 0x1000; // 4K\n+const BLOCK_SIZE: usize = 0x200; // 512\n"
    },
    {
      "cmd_idx": 33,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_12/shilei-massclouds/driver_block/rt_driver_block/src/main.rs (original lines from 28 to 28)\n-    assert_eq!(disk.num_blocks() as usize, DISK_SIZE/BLOCK_SIZE);\n+    assert_eq!(disk.num_blocks() as usize, DISK_SIZE / BLOCK_SIZE);\n"
    },
    {
      "cmd_idx": 34,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_12/shilei-massclouds/driver_block/rt_driver_block/src/main.rs (original lines from 10 to 10)\n-use driver_common::{BaseDriverOps, DeviceType};\n"
    },
    {
      "cmd_idx": 34,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_12/shilei-massclouds/driver_block/rt_driver_block/src/main.rs (original lines from 12 to 12)\n+use driver_common::{BaseDriverOps, DeviceType};\n"
    },
    {
      "cmd_idx": 34,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_12/shilei-massclouds/driver_block/rt_driver_block/src/main.rs (original lines from 13 to 14)\n-const DISK_SIZE: usize = 0x1000;    // 4K\n-const BLOCK_SIZE: usize = 0x200;    // 512\n+const DISK_SIZE: usize = 0x1000; // 4K\n+const BLOCK_SIZE: usize = 0x200; // 512\n"
    },
    {
      "cmd_idx": 34,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_12/shilei-massclouds/driver_block/rt_driver_block/src/main.rs (original lines from 28 to 28)\n-    assert_eq!(disk.num_blocks() as usize, DISK_SIZE/BLOCK_SIZE);\n+    assert_eq!(disk.num_blocks() as usize, DISK_SIZE / BLOCK_SIZE);\n"
    },
    {
      "cmd_idx": 38,
      "file": "[lockbud] Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-11-22T10:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 39,
      "file": "[lockbud] Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-11-22T10:31:11Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:31:11Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 40,
      "file": "[lockbud] Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-11-22T10:31:12Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:31:12Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 44,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_driver_block, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=aarch64-unknown-none-softfloat\n// pkg_dir=/home/runner/check/batch_12/shilei-massclouds/driver_block/rt_driver_block\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target aarch64-unknown-none-softfloat\n   Compiling hashbrown v0.15.1\n   Compiling serde v1.0.215\n   Compiling equivalent v1.0.1\n   Compiling winnow v0.5.40\n   Compiling toml_datetime v0.6.8\n   Compiling proc-macro2 v1.0.92\n   Compiling unicode-ident v1.0.14\n   Compiling indexmap v2.6.0\n   Compiling cfg-if v1.0.0\n   Compiling quote v1.0.37\n   Compiling syn v1.0.109\n   Compiling log v0.4.22\n[2024-11-22T10:31:05Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:31:05Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling bitflags v2.6.0\n   Compiling toml_edit v0.19.15\n   Compiling syn v2.0.89\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling base64 v0.13.1\n   Compiling tock-registers v0.8.1\n   Compiling unicode-width v0.1.14\n   Compiling aarch64-cpu v9.4.0\n   Compiling svgbobdoc v0.3.0\n   Compiling spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n   Compiling const-default v1.0.0\n   Compiling bit_field v0.10.2\n   Compiling bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\n   Compiling rlsf v0.2.1\n   Compiling lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig.git#51b81e4a)\n   Compiling ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n   Compiling memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n   Compiling static_assertions v1.1.0\n   Compiling allocator v0.1.0 (ssh://git@github.com/shilei-massclouds/allocator#d93ad046)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console.git#8bc0d219)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\n   Compiling arch_boot v0.1.0 (ssh://git@github.com/shilei-massclouds/arch_boot.git#8663e839)\nerror[E0583]: file not found for module `aarch64_common`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/mod.rs:5:9\n  |\n5 |         mod aarch64_common;\n  |         ^^^^^^^^^^^^^^^^^^^\n  |\n  = help: to create the module `aarch64_common`, create file \"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/aarch64_common.rs\" or \"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/aarch64_common/mod.rs\"\n  = note: if there is a `mod aarch64_common` elsewhere in the crate already, import it with `use crate::...` instead\n\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433, E0583.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 45,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_driver_block, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_12/shilei-massclouds/driver_block/rt_driver_block\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target riscv64gc-unknown-none-elf\n   Compiling cfg-if v1.0.0\n   Compiling nb v1.1.0\n   Compiling bit_field v0.10.2\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig.git#51b81e4a)\n   Compiling void v1.0.2\n   Compiling static_assertions v1.1.0\n   Compiling nb v0.1.3\n   Compiling riscv v0.10.1\n   Compiling sbi-spec v0.0.4\n   Compiling embedded-hal v0.2.7\n   Compiling critical-section v1.2.0\n   Compiling log v0.4.22\n   Compiling sbi-rt v0.0.2\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console.git#8bc0d219)\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling bitflags v2.6.0\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling percpu_macros2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n[2024-11-22T10:31:11Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:31:11Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n   Compiling const-default v1.0.0\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\n   Compiling rlsf v0.2.1\n   Compiling bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\n   Compiling memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 4 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 46,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_driver_block, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=x86_64-unknown-none\n// pkg_dir=/home/runner/check/batch_12/shilei-massclouds/driver_block/rt_driver_block\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-none\n   Compiling bit_field v0.10.2\n   Compiling cfg-if v1.0.0\n   Compiling rustversion v1.0.18\n   Compiling bitflags v2.6.0\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig.git#51b81e4a)\n   Compiling bitflags v1.3.2\n   Compiling volatile v0.4.6\n   Compiling raw-cpuid v10.7.0\n   Compiling log v0.4.22\n   Compiling paste v1.0.15\n[2024-11-22T10:31:12Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:31:12Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling x86 v0.52.0\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console.git#8bc0d219)\n   Compiling spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n   Compiling bit v0.1.1\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling raw-cpuid v11.2.0\n   Compiling const-default v1.0.0\n   Compiling x86_64 v0.14.12\n   Compiling rlsf v0.2.1\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\n   Compiling bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\n   Compiling lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n   Compiling ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n   Compiling static_assertions v1.1.0\n   Compiling memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n   Compiling arch_boot v0.1.0 (ssh://git@github.com/shilei-massclouds/arch_boot.git#8663e839)\n   Compiling allocator v0.1.0 (ssh://git@github.com/shilei-massclouds/allocator#d93ad046)\n   Compiling driver_block v0.1.0 (ssh://git@github.com/shilei-massclouds/driver_block.git#7ef4e9c6)\nerror[E0049]: method `device_type` has 1 const parameter but its trait declaration has 0 const parameters\n  --> /home/runner/.cargo/git/checkouts/driver_common-fa2dbf8873b7fe39/2e86ed3/driver_common/src/lib.rs:58:11\n   |\n58 | pub trait BaseDriverOps: Send + Sync {\n   |           ^^^^^^^^^^^^^ found 1 const parameter\n...\n63 |     fn device_type(&self) -> DeviceType;\n   |     ------------------------------------ expected 0 const parameters\n\nerror[E0049]: method `device_name` has 1 const parameter but its trait declaration has 0 const parameters\n  --> /home/runner/.cargo/git/checkouts/driver_common-fa2dbf8873b7fe39/2e86ed3/driver_common/src/lib.rs:58:11\n   |\n58 | pub trait BaseDriverOps: Send + Sync {\n   |           ^^^^^^^^^^^^^ found 1 const parameter\n59 |     /// The name of the device.\n60 |     fn device_name(&self) -> &str;\n   |     ------------------------------ expected 0 const parameters\n\nFor more information about this error, try `rustc --explain E0049`.\nerror: could not compile `driver_block` (lib) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 58,
      "file": "[lockbud] Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-11-26T09:39:54Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-26T09:39:54Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 69,
      "file": "[lockbud] Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-11-22T10:57:44Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 70,
      "file": "[lockbud] Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-11-22T10:57:44Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 71,
      "file": "[lockbud] Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-11-22T10:57:44Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 75,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=driver_virtio, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=aarch64-unknown-none-softfloat\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/driver_virtio/driver_virtio\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target aarch64-unknown-none-softfloat\n   Compiling proc-macro2 v1.0.92\n   Compiling unicode-ident v1.0.14\n   Compiling byteorder v1.5.0\n   Compiling driver_common v0.1.0 (ssh://git@github.com/shilei-massclouds/driver_common.git#2e86ed35)\n   Compiling log v0.4.22\n   Compiling bitflags v1.3.2\n   Compiling driver_block v0.1.0 (ssh://git@github.com/shilei-massclouds/driver_block.git#7ef4e9c6)\nerror[E0049]: method `device_type` has 1 const parameter but its trait declaration has 0 const parameters\n  --> /home/runner/.cargo/git/checkouts/driver_common-fa2dbf8873b7fe39/2e86ed3/driver_common/src/lib.rs:58:11\n   |\n58 | pub trait BaseDriverOps: Send + Sync {\n   |           ^^^^^^^^^^^^^ found 1 const parameter\n...\n63 |     fn device_type(&self) -> DeviceType;\n   |     ------------------------------------ expected 0 const parameters\n\nerror[E0049]: method `device_name` has 1 const parameter but its trait declaration has 0 const parameters\n  --> /home/runner/.cargo/git/checkouts/driver_common-fa2dbf8873b7fe39/2e86ed3/driver_common/src/lib.rs:58:11\n   |\n58 | pub trait BaseDriverOps: Send + Sync {\n   |           ^^^^^^^^^^^^^ found 1 const parameter\n59 |     /// The name of the device.\n60 |     fn device_name(&self) -> &str;\n   |     ------------------------------ expected 0 const parameters\n\nFor more information about this error, try `rustc --explain E0049`.\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\nerror: could not compile `driver_block` (lib) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 76,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=driver_virtio, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/driver_virtio/driver_virtio\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target riscv64gc-unknown-none-elf\n   Compiling proc-macro2 v1.0.92\n   Compiling byteorder v1.5.0\n   Compiling driver_common v0.1.0 (ssh://git@github.com/shilei-massclouds/driver_common.git#2e86ed35)\n   Compiling bitflags v1.3.2\n   Compiling log v0.4.22\n   Compiling driver_block v0.1.0 (ssh://git@github.com/shilei-massclouds/driver_block.git#7ef4e9c6)\nerror[E0049]: method `device_type` has 1 const parameter but its trait declaration has 0 const parameters\n  --> /home/runner/.cargo/git/checkouts/driver_common-fa2dbf8873b7fe39/2e86ed3/driver_common/src/lib.rs:58:11\n   |\n58 | pub trait BaseDriverOps: Send + Sync {\n   |           ^^^^^^^^^^^^^ found 1 const parameter\n...\n63 |     fn device_type(&self) -> DeviceType;\n   |     ------------------------------------ expected 0 const parameters\n\nerror[E0049]: method `device_name` has 1 const parameter but its trait declaration has 0 const parameters\n  --> /home/runner/.cargo/git/checkouts/driver_common-fa2dbf8873b7fe39/2e86ed3/driver_common/src/lib.rs:58:11\n   |\n58 | pub trait BaseDriverOps: Send + Sync {\n   |           ^^^^^^^^^^^^^ found 1 const parameter\n59 |     /// The name of the device.\n60 |     fn device_name(&self) -> &str;\n   |     ------------------------------ expected 0 const parameters\n\nFor more information about this error, try `rustc --explain E0049`.\nerror: could not compile `driver_block` (lib) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n"
    },
    {
      "cmd_idx": 77,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=driver_virtio, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=x86_64-unknown-none\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/driver_virtio/driver_virtio\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-none\n   Compiling quote v1.0.37\n   Compiling byteorder v1.5.0\n   Compiling log v0.4.22\n   Compiling driver_common v0.1.0 (ssh://git@github.com/shilei-massclouds/driver_common.git#2e86ed35)\n   Compiling bitflags v1.3.2\n   Compiling driver_block v0.1.0 (ssh://git@github.com/shilei-massclouds/driver_block.git#7ef4e9c6)\nerror[E0049]: method `device_type` has 1 const parameter but its trait declaration has 0 const parameters\n  --> /home/runner/.cargo/git/checkouts/driver_common-fa2dbf8873b7fe39/2e86ed3/driver_common/src/lib.rs:58:11\n   |\n58 | pub trait BaseDriverOps: Send + Sync {\n   |           ^^^^^^^^^^^^^ found 1 const parameter\n...\n63 |     fn device_type(&self) -> DeviceType;\n   |     ------------------------------------ expected 0 const parameters\n\nerror[E0049]: method `device_name` has 1 const parameter but its trait declaration has 0 const parameters\n  --> /home/runner/.cargo/git/checkouts/driver_common-fa2dbf8873b7fe39/2e86ed3/driver_common/src/lib.rs:58:11\n   |\n58 | pub trait BaseDriverOps: Send + Sync {\n   |           ^^^^^^^^^^^^^ found 1 const parameter\n59 |     /// The name of the device.\n60 |     fn device_name(&self) -> &str;\n   |     ------------------------------ expected 0 const parameters\n\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\nFor more information about this error, try `rustc --explain E0049`.\nerror: could not compile `driver_block` (lib) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 78,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/driver_virtio/rt_driver_virtio/src/main.rs (original lines from 10 to 10)\n-use driver_common::{BaseDriverOps, DeviceType};\n"
    },
    {
      "cmd_idx": 78,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/driver_virtio/rt_driver_virtio/src/main.rs (original lines from 12 to 12)\n+use driver_common::{BaseDriverOps, DeviceType};\n"
    },
    {
      "cmd_idx": 78,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/driver_virtio/rt_driver_virtio/src/main.rs (original lines from 13 to 14)\n-const DISK_SIZE: usize = 0x1000_0000;    // 256M\n-const BLOCK_SIZE: usize = 0x200;        // 512\n+const DISK_SIZE: usize = 0x1000_0000; // 256M\n+const BLOCK_SIZE: usize = 0x200; // 512\n"
    },
    {
      "cmd_idx": 78,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/driver_virtio/rt_driver_virtio/src/main.rs (original lines from 47 to 47)\n-    assert_eq!(disk.num_blocks() as usize, DISK_SIZE/BLOCK_SIZE);\n+    assert_eq!(disk.num_blocks() as usize, DISK_SIZE / BLOCK_SIZE);\n"
    },
    {
      "cmd_idx": 79,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/driver_virtio/rt_driver_virtio/src/main.rs (original lines from 10 to 10)\n-use driver_common::{BaseDriverOps, DeviceType};\n"
    },
    {
      "cmd_idx": 79,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/driver_virtio/rt_driver_virtio/src/main.rs (original lines from 12 to 12)\n+use driver_common::{BaseDriverOps, DeviceType};\n"
    },
    {
      "cmd_idx": 79,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/driver_virtio/rt_driver_virtio/src/main.rs (original lines from 13 to 14)\n-const DISK_SIZE: usize = 0x1000_0000;    // 256M\n-const BLOCK_SIZE: usize = 0x200;        // 512\n+const DISK_SIZE: usize = 0x1000_0000; // 256M\n+const BLOCK_SIZE: usize = 0x200; // 512\n"
    },
    {
      "cmd_idx": 79,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/driver_virtio/rt_driver_virtio/src/main.rs (original lines from 47 to 47)\n-    assert_eq!(disk.num_blocks() as usize, DISK_SIZE/BLOCK_SIZE);\n+    assert_eq!(disk.num_blocks() as usize, DISK_SIZE / BLOCK_SIZE);\n"
    },
    {
      "cmd_idx": 80,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/driver_virtio/rt_driver_virtio/src/main.rs (original lines from 10 to 10)\n-use driver_common::{BaseDriverOps, DeviceType};\n"
    },
    {
      "cmd_idx": 80,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/driver_virtio/rt_driver_virtio/src/main.rs (original lines from 12 to 12)\n+use driver_common::{BaseDriverOps, DeviceType};\n"
    },
    {
      "cmd_idx": 80,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/driver_virtio/rt_driver_virtio/src/main.rs (original lines from 13 to 14)\n-const DISK_SIZE: usize = 0x1000_0000;    // 256M\n-const BLOCK_SIZE: usize = 0x200;        // 512\n+const DISK_SIZE: usize = 0x1000_0000; // 256M\n+const BLOCK_SIZE: usize = 0x200; // 512\n"
    },
    {
      "cmd_idx": 80,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_13/shilei-massclouds/driver_virtio/rt_driver_virtio/src/main.rs (original lines from 47 to 47)\n-    assert_eq!(disk.num_blocks() as usize, DISK_SIZE/BLOCK_SIZE);\n+    assert_eq!(disk.num_blocks() as usize, DISK_SIZE / BLOCK_SIZE);\n"
    },
    {
      "cmd_idx": 84,
      "file": "[lockbud] Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-11-22T10:57:44Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 85,
      "file": "[lockbud] Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-11-22T10:57:44Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 86,
      "file": "[lockbud] Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-11-22T10:57:44Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 90,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_driver_virtio, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=aarch64-unknown-none-softfloat\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/driver_virtio/rt_driver_virtio\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target aarch64-unknown-none-softfloat\n   Compiling serde v1.0.215\n   Compiling equivalent v1.0.1\n   Compiling hashbrown v0.15.1\n   Compiling toml_datetime v0.6.8\n   Compiling winnow v0.5.40\n   Compiling cfg-if v1.0.0\n   Compiling syn v2.0.89\n   Compiling indexmap v2.6.0\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling syn v1.0.109\n   Compiling bitflags v2.6.0\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling toml_edit v0.19.15\n   Compiling tock-registers v0.8.1\n   Compiling aarch64-cpu v9.4.0\n   Compiling spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n   Compiling base64 v0.13.1\n   Compiling unicode-width v0.1.14\n   Compiling static_assertions v1.1.0\n   Compiling ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n   Compiling lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n   Compiling memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n   Compiling const-default v1.0.0\n   Compiling bit_field v0.10.2\n   Compiling bitmap-allocator v0.1.0 (https://github.com/rcore-os/bitmap-allocator.git?rev=88e871a#88e871a5)\n   Compiling driver_block v0.1.0 (ssh://git@github.com/shilei-massclouds/driver_block.git#7ef4e9c6)\nerror[E0049]: method `device_type` has 1 const parameter but its trait declaration has 0 const parameters\n  --> /home/runner/.cargo/git/checkouts/driver_common-fa2dbf8873b7fe39/2e86ed3/driver_common/src/lib.rs:58:11\n   |\n58 | pub trait BaseDriverOps: Send + Sync {\n   |           ^^^^^^^^^^^^^ found 1 const parameter\n...\n63 |     fn device_type(&self) -> DeviceType;\n   |     ------------------------------------ expected 0 const parameters\n\nerror[E0049]: method `device_name` has 1 const parameter but its trait declaration has 0 const parameters\n  --> /home/runner/.cargo/git/checkouts/driver_common-fa2dbf8873b7fe39/2e86ed3/driver_common/src/lib.rs:58:11\n   |\n58 | pub trait BaseDriverOps: Send + Sync {\n   |           ^^^^^^^^^^^^^ found 1 const parameter\n59 |     /// The name of the device.\n60 |     fn device_name(&self) -> &str;\n   |     ------------------------------ expected 0 const parameters\n\nFor more information about this error, try `rustc --explain E0049`.\nerror: could not compile `driver_block` (lib) due to 2 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 91,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_driver_virtio, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/driver_virtio/rt_driver_virtio\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target riscv64gc-unknown-none-elf\n   Compiling cfg-if v1.0.0\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig.git#51b81e4a)\n   Compiling bit_field v0.10.2\n   Compiling nb v1.1.0\n   Compiling riscv v0.10.1\n   Compiling nb v0.1.3\n   Compiling void v1.0.2\n   Compiling static_assertions v1.1.0\n   Compiling embedded-hal v0.2.7\n   Compiling sbi-spec v0.0.4\n   Compiling critical-section v1.2.0\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling sbi-rt v0.0.2\n   Compiling bitflags v2.6.0\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console.git#8bc0d219)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\n   Compiling percpu_macros2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling svgbobdoc v0.3.0\n   Compiling zerocopy-derive v0.6.6\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 4 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 92,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_driver_virtio, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=x86_64-unknown-none\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/driver_virtio/rt_driver_virtio\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-none\n   Compiling bit_field v0.10.2\n   Compiling cfg-if v1.0.0\n   Compiling rustversion v1.0.18\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:57:44Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling bitflags v2.6.0\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig.git#51b81e4a)\n   Compiling volatile v0.4.6\n   Compiling raw-cpuid v10.7.0\n   Compiling x86 v0.52.0\n   Compiling paste v1.0.15\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console.git#8bc0d219)\n   Compiling spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase#a3496db8)\n   Compiling bit v0.1.1\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling raw-cpuid v11.2.0\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal.git#db90ff50)\n   Compiling x86_64 v0.14.12\n   Compiling memory_addr v0.1.0 (ssh://git@github.com/shilei-massclouds/memory_addr#8d24a00e)\n   Compiling lazy_init v0.1.0 (ssh://git@github.com/shilei-massclouds/lazy_init#3cee00cf)\n   Compiling ratio v0.1.0 (ssh://git@github.com/shilei-massclouds/ratio#bc2f2303)\n   Compiling static_assertions v1.1.0\n   Compiling const-default v1.0.0\n   Compiling zerocopy v0.6.6\n   Compiling rlsf v0.2.1\n   Compiling x2apic v0.4.3\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `console_init` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:17:15\n   |\n17 |     platform::console_init();\n   |               ^^^^^^^^^^^^ not found in `platform`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 99,
      "file": "[lockbud] Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-11-22T10:58:11Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:58:11Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 100,
      "file": "[lockbud] Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-11-22T10:58:15Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:58:15Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 101,
      "file": "[lockbud] Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-11-22T10:58:16Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:58:16Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 105,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=early_console, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=aarch64-unknown-none-softfloat\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/early_console/early_console\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target aarch64-unknown-none-softfloat\n   Compiling equivalent v1.0.1\n   Compiling serde v1.0.215\n   Compiling hashbrown v0.15.1\n   Compiling toml_datetime v0.6.8\n   Compiling winnow v0.5.40\n   Compiling cfg-if v1.0.0\n   Compiling log v0.4.22\n[2024-11-22T10:58:11Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:58:11Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling bitflags v2.6.0\n   Compiling indexmap v2.6.0\n   Compiling toml_edit v0.19.15\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig.git#51b81e4a)\n   Compiling early_console v0.1.0 (/home/runner/check/batch_13/shilei-massclouds/early_console/early_console)\nerror[E0583]: file not found for module `aarch64_common`\n --> early_console/src/platform/mod.rs:5:9\n  |\n5 |         mod aarch64_common;\n  |         ^^^^^^^^^^^^^^^^^^^\n  |\n  = help: to create the module `aarch64_common`, create file \"early_console/src/platform/aarch64_common.rs\" or \"early_console/src/platform/aarch64_common/mod.rs\"\n  = note: if there is a `mod aarch64_common` elsewhere in the crate already, import it with `use crate::...` instead\n\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nwarning: unexpected `cfg` condition name: `platform_family`\n  --> early_console/src/platform/mod.rs:10:42\n   |\n10 |     if #[cfg(all(target_arch = \"x86_64\", platform_family = \"x86-pc\"))] {\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"x86-pc\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"x86-pc\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n   = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `platform_family`\n  --> early_console/src/platform/mod.rs:13:50\n   |\n13 |     } else if #[cfg(all(target_arch = \"riscv64\", platform_family = \"riscv64-qemu-virt\"))] {\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"riscv64-qemu-virt\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"riscv64-qemu-virt\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `platform_family`\n  --> early_console/src/platform/mod.rs:16:50\n   |\n16 |     } else if #[cfg(all(target_arch = \"aarch64\", platform_family = \"aarch64-qemu-virt\"))] {\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"aarch64-qemu-virt\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"aarch64-qemu-virt\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `platform_family`\n  --> early_console/src/platform/mod.rs:19:50\n   |\n19 |     } else if #[cfg(all(target_arch = \"aarch64\", platform_family = \"aarch64-raspi\"))] {\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"aarch64-raspi\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"aarch64-raspi\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `platform_family`\n  --> early_console/src/platform/mod.rs:22:50\n   |\n22 |     } else if #[cfg(all(target_arch = \"aarch64\", platform_family = \"aarch64-bsta1000b\"))] {\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"aarch64-bsta1000b\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"aarch64-bsta1000b\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `smp`\n  --> early_console/src/platform/dummy/mod.rs:23:7\n   |\n23 | #[cfg(feature = \"smp\")]\n   |       ^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `smp` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `irq`\n  --> early_console/src/platform/dummy/mod.rs:58:7\n   |\n58 | #[cfg(feature = \"irq\")]\n   |       ^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `irq` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `smp`\n  --> early_console/src/platform/dummy/mod.rs:86:7\n   |\n86 | #[cfg(feature = \"smp\")]\n   |       ^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `smp` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `irq`\n  --> early_console/src/time.rs:13:7\n   |\n13 | #[cfg(feature = \"irq\")]\n   |       ^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `irq` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `irq`\n  --> early_console/src/time.rs:15:7\n   |\n15 | #[cfg(feature = \"irq\")]\n   |       ^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `irq` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nSome errors have detailed explanations: E0425, E0432, E0433, E0583.\nFor more information about an error, try `rustc --explain E0425`.\nwarning: `early_console` (lib) generated 10 warnings\nerror: could not compile `early_console` (lib) due to 5 previous errors; 10 warnings emitted\n"
    },
    {
      "cmd_idx": 106,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=early_console, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/early_console/early_console\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target riscv64gc-unknown-none-elf\n   Compiling nb v1.1.0\n   Compiling riscv v0.10.1\n   Compiling static_assertions v1.1.0\n   Compiling void v1.0.2\n   Compiling sbi-spec v0.0.4\n   Compiling nb v0.1.3\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig.git#51b81e4a)\n   Compiling critical-section v1.2.0\n   Compiling embedded-hal v0.2.7\n   Compiling bit_field v0.10.2\n   Compiling sbi-rt v0.0.2\n   Compiling early_console v0.1.0 (/home/runner/check/batch_13/shilei-massclouds/early_console/early_console)\n   Compiling log v0.4.22\n   Compiling bitflags v2.6.0\n   Compiling cfg-if v1.0.0\n[2024-11-22T10:58:15Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:58:15Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nwarning: unexpected `cfg` condition name: `platform_family`\n  --> early_console/src/platform/mod.rs:10:42\n   |\n10 |     if #[cfg(all(target_arch = \"x86_64\", platform_family = \"x86-pc\"))] {\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"x86-pc\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"x86-pc\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n   = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `platform_family`\n  --> early_console/src/platform/mod.rs:13:50\n   |\n13 |     } else if #[cfg(all(target_arch = \"riscv64\", platform_family = \"riscv64-qemu-virt\"))] {\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"riscv64-qemu-virt\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"riscv64-qemu-virt\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `platform_family`\n  --> early_console/src/platform/mod.rs:16:50\n   |\n16 |     } else if #[cfg(all(target_arch = \"aarch64\", platform_family = \"aarch64-qemu-virt\"))] {\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"aarch64-qemu-virt\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"aarch64-qemu-virt\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `platform_family`\n  --> early_console/src/platform/mod.rs:19:50\n   |\n19 |     } else if #[cfg(all(target_arch = \"aarch64\", platform_family = \"aarch64-raspi\"))] {\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"aarch64-raspi\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"aarch64-raspi\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `platform_family`\n  --> early_console/src/platform/mod.rs:22:50\n   |\n22 |     } else if #[cfg(all(target_arch = \"aarch64\", platform_family = \"aarch64-bsta1000b\"))] {\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"aarch64-bsta1000b\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"aarch64-bsta1000b\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `smp`\n  --> early_console/src/platform/dummy/mod.rs:23:7\n   |\n23 | #[cfg(feature = \"smp\")]\n   |       ^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `smp` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `irq`\n  --> early_console/src/platform/dummy/mod.rs:58:7\n   |\n58 | #[cfg(feature = \"irq\")]\n   |       ^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `irq` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `smp`\n  --> early_console/src/platform/dummy/mod.rs:86:7\n   |\n86 | #[cfg(feature = \"smp\")]\n   |       ^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `smp` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `irq`\n  --> early_console/src/time.rs:13:7\n   |\n13 | #[cfg(feature = \"irq\")]\n   |       ^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `irq` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `irq`\n  --> early_console/src/time.rs:15:7\n   |\n15 | #[cfg(feature = \"irq\")]\n   |       ^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `irq` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nwarning: `early_console` (lib) generated 10 warnings\nerror: could not compile `early_console` (lib) due to 4 previous errors; 10 warnings emitted\n"
    },
    {
      "cmd_idx": 107,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=early_console, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=x86_64-unknown-none\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/early_console/early_console\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-none\n   Compiling rustversion v1.0.18\n   Compiling cfg-if v1.0.0\n   Compiling volatile v0.4.6\n   Compiling axconfig v0.1.0 (ssh://git@github.com/shilei-massclouds/axconfig.git#51b81e4a)\n   Compiling bit_field v0.10.2\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling bitflags v2.6.0\n   Compiling spinbase v0.1.0 (ssh://git@github.com/shilei-massclouds/spinbase.git#a3496db8)\n   Compiling early_console v0.1.0 (/home/runner/check/batch_13/shilei-massclouds/early_console/early_console)\n   Compiling log v0.4.22\n[2024-11-22T10:58:16Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:58:16Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling x86_64 v0.14.12\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `console_init` in module `platform`\n  --> early_console/src/lib.rs:17:15\n   |\n17 |     platform::console_init();\n   |               ^^^^^^^^^^^^ not found in `platform`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nwarning: unexpected `cfg` condition name: `platform_family`\n  --> early_console/src/platform/mod.rs:10:42\n   |\n10 |     if #[cfg(all(target_arch = \"x86_64\", platform_family = \"x86-pc\"))] {\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"x86-pc\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"x86-pc\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n   = note: `#[warn(unexpected_cfgs)]` on by default\n\nwarning: unexpected `cfg` condition name: `platform_family`\n  --> early_console/src/platform/mod.rs:13:50\n   |\n13 |     } else if #[cfg(all(target_arch = \"riscv64\", platform_family = \"riscv64-qemu-virt\"))] {\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"riscv64-qemu-virt\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"riscv64-qemu-virt\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `platform_family`\n  --> early_console/src/platform/mod.rs:16:50\n   |\n16 |     } else if #[cfg(all(target_arch = \"aarch64\", platform_family = \"aarch64-qemu-virt\"))] {\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"aarch64-qemu-virt\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"aarch64-qemu-virt\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `platform_family`\n  --> early_console/src/platform/mod.rs:19:50\n   |\n19 |     } else if #[cfg(all(target_arch = \"aarch64\", platform_family = \"aarch64-raspi\"))] {\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"aarch64-raspi\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"aarch64-raspi\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition name: `platform_family`\n  --> early_console/src/platform/mod.rs:22:50\n   |\n22 |     } else if #[cfg(all(target_arch = \"aarch64\", platform_family = \"aarch64-bsta1000b\"))] {\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(platform_family, values(\"aarch64-bsta1000b\"))'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(platform_family, values(\\\"aarch64-bsta1000b\\\"))\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `smp`\n  --> early_console/src/platform/dummy/mod.rs:23:7\n   |\n23 | #[cfg(feature = \"smp\")]\n   |       ^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `smp` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `irq`\n  --> early_console/src/platform/dummy/mod.rs:58:7\n   |\n58 | #[cfg(feature = \"irq\")]\n   |       ^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `irq` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `smp`\n  --> early_console/src/platform/dummy/mod.rs:86:7\n   |\n86 | #[cfg(feature = \"smp\")]\n   |       ^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `smp` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `irq`\n  --> early_console/src/time.rs:13:7\n   |\n13 | #[cfg(feature = \"irq\")]\n   |       ^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `irq` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nwarning: unexpected `cfg` condition value: `irq`\n  --> early_console/src/time.rs:15:7\n   |\n15 | #[cfg(feature = \"irq\")]\n   |       ^^^^^^^^^^^^^^^ help: remove the condition\n   |\n   = note: no expected values for `feature`\n   = help: consider adding `irq` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nwarning: `early_console` (lib) generated 10 warnings\nerror: could not compile `early_console` (lib) due to 5 previous errors; 10 warnings emitted\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 114,
      "file": "[lockbud] Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-11-22T10:58:11Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:58:11Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 115,
      "file": "[lockbud] Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-11-22T10:58:15Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:58:15Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 116,
      "file": "[lockbud] Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-11-22T10:58:16Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:58:16Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }"
    },
    {
      "cmd_idx": 120,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_early_console, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=aarch64-unknown-none-softfloat\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/early_console/rt_early_console\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target aarch64-unknown-none-softfloat\n   Compiling proc-macro2 v1.0.92\n   Compiling unicode-ident v1.0.14\n[2024-11-22T10:58:11Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:58:11Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console.git#8bc0d219)\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling tock-registers v0.8.1\n   Compiling aarch64-cpu v9.4.0\nerror[E0583]: file not found for module `aarch64_common`\n --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/mod.rs:5:9\n  |\n5 |         mod aarch64_common;\n  |         ^^^^^^^^^^^^^^^^^^^\n  |\n  = help: to create the module `aarch64_common`, create file \"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/aarch64_common.rs\" or \"/home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/aarch64_common/mod.rs\"\n  = note: if there is a `mod aarch64_common` elsewhere in the crate already, import it with `use crate::...` instead\n\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433, E0583.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 121,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_early_console, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/early_console/rt_early_console\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target riscv64gc-unknown-none-elf\n   Compiling proc-macro2 v1.0.92\n[2024-11-22T10:58:15Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:58:15Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling kernel_guard_base v0.1.0 (ssh://git@github.com/shilei-massclouds/kernel_guard_base#4e672f3e)\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console.git#8bc0d219)\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\n   Compiling axhal v0.1.0 (ssh://git@github.com/shilei-massclouds/axhal#db90ff50)\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 4 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 122,
      "file": "(virtual) lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_early_console, checker=Lockbud\n// toolchain=nightly-2024-01-18, target=x86_64-unknown-none\n// pkg_dir=/home/runner/check/batch_13/shilei-massclouds/early_console/rt_early_console\n// cmd=cargo +nightly-2024-10-05 lockbud -k all -- --target x86_64-unknown-none\n   Compiling bitflags v1.3.2\n   Compiling proc-macro2 v1.0.92\n   Compiling paste v1.0.15\n[2024-11-22T10:58:16Z WARN  lockbud::callbacks] [\n      {\n        \"AtomicityViolation\": {\n          \"bug_kind\": \"AtomicityViolation\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": {\n            \"fn_name\": \"set_logger_racy\",\n            \"atomic_reader\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1447:11: 1447:40 (#0)\",\n            \"atomic_writer\": \"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.22/src/lib.rs:1450:13: 1450:56 (#0)\",\n            \"dep_kind\": \"Control\"\n          },\n          \"explanation\": \"atomic::store is data/control dependent on atomic::load\"\n        }\n      }\n    ]\n[2024-11-22T10:58:16Z WARN  lockbud::callbacks] crate log contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 1 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 0 }\n   Compiling x86 v0.52.0\n   Compiling raw-cpuid v10.7.0\n   Compiling early_console v0.1.0 (ssh://git@github.com/shilei-massclouds/early_console.git#8bc0d219)\n   Compiling bit v0.1.1\n   Compiling axerrno v0.1.0 (ssh://git@github.com/shilei-massclouds/axerrno#892169aa)\n   Compiling percpu2 v0.1.0 (ssh://git@github.com/shilei-massclouds/percpu2#2fa7f00e)\nerror[E0432]: unresolved imports `platform::getchar`, `platform::putchar`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:12:20\n   |\n12 | pub use platform::{getchar, putchar};\n   |                    ^^^^^^^  ^^^^^^^ no `putchar` in `platform`\n   |                    |\n   |                    no `getchar` in `platform`\n\nerror[E0433]: failed to resolve: unresolved import\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/platform/dummy/mod.rs:31:69\n   |\n31 |     pub(crate) fn platform_regions() -> impl Iterator<Item = crate::mem::MemRegion> {\n   |                                                                     ^^^\n   |                                                                     |\n   |                                                                     unresolved import\n   |                                                                     help: a similar path exists: `core::mem`\n\nerror[E0425]: cannot find function `console_init` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:17:15\n   |\n17 |     platform::console_init();\n   |               ^^^^^^^^^^^^ not found in `platform`\n\nerror[E0425]: cannot find function `putchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:23:19\n   |\n23 |         platform::putchar(*c);\n   |                   ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::putchar;\n   |\nhelp: if you import `putchar`, refer to it directly\n   |\n23 -         platform::putchar(*c);\n23 +         putchar(*c);\n   |\n\nerror[E0425]: cannot find function `getchar` in module `platform`\n  --> /home/runner/.cargo/git/checkouts/early_console-7e3c35ca140a48a7/8bc0d21/early_console/src/lib.rs:31:36\n   |\n31 |         if let Some(c) = platform::getchar() {\n   |                                    ^^^^^^^ not found in `platform`\n   |\nhelp: consider importing this function\n   |\n12 + use crate::platform::console::getchar;\n   |\nhelp: if you import `getchar`, refer to it directly\n   |\n31 -         if let Some(c) = platform::getchar() {\n31 +         if let Some(c) = getchar() {\n   |\n\nSome errors have detailed explanations: E0425, E0432, E0433.\nFor more information about an error, try `rustc --explain E0425`.\nerror: could not compile `early_console` (lib) due to 5 previous errors\nwarning: build failed, waiting for other jobs to finish...\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition value: `std`\n   --> src/lib.rs:128:17\n    |\n128 | #![cfg_attr(not(feature = \"std\"), no_std)]\n    |                 ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition value: `std`\n   --> src/lib.rs:129:42\n    |\n129 | #![cfg_attr(all(feature = \"nightly\", not(feature = \"std\")), feature(error_in_core))]\n    |                                          ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition value: `to_str`\n   --> src/lib.rs:148:7\n    |\n148 | #[cfg(feature = \"to_str\")]\n    |       ^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `to_str` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition value: `std`\n   --> src/lib.rs:158:7\n    |\n158 | #[cfg(feature = \"std\")]\n    |       ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/lib.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition value: `std`\n   --> src/lib.rs:160:7\n    |\n160 | #[cfg(feature = \"std\")]\n    |       ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/parse.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition value: `std`\n  --> src/parse.rs:62:7\n   |\n62 | #[cfg(feature = \"std\")]\n   |       ^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `nightly`\n   = help: consider adding `std` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/parse.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition value: `std`\n  --> src/parse.rs:86:36\n   |\n86 | #[cfg(all(feature = \"nightly\", not(feature = \"std\")))]\n   |                                    ^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `nightly`\n   = help: consider adding `std` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/parse.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition value: `std`\n   --> src/parse.rs:193:7\n    |\n193 | #[cfg(feature = \"std\")]\n    |       ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/parse.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition value: `std`\n  --> src/parse.rs:56:11\n   |\n56 |     #[cfg(feature = \"std\")]\n   |           ^^^^^^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `nightly`\n   = help: consider adding `std` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/parse.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unexpected `cfg` condition value: `std`\n   --> src/parse.rs:169:19\n    |\n169 |             #[cfg(feature = \"std\")]\n    |                   ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `nightly`\n    = help: consider adding `std` as a feature in `Cargo.toml`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: empty lines after doc comment\n   --> src/abi.rs:101:1\n    |\n101 | / /// 64-255 Architecture-specific value range\n102 | |\n103 | | // ET_* define constants for the ELF File Header's e_type field.\n104 | | // Represented as Elf32_Half in Elf32_Ehdr and Elf64_Half in Elf64_Ehdr which\n105 | | // are both are 2-byte unsigned integers with 2-byte alignment\n106 | |\n    | |_\n107 |   /// No file type\n108 |   pub const ET_NONE: u16 = 0;\n    |   ---------------------- the comment documents this constant\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = note: `#[warn(clippy::empty_line_after_doc_comments)]` on by default\n    = help: if the empty lines are unintentional remove them\nhelp: if the doc comment should not document `ET_NONE` comment it out\n    |\n101 | // /// 64-255 Architecture-specific value range\n    | ++\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:515:1\n    |\n515 | / /// If the number of program headers is greater than or equal to PN_XNUM (0xffff),\n516 | | /// this member has the value PN_XNUM (0xffff). The actual number of\n517 | | /// program header table entries is contained in the sh_info field of the\n518 | | /// section header at index 0. Otherwise, the sh_info member of the initial\n519 | | /// section header entry contains the value zero.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n    = note: `#[warn(clippy::too_long_first_doc_paragraph)]` on by default\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:671:1\n    |\n671 | / /// The data in the section may be merged to eliminate duplication. Unless the\n672 | | /// SHF_STRINGS flag is also set, the data elements in the section are of a uniform size.\n673 | | /// The size of each element is specified in the section header's sh_entsize field. If\n674 | | /// the SHF_STRINGS flag is also set, the data elements consist of null-terminated\n...   |\n677 | | ///\n678 | | /// Each element in the section is compared against other elements in sections with the\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:692:1\n    |\n692 | / /// This flag adds special ordering requirements for link editors. The requirements\n693 | | /// apply if the sh_link field of this section's header references another section (the\n694 | | /// linked-to section). If this section is combined with other sections in the output\n695 | | /// file, it must appear in the same relative order with respect to those sections,\n696 | | /// as the linked-to section appears with respect to sections the linked-to section is\n697 | | /// combined with.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:699:1\n    |\n699 | / /// This section requires special OS-specific processing (beyond the standard linking\n700 | | /// rules) to avoid incorrect behavior. If this section has either an sh_type value or\n701 | | /// contains sh_flags bits in the OS-specific ranges for those fields, and a link\n702 | | /// editor processing this section does not recognize those values, then the link editor\n703 | | /// should reject the object file containing this section with an error.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:705:1\n    |\n705 | / /// This section is a member (perhaps the only one) of a section group. The section must\n706 | | /// be referenced by a section of type SHT_GROUP. The SHF_GROUP flag may be set only for\n707 | | /// sections contained in relocatable objects (objects with the ELF header e_type member\n708 | | /// set to ET_REL).\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:713:1\n    |\n713 | / /// This flag identifies a section containing compressed data. SHF_COMPRESSED applies only\n714 | | /// to non-allocable sections, and cannot be used in conjunction with SHF_ALLOC. In\n715 | | /// addition, SHF_COMPRESSED cannot be applied to sections of type SHT_NOBITS.\n716 | | ///\n717 | | /// All relocations to a compressed section specifiy offsets to the uncompressed section\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: empty line after doc comment\n   --> src/abi.rs:790:1\n    |\n790 | / /// STV_* define constants for the ELF Symbol's st_visibility (encoded in the st_other field).\n791 | |\n    | |_\n...\n798 |   pub const STV_DEFAULT: u8 = 0;\n    |   ------------------------- the comment documents this constant\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional remove it\nhelp: if the documentation should include the empty line include it in the comment\n    |\n791 | ///\n    |\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:799:1\n    |\n799 | / /// The meaning of this visibility attribute may be defined by processor\n800 | | /// supplements to further constrain hidden symbols. A processor supplement's\n801 | | /// definition should be such that generic tools can safely treat internal\n802 | | /// symbols as hidden.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:804:1\n    |\n804 | / /// A symbol defined in the current component is hidden if its name is not\n805 | | /// visible to other components. Such a symbol is necessarily protected. This\n806 | | /// attribute may be used to control the external interface of a component. Note\n807 | | /// that an object named by such a symbol may still be referenced from another\n808 | | /// component if its address is passed outside.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:810:1\n    |\n810 | / /// A symbol defined in the current component is protected if it is visible in\n811 | | /// other components but not preemptable, meaning that any reference to such a\n812 | | /// symbol from within the defining component must be resolved to the definition\n813 | | /// in that component, even if there is a definition in another component that\n814 | | /// would preempt by the default rules.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:819:1\n    |\n819 | / /// This element holds the string table offset of a null-terminated string,\n820 | | /// giving the name of a needed library. The offset is an index into the table\n821 | | /// recorded in the DT_STRTAB code. The dynamic array may contain multiple\n822 | | /// entries with this type. These entries' relative order is significant, though\n823 | | /// their relation to entries of other types is not.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:840:1\n    |\n840 | / /// This element holds the address of a relocation table. Entries in the table\n841 | | /// have explicit addends, (Rela). An object file may have multiple relocation\n842 | | /// sections. When building the relocation table for an executable or shared\n843 | | /// object file, the link editor catenates those sections to form a single\n...   |\n849 | | /// and DT_RELAENT elements. When relocation is mandatory for a file, either\n850 | | /// DT_RELA or DT_REL may occur (both are permitted but not required).\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:868:1\n    |\n868 | / /// This element holds the string table offset of a null-terminated search\n869 | | /// library search path string. The offset is an index into the table recorded\n870 | | /// in the DT_STRTAB entry. Its use has been superseded by DT_RUNPATH.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:872:1\n    |\n872 | / /// This element's presence in a shared object library alters the dynamic\n873 | | /// linker's symbol resolution algorithm for references within the library.\n874 | | /// Instead of starting a symbol search with the executable file, the dynamic\n875 | | /// linker starts from the shared object itself. If the shared object fails to\n876 | | /// supply the referenced symbol, the dynamic linker then searches the\n877 | | /// executable file and other shared objects as usual. Its use has been\n878 | | /// superseded by the DF_SYMBOLIC flag.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:888:1\n    |\n888 | / /// This member specifies the type of relocation entry to which the procedure\n889 | | /// linkage table refers. The d_val member holds DT_REL or DT_RELA, as\n890 | | /// appropriate. All relocations in a procedure linkage table must use the same\n891 | | /// relocation.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:896:1\n    |\n896 | / /// This member's absence signifies that no relocation entry should cause a\n897 | | /// modification to a non-writable segment, as specified by the segment\n898 | | /// permissions in the program header table. If this member is present, one or\n899 | | /// more relocation entries might request modifications to a non-writable\n900 | | /// segment, and the dynamic linker can prepare accordingly. Its use has been\n901 | | /// superseded by the DF_TEXTREL flag.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:903:1\n    |\n903 | / /// If present, this entry's d_ptr member holds the address of relocation\n904 | | /// entries associated solely with the procedure linkage table. Separating these\n905 | | /// relocation entries lets the dynamic linker ignore them during process\n906 | | /// initialization, if lazy binding is enabled. If this entry is present, the\n907 | | /// related entries of types DT_PLTRELSZ and DT_PLTREL must also be present.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:909:1\n    |\n909 | / /// If present in a shared object or executable, this entry instructs the\n910 | | /// dynamic linker to process all relocations for the object containing this\n911 | | /// entry before transferring control to the program. The presence of this entry\n912 | | /// takes precedence over a directive to use lazy binding for this object when\n913 | | /// specified through the environment or via dlopen(BA_LIB). Its use has been\n914 | | /// superseded by the DF_BIND_NOW flag.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:932:1\n    |\n932 | / /// This element holds flag values specific to the object being loaded. Each\n933 | | /// flag value will have the name DF_flag_name. Defined values and their\n934 | | /// meanings are described below. All other values are reserved.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:936:1\n    |\n936 | / /// This element holds the address of the array of pointers to\n937 | | /// pre-initialization functions. The DT_PREINIT_ARRAY table is processed only\n938 | | /// in an executable file; it is ignored if contained in a shared object.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/abi.rs:940:1\n    |\n940 | / /// This element holds the size in bytes of the array of pre-initialization\n941 | | /// functions pointed to by the DT_PREINIT_ARRAY entry. If an object has a\n942 | | /// DT_PREINIT_ARRAY entry, it must also have a DT_PREINIT_ARRAYSZ entry. As\n943 | | /// with DT_PREINIT_ARRAY, this entry is ignored if it appears in a shared\n944 | | /// object.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n    --> src/abi.rs:1019:1\n     |\n1019 | / /// This flag signifies that the object being loaded may make reference to the\n1020 | | /// $ORIGIN substitution string. The dynamic linker must determine the pathname\n1021 | | /// of the object containing this entry when the object is loaded.\n     | |_\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n    --> src/abi.rs:1023:1\n     |\n1023 | / /// If this flag is set in a shared object library, the dynamic linker's symbol\n1024 | | /// resolution algorithm for references within the library is changed. Instead\n1025 | | /// of starting a symbol search with the executable file, the dynamic linker\n1026 | | /// starts from the shared object itself. If the shared object fails to supply\n1027 | | /// the referenced symbol, the dynamic linker then searches the executable file\n1028 | | /// and other shared objects as usual.\n     | |_\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n    --> src/abi.rs:1030:1\n     |\n1030 | / /// If this flag is not set, no relocation entry should cause a modification to\n1031 | | /// a non-writable segment, as specified by the segment permissions in the\n1032 | | /// program header table. If this flag is set, one or more relocation entries\n1033 | | /// might request modifications to a non-writable segment, and the dynamic\n1034 | | /// linker can prepare accordingly.\n     | |_\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n    --> src/abi.rs:1036:1\n     |\n1036 | / /// If set in a shared object or executable, this flag instructs the dynamic\n1037 | | /// linker to process all relocations for the object containing this entry\n1038 | | /// before transferring control to the program. The presence of this entry takes\n1039 | | /// precedence over a directive to use lazy binding for this object when\n1040 | | /// specified through the environment or via dlopen(BA_LIB).\n     | |_\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n    --> src/abi.rs:1042:1\n     |\n1042 | / /// If set in a shared object or executable, this flag instructs the dynamic\n1043 | | /// linker to reject attempts to load this file dynamically. It indicates that\n1044 | | /// the shared object or executable contains code using a static thread-local\n1045 | | /// storage scheme. Implementations need not support any form of thread-local\n1046 | | /// storage.\n     | |_\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n    --> src/abi.rs:1292:1\n     |\n1292 | / /// Set in executable file headers (e_type = ET_EXEC or ET_DYN) to note explicitly that the\n1293 | | /// executable file was built to conform to the software floating-point procedure-call standard\n1294 | | /// (the base standard). If both EF_ARM_ABI_FLOAT_XXXX bits are clear, conformance to the base\n1295 | | /// procedure-call standard is implied.\n     | |_\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n    --> src/abi.rs:1676:1\n     |\n1676 | / /// Reserved for MTE memory tag data dumps in core files\n1677 | | /// (if present) hold MTE memory tags for a particular memory range.\n1678 | | /// At present they are defined for core dump files of type ET_CORE\n1679 | | /// See <https://www.kernel.org/doc/html/latest/arm64/memory-tagging-extension.html#core-dump-support>\n     | |_\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/abi.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n    --> src/abi.rs:2537:1\n     |\n2537 | / /// Alignment statement. The addend indicates the number of bytes occupied by\n2538 | | /// nop instructions at the relocation offset. The alignment boundary is\n2539 | | /// specified by the addend rounded up to the next power of two.\n     | |_\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/gnu_symver.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/gnu_symver.rs:160:1\n    |\n160 | / /// The special GNU extension section .gnu.version has a section type of SHT_GNU_VERSYM.\n161 | | /// This section shall have the same number of entries as the Dynamic Symbol Table in\n162 | | /// the .dynsym section. The .gnu.version section shall contain an array of\n163 | | /// elements of type Elfxx_Half (both of which are 16-bit unsigned integers).\n164 | | ///\n165 | | /// The .gnu.version section and VersionIndex values act as a lookup table for specifying\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\nhelp: add an empty line\n    |\n160 ~ /// The special GNU extension section .gnu.version has a section type of SHT_GNU_VERSYM.\n161 + ///\n    |\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/gnu_symver.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/gnu_symver.rs:219:1\n    |\n219 | / /// The special GNU extension section .gnu.version_d has a section type of SHT_GNU_VERDEF\n220 | | /// This section shall contain symbol version definitions. The number of entries\n221 | | /// in this section shall be contained in the DT_VERDEFNUM entry of the Dynamic\n222 | | /// Section .dynamic, and also the sh_info member of the section header.\n...   |\n225 | | ///\n226 | | /// The .gnu.version_d section shall contain an array of VerDef structures\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/gnu_symver.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: the following explicit lifetimes could be elided: 'data\n   --> src/gnu_symver.rs:394:6\n    |\n394 | impl<'data, E: EndianParse> Iterator for VerDefAuxIterator<'data, E> {\n    |      ^^^^^                                                 ^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n    = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n    |\n394 - impl<'data, E: EndianParse> Iterator for VerDefAuxIterator<'data, E> {\n394 + impl<E: EndianParse> Iterator for VerDefAuxIterator<'_, E> {\n    |\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/gnu_symver.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: the following explicit lifetimes could be elided: 'data\n   --> src/gnu_symver.rs:394:6\n    |\n394 | impl<'data, E: EndianParse> Iterator for VerDefAuxIterator<'data, E> {\n    |      ^^^^^                                                 ^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n    = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n    |\n394 - impl<'data, E: EndianParse> Iterator for VerDefAuxIterator<'data, E> {\n394 + impl<E: EndianParse> Iterator for VerDefAuxIterator<'_, E> {\n    |\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/gnu_symver.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/gnu_symver.rs:454:1\n    |\n454 | / /// The GNU extension section .gnu.version_r has a section type of SHT_GNU_VERNEED.\n455 | | /// This section contains required symbol version definitions. The number of\n456 | | /// entries in this section shall be contained in the DT_VERNEEDNUM entry of the\n457 | | /// Dynamic Section .dynamic and also the sh_info member of the section header.\n...   |\n460 | | ///\n461 | | /// The section shall contain an array of VerNeed structures optionally\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\nhelp: add an empty line\n    |\n454 ~ /// The GNU extension section .gnu.version_r has a section type of SHT_GNU_VERNEED.\n455 + ///\n    |\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/gnu_symver.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: the following explicit lifetimes could be elided: 'data\n   --> src/gnu_symver.rs:631:6\n    |\n631 | impl<'data, E: EndianParse> Iterator for VerNeedAuxIterator<'data, E> {\n    |      ^^^^^                                                  ^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n631 - impl<'data, E: EndianParse> Iterator for VerNeedAuxIterator<'data, E> {\n631 + impl<E: EndianParse> Iterator for VerNeedAuxIterator<'_, E> {\n    |\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/gnu_symver.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: the following explicit lifetimes could be elided: 'data\n   --> src/gnu_symver.rs:631:6\n    |\n631 | impl<'data, E: EndianParse> Iterator for VerNeedAuxIterator<'data, E> {\n    |      ^^^^^                                                  ^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n631 - impl<'data, E: EndianParse> Iterator for VerNeedAuxIterator<'data, E> {\n631 + impl<E: EndianParse> Iterator for VerNeedAuxIterator<'_, E> {\n    |\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/note.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/note.rs:133:1\n    |\n133 | / /// Contains four 4-byte integers.\n134 | | /// The first 4-byte integer specifies the os. The second, third, and fourth\n135 | | /// 4-byte integers contain the earliest compatible kernel version.\n136 | | /// For example, if the 3 integers are 6, 0, and 7, this signifies a 6.0.7 kernel.\n137 | | ///\n138 | | /// (see: <https://raw.githubusercontent.com/wiki/hjl-tools/linux-abi/linux-abi-draft.pdf>)\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\nhelp: add an empty line\n    |\n133 ~ /// Contains four 4-byte integers.\n134 + ///\n    |\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/note.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/note.rs:167:1\n    |\n167 | / /// Contains a build ID note which is unique among the set of meaningful contents\n168 | | /// for ELF files and identical when the output file would otherwise have been identical.\n169 | | /// This is a zero-copy type which merely contains a slice of the note data from which it was parsed.\n170 | | ///\n171 | | /// (see: <https://raw.githubusercontent.com/wiki/hjl-tools/linux-abi/linux-abi-draft.pdf>)\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/endian.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/endian.rs:100:1\n    |\n100 | / /// An endian parsing type that can choose at runtime which byte order to parse integers as.\n101 | | /// This is useful for scenarios where a single compiled binary wants to dynamically\n102 | | /// interpret ELF files of any byte order.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\nhelp: add an empty line\n    |\n100 ~ /// An endian parsing type that can choose at runtime which byte order to parse integers as.\n101 + ///\n    |\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/endian.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/endian.rs:112:1\n    |\n112 | / /// A zero-sized type that always parses integers as if they're in little-endian order.\n113 | | /// This is useful for scenarios where a combiled binary knows it only wants to interpret\n114 | | /// little-endian ELF files and doesn't want the performance penalty of evaluating a match\n115 | | /// each time it parses an integer.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\nhelp: add an empty line\n    |\n112 ~ /// A zero-sized type that always parses integers as if they're in little-endian order.\n113 + ///\n    |\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/endian.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/endian.rs:119:1\n    |\n119 | / /// A zero-sized type that always parses integers as if they're in big-endian order.\n120 | | /// This is useful for scenarios where a combiled binary knows it only wants to interpret\n121 | | /// big-endian ELF files and doesn't want the performance penalty of evaluating a match\n122 | | /// each time it parses an integer.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\nhelp: add an empty line\n    |\n119 ~ /// A zero-sized type that always parses integers as if they're in big-endian order.\n120 + ///\n    |\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/endian.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: first doc comment paragraph is too long\n   --> src/endian.rs:126:1\n    |\n126 | / /// A zero-sized type that always parses integers as if they're in the compilation target's native-endian order.\n127 | | /// This is useful for toolchain scenarios where a combiled binary knows it only wants to interpret\n128 | | /// ELF files compiled for the same target and doesn't want the performance penalty of evaluating a match\n129 | | /// each time it parses an integer.\n    | |_\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\nhelp: add an empty line\n    |\n126 ~ /// A zero-sized type that always parses integers as if they're in the compilation target's native-endian order.\n127 + ///\n    |\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/parse.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: the following explicit lifetimes could be elided: 'data\n   --> src/parse.rs:256:6\n    |\n256 | impl<'data, E: EndianParse, P: ParseAt> Iterator for ParsingIterator<'data, E, P> {\n    |      ^^^^^                                                           ^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n256 - impl<'data, E: EndianParse, P: ParseAt> Iterator for ParsingIterator<'data, E, P> {\n256 + impl<E: EndianParse, P: ParseAt> Iterator for ParsingIterator<'_, E, P> {\n    |\n\n"
    },
    {
      "cmd_idx": 124,
      "file": "src/parse.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: the following explicit lifetimes could be elided: 'data\n   --> src/parse.rs:256:6\n    |\n256 | impl<'data, E: EndianParse, P: ParseAt> Iterator for ParsingIterator<'data, E, P> {\n    |      ^^^^^                                                           ^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n256 - impl<'data, E: EndianParse, P: ParseAt> Iterator for ParsingIterator<'data, E, P> {\n256 + impl<E: EndianParse, P: ParseAt> Iterator for ParsingIterator<'_, E, P> {\n    |\n\n"
    }
  ]
}