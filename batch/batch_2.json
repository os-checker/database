{
  "env": {
    "tools": {
      "rust_toolchains": {
        "host": {
          "version": "1.83.0-nightly (d6c8169c1 2024-09-03)",
          "commit_hash": "d6c8169c186ab16a3404cd0d0866674018e8a19e",
          "commit_date": "2024-09-03",
          "host": "x86_64-unknown-linux-gnu",
          "release": "1.83.0-nightly",
          "llvm_version": "19.1.0"
        },
        "installed": [
          {
            "channel": "nightly-x86_64-unknown-linux-gnu (default)",
            "profile": null,
            "targets": [
              "aarch64-unknown-none",
              "aarch64-unknown-none-softfloat",
              "loongarch64-unknown-none",
              "riscv64gc-unknown-none-elf",
              "riscv64imac-unknown-none-elf",
              "x86_64-unknown-linux-gnu",
              "x86_64-unknown-none"
            ],
            "components": [
              "aarch64-unknown-none",
              "aarch64-unknown-none-softfloat",
              "loongarch64-unknown-none",
              "riscv64gc-unknown-none-elf",
              "riscv64imac-unknown-none-elf",
              "x86_64-unknown-linux-gnu",
              "x86_64-unknown-none"
            ],
            "toml_path": ""
          }
        ]
      },
      "os_checker": {
        "start": 1725460892698,
        "finish": 1725460900905,
        "duration_ms": 8207,
        "git_time": "2024-09-04 22:30:46 +0800",
        "git_sha": "e717c78a87a967dbe081887c8356cb14febbe5cc"
      }
    },
    "kinds": {
      "order": [
        "Cargo",
        "Clippy(Error)",
        "Clippy(Warn)",
        "Lockbud(Probably)",
        "Lockbud(Possibly)",
        "Unformatted"
      ],
      "mapping": {
        "cargo": [
          "Cargo"
        ],
        "clippy": [
          "Clippy(Error)",
          "Clippy(Warn)"
        ],
        "lockbud": [
          "Lockbud(Probably)",
          "Lockbud(Possibly)"
        ],
        "fmt": [
          "Unformatted"
        ]
      }
    },
    "repos": [
      {
        "user": "os-checker",
        "repo": "os-checker-test-suite",
        "rust_toolchain_idxs": []
      },
      {
        "user": "shilei-massclouds",
        "repo": "axdtb",
        "rust_toolchain_idxs": []
      }
    ],
    "packages": [
      {
        "name": "buildrs-failure",
        "repo": {
          "repo_idx": 0,
          "user": "os-checker",
          "repo": "os-checker-test-suite"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "lockbud-checks-this",
        "repo": {
          "repo_idx": 0,
          "user": "os-checker",
          "repo": "os-checker-test-suite"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "os-checker-test-suite",
        "repo": {
          "repo_idx": 0,
          "user": "os-checker",
          "repo": "os-checker-test-suite"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "axdtb",
        "repo": {
          "repo_idx": 1,
          "user": "shilei-massclouds",
          "repo": "axdtb"
        },
        "rust_toolchain_idx": null
      },
      {
        "name": "rt_axdtb",
        "repo": {
          "repo_idx": 1,
          "user": "shilei-massclouds",
          "repo": "axdtb"
        },
        "rust_toolchain_idx": null
      }
    ]
  },
  "cmd": [
    {
      "package_idx": 0,
      "tool": "fmt",
      "cmd": "cargo fmt -p buildrs-failure -- --emit=json",
      "count": 0,
      "duration_ms": 155,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 246,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 952,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 0,
      "tool": "cargo",
      "cmd": "VRITUAL=1 cargo",
      "count": 2,
      "duration_ms": 1198,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "fmt",
      "cmd": "cargo fmt -p lockbud-checks-this -- --emit=json",
      "count": 0,
      "duration_ms": 150,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 711,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 1,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 1,
      "duration_ms": 783,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "fmt",
      "cmd": "cargo fmt -p os-checker-test-suite -- --emit=json",
      "count": 4,
      "duration_ms": 151,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 2,
      "duration_ms": 670,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 187,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 2,
      "tool": "cargo",
      "cmd": "VRITUAL=1 cargo",
      "count": 1,
      "duration_ms": 670,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "fmt",
      "cmd": "cargo fmt -p axdtb -- --emit=json",
      "count": 26,
      "duration_ms": 158,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "fmt",
      "cmd": "cargo fmt -p axdtb -- --emit=json",
      "count": 26,
      "duration_ms": 149,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 956,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 898,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 781,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 0,
      "duration_ms": 823,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 3,
      "tool": "cargo",
      "cmd": "VRITUAL=1 cargo",
      "count": 4,
      "duration_ms": 3458,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "fmt",
      "cmd": "cargo fmt -p rt_axdtb -- --emit=json",
      "count": 5,
      "duration_ms": 138,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "fmt",
      "cmd": "cargo fmt -p rt_axdtb -- --emit=json",
      "count": 5,
      "duration_ms": 138,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "clippy",
      "cmd": "cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 1028,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "clippy",
      "cmd": "cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json",
      "count": 0,
      "duration_ms": 855,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu",
      "count": 0,
      "duration_ms": 773,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "lockbud",
      "cmd": "cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf",
      "count": 0,
      "duration_ms": 817,
      "arch": "riscv64gc",
      "target_triple": "riscv64gc-unknown-none-elf",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    },
    {
      "package_idx": 4,
      "tool": "cargo",
      "cmd": "VRITUAL=1 cargo",
      "count": 4,
      "duration_ms": 3473,
      "arch": "x86_64",
      "target_triple": "x86_64-unknown-linux-gnu",
      "rust_toolchain_idx": 0,
      "features": [],
      "flags": []
    }
  ],
  "data": [
    {
      "cmd_idx": 3,
      "file": "clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=buildrs-failure, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_2/os-checker/os-checker-test-suite/buildrs-failure\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n   Compiling buildrs-failure v0.1.0 (/home/runner/check/batch_2/os-checker/os-checker-test-suite/buildrs-failure)\nerror: failed to run custom build command for `buildrs-failure v0.1.0 (/home/runner/check/batch_2/os-checker/os-checker-test-suite/buildrs-failure)`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/check/batch_2/os-checker/os-checker-test-suite/target/debug/build/buildrs-failure-cbaf576da3545279/build-script-build` (exit status: 101)\n  --- stderr\n  thread 'main' panicked at buildrs-failure/build.rs:2:5:\n  Test as a failure in build script.\n  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
    },
    {
      "cmd_idx": 3,
      "file": "lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=buildrs-failure, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_2/os-checker/os-checker-test-suite/buildrs-failure\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n    Blocking waiting for file lock on package cache\n   Compiling buildrs-failure v0.1.0 (/home/runner/check/batch_2/os-checker/os-checker-test-suite/buildrs-failure)\nerror: failed to run custom build command for `buildrs-failure v0.1.0 (/home/runner/check/batch_2/os-checker/os-checker-test-suite/buildrs-failure)`\n\nCaused by:\n  process didn't exit successfully: `/home/runner/check/batch_2/os-checker/os-checker-test-suite/target/debug/build/buildrs-failure-b6dc1f6b857b62c6/build-script-build` (exit status: 101)\n  --- stderr\n  thread 'main' panicked at buildrs-failure/build.rs:2:5:\n  Test as a failure in build script.\n  stack backtrace:\n     0:     0x5645a8aea915 - std::backtrace_rs::backtrace::libunwind::trace::h5b560bab72e6154b\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/../../backtrace/src/backtrace/libunwind.rs:105:5\n     1:     0x5645a8aea915 - std::backtrace_rs::backtrace::trace_unsynchronized::h4ee8ec99b43d8706\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n     2:     0x5645a8aea915 - std::sys_common::backtrace::_print_fmt::h6e8289aafa4fb13e\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/sys_common/backtrace.rs:68:5\n     3:     0x5645a8aea915 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::hed32d0ff2aa0fdf1\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/sys_common/backtrace.rs:44:22\n     4:     0x5645a8b08a1b - core::fmt::rt::Argument::fmt::hca3a538408b6d3ca\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/core/src/fmt/rt.rs:165:63\n     5:     0x5645a8b08a1b - core::fmt::write::h0c46818975380aad\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/core/src/fmt/mod.rs:1169:21\n     6:     0x5645a8ae883f - std::io::Write::write_fmt::h5ea3db9efd501baa\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/io/mod.rs:1835:15\n     7:     0x5645a8aea6ee - std::sys_common::backtrace::_print::h27ff758d37d9e119\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/sys_common/backtrace.rs:47:5\n     8:     0x5645a8aea6ee - std::sys_common::backtrace::print::hafc6b0d8efbd24ba\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/sys_common/backtrace.rs:34:9\n     9:     0x5645a8aeba59 - std::panicking::default_hook::{{closure}}::ha573ac73171c717b\n    10:     0x5645a8aeb79d - std::panicking::default_hook::h8ed95b009f156527\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/panicking.rs:298:9\n    11:     0x5645a8aebf13 - std::panicking::rust_panic_with_hook::h086afbf37fa35871\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/panicking.rs:795:13\n    12:     0x5645a8aebdbb - std::panicking::begin_panic_handler::{{closure}}::ha322428a7efae35f\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/panicking.rs:656:13\n    13:     0x5645a8aeadd9 - std::sys_common::backtrace::__rust_end_short_backtrace::hfc043f4d06966d4a\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/sys_common/backtrace.rs:171:18\n    14:     0x5645a8aebb27 - rust_begin_unwind\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/panicking.rs:652:5\n    15:     0x5645a8b07c43 - core::panicking::panic_fmt::h6d75522ebd7efdf2\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/core/src/panicking.rs:72:14\n    16:     0x5645a8ad06d2 - build_script_build::main::hf4decbdbc8d11168\n                                 at /home/runner/check/batch_2/os-checker/os-checker-test-suite/buildrs-failure/build.rs:2:5\n    17:     0x5645a8ad063b - core::ops::function::FnOnce::call_once::h92e512ce7bee2ef5\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/core/src/ops/function.rs:250:5\n    18:     0x5645a8ad04de - std::sys_common::backtrace::__rust_begin_short_backtrace::hf7abc9272a435240\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/sys_common/backtrace.rs:155:18\n    19:     0x5645a8ad0551 - std::rt::lang_start::{{closure}}::hc4a88c97cc645181\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/rt.rs:159:18\n    20:     0x5645a8ae6acd - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hc45caadc31f12bbc\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/core/src/ops/function.rs:284:13\n    21:     0x5645a8ae6acd - std::panicking::try::do_call::h2817e8d187fb4046\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/panicking.rs:559:40\n    22:     0x5645a8ae6acd - std::panicking::try::hd725b8f33b0955ec\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/panicking.rs:523:19\n    23:     0x5645a8ae6acd - std::panic::catch_unwind::h393b56b2db7d8348\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/panic.rs:149:14\n    24:     0x5645a8ae6acd - std::rt::lang_start_internal::{{closure}}::h346fefab85a8f29f\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/rt.rs:141:48\n    25:     0x5645a8ae6acd - std::panicking::try::do_call::hff9d5ed939b97486\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/panicking.rs:559:40\n    26:     0x5645a8ae6acd - std::panicking::try::h1e2d653a69031472\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/panicking.rs:523:19\n    27:     0x5645a8ae6acd - std::panic::catch_unwind::h843eea8cbc130396\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/panic.rs:149:14\n    28:     0x5645a8ae6acd - std::rt::lang_start_internal::h3d73f751252cfec5\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/rt.rs:141:20\n    29:     0x5645a8ad052a - std::rt::lang_start::he6aea475bde28aeb\n                                 at /rustc/b92758a9aef1cef7b79e2b72c3d8ba113e547f89/library/std/src/rt.rs:158:17\n    30:     0x5645a8ad06fe - main\n    31:     0x7f8567029d90 - <unknown>\n    32:     0x7f8567029e40 - __libc_start_main\n    33:     0x5645a8ad0405 - _start\n    34:                0x0 - <unknown>\n"
    },
    {
      "cmd_idx": 6,
      "file": "Not supported to display yet.",
      "kind": "Lockbud(Possibly)",
      "raw": "[2024-09-04T14:41:36Z WARN  lockbud::callbacks] [\n      {\n        \"UseAfterFree\": {\n          \"bug_kind\": \"UseAfterFree\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": \"Raw ptr is used at lockbud-checks-this/src/lib.rs:7:13: 7:26 (#0) after dropped at lockbud-checks-this/src/lib.rs:5:5: 5:6 (#0)\",\n          \"explanation\": \"Raw ptr is used or escapes the current function after the pointed value is dropped\"\n        }\n      },\n      {\n        \"UseAfterFree\": {\n          \"bug_kind\": \"UseAfterFree\",\n          \"possibility\": \"Possibly\",\n          \"diagnosis\": \"Raw ptr is used at lockbud-checks-this/src/lib.rs:8:28: 8:32 (#5) after dropped at lockbud-checks-this/src/lib.rs:5:5: 5:6 (#0)\",\n          \"explanation\": \"Raw ptr is used or escapes the current function after the pointed value is dropped\"\n        }\n      }\n    ]\n[2024-09-04T14:41:36Z WARN  lockbud::callbacks] crate lockbud_checks_this contains bugs: { probably: 0, possibly: 0 }, conflictlock: { probably: 0, possibly: 0 }, condvar_deadlock: { probably: 0, possibly: 0 }, atomicity_violation: { possibly: 0 }, invalid_free: { possibly: 0 }, use_after_free: { possibly: 2 }"
    },
    {
      "cmd_idx": 7,
      "file": "examples/need-clippy-fix.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/os-checker/os-checker-test-suite/examples/need-clippy-fix.rs (original lines from 2 to 2)\n-    _ = (123); \n+    _ = (123);\n"
    },
    {
      "cmd_idx": 7,
      "file": "examples/need-fmt.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/os-checker/os-checker-test-suite/examples/need-fmt.rs (original lines from 1 to 1)\n-fn main() {    println!(\"from example\");\n+fn main() {\n+    println!(\"from example\");\n"
    },
    {
      "cmd_idx": 7,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/os-checker/os-checker-test-suite/src/main.rs (original lines from 4 to 5)\n- \n-println!(\"Hello, world!\");\n+    println!(\"Hello, world!\");\n"
    },
    {
      "cmd_idx": 7,
      "file": "tests/need-fmt.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/os-checker/os-checker-test-suite/tests/need-fmt.rs (original lines from 1 to 2)\n-fn main () {\n-  }\n+fn main() {}\n"
    },
    {
      "cmd_idx": 8,
      "file": "src/main.rs",
      "kind": "Clippy(Warn)",
      "raw": "warning: unused variable: `a`\n --> src/main.rs:2:9\n  |\n2 |     let a = 3.14;\n  |         ^ help: if this is intentional, prefix it with an underscore: `_a`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\n"
    },
    {
      "cmd_idx": 8,
      "file": "src/main.rs",
      "kind": "Clippy(Error)",
      "raw": "error: approximate value of `f{32, 64}::consts::PI` found\n --> src/main.rs:2:13\n  |\n2 |     let a = 3.14;\n  |             ^^^^\n  |\n  = help: consider using the constant directly\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\n  = note: `#[deny(clippy::approx_constant)]` on by default\n\n"
    },
    {
      "cmd_idx": 10,
      "file": "clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=os-checker-test-suite, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_2/os-checker/os-checker-test-suite\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Blocking waiting for file lock on package cache\n    Checking os-checker-test-suite v0.1.0 (/home/runner/check/batch_2/os-checker/os-checker-test-suite)\nerror: could not compile `os-checker-test-suite` (bin \"os-checker-test-suite\") due to 2 previous errors; 1 warning emitted\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 3 to 3)\n-use core::str;\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 5 to 5)\n+use core::str;\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 12 to 12)\n-const MAGIC_NUMBER     : u32 = 0xd00dfeed;\n+const MAGIC_NUMBER: u32 = 0xd00dfeed;\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 14 to 16)\n-const OF_DT_BEGIN_NODE : u32 = 0x00000001;\n-const OF_DT_END_NODE   : u32 = 0x00000002;\n-const OF_DT_PROP       : u32 = 0x00000003;\n+const OF_DT_BEGIN_NODE: u32 = 0x00000001;\n+const OF_DT_END_NODE: u32 = 0x00000002;\n+const OF_DT_PROP: u32 = 0x00000003;\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 38 to 40)\n-        let buf = unsafe {\n-            core::slice::from_raw_parts(ptr as *const u8, 24)\n-        };\n+        let buf = unsafe { core::slice::from_raw_parts(ptr as *const u8, 24) };\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 43 to 43)\n-            return Err(DeviceTreeError::BadMagicNumber)\n+            return Err(DeviceTreeError::BadMagicNumber);\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 53 to 55)\n-        Ok(\n-            Self {ptr, totalsize, off_struct, off_strings}\n-        )\n+        Ok(Self {\n+            ptr,\n+            totalsize,\n+            off_struct,\n+            off_strings,\n+        })\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 61 to 61)\n-        &self, mut pos: usize,\n+        &self,\n+        mut pos: usize,\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 64 to 64)\n-        cb: &mut dyn FnMut(String, usize, usize, Vec<(String, Vec<u8>)>)\n+        cb: &mut dyn FnMut(String, usize, usize, Vec<(String, Vec<u8>)>),\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 66 to 68)\n-        let buf = unsafe {\n-            core::slice::from_raw_parts(self.ptr as *const u8, self.totalsize)\n-        };\n+        let buf = unsafe { core::slice::from_raw_parts(self.ptr as *const u8, self.totalsize) };\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 72 to 72)\n-            return Err(DeviceTreeError::ParseError(pos))\n+            return Err(DeviceTreeError::ParseError(pos));\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 82 to 83)\n-            let val_size = buf.read_be_u32(pos+4)? as usize;\n-            let name_offset = buf.read_be_u32(pos+8)? as usize;\n+            let val_size = buf.read_be_u32(pos + 4)? as usize;\n+            let name_offset = buf.read_be_u32(pos + 8)? as usize;\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 115 to 115)\n-            return Err(DeviceTreeError::ParseError(pos))\n+            return Err(DeviceTreeError::ParseError(pos));\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 131 to 131)\n-where F: FnMut(String, usize, usize, Vec<(String, Vec<u8>)>)\n+where\n+    F: FnMut(String, usize, usize, Vec<(String, Vec<u8>)>),\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 1 to 1)\n-use crate::{DeviceTreeResult, DeviceTreeError};\n+use crate::{DeviceTreeError, DeviceTreeResult};\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 13 to 14)\n-        if ! (pos+4 <= self.len()) {\n-            return Err(DeviceTreeError::SliceReadError)\n+        if !(pos + 4 <= self.len()) {\n+            return Err(DeviceTreeError::SliceReadError);\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 17 to 22)\n-        Ok(\n-            (self[pos] as u32) << 24\n-            | (self[pos+1] as u32) << 16\n-            | (self[pos+2] as u32) << 8\n-            | (self[pos+3] as u32)\n-        )\n+        Ok((self[pos] as u32) << 24\n+            | (self[pos + 1] as u32) << 16\n+            | (self[pos + 2] as u32) << 8\n+            | (self[pos + 3] as u32))\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 26 to 26)\n-        let lo: u64 = self.read_be_u32(pos+4)?.into();\n+        let lo: u64 = self.read_be_u32(pos + 4)?.into();\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 33 to 33)\n-                return Ok(&self[pos..cur])\n+                return Ok(&self[pos..cur]);\n"
    },
    {
      "cmd_idx": 11,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 40 to 41)\n-        if ! (end < self.len()) {\n-            return Err(DeviceTreeError::SliceReadError)\n+        if !(end < self.len()) {\n+            return Err(DeviceTreeError::SliceReadError);\n"
    },
    {
      "cmd_idx": 11,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 1 to 2)\n-use std::str;\n-use std::io::Read;\n"
    },
    {
      "cmd_idx": 11,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 4 to 4)\n+use std::io::Read;\n+use std::str;\n"
    },
    {
      "cmd_idx": 11,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 11 to 18)\n-    let mut cb = |name: String, addr_cells: usize, size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n-        match name.as_str() {\n-            \"\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"riscv-virtio\\0\"));\n+    let mut cb =\n+        |name: String, addr_cells: usize, size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n+            match name.as_str() {\n+                \"\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"riscv-virtio\\0\"));\n+                        }\n"
    },
    {
      "cmd_idx": 11,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 21 to 27)\n-            },\n-            \"soc\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"simple-bus\\0\"));\n+                \"soc\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"simple-bus\\0\"));\n+                        }\n"
    },
    {
      "cmd_idx": 11,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 30 to 40)\n-            },\n-            \"virtio_mmio@10001000\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"virtio,mmio\\0\"));\n-                    } else if prop.0.as_str() == \"reg\" {\n-                        let reg = &(prop.1);\n-                        assert_eq!(reg.as_slice().read_be_u64(0).unwrap(), 0x10001000);\n-                        assert_eq!(reg.as_slice().read_be_u64(8).unwrap(), 0x1000);\n+                \"virtio_mmio@10001000\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"virtio,mmio\\0\"));\n+                        } else if prop.0.as_str() == \"reg\" {\n+                            let reg = &(prop.1);\n+                            assert_eq!(reg.as_slice().read_be_u64(0).unwrap(), 0x10001000);\n+                            assert_eq!(reg.as_slice().read_be_u64(8).unwrap(), 0x1000);\n+                        }\n"
    },
    {
      "cmd_idx": 11,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 43 to 46)\n-            },\n-            _ => {}\n-        }\n-    };\n+                _ => {}\n+            }\n+        };\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 3 to 3)\n-use core::str;\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 5 to 5)\n+use core::str;\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 12 to 12)\n-const MAGIC_NUMBER     : u32 = 0xd00dfeed;\n+const MAGIC_NUMBER: u32 = 0xd00dfeed;\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 14 to 16)\n-const OF_DT_BEGIN_NODE : u32 = 0x00000001;\n-const OF_DT_END_NODE   : u32 = 0x00000002;\n-const OF_DT_PROP       : u32 = 0x00000003;\n+const OF_DT_BEGIN_NODE: u32 = 0x00000001;\n+const OF_DT_END_NODE: u32 = 0x00000002;\n+const OF_DT_PROP: u32 = 0x00000003;\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 38 to 40)\n-        let buf = unsafe {\n-            core::slice::from_raw_parts(ptr as *const u8, 24)\n-        };\n+        let buf = unsafe { core::slice::from_raw_parts(ptr as *const u8, 24) };\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 43 to 43)\n-            return Err(DeviceTreeError::BadMagicNumber)\n+            return Err(DeviceTreeError::BadMagicNumber);\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 53 to 55)\n-        Ok(\n-            Self {ptr, totalsize, off_struct, off_strings}\n-        )\n+        Ok(Self {\n+            ptr,\n+            totalsize,\n+            off_struct,\n+            off_strings,\n+        })\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 61 to 61)\n-        &self, mut pos: usize,\n+        &self,\n+        mut pos: usize,\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 64 to 64)\n-        cb: &mut dyn FnMut(String, usize, usize, Vec<(String, Vec<u8>)>)\n+        cb: &mut dyn FnMut(String, usize, usize, Vec<(String, Vec<u8>)>),\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 66 to 68)\n-        let buf = unsafe {\n-            core::slice::from_raw_parts(self.ptr as *const u8, self.totalsize)\n-        };\n+        let buf = unsafe { core::slice::from_raw_parts(self.ptr as *const u8, self.totalsize) };\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 72 to 72)\n-            return Err(DeviceTreeError::ParseError(pos))\n+            return Err(DeviceTreeError::ParseError(pos));\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 82 to 83)\n-            let val_size = buf.read_be_u32(pos+4)? as usize;\n-            let name_offset = buf.read_be_u32(pos+8)? as usize;\n+            let val_size = buf.read_be_u32(pos + 4)? as usize;\n+            let name_offset = buf.read_be_u32(pos + 8)? as usize;\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 115 to 115)\n-            return Err(DeviceTreeError::ParseError(pos))\n+            return Err(DeviceTreeError::ParseError(pos));\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/lib.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/lib.rs (original lines from 131 to 131)\n-where F: FnMut(String, usize, usize, Vec<(String, Vec<u8>)>)\n+where\n+    F: FnMut(String, usize, usize, Vec<(String, Vec<u8>)>),\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 1 to 1)\n-use crate::{DeviceTreeResult, DeviceTreeError};\n+use crate::{DeviceTreeError, DeviceTreeResult};\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 13 to 14)\n-        if ! (pos+4 <= self.len()) {\n-            return Err(DeviceTreeError::SliceReadError)\n+        if !(pos + 4 <= self.len()) {\n+            return Err(DeviceTreeError::SliceReadError);\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 17 to 22)\n-        Ok(\n-            (self[pos] as u32) << 24\n-            | (self[pos+1] as u32) << 16\n-            | (self[pos+2] as u32) << 8\n-            | (self[pos+3] as u32)\n-        )\n+        Ok((self[pos] as u32) << 24\n+            | (self[pos + 1] as u32) << 16\n+            | (self[pos + 2] as u32) << 8\n+            | (self[pos + 3] as u32))\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 26 to 26)\n-        let lo: u64 = self.read_be_u32(pos+4)?.into();\n+        let lo: u64 = self.read_be_u32(pos + 4)?.into();\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 33 to 33)\n-                return Ok(&self[pos..cur])\n+                return Ok(&self[pos..cur]);\n"
    },
    {
      "cmd_idx": 12,
      "file": "src/util.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/src/util.rs (original lines from 40 to 41)\n-        if ! (end < self.len()) {\n-            return Err(DeviceTreeError::SliceReadError)\n+        if !(end < self.len()) {\n+            return Err(DeviceTreeError::SliceReadError);\n"
    },
    {
      "cmd_idx": 12,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 1 to 2)\n-use std::str;\n-use std::io::Read;\n"
    },
    {
      "cmd_idx": 12,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 4 to 4)\n+use std::io::Read;\n+use std::str;\n"
    },
    {
      "cmd_idx": 12,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 11 to 18)\n-    let mut cb = |name: String, addr_cells: usize, size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n-        match name.as_str() {\n-            \"\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"riscv-virtio\\0\"));\n+    let mut cb =\n+        |name: String, addr_cells: usize, size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n+            match name.as_str() {\n+                \"\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"riscv-virtio\\0\"));\n+                        }\n"
    },
    {
      "cmd_idx": 12,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 21 to 27)\n-            },\n-            \"soc\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"simple-bus\\0\"));\n+                \"soc\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"simple-bus\\0\"));\n+                        }\n"
    },
    {
      "cmd_idx": 12,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 30 to 40)\n-            },\n-            \"virtio_mmio@10001000\" => {\n-                assert_eq!(addr_cells, 2);\n-                assert_eq!(size_cells, 2);\n-                for prop in &props {\n-                    if prop.0.as_str() == \"compatible\" {\n-                        assert_eq!(str::from_utf8(&(prop.1)), Ok(\"virtio,mmio\\0\"));\n-                    } else if prop.0.as_str() == \"reg\" {\n-                        let reg = &(prop.1);\n-                        assert_eq!(reg.as_slice().read_be_u64(0).unwrap(), 0x10001000);\n-                        assert_eq!(reg.as_slice().read_be_u64(8).unwrap(), 0x1000);\n+                \"virtio_mmio@10001000\" => {\n+                    assert_eq!(addr_cells, 2);\n+                    assert_eq!(size_cells, 2);\n+                    for prop in &props {\n+                        if prop.0.as_str() == \"compatible\" {\n+                            assert_eq!(str::from_utf8(&(prop.1)), Ok(\"virtio,mmio\\0\"));\n+                        } else if prop.0.as_str() == \"reg\" {\n+                            let reg = &(prop.1);\n+                            assert_eq!(reg.as_slice().read_be_u64(0).unwrap(), 0x10001000);\n+                            assert_eq!(reg.as_slice().read_be_u64(8).unwrap(), 0x1000);\n+                        }\n"
    },
    {
      "cmd_idx": 12,
      "file": "tests/test_dtb.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb/tests/test_dtb.rs (original lines from 43 to 46)\n-            },\n-            _ => {}\n-        }\n-    };\n+                _ => {}\n+            }\n+        };\n"
    },
    {
      "cmd_idx": 17,
      "file": "clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=axdtb, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axtype.git`\nerror: failed to get `axtype` as a dependency of package `axdtb v0.1.0 (/home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb)`\n\nCaused by:\n  failed to load source for dependency `axtype`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/axtype.git\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/axtype-5d4f3cfbafdc70ef\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    },
    {
      "cmd_idx": 17,
      "file": "clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=axdtb, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb\n// cmd=cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axtype.git`\nerror: failed to get `axtype` as a dependency of package `axdtb v0.1.0 (/home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb)`\n\nCaused by:\n  failed to load source for dependency `axtype`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/axtype.git\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/axtype-5d4f3cfbafdc70ef\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    },
    {
      "cmd_idx": 17,
      "file": "lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=axdtb, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axtype.git`\nerror: failed to get `axtype` as a dependency of package `axdtb v0.1.0 (/home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb)`\n\nCaused by:\n  failed to load source for dependency `axtype`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/axtype.git\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/axtype-5d4f3cfbafdc70ef\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    },
    {
      "cmd_idx": 17,
      "file": "lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=axdtb, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf\n    Updating git repository `ssh://git@github.com/shilei-massclouds/axtype.git`\nerror: failed to get `axtype` as a dependency of package `axdtb v0.1.0 (/home/runner/check/batch_2/shilei-massclouds/axdtb/axdtb)`\n\nCaused by:\n  failed to load source for dependency `axtype`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/axtype.git\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/axtype-5d4f3cfbafdc70ef\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    },
    {
      "cmd_idx": 18,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 27 to 41)\n-    let mut cb = |name: String,\n-                  _addr_cells: usize,\n-                  _size_cells: usize,\n-                  props: Vec<(String, Vec<u8>)>| {\n-        match name.as_str() {\n-            \"chosen\" => {\n-                for prop in props {\n-                    match prop.0.as_str() {\n-                        \"bootargs\" => {\n-                            if let Ok(cmd) = core::str::from_utf8(&prop.1) {\n-                                let cmd = cmd.trim_end_matches(char::from(0));\n-                                assert!(cmd.len() > 0);\n-                                assert!(cmd.starts_with(\"init=\"));\n-                                let cmd = cmd.strip_prefix(\"init=\").unwrap();\n-                                assert!(cmd == \"/sbin/init\" || cmd == \"/btp/sbin/hello\");\n+    let mut cb =\n+        |name: String, _addr_cells: usize, _size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n+            match name.as_str() {\n+                \"chosen\" => {\n+                    for prop in props {\n+                        match prop.0.as_str() {\n+                            \"bootargs\" => {\n+                                if let Ok(cmd) = core::str::from_utf8(&prop.1) {\n+                                    let cmd = cmd.trim_end_matches(char::from(0));\n+                                    assert!(cmd.len() > 0);\n+                                    assert!(cmd.starts_with(\"init=\"));\n+                                    let cmd = cmd.strip_prefix(\"init=\").unwrap();\n+                                    assert!(cmd == \"/sbin/init\" || cmd == \"/btp/sbin/hello\");\n+                                }\n"
    },
    {
      "cmd_idx": 18,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 43 to 43)\n+                            _ => (),\n"
    },
    {
      "cmd_idx": 18,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 44 to 44)\n-                        _ => (),\n"
    },
    {
      "cmd_idx": 18,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 47 to 50)\n-            },\n-            _ => (),\n-        }\n-    };\n+                _ => (),\n+            }\n+        };\n"
    },
    {
      "cmd_idx": 18,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 56 to 57)\n-fn test_dtb(_dtb_pa: usize) {\n-}\n+fn test_dtb(_dtb_pa: usize) {}\n"
    },
    {
      "cmd_idx": 19,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 27 to 41)\n-    let mut cb = |name: String,\n-                  _addr_cells: usize,\n-                  _size_cells: usize,\n-                  props: Vec<(String, Vec<u8>)>| {\n-        match name.as_str() {\n-            \"chosen\" => {\n-                for prop in props {\n-                    match prop.0.as_str() {\n-                        \"bootargs\" => {\n-                            if let Ok(cmd) = core::str::from_utf8(&prop.1) {\n-                                let cmd = cmd.trim_end_matches(char::from(0));\n-                                assert!(cmd.len() > 0);\n-                                assert!(cmd.starts_with(\"init=\"));\n-                                let cmd = cmd.strip_prefix(\"init=\").unwrap();\n-                                assert!(cmd == \"/sbin/init\" || cmd == \"/btp/sbin/hello\");\n+    let mut cb =\n+        |name: String, _addr_cells: usize, _size_cells: usize, props: Vec<(String, Vec<u8>)>| {\n+            match name.as_str() {\n+                \"chosen\" => {\n+                    for prop in props {\n+                        match prop.0.as_str() {\n+                            \"bootargs\" => {\n+                                if let Ok(cmd) = core::str::from_utf8(&prop.1) {\n+                                    let cmd = cmd.trim_end_matches(char::from(0));\n+                                    assert!(cmd.len() > 0);\n+                                    assert!(cmd.starts_with(\"init=\"));\n+                                    let cmd = cmd.strip_prefix(\"init=\").unwrap();\n+                                    assert!(cmd == \"/sbin/init\" || cmd == \"/btp/sbin/hello\");\n+                                }\n"
    },
    {
      "cmd_idx": 19,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 43 to 43)\n+                            _ => (),\n"
    },
    {
      "cmd_idx": 19,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 44 to 44)\n-                        _ => (),\n"
    },
    {
      "cmd_idx": 19,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 47 to 50)\n-            },\n-            _ => (),\n-        }\n-    };\n+                _ => (),\n+            }\n+        };\n"
    },
    {
      "cmd_idx": 19,
      "file": "src/main.rs",
      "kind": "Unformatted",
      "raw": "file: /home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb/src/main.rs (original lines from 56 to 57)\n-fn test_dtb(_dtb_pa: usize) {\n-}\n+fn test_dtb(_dtb_pa: usize) {}\n"
    },
    {
      "cmd_idx": 24,
      "file": "clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_axdtb, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb\n// cmd=cargo clippy --target x86_64-unknown-linux-gnu --no-deps --message-format=json\n    Updating git repository `ssh://git@github.com/shilei-massclouds/arch_boot`\nerror: failed to get `arch_boot` as a dependency of package `rt_axdtb v0.1.0 (/home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb)`\n\nCaused by:\n  failed to load source for dependency `arch_boot`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/arch_boot\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/arch_boot-1cecf4eba2e647a6\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    },
    {
      "cmd_idx": 24,
      "file": "clippy",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_axdtb, checker=Clippy\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb\n// cmd=cargo clippy --target riscv64gc-unknown-none-elf --no-deps --message-format=json\n    Updating git repository `ssh://git@github.com/shilei-massclouds/arch_boot`\nerror: failed to get `arch_boot` as a dependency of package `rt_axdtb v0.1.0 (/home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb)`\n\nCaused by:\n  failed to load source for dependency `arch_boot`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/arch_boot\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/arch_boot-1cecf4eba2e647a6\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    },
    {
      "cmd_idx": 24,
      "file": "lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_axdtb, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=x86_64-unknown-linux-gnu\n// pkg_dir=/home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target x86_64-unknown-linux-gnu\n    Updating git repository `ssh://git@github.com/shilei-massclouds/arch_boot`\nerror: failed to get `arch_boot` as a dependency of package `rt_axdtb v0.1.0 (/home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb)`\n\nCaused by:\n  failed to load source for dependency `arch_boot`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/arch_boot\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/arch_boot-1cecf4eba2e647a6\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    },
    {
      "cmd_idx": 24,
      "file": "lockbud",
      "kind": "Cargo",
      "raw": "// pkg_name=rt_axdtb, checker=Lockbud\n// toolchain=nightly-x86_64-unknown-linux-gnu (default), target=riscv64gc-unknown-none-elf\n// pkg_dir=/home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb\n// cmd=cargo +nightly-2024-05-21 lockbud -k all -- --target riscv64gc-unknown-none-elf\n    Updating git repository `ssh://git@github.com/shilei-massclouds/arch_boot`\nerror: failed to get `arch_boot` as a dependency of package `rt_axdtb v0.1.0 (/home/runner/check/batch_2/shilei-massclouds/axdtb/rt_axdtb)`\n\nCaused by:\n  failed to load source for dependency `arch_boot`\n\nCaused by:\n  Unable to update ssh://git@github.com/shilei-massclouds/arch_boot\n\nCaused by:\n  failed to fetch into: /home/runner/.cargo/git/db/arch_boot-1cecf4eba2e647a6\n\nCaused by:\n  failed to authenticate when downloading repository\n\n  * attempted ssh-agent authentication, but no usernames succeeded: `git`\n\n  if the git CLI succeeds then `net.git-fetch-with-cli` may help here\n  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli\n\nCaused by:\n  no authentication methods succeeded\n"
    }
  ]
}